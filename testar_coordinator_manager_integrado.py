#!/usr/bin/env python3
"""
Testa a integra√ß√£o completa do CoordinatorManager
"""

import sys
from pathlib import Path

# Adicionar ao path
sys.path.insert(0, str(Path(__file__).parent))

def testar_coordinator_manager():
    """Testa o CoordinatorManager e suas integra√ß√µes"""
    print("=" * 60)
    print("üîç TESTANDO COORDINATOR MANAGER")
    print("=" * 60)
    
    # 1. Importar e criar inst√¢ncia
    print("\n1. Importando CoordinatorManager...")
    try:
        from app.claude_ai_novo.coordinators.coordinator_manager import get_coordinator_manager
        manager = get_coordinator_manager()
        print("‚úÖ CoordinatorManager importado e criado")
    except Exception as e:
        print(f"‚ùå Erro ao importar: {e}")
        return False
    
    # 2. Verificar status
    print("\n2. Verificando status...")
    try:
        status = manager.get_coordinator_status()
        print(f"‚úÖ Status obtido:")
        print(f"   - Inicializado: {status['initialized']}")
        print(f"   - Coordenadores: {status['coordinators_available']}")
        print(f"   - Domain Agents: {status['domain_agents_available']}")
        print(f"   - Total: {status['total_coordinators']}")
    except Exception as e:
        print(f"‚ùå Erro ao obter status: {e}")
        return False
    
    # 3. Testar cada tipo de coordena√ß√£o
    test_queries = [
        # Domain agents
        ("Como est√£o as entregas do Atacad√£o?", "agent_entregas"),
        ("Quais os fretes pendentes?", "agent_fretes"),
        ("Status dos pedidos de hoje", "agent_pedidos"),
        
        # Intelligence
        ("Analise os padr√µes de entrega", "intelligence"),
        
        # Processor
        ("Processar workflow de entregas", "processor"),
        
        # Specialist (fallback)
        ("Consulta gen√©rica", "specialist")
    ]
    
    print("\n3. Testando coordena√ß√µes...")
    sucesso = 0
    for query, expected_coordinator in test_queries:
        print(f"\n   Query: '{query}'")
        try:
            result = manager.coordinate_query(query)
            coordinator_used = result.get('coordinator_used', 'unknown')
            print(f"   ‚úÖ Processado por: {coordinator_used}")
            
            if result.get('status') == 'success':
                sucesso += 1
                print(f"   ‚úÖ Resultado: {result.get('result', {}).get('status', 'ok')}")
            else:
                print(f"   ‚ö†Ô∏è Status: {result.get('status')}")
                if result.get('message'):
                    print(f"   ‚ö†Ô∏è Mensagem: {result.get('message')}")
                    
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
    
    # 4. Testar coordena√ß√£o com contexto
    print("\n4. Testando com contexto...")
    try:
        context = {
            'user_id': 'test_user',
            'cliente_especifico': 'Atacad√£o',
            'periodo': '√∫ltimos 30 dias'
        }
        result = manager.coordinate_query(
            "Status das entregas",
            context=context,
            preferred_coordinator='agent_entregas'
        )
        print(f"‚úÖ Coordena√ß√£o com contexto: {result.get('coordinator_used')}")
    except Exception as e:
        print(f"‚ùå Erro com contexto: {e}")
    
    # 5. Verificar m√©tricas
    print("\n5. Verificando m√©tricas...")
    try:
        final_status = manager.get_coordinator_status()
        metrics = final_status.get('performance_metrics', {})
        
        print("üìä M√©tricas de performance:")
        for coord_name, metric in metrics.items():
            if 'last_used' in metric:
                print(f"   - {coord_name}: usado {metric.get('queries_processed', metric.get('domain_queries', 0))} vezes")
    except Exception as e:
        print(f"‚ùå Erro ao verificar m√©tricas: {e}")
    
    print(f"\n{'='*60}")
    print(f"üìä RESULTADO: {sucesso}/{len(test_queries)} testes bem-sucedidos")
    print(f"{'='*60}")
    
    return sucesso > len(test_queries) / 2  # Pelo menos metade funcionando

if __name__ == "__main__":
    sucesso = testar_coordinator_manager()
    
    if sucesso:
        print("\n‚úÖ COORDINATOR MANAGER FUNCIONANDO!")
    else:
        print("\n‚ùå COORDINATOR MANAGER COM PROBLEMAS") 