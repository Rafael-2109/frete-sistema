#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß SINCRONIZADOR DE NUMERA√á√ÉO DE EMBARQUES
Resolve dessincroniza√ß√£o entre campo 'numero' e 'id' dos embarques

PROBLEMA IDENTIFICADO: Embarque #254 tem ID 278 (diferen√ßa de 24)

SOLU√á√ïES DISPON√çVEIS:
1. AVAN√áAR N√öMEROS: Pr√≥ximos embarques ter√£o n√∫meros = IDs
2. REBOBINAR IDs: Resetar sequ√™ncia de IDs para casar com n√∫meros
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def analisar_situacao_atual():
    """Analisa a situa√ß√£o atual da numera√ß√£o em produ√ß√£o"""
    print("üîç AN√ÅLISE DA SITUA√á√ÉO ATUAL DOS EMBARQUES")
    print("=" * 60)
    
    try:
        from app import db, create_app
        from app.embarques.models import Embarque
        
        app = create_app()
        with app.app_context():
            # Estat√≠sticas gerais
            total_embarques = Embarque.query.count()
            ultimo_id = db.session.query(db.func.max(Embarque.id)).scalar() or 0
            ultimo_numero = db.session.query(db.func.max(Embarque.numero)).scalar() or 0
            embarques_sem_numero = Embarque.query.filter(Embarque.numero.is_(None)).count()
            
            # Embarques com maior ID e n√∫mero
            embarque_maior_id = Embarque.query.order_by(Embarque.id.desc()).first()
            embarque_maior_numero = Embarque.query.order_by(Embarque.numero.desc()).first()
            
            # Diferen√ßa atual
            diferenca = ultimo_id - ultimo_numero
            
            print(f"üìä ESTAT√çSTICAS GERAIS:")
            print(f"   Total de embarques: {total_embarques}")
            print(f"   Maior ID: {ultimo_id}")
            print(f"   Maior n√∫mero: {ultimo_numero}")
            print(f"   Diferen√ßa (ID - N√∫mero): {diferenca}")
            print(f"   Embarques sem n√∫mero: {embarques_sem_numero}")
            print()
            
            if embarque_maior_id:
                print(f"üÜî EMBARQUE COM MAIOR ID:")
                print(f"   ID: {embarque_maior_id.id}")
                print(f"   N√∫mero: {embarque_maior_id.numero}")
                print(f"   Data: {embarque_maior_id.criado_em}")
                print(f"   Status: {embarque_maior_id.status}")
                print()
            
            if embarque_maior_numero:
                print(f"üî¢ EMBARQUE COM MAIOR N√öMERO:")
                print(f"   ID: {embarque_maior_numero.id}")
                print(f"   N√∫mero: {embarque_maior_numero.numero}")
                print(f"   Data: {embarque_maior_numero.criado_em}")
                print(f"   Status: {embarque_maior_numero.status}")
                print()
            
            # An√°lise de inconsist√™ncias
            if diferenca > 0:
                print(f"‚ö†Ô∏è PROBLEMA DETECTADO:")
                print(f"   Os n√∫meros est√£o {diferenca} valores ATR√ÅS dos IDs")
                print(f"   Pr√≥ximo embarque seria: #{ultimo_numero + 1} com ID {ultimo_id + 1}")
                print(f"   Isso cria confus√£o para usu√°rios e relat√≥rios")
                print()
                
                # Calcular quanto seria "desperdi√ßado" em cada op√ß√£o
                numeros_perdidos = diferenca
                ids_perdidos = ultimo_numero - ultimo_id if ultimo_numero > ultimo_id else 0
                
                print(f"üí° OP√á√ïES DE CORRE√á√ÉO:")
                print(f"   OP√á√ÉO 1 - AVAN√áAR N√öMEROS:")
                print(f"     ‚úÖ Pr√≥ximo embarque: #{ultimo_id + 1} (pula {numeros_perdidos} n√∫meros)")
                print(f"     ‚úÖ ID e n√∫mero sempre iguais daqui pra frente")
                print(f"     ‚ö†Ô∏è 'Desperdi√ßa' n√∫meros {ultimo_numero + 1} at√© {ultimo_id}")
                print(f"     ‚ö†Ô∏è Pode confundir usu√°rios (saltou de #{ultimo_numero} para #{ultimo_id + 1})")
                print()
                print(f"   OP√á√ÉO 2 - REBOBINAR IDs (PostgreSQL):")
                print(f"     ‚úÖ Pr√≥ximo embarque: #{ultimo_numero + 1} com ID {ultimo_numero + 1}")
                print(f"     ‚úÖ Mant√©m sequ√™ncia natural dos n√∫meros")
                print(f"     ‚ö†Ô∏è Requer reset da sequ√™ncia PostgreSQL")
                print(f"     ‚ö†Ô∏è Opera√ß√£o mais complexa, mas mais 'limpa'")
                print()
            else:
                print("‚úÖ NUMERA√á√ÉO SINCRONIZADA:")
                print("   IDs e n√∫meros est√£o alinhados!")
                print("   Nenhuma corre√ß√£o necess√°ria")
                
            return {
                'total_embarques': total_embarques,
                'ultimo_id': ultimo_id,
                'ultimo_numero': ultimo_numero,
                'diferenca': diferenca,
                'embarques_sem_numero': embarques_sem_numero,
                'precisa_correcao': diferenca != 0
            }
            
    except Exception as e:
        print(f"‚ùå ERRO ao analisar situa√ß√£o: {e}")
        return None

def opcao_1_avancar_numeros():
    """OP√á√ÉO 1: Avan√ßa os n√∫meros para casar com os IDs"""
    print("üöÄ OP√á√ÉO 1: AVAN√áAR N√öMEROS PARA CASAR COM IDs")
    print("=" * 60)
    
    confirmacao = input("‚ö†Ô∏è Esta opera√ß√£o ir√° alterar a fun√ß√£o de gera√ß√£o de n√∫meros.\nTem certeza? (digite 'CONFIRMO'): ")
    
    if confirmacao != 'CONFIRMO':
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return False
    
    try:
        from app import db, create_app
        from app.embarques.models import Embarque
        
        app = create_app()
        with app.app_context():
            ultimo_id = db.session.query(db.func.max(Embarque.id)).scalar() or 0
            ultimo_numero = db.session.query(db.func.max(Embarque.numero)).scalar() or 0
            
            print(f"üìä Situa√ß√£o atual:")
            print(f"   √öltimo ID: {ultimo_id}")
            print(f"   √öltimo n√∫mero: {ultimo_numero}")
            print(f"   Diferen√ßa: {ultimo_id - ultimo_numero}")
            print()
            
            # Atualizar a fun√ß√£o de gera√ß√£o de n√∫meros
            print("üîß Modificando fun√ß√£o obter_proximo_numero_embarque()...")
            
            # Ler arquivo atual
            with open('app/utils/embarque_numero.py', 'r', encoding='utf-8') as f:
                conteudo_atual = f.read()
            
            # Backup
            with open('app/utils/embarque_numero.py.backup', 'w', encoding='utf-8') as f:
                f.write(conteudo_atual)
            
            # Nova implementa√ß√£o que sincroniza com IDs
            novo_conteudo = conteudo_atual.replace(
                'ultimo_numero = db.session.query(\n                db.func.coalesce(db.func.max(Embarque.numero), 0)\n            ).scalar()',
                f'''ultimo_numero = db.session.query(\n                db.func.coalesce(db.func.max(Embarque.numero), 0)\n            ).scalar()\n            \n            # üîß CORRE√á√ÉO: Sincronizar com IDs se necess√°rio\n            ultimo_id = db.session.query(\n                db.func.coalesce(db.func.max(Embarque.id), 0)\n            ).scalar()\n            \n            # Se ID est√° √† frente, usar ID como base\n            if ultimo_id > ultimo_numero:\n                ultimo_numero = ultimo_id'''
            )
            
            # Salvar nova vers√£o
            with open('app/utils/embarque_numero.py', 'w', encoding='utf-8') as f:
                f.write(novo_conteudo)
            
            print(f"‚úÖ Fun√ß√£o modificada com sucesso!")
            print(f"‚úÖ Backup salvo em: app/utils/embarque_numero.py.backup")
            print()
            
            # Testar a nova fun√ß√£o
            from app.utils.embarque_numero import obter_proximo_numero_embarque
            proximo_numero = obter_proximo_numero_embarque()
            
            print(f"üéØ RESULTADO:")
            print(f"   Pr√≥ximo n√∫mero que ser√° gerado: {proximo_numero}")
            print(f"   Pr√≥ximo ID que ser√° usado: {ultimo_id + 1}")
            print(f"   Sincroniza√ß√£o: {'‚úÖ Perfeita' if proximo_numero == ultimo_id + 1 else '‚ùå Ainda desalinhada'}")
            print()
            print(f"üí° A partir de agora, todos os novos embarques ter√£o n√∫mero = ID")
            
            return True
            
    except Exception as e:
        print(f"‚ùå ERRO na Op√ß√£o 1: {e}")
        return False

def opcao_2_rebobinar_ids():
    """OP√á√ÉO 2: Rebobina os IDs para casar com os n√∫meros"""
    print("üîÑ OP√á√ÉO 2: REBOBINAR IDs PARA CASAR COM N√öMEROS")
    print("=" * 60)
    
    print("‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o √© mais complexa e requer:")
    print("   - Acesso direto ao PostgreSQL")
    print("   - Reset da sequ√™ncia de auto-incremento")
    print("   - Pode impactar relacionamentos")
    print()
    
    confirmacao = input("‚ö†Ô∏è Tem certeza que quer prosseguir? (digite 'CONFIRMO'): ")
    
    if confirmacao != 'CONFIRMO':
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return False
    
    try:
        from app import db, create_app
        from app.embarques.models import Embarque
        
        app = create_app()
        with app.app_context():
            ultimo_numero = db.session.query(db.func.max(Embarque.numero)).scalar() or 0
            ultimo_id = db.session.query(db.func.max(Embarque.id)).scalar() or 0
            
            print(f"üìä Situa√ß√£o atual:")
            print(f"   √öltimo n√∫mero: {ultimo_numero}")
            print(f"   √öltimo ID: {ultimo_id}")
            print(f"   Novo valor da sequ√™ncia ser√°: {ultimo_numero + 1}")
            print()
            
            # Comando SQL para resetar sequ√™ncia (PostgreSQL)
            sql_reset = f"SELECT setval('embarques_id_seq', {ultimo_numero}, true);"
            
            print(f"üîß SQL que ser√° executado:")
            print(f"   {sql_reset}")
            print()
            
            confirmacao_sql = input("‚ö†Ô∏è Executar este comando SQL? (digite 'EXECUTAR'): ")
            
            if confirmacao_sql != 'EXECUTAR':
                print("‚ùå Comando SQL cancelado")
                return False
            
            # Executar o reset da sequ√™ncia
            result = db.session.execute(db.text(sql_reset))
            db.session.commit()
            
            # Verificar resultado
            fetch_result = result.fetchone()
            resultado = fetch_result[0] if fetch_result else None
            
            print(f"‚úÖ Sequ√™ncia resetada com sucesso!")
            print(f"‚úÖ Novo valor da sequ√™ncia: {resultado}")
            print()
            
            # Testar criando um embarque fict√≠cio para verificar
            print("üß™ Teste: Verificando pr√≥ximo ID que seria gerado...")
            
            # Simular inser√ß√£o para ver pr√≥ximo ID
            next_id_query = "SELECT nextval('embarques_id_seq');"
            next_id_result = db.session.execute(db.text(next_id_query))
            next_fetch = next_id_result.fetchone()
            proximo_id = next_fetch[0] if next_fetch else ultimo_numero + 1
            
            # Reverter o nextval (para n√£o "desperdi√ßar" um n√∫mero)
            revert_query = f"SELECT setval('embarques_id_seq', {ultimo_numero}, true);"
            db.session.execute(db.text(revert_query))
            db.session.commit()
            
            print(f"üéØ RESULTADO DO TESTE:")
            print(f"   Pr√≥ximo ID que ser√° gerado: {proximo_id}")
            print(f"   Pr√≥ximo n√∫mero que ser√° gerado: {ultimo_numero + 1}")
            print(f"   Sincroniza√ß√£o: {'‚úÖ Perfeita' if proximo_id == ultimo_numero + 1 else '‚ùå Ainda desalinhada'}")
            print()
            print(f"üí° A partir de agora, todos os novos embarques ter√£o ID = n√∫mero")
            
            return True
            
    except Exception as e:
        print(f"‚ùå ERRO na Op√ß√£o 2: {e}")
        print(f"üí° Dica: Verifique se est√° conectado ao PostgreSQL correto")
        return False

def desfazer_opcao_1():
    """Desfaz a Op√ß√£o 1 restaurando o backup"""
    print("‚Ü©Ô∏è DESFAZER OP√á√ÉO 1: Restaurar fun√ß√£o original")
    print("=" * 50)
    
    try:
        import os
        
        if not os.path.exists('app/utils/embarque_numero.py.backup'):
            print("‚ùå Arquivo de backup n√£o encontrado!")
            return False
        
        # Restaurar backup
        with open('app/utils/embarque_numero.py.backup', 'r', encoding='utf-8') as f:
            conteudo_backup = f.read()
        
        with open('app/utils/embarque_numero.py', 'w', encoding='utf-8') as f:
            f.write(conteudo_backup)
        
        print("‚úÖ Fun√ß√£o original restaurada com sucesso!")
        print("‚úÖ A numera√ß√£o voltou ao comportamento anterior")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO ao desfazer: {e}")
        return False

def main():
    """Menu principal"""
    print("üîß SINCRONIZADOR DE NUMERA√á√ÉO DE EMBARQUES")
    print("=" * 60)
    print("Resolve dessincroniza√ß√£o entre 'numero' e 'id' dos embarques")
    print()
    
    while True:
        # Analisar situa√ß√£o atual
        situacao = analisar_situacao_atual()
        
        if not situacao:
            break
        
        if not situacao['precisa_correcao']:
            print("‚úÖ Numera√ß√£o j√° est√° sincronizada! Nenhuma a√ß√£o necess√°ria.")
            break
        
        print("üìã OP√á√ïES DISPON√çVEIS:")
        print("   1Ô∏è‚É£  - Avan√ßar n√∫meros (pular para casar com IDs)")
        print("   2Ô∏è‚É£  - Rebobinar IDs (resetar sequ√™ncia PostgreSQL)")
        print("   3Ô∏è‚É£  - Desfazer Op√ß√£o 1 (restaurar backup)")
        print("   4Ô∏è‚É£  - Apenas analisar (n√£o fazer nada)")
        print("   0Ô∏è‚É£  - Sair")
        print()
        
        opcao = input("ü§î Escolha uma op√ß√£o (1/2/3/4/0): ").strip()
        
        if opcao == '1':
            sucesso = opcao_1_avancar_numeros()
            if sucesso:
                print("\nüéâ Op√ß√£o 1 executada com sucesso!")
            else:
                print("\n‚ùå Falha na execu√ß√£o da Op√ß√£o 1")
        
        elif opcao == '2':
            sucesso = opcao_2_rebobinar_ids()
            if sucesso:
                print("\nüéâ Op√ß√£o 2 executada com sucesso!")
            else:
                print("\n‚ùå Falha na execu√ß√£o da Op√ß√£o 2")
        
        elif opcao == '3':
            sucesso = desfazer_opcao_1()
            if sucesso:
                print("\n‚úÖ Op√ß√£o 1 desfeita com sucesso!")
            else:
                print("\n‚ùå Falha ao desfazer Op√ß√£o 1")
        
        elif opcao == '4':
            print("\nüìä An√°lise conclu√≠da. Nenhuma altera√ß√£o feita.")
        
        elif opcao == '0':
            print("\nüëã Saindo do sincronizador...")
            break
        
        else:
            print("\n‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 4 ou 0")
        
        print("\n" + "=" * 60)
        input("Pressione ENTER para continuar...")
        print()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Opera√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå ERRO GERAL: {e}")
        import traceback
        traceback.print_exc() 