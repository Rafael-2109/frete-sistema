#!/usr/bin/env python3
"""
Script para criar as tabelas de permiss√µes comerciais no banco de dados.

Este script cria as tabelas:
- permissao_comercial: Armazena as permiss√µes de cada usu√°rio
- log_permissao_comercial: Armazena o hist√≥rico de altera√ß√µes

Autor: Sistema de Fretes
Data: 2025-01-21
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from sqlalchemy import text

def criar_tabelas_permissao():
    """Cria as tabelas de permiss√£o comercial no banco de dados"""

    app = create_app()

    with app.app_context():
        print("\n" + "="*80)
        print("CRIA√á√ÉO DAS TABELAS DE PERMISS√ÉO COMERCIAL")
        print("="*80 + "\n")

        try:
            # Importar os modelos para registr√°-los
            from app.comercial.models import PermissaoComercial, LogPermissaoComercial

            print("üìã Criando tabelas...")

            # SQL para criar tabela de permiss√µes
            sql_permissao = """
            CREATE TABLE IF NOT EXISTS permissao_comercial (
                id SERIAL PRIMARY KEY,
                usuario_id INTEGER NOT NULL REFERENCES usuarios(id),
                tipo VARCHAR(20) NOT NULL,
                valor VARCHAR(100) NOT NULL,
                criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                criado_por VARCHAR(100) NOT NULL,
                UNIQUE(usuario_id, tipo, valor)
            );

            CREATE INDEX IF NOT EXISTS idx_permissao_usuario_tipo
            ON permissao_comercial(usuario_id, tipo);
            """

            # SQL para criar tabela de logs
            sql_log = """
            CREATE TABLE IF NOT EXISTS log_permissao_comercial (
                id SERIAL PRIMARY KEY,
                usuario_id INTEGER NOT NULL REFERENCES usuarios(id),
                admin_id INTEGER NOT NULL REFERENCES usuarios(id),
                acao VARCHAR(20) NOT NULL,
                tipo VARCHAR(20),
                valor VARCHAR(100),
                data_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                ip_address VARCHAR(45),
                user_agent VARCHAR(500),
                observacao TEXT
            );

            CREATE INDEX IF NOT EXISTS idx_log_usuario_data
            ON log_permissao_comercial(usuario_id, data_hora);

            CREATE INDEX IF NOT EXISTS idx_log_admin_data
            ON log_permissao_comercial(admin_id, data_hora);

            CREATE INDEX IF NOT EXISTS idx_log_data
            ON log_permissao_comercial(data_hora);
            """

            # Executar SQLs
            db.session.execute(text(sql_permissao))
            db.session.commit()
            print("‚úÖ Tabela 'permissao_comercial' criada com sucesso!")

            db.session.execute(text(sql_log))
            db.session.commit()
            print("‚úÖ Tabela 'log_permissao_comercial' criada com sucesso!")

            # Verificar se as tabelas foram criadas
            result = db.session.execute(text("""
                SELECT table_name
                FROM information_schema.tables
                WHERE table_name IN ('permissao_comercial', 'log_permissao_comercial')
                AND table_schema = 'public'
            """)).fetchall()

            print(f"\nüìä Tabelas encontradas: {len(result)}")
            for row in result:
                print(f"   - {row[0]}")

            # Contar registros existentes (se houver)
            count_perm = db.session.execute(text("SELECT COUNT(*) FROM permissao_comercial")).scalar()
            count_log = db.session.execute(text("SELECT COUNT(*) FROM log_permissao_comercial")).scalar()

            print(f"\nüìà Status:")
            print(f"   - Permiss√µes cadastradas: {count_perm}")
            print(f"   - Logs registrados: {count_log}")

            print("\n" + "="*80)
            print("‚úÖ TABELAS CRIADAS COM SUCESSO!")
            print("="*80 + "\n")

            print("üìù PR√ìXIMOS PASSOS:")
            print("1. Acesse o m√≥dulo comercial como administrador ou gerente comercial")
            print("2. No menu Comercial, clique em 'Gerenciar Permiss√µes'")
            print("3. Configure as permiss√µes para cada vendedor")
            print("4. As altera√ß√µes s√£o salvas automaticamente")

        except Exception as e:
            print(f"\n‚ùå ERRO ao criar tabelas: {e}")
            import traceback
            traceback.print_exc()
            db.session.rollback()

if __name__ == '__main__':
    criar_tabelas_permissao()