#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
üß™ TESTE DAS MELHORIAS APLICADAS NO CLAUDE AI
Verifica se detec√ß√£o de inten√ß√£o e decis√µes inteligentes funcionam
"""

import sys
import os

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

print("=== TESTE DAS MELHORIAS NO CLAUDE AI ===\n")

# 1. Testar detec√ß√£o de inten√ß√£o com scores
print("1. Testando detec√ß√£o de inten√ß√£o refinada...")
try:
    from app.claude_ai.claude_real_integration import claude_real_integration
    
    testes_intencao = [
        ("Quantas entregas temos pendentes?", "analise_dados"),
        ("Criar m√≥dulo para controle de estoque", "desenvolvimento"),
        ("Erro ao salvar pedido, como resolver?", "resolucao_problema"),
        ("Como funciona o sistema de agendamentos?", "explicacao_conceitual"),
        ("Gerar relat√≥rio Excel das entregas", "comando_acao"),
        ("Qual o status das entregas do Assai e criar relat√≥rio", "m√∫ltiplas")
    ]
    
    for consulta, esperado in testes_intencao:
        intencoes = claude_real_integration._detectar_intencao_refinada(consulta)
        
        # Encontrar inten√ß√£o dominante
        intencao_principal = max(intencoes, key=lambda k: intencoes[k])
        score_principal = intencoes[intencao_principal]
        
        print(f"\n   Consulta: '{consulta[:40]}...'")
        print(f"   Inten√ß√£o principal: {intencao_principal} ({score_principal:.1%})")
        
        # Mostrar todas as inten√ß√µes se m√∫ltiplas > 0.2
        multiplas = [f"{k}: {v:.1%}" for k, v in intencoes.items() if v > 0.2]
        if len(multiplas) > 1:
            print(f"   M√∫ltiplas inten√ß√µes detectadas: {', '.join(multiplas)}")
            
except Exception as e:
    print(f"   ‚ùå Erro: {e}")

# 2. Testar decis√£o de sistemas avan√ßados
print("\n\n2. Testando decis√£o inteligente de sistemas avan√ßados...")
try:
    testes_avancado = [
        # (consulta, deve_usar_avancado)
        ("Status das entregas", False),  # Simples
        ("An√°lise profunda e detalhada de todas as entregas dos √∫ltimos 90 dias com compara√ß√£o entre per√≠odos", True),  # Complexa
        ("Como criar um m√≥dulo e qual o status das entregas?", True),  # M√∫ltiplas inten√ß√µes
        ("Erro 500 ao acessar relat√≥rios", False),  # Problema espec√≠fico
    ]
    
    for consulta, esperado in testes_avancado:
        intencoes = claude_real_integration._detectar_intencao_refinada(consulta)
        usar_avancado = claude_real_integration._deve_usar_sistema_avancado(consulta, intencoes)
        
        resultado = "‚úÖ" if usar_avancado == esperado else "‚ùå"
        print(f"\n   {resultado} '{consulta[:50]}...'")
        print(f"      Usar avan√ßado: {usar_avancado} (esperado: {esperado})")
        
except Exception as e:
    print(f"   ‚ùå Erro: {e}")

# 3. Testar contexto din√¢mico
print("\n\n3. Testando contexto din√¢mico por inten√ß√£o...")
try:
    analise_exemplo = {"periodo_dias": 30, "cliente_especifico": "Assai"}
    
    for consulta, _ in testes_intencao[:4]:  # Primeiras 4 consultas
        intencoes = claude_real_integration._detectar_intencao_refinada(consulta)
        contexto = claude_real_integration._build_contexto_por_intencao(intencoes, analise_exemplo)
        
        print(f"\n   Consulta: '{consulta[:40]}...'")
        print(f"   Contexto gerado: {contexto[:100]}...")
        
except Exception as e:
    print(f"   ‚ùå Erro: {e}")

# 4. Resumo das melhorias
print("\n\n=== RESUMO DAS MELHORIAS APLICADAS ===")
print("‚úÖ Detec√ß√£o de inten√ß√£o com scores (n√£o bin√°ria)")
print("‚úÖ Decis√£o multi-crit√©rio para sistemas avan√ßados")
print("‚úÖ Contexto din√¢mico baseado na inten√ß√£o")
print("‚úÖ Sistema mais inteligente e adapt√°vel")

print("\nüí° BENEF√çCIOS:")
print("- Respostas mais adequadas ao tipo de pergunta")
print("- Uso eficiente de recursos (sistemas avan√ßados s√≥ quando necess√°rio)")
print("- Melhor compreens√£o de consultas complexas")
print("- Contexto relevante para cada situa√ß√£o") 