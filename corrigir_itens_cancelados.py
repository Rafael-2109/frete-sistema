#!/usr/bin/env python3
"""
Script para corrigir problemas de sess√£o com objetos Cidade e outros problemas relacionados.
Este script resolve o erro: "Instance <Cidade at 0x...> is not bound to a Session; 
attribute refresh operation cannot proceed"
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.localidades.models import Cidade
from app.pedidos.models import Pedido
from app.embarques.models import Embarque, EmbarqueItem
from app.cotacao.models import Cotacao
from sqlalchemy import text
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def corrigir_problemas_sessao():
    """
    Corrige problemas de sess√£o com objetos Cidade e outros modelos.
    """
    app = create_app()
    
    with app.app_context():
        try:
            print("üîß INICIANDO CORRE√á√ÉO DE PROBLEMAS DE SESS√ÉO")
            print("=" * 60)
            
            # 1. Limpar cache de sess√£o do SQLAlchemy
            print("\n1Ô∏è‚É£ Limpando cache de sess√£o...")
            db.session.expunge_all()
            db.session.close()
            
            # 2. Verificar e corrigir objetos Cidade √≥rf√£os
            print("\n2Ô∏è‚É£ Verificando objetos Cidade...")
            cidades_problematicas = []
            
            try:
                # For√ßa recarregamento de todas as cidades
                cidades = db.session.query(Cidade).all()
                for cidade in cidades:
                    try:
                        # Tenta acessar atributos para verificar se est√° vinculado √† sess√£o
                        _ = cidade.nome
                        _ = cidade.uf
                        _ = cidade.icms
                    except Exception as e:
                        cidades_problematicas.append(cidade.id)
                        logger.warning(f"Cidade {cidade.id} com problema de sess√£o: {e}")
                
                print(f"   ‚úÖ {len(cidades)} cidades verificadas")
                if cidades_problematicas:
                    print(f"   ‚ö†Ô∏è {len(cidades_problematicas)} cidades com problemas")
                else:
                    print("   ‚úÖ Todas as cidades est√£o OK")
                    
            except Exception as e:
                print(f"   ‚ùå Erro ao verificar cidades: {e}")
            
            # 3. Limpar objetos desanexados da sess√£o
            print("\n3Ô∏è‚É£ Limpando objetos desanexados...")
            try:
                # Remove todos os objetos da sess√£o atual
                db.session.expunge_all()
                
                # For√ßa garbage collection
                import gc
                gc.collect()
                
                print("   ‚úÖ Objetos desanexados removidos")
                
            except Exception as e:
                print(f"   ‚ùå Erro ao limpar objetos: {e}")
            
            # 4. Verificar e corrigir pedidos com problemas de localiza√ß√£o
            print("\n4Ô∏è‚É£ Verificando pedidos com problemas de localiza√ß√£o...")
            try:
                pedidos_sem_normalizacao = db.session.query(Pedido).filter(
                    (Pedido.cidade_normalizada.is_(None)) | 
                    (Pedido.uf_normalizada.is_(None))
                ).limit(100).all()
                
                print(f"   üìä {len(pedidos_sem_normalizacao)} pedidos sem normaliza√ß√£o encontrados")
                
                if pedidos_sem_normalizacao:
                    from app.utils.localizacao import LocalizacaoService
                    
                    contador = 0
                    for pedido in pedidos_sem_normalizacao:
                        try:
                            LocalizacaoService.normalizar_dados_pedido(pedido)
                            contador += 1
                            
                            if contador % 20 == 0:
                                db.session.commit()
                                print(f"   üîÑ {contador} pedidos normalizados...")
                                
                        except Exception as e:
                            logger.warning(f"Erro ao normalizar pedido {pedido.num_pedido}: {e}")
                    
                    db.session.commit()
                    print(f"   ‚úÖ {contador} pedidos normalizados com sucesso")
                
            except Exception as e:
                print(f"   ‚ùå Erro ao verificar pedidos: {e}")
            
            # 5. Verificar embarques cancelados com dados √≥rf√£os
            print("\n5Ô∏è‚É£ Verificando embarques cancelados...")
            try:
                embarques_cancelados = db.session.query(Embarque).filter(
                    Embarque.status == 'CANCELADO'
                ).all()
                
                print(f"   üìä {len(embarques_cancelados)} embarques cancelados encontrados")
                
                itens_com_dados = 0
                for embarque in embarques_cancelados:
                    itens = db.session.query(EmbarqueItem).filter(
                        EmbarqueItem.embarque_id == embarque.id
                    ).all()
                    
                    for item in itens:
                        if item.nf or item.data_embarque:
                            itens_com_dados += 1
                
                if itens_com_dados > 0:
                    print(f"   ‚ö†Ô∏è {itens_com_dados} itens de embarques cancelados com dados √≥rf√£os")
                else:
                    print("   ‚úÖ Nenhum item √≥rf√£o encontrado")
                
            except Exception as e:
                print(f"   ‚ùå Erro ao verificar embarques: {e}")
            
            # 6. Verificar cota√ß√µes √≥rf√£s
            print("\n6Ô∏è‚É£ Verificando cota√ß√µes √≥rf√£s...")
            try:
                cotacoes_orfas = db.session.query(Cotacao).filter(
                    ~Cotacao.pedidos.any()
                ).all()
                
                print(f"   üìä {len(cotacoes_orfas)} cota√ß√µes √≥rf√£s encontradas")
                
                if cotacoes_orfas:
                    print("   ‚ö†Ô∏è Existem cota√ß√µes sem pedidos vinculados")
                else:
                    print("   ‚úÖ Nenhuma cota√ß√£o √≥rf√£ encontrada")
                
            except Exception as e:
                print(f"   ‚ùå Erro ao verificar cota√ß√µes: {e}")
            
            # 7. Executar VACUUM para otimizar banco
            print("\n7Ô∏è‚É£ Otimizando banco de dados...")
            try:
                # Para SQLite, executa VACUUM
                db.session.execute(text("VACUUM"))
                db.session.commit()
                print("   ‚úÖ Banco de dados otimizado")
                
            except Exception as e:
                print(f"   ‚ùå Erro ao otimizar banco: {e}")
            
            print("\n" + "=" * 60)
            print("‚úÖ CORRE√á√ÉO DE PROBLEMAS DE SESS√ÉO CONCLU√çDA")
            print("\nRecomenda√ß√µes:")
            print("1. Reinicie o servidor Flask")
            print("2. Limpe o cache do navegador")
            print("3. Teste a funcionalidade de cota√ß√£o")
            
        except Exception as e:
            print(f"\n‚ùå ERRO GERAL: {e}")
            db.session.rollback()
            return False
        
        return True

if __name__ == "__main__":
    sucesso = corrigir_problemas_sessao()
    if sucesso:
        print("\nüéâ Script executado com sucesso!")
    else:
        print("\nüí• Script falhou!")
        sys.exit(1) 