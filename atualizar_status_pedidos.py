#!/usr/bin/env python3
"""
Script para atualizar o campo status dos Pedidos baseado no status_calculado
Corrige pedidos que t√™m NF mas ainda est√£o como COTADO
"""

from app import create_app, db
from app.pedidos.models import Pedido

app = create_app()

with app.app_context():
    print("üîç Buscando pedidos com status inconsistente...")
    
    # Buscar pedidos que t√™m NF mas n√£o est√£o como FATURADO
    pedidos_inconsistentes = Pedido.query.filter(
        Pedido.nf.isnot(None),
        Pedido.nf != "",
        Pedido.status != 'FATURADO'
    ).all()
    
    print(f"üìä Encontrados {len(pedidos_inconsistentes)} pedidos inconsistentes")
    
    contador = 0
    for pedido in pedidos_inconsistentes:
        status_antigo = pedido.status
        status_novo = pedido.status_calculado
        
        if status_antigo != status_novo:
            print(f"  ‚Ä¢ Pedido {pedido.num_pedido}: '{status_antigo}' ‚Üí '{status_novo}' (NF: {pedido.nf})")
            pedido.status = status_novo
            contador += 1
    
    if contador > 0:
        db.session.commit()
        print(f"\n‚úÖ {contador} pedidos atualizados com sucesso!")
    else:
        print("\n‚úÖ Nenhum pedido precisou ser atualizado")
    
    # Verificar resultado
    print("\nüìä VERIFICA√á√ÉO P√ìS-ATUALIZA√á√ÉO:")
    
    # Contar por status
    from sqlalchemy import func
    
    contagem = db.session.query(
        Pedido.status,
        func.count(Pedido.id)
    ).group_by(
        Pedido.status
    ).all()
    
    for status, qtd in contagem:
        print(f"  ‚Ä¢ {status}: {qtd} pedidos")
    
    # Verificar se ainda h√° inconsist√™ncias
    ainda_inconsistentes = Pedido.query.filter(
        Pedido.nf.isnot(None),
        Pedido.nf != "",
        Pedido.status != 'FATURADO'
    ).count()
    
    if ainda_inconsistentes > 0:
        print(f"\n‚ö†Ô∏è ATEN√á√ÉO: Ainda h√° {ainda_inconsistentes} pedidos com NF mas sem status FATURADO")
    else:
        print("\n‚úÖ Todos os pedidos est√£o com status correto!")