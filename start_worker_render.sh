#!/bin/bash
# =====================================================
# SCRIPT DE INICIALIZA√á√ÉO DO WORKER NO RENDER
# Para processar agendamentos ass√≠ncronos
# =====================================================

echo "=========================================="
echo "üöÄ INICIANDO WORKER ATACAD√ÉO/SENDAS NO RENDER"
echo "=========================================="
echo ""

# Verificar vari√°veis de ambiente
echo "üìã Verificando configura√ß√£o..."
echo "   REDIS_URL: ${REDIS_URL:0:30}..."  # Mostra apenas in√≠cio da URL
if [ -z "$DATABASE_URL" ]; then
    echo "   DATABASE_URL: ‚ö†Ô∏è N√ÉO CONFIGURADA (usando SQLite como fallback)"
    echo "   ‚ö†Ô∏è  ATEN√á√ÉO: Worker precisa de DATABASE_URL para PostgreSQL!"
    echo "   ‚ö†Ô∏è  Adicione DATABASE_URL nas vari√°veis de ambiente do Render"
else
    echo "   DATABASE_URL: ${DATABASE_URL:0:30}..."  # Mostra apenas in√≠cio da URL
fi
echo "   PYTHON: $(python --version)"

echo ""

# Verificar conex√£o com Redis e limpar workers antigos
echo "üîç Testando conex√£o com Redis..."
python -c "
import redis
import os
from rq import Worker
from datetime import datetime, timedelta

try:
    r = redis.from_url(os.environ.get('REDIS_URL', ''))
    r.ping()
    print('   ‚úÖ Redis conectado com sucesso!')

    # Limpar workers antigos/mortos
    try:
        workers = Worker.all(connection=r)
        print(f'   üìä Total de workers registrados: {len(workers)}')

        # M√©todo alternativo para detectar workers mortos
        # Workers s√£o considerados mortos se n√£o reportaram heartbeat h√° mais de 420 segundos
        dead_workers = []
        for w in workers:
            try:
                # Verificar heartbeat (√∫ltima atividade)
                last_heartbeat = w.last_heartbeat
                if last_heartbeat:
                    # Se o heartbeat √© muito antigo, worker est√° morto
                    time_since_heartbeat = datetime.now() - last_heartbeat
                    if time_since_heartbeat > timedelta(seconds=420):
                        dead_workers.append(w)
                else:
                    # Se n√£o h√° heartbeat, verificar se o worker est√° registrado mas inativo
                    # Usar birth_date como fallback
                    if hasattr(w, 'birth_date') and w.birth_date:
                        time_since_birth = datetime.now() - w.birth_date
                        if time_since_birth > timedelta(minutes=10):
                            dead_workers.append(w)
            except:
                # Se houver qualquer erro ao verificar o worker, assumir que est√° morto
                dead_workers.append(w)

        if dead_workers:
            print(f'   üßπ Limpando {len(dead_workers)} workers antigos/inativos...')
            for w in dead_workers:
                try:
                    # Tentar registrar como morto primeiro
                    w.register_death()
                except:
                    pass
                try:
                    # Remover do registro de workers
                    r.srem('rq:workers', w.key)
                    r.delete(w.key)
                    r.delete(f'{w.key}:heartbeat')
                except:
                    pass
            print('   ‚úÖ Workers antigos removidos')
        else:
            print('   ‚úÖ Nenhum worker antigo para limpar')
    except Exception as worker_error:
        print(f'   ‚ö†Ô∏è  N√£o foi poss√≠vel limpar workers antigos: {worker_error}')
        print('   ‚ÑπÔ∏è  Continuando mesmo assim...')

except Exception as e:
    print(f'   ‚ùå Erro ao conectar ao Redis: {e}')
    exit(1)
"

if [ $? -ne 0 ]; then
    echo "‚ùå Falha na conex√£o com Redis. Abortando..."
    exit 1
fi

echo ""

# Verificar e criar tabelas necess√°rias
echo "üìä Verificando tabelas do banco de dados..."
python -c "
import os
import sys
sys.path.insert(0, '.')

try:
    from app import create_app, db
    
    app = create_app()
    with app.app_context():
        # Tentar criar tabelas se n√£o existirem
        from app.portal.models import PortalIntegracao, PortalLog
        
        # Verificar se a tabela existe
        inspector = db.inspect(db.engine)
        tables = inspector.get_table_names()
        
        if 'portal_integracoes' not in tables:
            print('   ‚ö†Ô∏è  Tabela portal_integracoes n√£o existe')
            print('   üì¶ Tentando criar tabelas do portal...')
            try:
                db.create_all()
                print('   ‚úÖ Tabelas criadas com sucesso')
            except Exception as e:
                print(f'   ‚ö†Ô∏è  N√£o foi poss√≠vel criar tabelas: {e}')
                print('   ‚ÑπÔ∏è  Worker continuar√°, mas agendamentos do portal falhar√£o')
        else:
            print('   ‚úÖ Tabela portal_integracoes j√° existe')
            
except Exception as e:
    print(f'   ‚ö†Ô∏è  Erro ao verificar banco: {e}')
    print('   ‚ÑπÔ∏è  Worker continuar√° mesmo assim')
"

echo ""

# Verificar e instalar Playwright + Chromium
echo "üé≠ Verificando Playwright e navegadores..."
if playwright --version > /dev/null 2>&1; then
    echo "   ‚úÖ Playwright instalado"
    
    # Verificar se o Chromium est√° instalado
    if [ -d "/opt/render/.cache/ms-playwright/chromium-"* ] || [ -d "$HOME/.cache/ms-playwright/chromium-"* ]; then
        echo "   üîç Diret√≥rio do Chromium encontrado, verificando bin√°rios..."
    else
        echo "   ‚ö†Ô∏è  Chromium n√£o encontrado no cache"
    fi
    
    # Sempre tentar instalar/atualizar o Chromium
    echo "   üì¶ Instalando/Atualizando Chromium..."
    if playwright install chromium; then
        echo "   ‚úÖ Chromium instalado/atualizado com sucesso"
    else
        echo "   ‚ö†Ô∏è  Falha ao instalar Chromium"
    fi
    
    # Instalar chromium headless shell tamb√©m (usado pelo Playwright em modo headless)
    echo "   üì¶ Instalando Chromium Headless Shell..."
    if playwright install chromium-headless-shell 2>/dev/null; then
        echo "   ‚úÖ Chromium Headless Shell instalado"
    else
        echo "   ‚ÑπÔ∏è  Chromium Headless Shell pode n√£o estar dispon√≠vel"
    fi
    
    # Tentar instalar deps do sistema (provavelmente falhar√° no Render)
    echo "   üì¶ Tentando instalar depend√™ncias do sistema..."
    if playwright install-deps chromium 2>/dev/null; then
        echo "   ‚úÖ Depend√™ncias do sistema instaladas"
    else
        echo "   ‚ö†Ô∏è  N√£o foi poss√≠vel instalar deps do sistema (esperado no Render)"
        echo "   ‚ÑπÔ∏è  Algumas funcionalidades podem estar limitadas"
    fi
else
    echo "   ‚ùå Playwright n√£o est√° instalado"
    echo "   ‚ÑπÔ∏è  O worker funcionar√°, mas Portal Atacad√£o n√£o estar√° dispon√≠vel"
fi

echo ""

# Configurar n√∫mero de workers
WORKER_COUNT=${WORKER_CONCURRENCY:-2}
echo "üë∑ Configura√ß√£o do Worker:"
echo "   Workers paralelos: $WORKER_COUNT"
echo "   Timeout padr√£o: 30 minutos"
echo "   Filas: atacadao, sendas, high, default"
echo ""

# Iniciar worker
echo "=========================================="
echo "üîÑ WORKER INICIADO - Aguardando jobs..."
echo "=========================================="
echo ""

# Executar worker com configura√ß√µes do Render
exec python worker_atacadao.py \
    --workers $WORKER_COUNT \
    --queues atacadao,sendas,high,default \
    --verbose


