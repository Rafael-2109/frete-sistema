#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para Inicializar Ve√≠culos Padr√£o
========================================

Este script inicializa os ve√≠culos padr√£o do sistema, incluindo o novo MASTER.
"""

import sys
import os

def inicializar_veiculos():
    """Inicializa ve√≠culos padr√£o no banco de dados"""
    
    try:
        # Importar m√≥dulos do sistema
        from app import create_app, db
        from app.veiculos.models import Veiculo
        
        print("üöö === INICIALIZA√á√ÉO DE VE√çCULOS ===\n")
        
        # Criar aplica√ß√£o
        app = create_app()
        
        with app.app_context():
            # Verificar se j√° existem ve√≠culos
            veiculos_existentes = Veiculo.query.count()
            print(f"üìä Ve√≠culos j√° cadastrados: {veiculos_existentes}")
            
            if veiculos_existentes > 0:
                print("‚ö†Ô∏è J√° existem ve√≠culos no sistema.")
                resposta = input("Deseja adicionar apenas os que faltam? (s/n): ").lower()
                if resposta != 's':
                    print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
                    return False
            
            # Ve√≠culos padr√£o do sistema (pesos atualizados)
            veiculos_padrao = [
                {'nome': 'FIORINO', 'peso_maximo': 600, 'descricao': 'Ve√≠culo leve para pequenas entregas'},
                {'nome': 'VAN/HR', 'peso_maximo': 1700, 'descricao': 'Van padr√£o - capacidade ampliada'},
                {'nome': 'MASTER', 'peso_maximo': 2000, 'descricao': 'Ve√≠culo Master - capacidade compacta'},
                {'nome': 'IVECO', 'peso_maximo': 2500, 'descricao': 'Ve√≠culo Iveco - porte m√©dio'},
                {'nome': '3/4', 'peso_maximo': 4500, 'descricao': 'Caminh√£o 3/4 - capacidade ampliada'},
                {'nome': 'TOCO', 'peso_maximo': 6500, 'descricao': 'Caminh√£o toco - capacidade ampliada'},
                {'nome': 'TRUCK', 'peso_maximo': 14500, 'descricao': 'Caminh√£o truck - alta capacidade'},
                {'nome': 'CARRETA', 'peso_maximo': 27000, 'descricao': 'Carreta - capacidade m√°xima'},
            ]
            
            veiculos_criados = []
            veiculos_ja_existentes = []
            
            for veiculo_data in veiculos_padrao:
                # Verificar se j√° existe
                veiculo_existente = Veiculo.query.filter_by(nome=veiculo_data['nome']).first()
                
                if veiculo_existente:
                    veiculos_ja_existentes.append(veiculo_data['nome'])
                    print(f"‚è≠Ô∏è {veiculo_data['nome']} - j√° existe ({veiculo_existente.peso_maximo:,.0f} kg)")
                else:
                    # Criar novo ve√≠culo
                    veiculo = Veiculo(
                        nome=veiculo_data['nome'],
                        peso_maximo=veiculo_data['peso_maximo']
                    )
                    
                    db.session.add(veiculo)
                    veiculos_criados.append(veiculo_data['nome'])
                    print(f"‚úÖ {veiculo_data['nome']} - criado ({veiculo_data['peso_maximo']:,.0f} kg)")
            
            # Commit das altera√ß√µes
            if veiculos_criados:
                db.session.commit()
                print(f"\nüíæ {len(veiculos_criados)} ve√≠culo(s) criado(s) com sucesso!")
            else:
                print("\nüìã Nenhum ve√≠culo novo foi criado.")
            
            # Relat√≥rio final
            total_veiculos = Veiculo.query.count()
            print(f"\nüìä === RELAT√ìRIO FINAL ===")
            print(f"‚úÖ Ve√≠culos criados: {len(veiculos_criados)}")
            print(f"‚è≠Ô∏è J√° existentes: {len(veiculos_ja_existentes)}")
            print(f"üìà Total no sistema: {total_veiculos}")
            
            if veiculos_criados:
                print(f"üéØ Novos ve√≠culos: {', '.join(veiculos_criados)}")
            
            # Listar todos os ve√≠culos ordenados por peso
            print(f"\nüöö === VE√çCULOS NO SISTEMA ===")
            todos_veiculos = Veiculo.query.order_by(Veiculo.peso_maximo.asc()).all()
            
            for i, veiculo in enumerate(todos_veiculos, 1):
                status = "üÜï" if veiculo.nome in veiculos_criados else "‚úÖ"
                especial = " ‚≠ê NOVO!" if veiculo.nome == "MASTER" else ""
                print(f"{status} {i}. {veiculo.nome:<10} - {veiculo.peso_maximo:>6,.0f} kg{especial}")
            
            return True
            
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("üí° Certifique-se de estar no diret√≥rio correto e ter o ambiente virtual ativo.")
        return False
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def verificar_ambiente():
    """Verifica se o ambiente est√° configurado corretamente"""
    
    print("üîç === VERIFICA√á√ÉO DO AMBIENTE ===\n")
    
    # Verificar se est√° no diret√≥rio correto
    if not os.path.exists('app'):
        print("‚ùå Diret√≥rio 'app' n√£o encontrado!")
        print("üí° Execute este script na raiz do projeto frete_sistema")
        return False
    
    if not os.path.exists('config.py'):
        print("‚ùå Arquivo 'config.py' n√£o encontrado!")
        return False
    
    print("‚úÖ Estrutura do projeto OK")
    
    # Verificar se pode importar o app
    try:
        sys.path.insert(0, os.getcwd())
        from app import create_app
        print("‚úÖ M√≥dulos do Flask OK")
        return True
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        print("üí° Ative o ambiente virtual: source venv/bin/activate (Linux/Mac) ou venv\\Scripts\\activate (Windows)")
        return False

if __name__ == "__main__":
    print("üöö INICIALIZADOR DE VE√çCULOS - Sistema de Fretes\n")
    
    # Verificar ambiente
    if not verificar_ambiente():
        print("\nüí• Falha na verifica√ß√£o do ambiente!")
        sys.exit(1)
    
    # Executar inicializa√ß√£o
    sucesso = inicializar_veiculos()
    
    if sucesso:
        print("\nüéâ === INICIALIZA√á√ÉO CONCLU√çDA COM SUCESSO! ===")
        print("‚úÖ Ve√≠culos prontos para uso no sistema")
        print("üåê Acesse: /veiculos/admin para gerenciar")
        sys.exit(0)
    else:
        print("\nüí• === FALHA NA INICIALIZA√á√ÉO ===")
        sys.exit(1) 