#!/usr/bin/env python3
"""
Script de Teste do Scheduler - Diagn√≥stico Completo
=====================================================

Este script verifica TODAS as premissas para o scheduler funcionar.
Use no Render para diagnosticar problemas.

Autor: Sistema
Data: 21/09/2025
"""

import os
import sys
import json
from datetime import datetime

print("=" * 80)
print("üîç TESTE DO SCHEDULER - DIAGN√ìSTICO COMPLETO")
print("=" * 80)
print(f"üìÖ Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
print(f"üñ•Ô∏è Python: {sys.version}")
print(f"üìÇ Diret√≥rio: {os.getcwd()}")
print()

# 1. VERIFICAR VARI√ÅVEIS DE AMBIENTE
print("1Ô∏è‚É£ VARI√ÅVEIS DE AMBIENTE ODOO:")
print("-" * 40)
env_vars = {
    'ODOO_URL': os.environ.get('ODOO_URL', '‚ùå N√ÉO DEFINIDO'),
    'ODOO_DB': os.environ.get('ODOO_DB', '‚ùå N√ÉO DEFINIDO'),
    'ODOO_USERNAME': os.environ.get('ODOO_USERNAME', '‚ùå N√ÉO DEFINIDO'),
    'ODOO_PASSWORD': '***' if os.environ.get('ODOO_PASSWORD') else '‚ùå N√ÉO DEFINIDO'
}

for key, value in env_vars.items():
    status = "‚úÖ" if value != '‚ùå N√ÉO DEFINIDO' else "‚ùå"
    print(f"{status} {key}: {value}")

all_env_ok = all(v != '‚ùå N√ÉO DEFINIDO' for v in env_vars.values())
print(f"\n{'‚úÖ' if all_env_ok else '‚ùå'} Todas vari√°veis Odoo configuradas: {all_env_ok}")
print()

# 2. VERIFICAR IMPORTS NECESS√ÅRIOS
print("2Ô∏è‚É£ VERIFICA√á√ÉO DE DEPEND√äNCIAS:")
print("-" * 40)

dependencies = {
    'APScheduler': 'apscheduler',
    'Flask': 'flask',
    'SQLAlchemy': 'sqlalchemy',
    'psycopg2': 'psycopg2',
    'pytz': 'pytz',
    'pandas': 'pandas',
    'requests': 'requests'
}

missing_deps = []
for name, module in dependencies.items():
    try:
        __import__(module)
        print(f"‚úÖ {name}: Instalado")
    except ImportError:
        print(f"‚ùå {name}: N√ÉO INSTALADO")
        missing_deps.append(name)

if missing_deps:
    print(f"\n‚ùå ERRO: Depend√™ncias faltando: {', '.join(missing_deps)}")
else:
    print(f"\n‚úÖ Todas depend√™ncias instaladas")
print()

# 3. TESTAR IMPORTS DO APP
print("3Ô∏è‚É£ TESTE DE IMPORTS DO APLICATIVO:")
print("-" * 40)

try:
    from app import create_app
    print("‚úÖ app.create_app importado")

    from app.odoo.services.carteira_service import CarteiraService
    print("‚úÖ CarteiraService importado")

    from app.odoo.services.faturamento_service import FaturamentoService
    print("‚úÖ FaturamentoService importado")

    from apscheduler.schedulers.blocking import BlockingScheduler
    print("‚úÖ BlockingScheduler importado")

    imports_ok = True
except Exception as e:
    print(f"‚ùå ERRO ao importar: {e}")
    imports_ok = False
print()

# 4. TESTAR CONEX√ÉO COM ODOO
if all_env_ok and imports_ok:
    print("4Ô∏è‚É£ TESTE DE CONEX√ÉO COM ODOO:")
    print("-" * 40)

    try:
        from app.odoo.utils.connection import OdooConnection

        conn = OdooConnection()
        common, uid, models = conn.connect()

        if uid:
            print(f"‚úÖ Conectado ao Odoo com sucesso! UID: {uid}")

            # Testar busca simples
            test_result = models.execute_kw(
                conn.db, uid, conn.password,
                'sale.order', 'search_count',
                [[('state', '=', 'sale')]]
            )
            print(f"‚úÖ Teste de query: {test_result} pedidos em 'sale'")
            odoo_ok = True
        else:
            print("‚ùå Falha na autentica√ß√£o Odoo")
            odoo_ok = False

    except Exception as e:
        print(f"‚ùå ERRO ao conectar Odoo: {e}")
        odoo_ok = False
else:
    print("4Ô∏è‚É£ TESTE DE CONEX√ÉO COM ODOO:")
    print("-" * 40)
    print("‚ö†Ô∏è Pulando teste (depend√™ncias n√£o satisfeitas)")
    odoo_ok = False
print()

# 5. VERIFICAR PROCESSO DO SCHEDULER
print("5Ô∏è‚É£ VERIFICA√á√ÉO DE PROCESSOS:")
print("-" * 40)

import subprocess
try:
    result = subprocess.run(
        ['ps', 'aux'],
        capture_output=True,
        text=True,
        timeout=5
    )

    scheduler_running = False
    for line in result.stdout.split('\n'):
        if 'sincronizacao_incremental' in line and 'grep' not in line:
            print(f"‚úÖ Scheduler rodando: {line[:100]}...")
            scheduler_running = True
            break

    if not scheduler_running:
        print("‚ùå Scheduler N√ÉO est√° rodando")

except Exception as e:
    print(f"‚ö†Ô∏è N√£o foi poss√≠vel verificar processos: {e}")
print()

# 6. VERIFICAR ARQUIVO DE LOG
print("6Ô∏è‚É£ VERIFICA√á√ÉO DE LOGS:")
print("-" * 40)

log_file = 'logs/sincronizacao_incremental.log'
if os.path.exists(log_file):
    try:
        size = os.path.getsize(log_file)
        modified = datetime.fromtimestamp(os.path.getmtime(log_file))

        print(f"‚úÖ Arquivo de log existe")
        print(f"   - Tamanho: {size:,} bytes")
        print(f"   - √öltima modifica√ß√£o: {modified.strftime('%Y-%m-%d %H:%M:%S')}")

        # Mostrar √∫ltimas linhas
        with open(log_file, 'r') as f:
            lines = f.readlines()
            if lines:
                print(f"   - Total de linhas: {len(lines)}")
                print("\n   üìã √öltimas 5 linhas do log:")
                for line in lines[-5:]:
                    print(f"      {line.strip()}")
            else:
                print("   ‚ö†Ô∏è Log vazio")
    except Exception as e:
        print(f"‚ùå Erro ao ler log: {e}")
else:
    print(f"‚ùå Arquivo de log n√£o existe: {log_file}")
print()

# 7. TESTE DE EXECU√á√ÉO SIMPLES
if all_env_ok and imports_ok and odoo_ok:
    print("7Ô∏è‚É£ TESTE DE EXECU√á√ÉO DO SCHEDULER:")
    print("-" * 40)
    print("‚ö†Ô∏è Tentando executar uma sincroniza√ß√£o de teste...")

    try:
        app = create_app()
        with app.app_context():
            # Testar s√≥ Faturamento (mais r√°pido)
            faturamento_service = FaturamentoService()
            resultado = faturamento_service.sincronizar_faturamento_incremental(
                minutos_janela=60,
                primeira_execucao=False,
                minutos_status=60
            )

            if resultado.get("sucesso"):
                print(f"‚úÖ Sincroniza√ß√£o teste executada com sucesso!")
                print(f"   - Novos: {resultado.get('registros_novos', 0)}")
                print(f"   - Atualizados: {resultado.get('registros_atualizados', 0)}")
            else:
                print(f"‚ùå Erro na sincroniza√ß√£o: {resultado.get('erro')}")

    except Exception as e:
        print(f"‚ùå ERRO ao executar teste: {e}")
        import traceback
        print("\nTraceback:")
        traceback.print_exc()
else:
    print("7Ô∏è‚É£ TESTE DE EXECU√á√ÉO DO SCHEDULER:")
    print("-" * 40)
    print("‚ö†Ô∏è Pulando teste de execu√ß√£o (premissas n√£o satisfeitas)")
print()

# RESULTADO FINAL
print("=" * 80)
print("üìä RESULTADO FINAL DO DIAGN√ìSTICO:")
print("=" * 80)

results = {
    'Vari√°veis Odoo': all_env_ok,
    'Depend√™ncias': not missing_deps,
    'Imports App': imports_ok,
    'Conex√£o Odoo': odoo_ok,
    'Log existe': os.path.exists(log_file)
}

all_ok = all(results.values())

for test, passed in results.items():
    print(f"{'‚úÖ' if passed else '‚ùå'} {test}: {'OK' if passed else 'FALHOU'}")

print()
if all_ok:
    print("‚úÖ TODOS OS TESTES PASSARAM - Scheduler deveria funcionar!")
    print("\nPara iniciar o scheduler manualmente:")
    print("  python -m app.scheduler.sincronizacao_incremental_simples")
else:
    print("‚ùå PROBLEMAS DETECTADOS - Corrija os itens acima")

    if not all_env_ok:
        print("\nüîß CORRE√á√ÉO: Configure as vari√°veis de ambiente do Odoo")
    if missing_deps:
        print("\nüîß CORRE√á√ÉO: Instale as depend√™ncias com: pip install -r requirements.txt")
    if not imports_ok:
        print("\nüîß CORRE√á√ÉO: Verifique se est√° no diret√≥rio correto do projeto")

print("\n" + "=" * 80)