#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do Servidor MCP para Sistema de Fretes
Execute este script para iniciar o servidor MCP
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def verificar_dependencias():
    """Verifica se as depend√™ncias MCP est√£o instaladas"""
    try:
        import mcp
        import pydantic
        import anyio
        print("‚úÖ Depend√™ncias MCP encontradas")
        return True
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("Execute: pip install -r requirements.txt")
        return False

def verificar_estrutura():
    """Verifica se a estrutura do projeto est√° correta"""
    arquivos_necessarios = [
        'mcp_server.py',
        'mcp_config.json'
    ]
    
    for arquivo in arquivos_necessarios:
        if not os.path.exists(arquivo):
            print(f"‚ùå Arquivo n√£o encontrado: {arquivo}")
            return False
    
    print("‚úÖ Estrutura MCP verificada")
    return True

def verificar_sistema_flask():
    """Verifica se o sistema Flask pode ser importado"""
    try:
        # Adiciona o diret√≥rio pai ao path
        sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        
        from app import create_app
        app = create_app()
        
        with app.app_context():
            # Testa importa√ß√£o dos principais modelos
            from app.embarques.models import Embarque
            from app.fretes.models import Frete
            from app.monitoramento.models import EntregaMonitorada
            print("‚úÖ Sistema Flask carregado com sucesso")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao carregar sistema Flask: {e}")
        return False

def mostrar_info_configuracao():
    """Mostra informa√ß√µes sobre como configurar clientes MCP"""
    
    config_claude = {
        "mcpServers": {
            "frete-sistema": {
                "command": "python",
                "args": ["mcp/mcp_server.py"],
                "cwd": os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
                "env": {
                    "FLASK_ENV": "development"
                }
            }
        }
    }
    
    print("\n" + "="*60)
    print("üìã CONFIGURA√á√ÉO PARA CLAUDE DESKTOP")
    print("="*60)
    print("Adicione esta configura√ß√£o no arquivo claude_desktop_config.json:")
    print(json.dumps(config_claude, indent=2))
    
    print("\n" + "="*60)
    print("üìÅ LOCALIZA√á√ÉO DO ARQUIVO DE CONFIGURA√á√ÉO")
    print("="*60)
    
    # Detecta o sistema operacional
    if os.name == 'nt':  # Windows
        config_path = os.path.expanduser("~\\AppData\\Roaming\\Claude\\claude_desktop_config.json")
        print(f"Windows: {config_path}")
    elif sys.platform == 'darwin':  # macOS
        config_path = os.path.expanduser("~/Library/Application Support/Claude/claude_desktop_config.json")
        print(f"macOS: {config_path}")
    else:  # Linux
        config_path = os.path.expanduser("~/.config/Claude/claude_desktop_config.json")
        print(f"Linux: {config_path}")
    
    print("\n" + "="*60)
    print("üöÄ COMO TESTAR")
    print("="*60)
    print("1. Adicione a configura√ß√£o acima no arquivo do Claude Desktop")
    print("2. Reinicie o Claude Desktop")
    print("3. Em uma nova conversa, teste com:")
    print("   - 'Quais embarques est√£o ativos?'")
    print("   - 'Mostre estat√≠sticas dos √∫ltimos 7 dias'")
    print("   - 'H√° fretes pendentes de aprova√ß√£o?'")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando Servidor MCP - Sistema de Fretes")
    print("="*50)
    
    # Verifica√ß√µes
    if not verificar_dependencias():
        return 1
    
    if not verificar_estrutura():
        return 1
    
    if not verificar_sistema_flask():
        return 1
    
    print("\n‚úÖ Todas as verifica√ß√µes passaram!")
    
    # Mostra informa√ß√µes de configura√ß√£o
    mostrar_info_configuracao()
    
    print("\n" + "="*60)
    print("üîÑ INICIANDO SERVIDOR MCP...")
    print("="*60)
    print("Pressione Ctrl+C para parar")
    
    try:
        # Inicia o servidor MCP
        from mcp_server import main as run_server
        import asyncio
        asyncio.run(run_server())
        
    except KeyboardInterrupt:
        print("\n\nüëã Servidor MCP finalizado")
        return 0
    except Exception as e:
        print(f"\n‚ùå Erro ao executar servidor: {e}")
        return 1

if __name__ == "__main__":
    exit(main()) 