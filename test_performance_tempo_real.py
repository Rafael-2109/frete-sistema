#!/usr/bin/env python3
"""
Script de Teste de Performance do Sistema de Estoque em Tempo Real
Verifica se as consultas est√£o dentro do limite de 100ms
"""

import os
import sys
import time
import random
from datetime import date, timedelta
from decimal import Decimal

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.estoque.models_tempo_real import EstoqueTempoReal, MovimentacaoPrevista
from app.estoque.api_tempo_real import APIEstoqueTempoReal
from app.estoque.services.estoque_tempo_real import ServicoEstoqueTempoReal


def medir_tempo(func, *args, **kwargs):
    """Mede o tempo de execu√ß√£o de uma fun√ß√£o"""
    inicio = time.perf_counter()
    resultado = func(*args, **kwargs)
    fim = time.perf_counter()
    tempo_ms = (fim - inicio) * 1000
    return resultado, tempo_ms


def criar_dados_teste(num_produtos=100, num_movimentacoes=500):
    """Cria dados de teste no banco"""
    print(f"\nüìù Criando {num_produtos} produtos e {num_movimentacoes} movimenta√ß√µes...")
    
    produtos_criados = []
    hoje = date.today()
    
    # Criar produtos
    for i in range(num_produtos):
        cod_produto = f"TEST_{i:04d}"
        
        estoque = EstoqueTempoReal(
            cod_produto=cod_produto,
            nome_produto=f"Produto Teste {i}",
            saldo_atual=Decimal(str(random.randint(0, 1000)))
        )
        db.session.add(estoque)
        produtos_criados.append(cod_produto)
    
    # Criar movimenta√ß√µes previstas
    for _ in range(num_movimentacoes):
        cod_produto = random.choice(produtos_criados)
        data_prevista = hoje + timedelta(days=random.randint(1, 30))
        
        mov = MovimentacaoPrevista(
            cod_produto=cod_produto,
            data_prevista=data_prevista,
            entrada_prevista=Decimal(str(random.randint(0, 100))),
            saida_prevista=Decimal(str(random.randint(0, 100)))
        )
        db.session.add(mov)
    
    db.session.commit()
    print(f"‚úÖ Dados de teste criados")
    return produtos_criados


def testar_consulta_workspace(produtos, num_testes=10):
    """Testa performance da consulta workspace"""
    print(f"\nüîç Testando consulta workspace com {len(produtos)} produtos...")
    
    tempos = []
    for i in range(num_testes):
        # Selecionar produtos aleat√≥rios
        num_produtos = random.randint(5, 20)
        produtos_selecionados = random.sample(produtos, min(num_produtos, len(produtos)))
        
        # Medir tempo
        resultado, tempo_ms = medir_tempo(
            APIEstoqueTempoReal.consultar_workspace,
            produtos_selecionados
        )
        
        tempos.append(tempo_ms)
        status = "‚úÖ" if tempo_ms < 100 else "‚ùå"
        print(f"  Teste {i+1:2d}: {tempo_ms:6.2f}ms {status} ({len(produtos_selecionados)} produtos)")
    
    # Estat√≠sticas
    tempo_medio = sum(tempos) / len(tempos)
    tempo_max = max(tempos)
    tempo_min = min(tempos)
    
    print(f"\n  üìä Estat√≠sticas:")
    print(f"     M√©dia: {tempo_medio:.2f}ms")
    print(f"     M√≠nimo: {tempo_min:.2f}ms")
    print(f"     M√°ximo: {tempo_max:.2f}ms")
    
    return tempo_medio < 100


def testar_consulta_individual(produtos, num_testes=20):
    """Testa performance da consulta individual"""
    print(f"\nüîç Testando consulta individual...")
    
    tempos = []
    for i in range(num_testes):
        cod_produto = random.choice(produtos)
        
        # Medir tempo
        resultado, tempo_ms = medir_tempo(
            APIEstoqueTempoReal.consultar_produto,
            cod_produto
        )
        
        tempos.append(tempo_ms)
        status = "‚úÖ" if tempo_ms < 100 else "‚ùå"
        print(f"  Teste {i+1:2d}: {tempo_ms:6.2f}ms {status}")
    
    # Estat√≠sticas
    tempo_medio = sum(tempos) / len(tempos)
    tempo_max = max(tempos)
    tempo_min = min(tempos)
    
    print(f"\n  üìä Estat√≠sticas:")
    print(f"     M√©dia: {tempo_medio:.2f}ms")
    print(f"     M√≠nimo: {tempo_min:.2f}ms")
    print(f"     M√°ximo: {tempo_max:.2f}ms")
    
    return tempo_medio < 100


def testar_consulta_rupturas(num_testes=10):
    """Testa performance da consulta de rupturas"""
    print(f"\nüîç Testando consulta de rupturas...")
    
    tempos = []
    for i in range(num_testes):
        dias = random.randint(3, 14)
        
        # Medir tempo
        resultado, tempo_ms = medir_tempo(
            APIEstoqueTempoReal.consultar_rupturas,
            dias
        )
        
        tempos.append(tempo_ms)
        status = "‚úÖ" if tempo_ms < 100 else "‚ùå"
        print(f"  Teste {i+1:2d}: {tempo_ms:6.2f}ms {status} ({dias} dias)")
    
    # Estat√≠sticas
    tempo_medio = sum(tempos) / len(tempos)
    tempo_max = max(tempos)
    tempo_min = min(tempos)
    
    print(f"\n  üìä Estat√≠sticas:")
    print(f"     M√©dia: {tempo_medio:.2f}ms")
    print(f"     M√≠nimo: {tempo_min:.2f}ms")
    print(f"     M√°ximo: {tempo_max:.2f}ms")
    
    return tempo_medio < 100


def testar_calculo_ruptura(produtos, num_testes=10):
    """Testa performance do c√°lculo de ruptura"""
    print(f"\nüîç Testando c√°lculo de ruptura D+7...")
    
    tempos = []
    for i in range(num_testes):
        cod_produto = random.choice(produtos)
        
        # Medir tempo
        resultado, tempo_ms = medir_tempo(
            ServicoEstoqueTempoReal.calcular_ruptura_d7,
            cod_produto
        )
        
        tempos.append(tempo_ms)
        status = "‚úÖ" if tempo_ms < 100 else "‚ùå"
        print(f"  Teste {i+1:2d}: {tempo_ms:6.2f}ms {status}")
    
    # Estat√≠sticas
    tempo_medio = sum(tempos) / len(tempos)
    tempo_max = max(tempos)
    tempo_min = min(tempos)
    
    print(f"\n  üìä Estat√≠sticas:")
    print(f"     M√©dia: {tempo_medio:.2f}ms")
    print(f"     M√≠nimo: {tempo_min:.2f}ms")
    print(f"     M√°ximo: {tempo_max:.2f}ms")
    
    return tempo_medio < 100


def limpar_dados_teste():
    """Remove dados de teste"""
    print("\nüßπ Limpando dados de teste...")
    
    # Remover produtos de teste
    EstoqueTempoReal.query.filter(
        EstoqueTempoReal.cod_produto.like('TEST_%')
    ).delete()
    
    # Remover movimenta√ß√µes de teste
    MovimentacaoPrevista.query.filter(
        MovimentacaoPrevista.cod_produto.like('TEST_%')
    ).delete()
    
    db.session.commit()
    print("‚úÖ Dados de teste removidos")


def main():
    """Fun√ß√£o principal de teste"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë    TESTE DE PERFORMANCE - ESTOQUE TEMPO REAL        ‚ïë
‚ïë         Objetivo: Todas consultas < 100ms           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    app = create_app()
    
    with app.app_context():
        # Limpar dados antigos de teste
        limpar_dados_teste()
        
        # Criar dados de teste
        produtos = criar_dados_teste(
            num_produtos=100,
            num_movimentacoes=500
        )
        
        # Executar testes
        resultados = []
        
        # Teste 1: Consulta Workspace
        resultado = testar_consulta_workspace(produtos)
        resultados.append(("Consulta Workspace", resultado))
        
        # Teste 2: Consulta Individual
        resultado = testar_consulta_individual(produtos)
        resultados.append(("Consulta Individual", resultado))
        
        # Teste 3: Consulta Rupturas
        resultado = testar_consulta_rupturas()
        resultados.append(("Consulta Rupturas", resultado))
        
        # Teste 4: C√°lculo Ruptura
        resultado = testar_calculo_ruptura(produtos)
        resultados.append(("C√°lculo Ruptura D+7", resultado))
        
        # Limpar dados de teste
        limpar_dados_teste()
        
        # Resumo final
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                  RESUMO DOS TESTES                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """)
        
        todos_passaram = True
        for nome, passou in resultados:
            status = "‚úÖ PASSOU" if passou else "‚ùå FALHOU"
            print(f"  {nome:25s}: {status}")
            if not passou:
                todos_passaram = False
        
        print()
        if todos_passaram:
            print("üéâ TODOS OS TESTES PASSARAM!")
            print("‚úÖ Sistema atende ao requisito de performance < 100ms")
        else:
            print("‚ùå ALGUNS TESTES FALHARAM")
            print("‚ö†Ô∏è  Sistema precisa de otimiza√ß√£o")
        
        return 0 if todos_passaram else 1


if __name__ == '__main__':
    exit(main())