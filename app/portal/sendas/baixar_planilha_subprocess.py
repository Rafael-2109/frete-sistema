#!/usr/bin/env python3
"""
Script para baixar planilha modelo Sendas em processo separado
Evita conflito de contexto com Flask
"""

import sys
import os
import asyncio
import json
import traceback
import logging

# Adicionar o diret√≥rio atual ao path para garantir imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from consumir_agendas import ConsumirAgendasSendas

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def baixar_planilha_async() -> dict:
    """
    Baixa a planilha modelo e retorna o caminho
    """
    try:
        # For√ßar vari√°vel de ambiente para garantir headless em produ√ß√£o
        # Este script roda em subprocess separado
        is_render = os.getenv('RENDER') is not None
        is_render_path = '/opt/render' in os.getcwd()
        
        if is_render or is_render_path:
            os.environ['IS_PRODUCTION'] = 'true'
            logger.info(f"üöÄ Ambiente PRODU√á√ÉO detectado - RENDER={is_render}, PATH={is_render_path}")
            logger.info(f"üìÅ CWD: {os.getcwd()}")
        else:
            logger.info(f"üíª Ambiente DESENVOLVIMENTO - CWD: {os.getcwd()}")
        
        # Verificar credenciais antes de criar consumidor
        usuario = os.getenv('SENDAS_USUARIO')
        senha = os.getenv('SENDAS_SENHA')
        logger.info(f"üîê Credenciais: usu√°rio={'CONFIGURADO' if usuario else 'N√ÉO CONFIGURADO'}, senha={'CONFIGURADA' if senha else 'N√ÉO CONFIGURADA'}")
        
        if not usuario or not senha:
            return {
                'success': False,
                'arquivo': None,
                'error': 'Credenciais SENDAS_USUARIO e SENDAS_SENHA n√£o configuradas'
            }
        
        consumidor = ConsumirAgendasSendas()
        logger.info("‚úÖ ConsumirAgendasSendas criado com sucesso")
        
        # Executar download
        logger.info("üì• Iniciando download da planilha...")
        arquivo = await consumidor.run_baixar_planilha()
        
        if arquivo:
            logger.info(f"‚úÖ Download conclu√≠do: {arquivo}")
            return {
                'success': True,
                'arquivo': arquivo,
                'error': None
            }
        else:
            logger.error("‚ùå run_baixar_planilha retornou None")
            return {
                'success': False,
                'arquivo': None,
                'error': 'run_baixar_planilha retornou None - verificar logs do playwright'
            }
        
    except ValueError as ve:
        # Erro de credenciais
        logger.error(f"‚ùå Erro de configura√ß√£o: {ve}")
        return {
            'success': False,
            'arquivo': None,
            'error': f'Erro de configura√ß√£o: {str(ve)}'
        }
    except Exception as e:
        logger.error(f"‚ùå Erro no download: {e}")
        logger.error(f"‚ùå Tipo do erro: {type(e).__name__}")
        logger.error(f"‚ùå Stack trace:\n{traceback.format_exc()}")
        return {
            'success': False,
            'arquivo': None,
            'error': f'{type(e).__name__}: {str(e)}'
        }


def main():
    """
    Fun√ß√£o principal
    """
    logger.info("Iniciando download da planilha modelo Sendas")
    
    # Executar download
    resultado = asyncio.run(baixar_planilha_async())
    
    # Retornar resultado como JSON
    print(json.dumps(resultado))
    sys.exit(0 if resultado['success'] else 1)


if __name__ == "__main__":
    main()