#!/usr/bin/env python3
"""
üöÄ TESTE DE PRODU√á√ÉO - Simula uso real do sistema
"""

import asyncio
import sys
import os

# Adicionar paths necess√°rios
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)
sys.path.insert(0, current_dir)

print("üöÄ TESTE DE PRODU√á√ÉO - SISTEMA CLAUDE AI NOVO")
print("=" * 60)

async def testar_consultas_reais():
    """Testa consultas reais como no sistema web"""
    
    try:
        from app.claude_ai_novo import ClaudeAINovo
        
        # Inicializar sistema
        claude_ai = ClaudeAINovo()
        
        print("üì± Inicializando sistema...")
        await claude_ai.initialize_system()
        
        # Consultas reais que usu√°rios fazem
        consultas_teste = [
            "Como est√£o as entregas do Atacad√£o hoje?",
            "Quantas entregas est√£o pendentes?", 
            "Status das entregas de S√£o Paulo",
            "Quais clientes t√™m problemas de entrega?",
            "Relat√≥rio de entregas atrasadas"
        ]
        
        print(f"\nüéØ Testando {len(consultas_teste)} consultas reais:")
        print("=" * 60)
        
        sucessos = 0
        for i, consulta in enumerate(consultas_teste, 1):
            print(f"\n{i}Ô∏è‚É£ CONSULTA: '{consulta}'")
            
            try:
                # Processar consulta (como no sistema web)
                resultado = await claude_ai.process_query(consulta, {})
                
                if resultado.get('success'):
                    agent_response = resultado.get('agent_response', {})
                    
                    # Verificar se h√° resposta dos agentes
                    if agent_response and agent_response.get('response'):
                        print(f"   ‚úÖ SUCESSO: Resposta gerada ({len(agent_response.get('response', ''))} chars)")
                        sucessos += 1
                    else:
                        print(f"   ‚ö†Ô∏è PARCIAL: Sistema funcionou mas sem resposta dos agentes")
                else:
                    print(f"   ‚ùå FALHA: {resultado.get('error', 'Erro desconhecido')}")
                    
            except Exception as e:
                print(f"   ‚ùå ERRO: {e}")
        
        print(f"\nüìä RESULTADO FINAL:")
        print(f"‚úÖ Sucessos: {sucessos}/{len(consultas_teste)}")
        print(f"üìà Taxa de sucesso: {sucessos/len(consultas_teste)*100:.1f}%")
        
        if sucessos >= len(consultas_teste) * 0.8:  # 80% de sucesso
            print("üéâ SISTEMA FUNCIONANDO PERFEITAMENTE EM PRODU√á√ÉO!")
        else:
            print("‚ö†Ô∏è Sistema precisa de ajustes adicionais")
            
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico no teste de produ√ß√£o: {e}")
        import traceback
        traceback.print_exc()

# Executar teste
asyncio.run(testar_consultas_reais()) 