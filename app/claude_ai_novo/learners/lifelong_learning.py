"""
üß† LIFELONG LEARNING SYSTEM - Sistema de Aprendizado Vital√≠cio

Este √© o wrapper que integra todos os m√≥dulos modularizados de aprendizado:
- learning_core.py (n√∫cleo principal)
- pattern_learner.py (aprendizado de padr√µes)
- human_in_loop_learning.py (aprendizado humano)
- feedback_processor.py (processamento de feedback)
- knowledge_manager.py (gest√£o de conhecimento)
"""

import logging
from typing import Dict, List, Any, Optional

# Imports dos m√≥dulos modularizados
from .learning_core import LearningCore
from .pattern_learning import PatternLearner
from .human_in_loop_learning import HumanInLoopLearning
from .feedback_learning import FeedbackProcessor
from ..memorizers.knowledge_memory import KnowledgeMemory

logger = logging.getLogger(__name__)


class LifelongLearningSystem:
    """
    Sistema de Aprendizado Vital√≠cio - Wrapper dos m√≥dulos modularizados
    
    Integra:
    - LearningCore: N√∫cleo principal de aprendizado
    - PatternLearner: Aprendizado de padr√µes
    - HumanInLoopLearning: Aprendizado com humanos
    - FeedbackProcessor: Processamento de feedback
    - KnowledgeManager: Gest√£o de conhecimento
    """
    
    def __init__(self):
        """Inicializa todos os m√≥dulos especializados"""
        self.learning_core = LearningCore()
        self.pattern_learner = PatternLearner()
        self.human_learning = HumanInLoopLearning()
        self.feedback_processor = FeedbackProcessor()
        self.knowledge_memory = KnowledgeMemory()
        
        logger.info("üß† Sistema de Aprendizado Vital√≠cio (modularizado) inicializado")
    
    def aprender_com_interacao(self, consulta: str, interpretacao: Dict[str, Any], 
                               resposta: str, feedback: Optional[Dict[str, Any]] = None,
                               usuario_id: Optional[int] = None) -> Dict[str, Any]:
        """
        Aprende com cada intera√ß√£o do usu√°rio usando m√≥dulos especializados
        
        Args:
            consulta: Consulta original do usu√°rio
            interpretacao: Como o sistema interpretou
            resposta: Resposta dada
            feedback: Feedback do usu√°rio (se houver)
            usuario_id: ID do usu√°rio
            
        Returns:
            Dict com aprendizados extra√≠dos
        """
        try:
            # Usar learning_core como coordenador principal
            return self.learning_core.aprender_com_interacao(
                consulta, interpretacao, resposta, feedback, usuario_id
            )
        except Exception as e:
            logger.error(f"‚ùå Erro no aprendizado: {e}")
            return {"erro": str(e)}
    
    def aplicar_conhecimento(self, consulta: str) -> Dict[str, Any]:
        """
        Aplica conhecimento aprendido para melhorar interpreta√ß√£o
        
        Returns:
            Dict com padr√µes e conhecimentos aplic√°veis
        """
        try:
            # Usar learning_core como coordenador principal
            return self.learning_core.aplicar_conhecimento(consulta)
        except Exception as e:
            logger.error(f"‚ùå Erro ao aplicar conhecimento: {e}")
            return {}
    
    def apply_learning(self, query: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        M√©todo de compatibilidade com intelligence_manager
        
        Args:
            query: Consulta do usu√°rio
            context: Contexto da consulta
            
        Returns:
            Dict com aprendizados aplicados
        """
        try:
            # Usar learning_core como coordenador principal
            return self.learning_core.apply_learning(query, context)
        except Exception as e:
            logger.error(f"‚ùå Erro ao aplicar aprendizado: {e}")
            return {}
    
    def obter_estatisticas_aprendizado(self) -> Dict[str, Any]:
        """
        Obt√©m estat√≠sticas de aprendizado de todos os m√≥dulos
        
        Returns:
            Dict com estat√≠sticas completas
        """
        try:
            # Usar learning_core como coordenador principal
            return self.learning_core.obter_estatisticas_aprendizado()
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter estat√≠sticas: {e}")
            return {}


# Inst√¢ncia global para compatibilidade
_lifelong_learning = None


def get_lifelong_learning() -> LifelongLearningSystem:
    """
    Fun√ß√£o de conveni√™ncia para obter inst√¢ncia global
    
    Returns:
        LifelongLearningSystem: Inst√¢ncia do sistema
    """
    global _lifelong_learning
    if _lifelong_learning is None:
        _lifelong_learning = LifelongLearningSystem()
    return _lifelong_learning


# Exporta√ß√µes principais
__all__ = [
    'LifelongLearningSystem',
    'get_lifelong_learning'
]

# Alias para compatibilidade
LifelongLearning = LifelongLearningSystem 