#!/usr/bin/env python3
"""
Script de verifica√ß√£o pr√©-commit
Executa testes autom√°ticos para detectar loops antes do commit
"""

import sys
import os
import subprocess
import json
from datetime import datetime

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

# Importa o simulador
from app.claude_ai_novo.simular_producao import ProductionSimulator


def run_basic_tests():
    """Executa testes b√°sicos de importa√ß√£o"""
    print("\nüîç Verificando imports b√°sicos...")
    
    try:
        from app.claude_ai_novo.integration.integration_manager import IntegrationManager
        from app.claude_ai_novo.orchestrators.orchestrator_manager import OrchestratorManager
        print("‚úÖ Imports b√°sicos OK")
        return True
    except Exception as e:
        print(f"‚ùå Erro nos imports: {e}")
        return False


def run_loop_detection():
    """Executa detec√ß√£o de loops"""
    print("\nüîÑ Executando detec√ß√£o de loops...")
    
    simulator = ProductionSimulator()
    simulator.timeout_seconds = 5  # Timeout mais curto para pr√©-commit
    simulator.max_depth = 3  # Detec√ß√£o mais agressiva
    
    # Testa queries problem√°ticas conhecidas
    critical_queries = [
        "Como est√£o as entregas do Atacad√£o?",
        "Status do sistema",
        "Relat√≥rio de fretes pendentes"
    ]
    
    all_passed = True
    
    for query in critical_queries:
        print(f"\n   Testando: '{query}'")
        result = simulator.simulate_query(query, {"_pre_commit_test": True})
        
        if not result['success']:
            print(f"   ‚ùå FALHOU!")
            all_passed = False
        else:
            print(f"   ‚úÖ OK ({result['elapsed_time']:.2f}s)")
    
    return all_passed


def check_anti_loop_protection():
    """Verifica se prote√ß√µes anti-loop est√£o ativas"""
    print("\nüõ°Ô∏è Verificando prote√ß√µes anti-loop...")
    
    checks = []
    
    # Verifica IntegrationManager
    integration_file = os.path.join(
        os.path.dirname(__file__), 
        'integration/integration_manager.py'
    )
    
    if os.path.exists(integration_file):
        with open(integration_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Verifica presen√ßa de prote√ß√µes
        if '_from_orchestrator' in content:
            print("‚úÖ Prote√ß√£o _from_orchestrator encontrada")
            checks.append(True)
        else:
            print("‚ùå Prote√ß√£o _from_orchestrator N√ÉO encontrada")
            checks.append(False)
            
        if 'anti-loop' in content.lower() or 'antiloop' in content.lower():
            print("‚úÖ Resposta anti-loop encontrada")
            checks.append(True)
        else:
            print("‚ùå Resposta anti-loop N√ÉO encontrada")
            checks.append(False)
    
    # Verifica OrchestratorManager
    orchestrator_file = os.path.join(
        os.path.dirname(__file__), 
        'orchestrators/orchestrator_manager.py'
    )
    
    if os.path.exists(orchestrator_file):
        with open(orchestrator_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        if '_from_integration' in content:
            print("‚úÖ Prote√ß√£o _from_integration encontrada")
            checks.append(True)
        else:
            print("‚ùå Prote√ß√£o _from_integration N√ÉO encontrada")
            checks.append(False)
    
    return all(checks) if checks else False


def generate_report(results):
    """Gera relat√≥rio de verifica√ß√£o"""
    report = {
        'timestamp': datetime.now().isoformat(),
        'results': results,
        'passed': all(r['passed'] for r in results),
        'git_info': {}
    }
    
    # Tenta obter informa√ß√µes do Git
    try:
        branch = subprocess.check_output(
            ['git', 'rev-parse', '--abbrev-ref', 'HEAD'],
            text=True
        ).strip()
        report['git_info']['branch'] = branch
        
        commit = subprocess.check_output(
            ['git', 'rev-parse', 'HEAD'],
            text=True
        ).strip()[:8]
        report['git_info']['commit'] = commit
    except:
        pass
    
    # Salva relat√≥rio
    report_file = f"pre_commit_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    report_path = os.path.join(os.path.dirname(__file__), report_file)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2)
    
    print(f"\nüìÑ Relat√≥rio salvo em: {report_file}")
    
    return report


def main():
    """Fun√ß√£o principal do pr√©-commit check"""
    print("\n" + "="*60)
    print("üöÄ VERIFICA√á√ÉO PR√â-COMMIT - CLAUDE AI NOVO")
    print("="*60)
    
    results = []
    
    # 1. Testes b√°sicos
    print("\n[1/3] Testes B√°sicos")
    basic_ok = run_basic_tests()
    results.append({
        'test': 'imports_basicos',
        'passed': basic_ok
    })
    
    if not basic_ok:
        print("\n‚ùå Falha nos testes b√°sicos! Abortando...")
        return False
    
    # 2. Verifica√ß√£o de prote√ß√µes
    print("\n[2/3] Verifica√ß√£o de Prote√ß√µes")
    protections_ok = check_anti_loop_protection()
    results.append({
        'test': 'protecoes_antiloop',
        'passed': protections_ok
    })
    
    # 3. Detec√ß√£o de loops
    print("\n[3/3] Detec√ß√£o de Loops")
    loops_ok = run_loop_detection()
    results.append({
        'test': 'deteccao_loops',
        'passed': loops_ok
    })
    
    # Gera relat√≥rio
    report = generate_report(results)
    
    # Resultado final
    print("\n" + "="*60)
    if report['passed']:
        print("‚úÖ TODAS AS VERIFICA√á√ïES PASSARAM!")
        print("   Sistema seguro para commit.")
        return True
    else:
        print("‚ùå VERIFICA√á√ïES FALHARAM!")
        print("\n   Problemas encontrados:")
        for r in results:
            if not r['passed']:
                print(f"   - {r['test']}")
        print("\n‚ö†Ô∏è  N√ÉO FA√áA COMMIT at√© resolver os problemas!")
        return False


if __name__ == '__main__':
    # Executa verifica√ß√µes
    success = main()
    
    # Se chamado como hook, retorna c√≥digo apropriado
    sys.exit(0 if success else 1) 