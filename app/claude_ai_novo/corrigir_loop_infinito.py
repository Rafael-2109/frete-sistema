#!/usr/bin/env python3
"""
üîß CORRIGIR LOOP INFINITO DE INICIALIZA√á√ÉO
==========================================

O problema: IntegrationManager e OrchestratorManager est√£o se chamando
mutuamente durante a inicializa√ß√£o, causando travamento.

Solu√ß√£o: Remover a chamada autom√°tica de _ensure_orchestrator_loaded()
do __init__ do IntegrationManager.
"""

import os
import sys
from pathlib import Path

# Adicionar diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

def corrigir_loop():
    """Corrige o loop infinito de inicializa√ß√£o"""
    
    print("üîß CORRIGINDO LOOP INFINITO DE INICIALIZA√á√ÉO\n")
    
    # Arquivo a corrigir
    file_path = Path(__file__).parent / "integration" / "integration_manager.py"
    
    # Ler arquivo
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificar se o problema existe
    if "_ensure_orchestrator_loaded()" in content and "def __init__" in content:
        print("‚ùå PROBLEMA ENCONTRADO: _ensure_orchestrator_loaded() sendo chamado no __init__")
        
        # Remover a chamada autom√°tica
        old_code = """        logger.info("üîó Integration Manager iniciado")
        
        # Inicializar orchestrator automaticamente
        self._ensure_orchestrator_loaded()"""
        
        new_code = """        logger.info("üîó Integration Manager iniciado")
        
        # N√ÉO inicializar orchestrator automaticamente para evitar loop circular
        # O orchestrator ser√° carregado sob demanda quando necess√°rio"""
        
        if old_code in content:
            content = content.replace(old_code, new_code)
            print("‚úÖ Removendo chamada autom√°tica de _ensure_orchestrator_loaded()")
            
            # Salvar arquivo
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ Arquivo corrigido com sucesso!")
            
            # Verificar se h√° outras chamadas perigosas
            print("\nüîç Verificando outras poss√≠veis causas de loop...")
            
            # SessionOrchestrator tamb√©m pode ter problema similar
            session_path = Path(__file__).parent / "orchestrators" / "session_orchestrator.py"
            
            with open(session_path, 'r', encoding='utf-8') as f:
                session_content = f.read()
            
            # Verificar se SessionOrchestrator carrega IntegrationManager no __init__
            if "get_integration_manager()" in session_content and "def __init__" in session_content:
                print("\n‚ö†Ô∏è SessionOrchestrator tamb√©m pode estar causando loop")
                print("   Verificando se √© lazy loading...")
                
                # Verificar se √© property (lazy loading)
                if "@property" in session_content and "integration_manager" in session_content:
                    print("   ‚úÖ OK: SessionOrchestrator usa lazy loading (property)")
                else:
                    print("   ‚ùå PROBLEMA: SessionOrchestrator carrega no __init__")
            
            print("\n‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!")
            print("\nO que foi feito:")
            print("1. Removida chamada autom√°tica de _ensure_orchestrator_loaded() do __init__")
            print("2. O orchestrator agora ser√° carregado sob demanda (lazy loading)")
            print("3. Isso quebra o loop circular de inicializa√ß√£o")
            
            print("\nüìù PR√ìXIMOS PASSOS:")
            print("1. Reinicie o servidor Flask")
            print("2. O sistema n√£o deve mais travar na inicializa√ß√£o")
            print("3. O orchestrator ser√° carregado quando necess√°rio")
            
        else:
            print("‚ö†Ô∏è C√≥digo esperado n√£o encontrado, arquivo pode j√° ter sido modificado")
    else:
        print("‚úÖ Arquivo j√° est√° corrigido ou tem estrutura diferente")

if __name__ == "__main__":
    corrigir_loop() 