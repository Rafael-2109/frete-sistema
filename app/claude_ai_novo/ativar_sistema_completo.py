#!/usr/bin/env python3
"""
üöÄ ATIVADOR DO SISTEMA COMPLETO - Claude AI Novo
================================================

Este script ativa todas as capacidades reais do sistema:
- Dados reais do banco de dados
- Claude API real
- Todas as integra√ß√µes
- Sistema de cache
- Monitoramento completo
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Adicionar o diret√≥rio raiz ao path
project_root = Path(__file__).resolve().parent.parent.parent
sys.path.insert(0, str(project_root))

class SistemaCompleto:
    """Ativador do sistema completo com todas as capacidades"""
    
    def __init__(self):
        self.config_applied = False
        self.components_activated = []
        self.errors = []
        
    def configurar_ambiente(self):
        """Configura todas as vari√°veis de ambiente necess√°rias"""
        logger.info("üîß Configurando ambiente...")
        
        # 1. Ativar sistema novo
        os.environ['USE_NEW_CLAUDE_SYSTEM'] = 'true'
        logger.info("‚úÖ Sistema novo ativado")
        
        # 2. Ativar dados reais
        os.environ['USE_REAL_DATA'] = 'true'
        logger.info("‚úÖ Dados reais ativados")
        
        # 3. Ativar Claude real
        os.environ['USE_REAL_CLAUDE'] = 'true'
        
        # Verificar se API key est√° configurada
        if not os.getenv('ANTHROPIC_API_KEY'):
            logger.warning("‚ö†Ô∏è ANTHROPIC_API_KEY n√£o configurada!")
            logger.info("üí° Configure com: export ANTHROPIC_API_KEY='sua-chave-aqui'")
        else:
            logger.info("‚úÖ Claude API real ativada")
        
        # 4. Ativar cache Redis (se dispon√≠vel)
        if os.getenv('REDIS_URL'):
            os.environ['USE_REDIS_CACHE'] = 'true'
            logger.info("‚úÖ Cache Redis ativado")
        else:
            logger.info("üí° Redis n√£o configurado - usando cache em mem√≥ria")
        
        # 5. Configurar modo de produ√ß√£o
        os.environ['FLASK_ENV'] = 'production'
        os.environ['SYSTEM_MODE'] = 'production'
        logger.info("‚úÖ Modo produ√ß√£o ativado")
        
        self.config_applied = True
    
    async def ativar_componentes(self):
        """Ativa todos os componentes do sistema"""
        logger.info("\nüöÄ Ativando componentes do sistema...")
        
        try:
            # 1. Verificar banco de dados
            logger.info("\nüìä Verificando conex√£o com banco de dados...")
            from app import db
            from sqlalchemy import text
            
            with db.engine.connect() as conn:
                result = conn.execute(text("SELECT 1"))
                logger.info("‚úÖ Banco de dados conectado")
                self.components_activated.append("database")
        except Exception as e:
            logger.error(f"‚ùå Erro no banco de dados: {e}")
            self.errors.append(f"Database: {e}")
        
        try:
            # 2. Verificar Claude API
            logger.info("\nü§ñ Verificando Claude API...")
            from app.claude_ai_novo.integration.external_api_integration import ClaudeAPIClient
            
            if os.getenv('ANTHROPIC_API_KEY'):
                client = ClaudeAPIClient.from_environment()
                if client.validate_connection():
                    logger.info("‚úÖ Claude API conectada e validada")
                    self.components_activated.append("claude_api")
                else:
                    logger.warning("‚ö†Ô∏è Claude API n√£o validada")
            else:
                logger.warning("‚ö†Ô∏è ANTHROPIC_API_KEY n√£o configurada")
                
        except Exception as e:
            logger.error(f"‚ùå Erro na Claude API: {e}")
            self.errors.append(f"Claude API: {e}")
        
        try:
            # 3. Ativar Integration Manager
            logger.info("\nüîó Ativando Integration Manager...")
            from app.claude_ai_novo.integration.integration_manager import IntegrationManager
            
            integration = IntegrationManager()
            result = await integration.initialize_all_modules()
            
            if result.get('success'):
                logger.info(f"‚úÖ Integration Manager ativo: {result['modules_active']}/{result['modules_loaded']} m√≥dulos")
                self.components_activated.append("integration_manager")
            else:
                logger.warning(f"‚ö†Ô∏è Integration Manager com problemas: {result}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro no Integration Manager: {e}")
            self.errors.append(f"Integration Manager: {e}")
        
        try:
            # 4. Ativar Orchestrator Manager
            logger.info("\nüé≠ Ativando Orchestrator Manager...")
            from app.claude_ai_novo.orchestrators.orchestrator_manager import get_orchestrator_manager
            
            orchestrator = get_orchestrator_manager()
            if orchestrator.health_check():
                logger.info("‚úÖ Orchestrator Manager saud√°vel")
                self.components_activated.append("orchestrator_manager")
            else:
                logger.warning("‚ö†Ô∏è Orchestrator Manager com problemas")
                
        except Exception as e:
            logger.error(f"‚ùå Erro no Orchestrator Manager: {e}")
            self.errors.append(f"Orchestrator Manager: {e}")
        
        try:
            # 5. Verificar dados reais
            logger.info("\nüìà Verificando acesso a dados reais...")
            from app.claude_ai_novo.utils.data_manager import DataManager
            
            data_manager = DataManager()
            await data_manager.initialize()
            
            # Testar carregamento de dados
            test_data = data_manager.provide_data('clientes')
            if 'error' not in test_data:
                logger.info("‚úÖ Acesso a dados reais confirmado")
                self.components_activated.append("real_data")
            else:
                logger.warning(f"‚ö†Ô∏è Dados reais n√£o acess√≠veis: {test_data}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro nos dados reais: {e}")
            self.errors.append(f"Real Data: {e}")
    
    async def testar_sistema_completo(self):
        """Testa o sistema completo com uma query real"""
        logger.info("\nüß™ Testando sistema completo...")
        
        try:
            from app.claude_transition import get_transition_manager
            
            manager = get_transition_manager()
            
            # Queries de teste
            test_queries = [
                "Quantos pedidos temos hoje?",
                "Status das entregas do Atacad√£o",
                "Gerar relat√≥rio de fretes da semana"
            ]
            
            for query in test_queries:
                logger.info(f"\nüìù Testando: '{query}'")
                
                result = await manager.processar_consulta(query)
                
                if result and result != "{}" and len(str(result)) > 10:
                    logger.info(f"‚úÖ Resposta v√°lida: {str(result)[:100]}...")
                else:
                    logger.warning(f"‚ö†Ô∏è Resposta inv√°lida: {result}")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro no teste completo: {e}")
            self.errors.append(f"System Test: {e}")
    
    def gerar_relatorio(self):
        """Gera relat√≥rio final de ativa√ß√£o"""
        logger.info("\n" + "="*60)
        logger.info("üìä RELAT√ìRIO DE ATIVA√á√ÉO DO SISTEMA")
        logger.info("="*60)
        
        logger.info(f"\n‚úÖ Componentes Ativados: {len(self.components_activated)}")
        for comp in self.components_activated:
            logger.info(f"   ‚Ä¢ {comp}")
        
        if self.errors:
            logger.info(f"\n‚ùå Erros Encontrados: {len(self.errors)}")
            for error in self.errors:
                logger.info(f"   ‚Ä¢ {error}")
        
        # Recomenda√ß√µes
        logger.info("\nüí° RECOMENDA√á√ïES:")
        
        if 'claude_api' not in self.components_activated:
            logger.info("   1. Configure ANTHROPIC_API_KEY para ativar Claude real")
            
        if 'database' not in self.components_activated:
            logger.info("   2. Verifique DATABASE_URL para conectar ao banco real")
            
        if 'real_data' not in self.components_activated:
            logger.info("   3. Configure USE_REAL_DATA=true para usar dados reais")
        
        if not self.errors:
            logger.info("\nüéâ SISTEMA TOTALMENTE ATIVADO E FUNCIONAL!")
        else:
            logger.info("\n‚ö†Ô∏è Sistema parcialmente ativado - verifique os erros acima")
        
        logger.info("\n" + "="*60)

async def main():
    """Fun√ß√£o principal"""
    ativador = SistemaCompleto()
    
    # 1. Configurar ambiente
    ativador.configurar_ambiente()
    
    # 2. Ativar componentes
    await ativador.ativar_componentes()
    
    # 3. Testar sistema
    await ativador.testar_sistema_completo()
    
    # 4. Gerar relat√≥rio
    ativador.gerar_relatorio()

if __name__ == "__main__":
    print("""
    üöÄ ATIVADOR DO SISTEMA COMPLETO - Claude AI Novo
    ================================================
    
    Este script vai ativar todas as capacidades reais do sistema.
    
    IMPORTANTE: Certifique-se de ter configurado:
    - ANTHROPIC_API_KEY (para Claude real)
    - DATABASE_URL (para banco de dados real)
    - REDIS_URL (opcional, para cache)
    
    Pressione ENTER para continuar ou CTRL+C para cancelar...
    """)
    
    input()
    
    # Executar ativa√ß√£o
    asyncio.run(main()) 