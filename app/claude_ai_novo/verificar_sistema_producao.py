"""
Script para verificar qual sistema Claude AI est√° sendo usado
"""

import os
import sys

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

def verificar_configuracao():
    """Verifica a configura√ß√£o do sistema"""
    print("=" * 60)
    print("üîç VERIFICA√á√ÉO DO SISTEMA CLAUDE AI")
    print("=" * 60)
    
    # Verificar vari√°vel de ambiente
    use_new = os.getenv('USE_NEW_CLAUDE_SYSTEM', 'false').lower()
    print(f"\nüìå USE_NEW_CLAUDE_SYSTEM = '{use_new}'")
    
    if use_new == 'true':
        print("‚úÖ Sistema NOVO est√° configurado para ser usado")
        print("   ‚Üí app.claude_ai_novo")
        print("   ‚Üí OrchestratorManager")
    else:
        print("‚úÖ Sistema ANTIGO est√° configurado para ser usado (padr√£o)")
        print("   ‚Üí app.claude_ai")
        print("   ‚Üí ClaudeRealIntegration")
    
    # Testar importa√ß√£o
    print("\nüß™ Testando importa√ß√£o do sistema configurado...")
    
    try:
        from app.claude_transition import get_transition_manager
        manager = get_transition_manager()
        
        print(f"‚úÖ Sistema ativo: {manager.sistema_ativo}")
        
        # Verificar qual classe foi carregada
        if manager.claude:
            print(f"‚úÖ Classe carregada: {manager.claude.__class__.__name__}")
            print(f"‚úÖ M√≥dulo: {manager.claude.__class__.__module__}")
        else:
            print("‚ùå Nenhum sistema foi carregado")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar: {e}")
        import traceback
        traceback.print_exc()

def verificar_loop_no_sistema():
    """Verifica onde o loop pode estar acontecendo"""
    print("\n" + "=" * 60)
    print("üîÑ VERIFICA√á√ÉO DO LOOP INFINITO")
    print("=" * 60)
    
    use_new = os.getenv('USE_NEW_CLAUDE_SYSTEM', 'false').lower()
    
    if use_new == 'true':
        print("\n‚ö†Ô∏è  SISTEMA NOVO ATIVO - Loop pode estar em:")
        print("   1. app/claude_ai_novo/orchestrators/session_orchestrator.py")
        print("   2. app/claude_ai_novo/integration/integration_manager.py")
        print("\nüí° SOLU√á√ÉO: Aplicar corre√ß√µes no sistema NOVO")
        print("   ‚Üí As corre√ß√µes no sistema antigo N√ÉO resolver√£o o problema")
    else:
        print("\n‚ö†Ô∏è  SISTEMA ANTIGO ATIVO - Loop pode estar em:")
        print("   1. app/claude_ai/claude_real_integration.py")
        print("   2. app/claude_ai/enhanced_claude_integration.py")
        print("\nüí° SOLU√á√ÉO: As corre√ß√µes j√° aplicadas devem funcionar")

def main():
    """Executa todas as verifica√ß√µes"""
    verificar_configuracao()
    verificar_loop_no_sistema()
    
    print("\n" + "=" * 60)
    print("üìã RESUMO")
    print("=" * 60)
    
    use_new = os.getenv('USE_NEW_CLAUDE_SYSTEM', 'false').lower()
    
    if use_new == 'true':
        print("\nüö® ATEN√á√ÉO: Sistema NOVO est√° ativo!")
        print("   ‚Üí Corre√ß√µes devem ser aplicadas em app/claude_ai_novo/")
        print("   ‚Üí Loop est√° no SessionOrchestrator do sistema novo")
    else:
        print("\n‚úÖ Sistema ANTIGO est√° ativo")
        print("   ‚Üí Corre√ß√µes j√° aplicadas devem funcionar")
        print("   ‚Üí Loop foi corrigido no enhanced_claude_integration.py")

if __name__ == "__main__":
    # Simular diferentes valores da vari√°vel
    print("\nüß™ TESTE 1: Sem vari√°vel definida (padr√£o)")
    os.environ.pop('USE_NEW_CLAUDE_SYSTEM', None)
    main()
    
    print("\n\nüß™ TESTE 2: Com USE_NEW_CLAUDE_SYSTEM=true")
    os.environ['USE_NEW_CLAUDE_SYSTEM'] = 'true'
    main()
    
    print("\n\nüß™ TESTE 3: Com USE_NEW_CLAUDE_SYSTEM=false")
    os.environ['USE_NEW_CLAUDE_SYSTEM'] = 'false'
    main() 