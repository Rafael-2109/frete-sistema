"""
Testes para prevenir loops infinitos no sistema Claude AI Novo
Simula comportamento real de produ√ß√£o para detectar loops ANTES do commit
"""

import unittest
import sys
import os
import time
import threading
from unittest.mock import Mock, patch, MagicMock
import json

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..')))

from app.claude_ai_novo.integration.integration_manager import IntegrationManager
from app.claude_ai_novo.orchestrators.orchestrator_manager import OrchestratorManager


class TestLoopPrevention(unittest.TestCase):
    """Testes para detectar e prevenir loops infinitos"""
    
    def setUp(self):
        """Configura√ß√£o inicial dos testes"""
        self.integration_manager = IntegrationManager()
        self.orchestrator_manager = OrchestratorManager()
        
        # Contador de chamadas para detectar loops
        self.call_count = {
            'integration': 0,
            'orchestrator': 0
        }
        
        # Flag para timeout
        self.timeout_reached = False
        
    def test_direct_loop_detection(self):
        """Testa detec√ß√£o direta de loop entre Integration e Orchestrator"""
        print("\nüîç Testando detec√ß√£o direta de loop...")
        
        # Simula query que causaria loop
        query = "Como est√£o as entregas do Atacad√£o?"
        context = {"user_id": "test", "session_id": "test123"}
        
        # Intercepta chamadas para contar
        original_integration = self.integration_manager.process_unified_query
        original_orchestrator = self.orchestrator_manager.process_query
        
        def count_integration_calls(*args, **kwargs):
            self.call_count['integration'] += 1
            if self.call_count['integration'] > 2:
                self.fail("Loop detectado: IntegrationManager chamado mais de 2 vezes!")
            return original_integration(*args, **kwargs)
            
        def count_orchestrator_calls(*args, **kwargs):
            self.call_count['orchestrator'] += 1
            if self.call_count['orchestrator'] > 2:
                self.fail("Loop detectado: OrchestratorManager chamado mais de 2 vezes!")
            return original_orchestrator(*args, **kwargs)
        
        # Aplica interceptadores
        self.integration_manager.process_unified_query = count_integration_calls
        self.orchestrator_manager.process_query = count_orchestrator_calls
        
        # Executa query
        try:
            response = self.integration_manager.process_unified_query(query, context)
            
            # Verifica se n√£o houve loop
            self.assertLessEqual(self.call_count['integration'], 2, 
                               "IntegrationManager foi chamado muitas vezes")
            self.assertLessEqual(self.call_count['orchestrator'], 2,
                               "OrchestratorManager foi chamado muitas vezes")
            
            # Verifica se resposta √© v√°lida
            self.assertIsNotNone(response)
            self.assertIn('response', response)
            
            print(f"‚úÖ Loop prevenido com sucesso!")
            print(f"   - Chamadas Integration: {self.call_count['integration']}")
            print(f"   - Chamadas Orchestrator: {self.call_count['orchestrator']}")
            
        except Exception as e:
            self.fail(f"Erro durante teste: {str(e)}")
    
    def test_timeout_protection(self):
        """Testa prote√ß√£o contra travamento com timeout"""
        print("\n‚è±Ô∏è Testando prote√ß√£o de timeout...")
        
        def run_with_timeout():
            """Executa query com timeout"""
            try:
                query = "Status do sistema"
                context = {"user_id": "test"}
                
                # Simula processamento
                response = self.integration_manager.process_unified_query(query, context)
                
                # Se chegou aqui, n√£o travou
                self.assertIsNotNone(response)
                
            except Exception as e:
                # Qualquer erro √© melhor que travar
                pass
        
        # Cria thread com timeout
        thread = threading.Thread(target=run_with_timeout)
        thread.daemon = True
        thread.start()
        
        # Aguarda no m√°ximo 5 segundos
        thread.join(timeout=5.0)
        
        if thread.is_alive():
            self.fail("Sistema travou! Timeout de 5 segundos excedido")
        else:
            print("‚úÖ Sistema respondeu dentro do timeout")
    
    def test_circular_reference_detection(self):
        """Testa detec√ß√£o de refer√™ncias circulares"""
        print("\nüîÑ Testando detec√ß√£o de refer√™ncias circulares...")
        
        # Mock para simular comportamento problem√°tico
        with patch.object(self.orchestrator_manager, '_execute_integration_operation') as mock_exec:
            # Simula tentativa de chamar integration_manager de volta
            mock_exec.side_effect = lambda *args, **kwargs: {
                'error': 'Refer√™ncia circular detectada',
                'response': 'Opera√ß√£o bloqueada por seguran√ßa'
            }
            
            query = "An√°lise complexa que requer integra√ß√£o"
            response = self.orchestrator_manager.process_query(query, {})
            
            # Verifica se n√£o causou loop
            self.assertIsNotNone(response)
            print("‚úÖ Refer√™ncia circular prevenida com sucesso")
    
    def test_real_production_scenario(self):
        """Simula cen√°rio real de produ√ß√£o com dados reais"""
        print("\nüè≠ Simulando cen√°rio de produ√ß√£o...")
        
        # Queries reais que causaram problemas
        problematic_queries = [
            "Como est√£o as entregas do Atacad√£o?",
            "Mostre os fretes pendentes",
            "Status das entregas de hoje",
            "Relat√≥rio de pedidos em atraso"
        ]
        
        for query in problematic_queries:
            print(f"\n   Testando: '{query}'")
            
            # Reset contador
            self.call_count = {'integration': 0, 'orchestrator': 0}
            
            # Simula contexto real
            context = {
                "user_id": "vendedor123",
                "session_id": "sess_" + str(int(time.time())),
                "user_profile": "vendedor",
                "vendedor_codigo": "V001"
            }
            
            # Monitora chamadas
            start_time = time.time()
            
            try:
                response = self.integration_manager.process_unified_query(query, context)
                
                elapsed_time = time.time() - start_time
                
                # Valida√ß√µes
                self.assertLess(elapsed_time, 3.0, 
                              f"Query demorou muito: {elapsed_time:.2f}s")
                self.assertIsNotNone(response)
                self.assertIn('response', response)
                
                print(f"   ‚úÖ OK - Tempo: {elapsed_time:.2f}s")
                
            except Exception as e:
                self.fail(f"Erro na query '{query}': {str(e)}")
    
    def test_stress_concurrent_requests(self):
        """Testa m√∫ltiplas requisi√ß√µes concorrentes"""
        print("\nüî• Testando requisi√ß√µes concorrentes...")
        
        results = []
        errors = []
        
        def make_request(idx):
            """Faz uma requisi√ß√£o"""
            try:
                query = f"Status do pedido {idx}"
                response = self.integration_manager.process_unified_query(
                    query, 
                    {"user_id": f"user_{idx}"}
                )
                results.append(response)
            except Exception as e:
                errors.append(str(e))
        
        # Cria 10 threads concorrentes
        threads = []
        for i in range(10):
            t = threading.Thread(target=make_request, args=(i,))
            threads.append(t)
            t.start()
        
        # Aguarda todas terminarem
        for t in threads:
            t.join(timeout=5.0)
        
        # Verifica resultados
        self.assertEqual(len(errors), 0, f"Erros encontrados: {errors}")
        self.assertEqual(len(results), 10, "Nem todas as requisi√ß√µes completaram")
        
        print(f"‚úÖ {len(results)} requisi√ß√µes concorrentes processadas sem loops")
    
    def test_anti_loop_response_quality(self):
        """Testa qualidade das respostas anti-loop"""
        print("\nüìù Testando qualidade das respostas anti-loop...")
        
        # For√ßa situa√ß√£o de loop
        query = "Como est√£o as entregas do Atacad√£o?"
        context = {"_from_orchestrator": True}  # Simula flag de loop
        
        response = self.integration_manager.process_unified_query(query, context)
        
        # Verifica qualidade da resposta
        self.assertIsNotNone(response)
        self.assertIn('response', response)
        
        response_text = response['response']
        
        # Verifica se tem informa√ß√µes √∫teis
        self.assertIn('Atacad√£o', response_text, "Resposta deve mencionar o cliente")
        self.assertTrue(
            any(word in response_text.lower() for word in ['entrega', 'pedido', 'status']),
            "Resposta deve ter contexto relevante"
        )
        
        print("‚úÖ Resposta anti-loop tem qualidade adequada")
        print(f"   Resposta: {response_text[:100]}...")


def run_pre_commit_tests():
    """Executa todos os testes antes do commit"""
    print("\n" + "="*60)
    print("üöÄ EXECUTANDO TESTES PR√â-COMMIT")
    print("="*60)
    
    # Cria suite de testes
    suite = unittest.TestLoader().loadTestsFromTestCase(TestLoopPrevention)
    
    # Executa testes
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # Resumo
    print("\n" + "="*60)
    if result.wasSuccessful():
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("   Sistema seguro para commit")
        return True
    else:
        print("‚ùå TESTES FALHARAM!")
        print(f"   Erros: {len(result.errors)}")
        print(f"   Falhas: {len(result.failures)}")
        print("\n‚ö†Ô∏è  N√ÉO FA√áA COMMIT! Corrija os problemas primeiro.")
        return False


if __name__ == '__main__':
    # Executa testes pr√©-commit
    success = run_pre_commit_tests()
    
    # Retorna c√≥digo de sa√≠da apropriado
    sys.exit(0 if success else 1) 