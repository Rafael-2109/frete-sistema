#!/usr/bin/env python3
"""
üîç DIAGN√ìSTICO: Conex√£o Loader ‚Üí Provider
========================================
"""

import logging
import sys
import os

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def main():
    """Diagnostica problemas na conex√£o Loader ‚Üí Provider"""
    print("\n" + "="*60)
    print("üîç DIAGN√ìSTICO: Conex√£o Loader ‚Üí Provider")
    print("="*60 + "\n")
    
    try:
        # 1. Verificar se os m√≥dulos podem ser importados
        print("1Ô∏è‚É£ Importando m√≥dulos...")
        
        try:
            from app.claude_ai_novo.loaders import LoaderManager
            print("‚úÖ LoaderManager importado com sucesso")
        except Exception as e:
            print(f"‚ùå Erro ao importar LoaderManager: {e}")
            return
            
        try:
            from app.claude_ai_novo.providers import DataProvider, ProviderManager, get_provider_manager
            print("‚úÖ Providers importados com sucesso")
        except Exception as e:
            print(f"‚ùå Erro ao importar Providers: {e}")
            return
            
        # 2. Verificar estrutura do ProviderManager
        print("\n2Ô∏è‚É£ Analisando ProviderManager...")
        
        provider_manager = get_provider_manager()
        print(f"   Tipo: {type(provider_manager)}")
        print(f"   Atributos: {[attr for attr in dir(provider_manager) if not attr.startswith('_')]}")
        
        # Verificar se tem DataProvider
        if hasattr(provider_manager, 'data_provider'):
            print(f"‚úÖ ProviderManager tem data_provider: {type(provider_manager.data_provider)}")
            
            # Verificar se DataProvider tem set_loader
            if hasattr(provider_manager.data_provider, 'set_loader'):
                print("‚úÖ DataProvider tem m√©todo set_loader")
            else:
                print("‚ùå DataProvider N√ÉO tem m√©todo set_loader")
        else:
            print("‚ùå ProviderManager N√ÉO tem data_provider")
            
        # 3. Testar conex√£o direta
        print("\n3Ô∏è‚É£ Testando conex√£o direta...")
        
        loader = LoaderManager()
        data_provider = DataProvider()
        
        # Verificar estado inicial
        print(f"   Loader inicial no DataProvider: {getattr(data_provider, 'loader', 'N√ÉO EXISTE')}")
        
        # Fazer conex√£o
        data_provider.set_loader(loader)
        print("‚úÖ set_loader() executado")
        
        # Verificar estado ap√≥s conex√£o
        print(f"   Loader ap√≥s conex√£o: {getattr(data_provider, 'loader', 'N√ÉO EXISTE')}")
        
        # 4. Verificar como o orchestrator v√™ os componentes
        print("\n4Ô∏è‚É£ Verificando componentes no Orchestrator...")
        
        from app.claude_ai_novo.orchestrators import get_main_orchestrator
        orchestrator = get_main_orchestrator()
        
        print(f"   Componentes registrados: {list(orchestrator.components.keys())}")
        
        if 'providers' in orchestrator.components:
            provider_component = orchestrator.components['providers']
            print(f"   Tipo do provider: {type(provider_component)}")
            print(f"   √â ProviderManager? {isinstance(provider_component, ProviderManager)}")
            
            # Se for ProviderManager, precisamos acessar o DataProvider dentro dele
            if hasattr(provider_component, 'data_provider'):
                print("   ‚úÖ Provider tem data_provider interno")
                data_provider_interno = provider_component.data_provider
                
                if hasattr(data_provider_interno, 'set_loader'):
                    print("   ‚úÖ DataProvider interno tem set_loader")
                else:
                    print("   ‚ùå DataProvider interno N√ÉO tem set_loader")
            else:
                print("   ‚ùå Provider N√ÉO tem data_provider interno")
                
        # 5. Propor solu√ß√£o
        print("\n5Ô∏è‚É£ DIAGN√ìSTICO FINAL:")
        print("-" * 40)
        
        if isinstance(orchestrator.components.get('providers'), ProviderManager):
            print("‚ùó PROBLEMA IDENTIFICADO:")
            print("   O Orchestrator registra ProviderManager, n√£o DataProvider diretamente.")
            print("   A conex√£o deveria ser: loader ‚Üí provider_manager.data_provider")
            print("\nüìù SOLU√á√ÉO PROPOSTA:")
            print("   Modificar _connect_modules() para:")
            print("   1. Verificar se provider √© ProviderManager")
            print("   2. Acessar provider.data_provider")
            print("   3. Chamar data_provider.set_loader()")
        else:
            print("‚úÖ Estrutura parece correta, verificar outros problemas")
            
    except Exception as e:
        logger.error(f"‚ùå Erro durante diagn√≥stico: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 