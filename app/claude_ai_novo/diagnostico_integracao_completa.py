#!/usr/bin/env python3
"""
üîç DIAGN√ìSTICO COMPLETO DA INTEGRA√á√ÉO CLAUDE AI
==============================================

Testa toda a cadeia de integra√ß√£o entre sistema antigo e novo.
"""

import sys
import os
import traceback
from datetime import datetime

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def teste_sistema_antigo():
    """Testa se o sistema antigo funciona corretamente"""
    try:
        print("üîß Testando sistema antigo...")
        from app.claude_ai.claude_real_integration import processar_com_claude_real
        
        # Teste b√°sico
        resultado = processar_com_claude_real("Teste b√°sico", {"user_id": "test"})
        print(f"‚úÖ Sistema antigo funcional: {len(resultado)} caracteres")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Sistema antigo falhou: {e}")
        traceback.print_exc()
        return False

def teste_sistema_novo():
    """Testa se o sistema novo funciona corretamente"""
    try:
        print("üöÄ Testando sistema novo...")
        from app.claude_ai_novo.integration.external_api_integration import get_claude_integration
        
        # Obter integra√ß√£o
        integration = get_claude_integration()
        print(f"‚úÖ Integra√ß√£o obtida: {type(integration)}")
        
        # Testar status
        status = integration.get_system_status()
        print(f"‚úÖ Status do sistema: {status.get('system_ready', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Sistema novo falhou: {e}")
        traceback.print_exc()
        return False

def teste_interface_transicao():
    """Testa a interface de transi√ß√£o"""
    try:
        print("üîÑ Testando interface de transi√ß√£o...")
        from app.claude_transition import get_claude_transition, processar_consulta_transicao
        
        # Obter interface
        transition = get_claude_transition()
        print(f"‚úÖ Interface obtida: {transition.sistema_ativo}")
        
        # Testar consulta
        resultado = processar_consulta_transicao("Teste de transi√ß√£o", {"user_id": "test"})
        print(f"‚úÖ Consulta processada: {len(resultado)} caracteres")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Interface de transi√ß√£o falhou: {e}")
        traceback.print_exc()
        return False

def teste_learning_core():
    """Testa se o learning core funciona"""
    try:
        print("üß† Testando learning core...")
        from app.claude_ai_novo.learners.learning_core import get_lifelong_learning
        
        # Obter learning core
        learning = get_lifelong_learning()
        print(f"‚úÖ Learning core obtido: {type(learning)}")
        
        # Testar aplica√ß√£o de conhecimento
        conhecimento = learning.aplicar_conhecimento("Teste de conhecimento")
        print(f"‚úÖ Conhecimento aplicado: {conhecimento.get('confianca_geral', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Learning core falhou: {e}")
        traceback.print_exc()
        return False

def teste_orchestrators():
    """Testa se os orchestrators funcionam"""
    try:
        print("üéº Testando orchestrators...")
        from app.claude_ai_novo.orchestrators.orchestrator_manager import get_orchestrator_manager
        
        # Obter orchestrator
        orchestrator = get_orchestrator_manager()
        print(f"‚úÖ Orchestrator obtido: {type(orchestrator)}")
        
        # Testar status
        status = orchestrator.get_system_status()
        print(f"‚úÖ Status orchestrator: {status.get('total_orchestrators', 0)} orchestrators")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Orchestrators falharam: {e}")
        traceback.print_exc()
        return False

def teste_rotas_producao():
    """Testa se as rotas de produ√ß√£o funcionam"""
    try:
        print("üåê Testando rotas de produ√ß√£o...")
        
        # Simular requisi√ß√£o
        from app.claude_transition import processar_consulta_transicao
        resultado = processar_consulta_transicao("Como est√£o as entregas?", {
            "user_id": 1,
            "username": "teste",
            "perfil": "admin"
        })
        
        print(f"‚úÖ Rota de produ√ß√£o funcional: {len(resultado)} caracteres")
        
        # Verificar se n√£o tem erro espec√≠fico
        if "No module named 'app.claude_ai_novo.intelligence'" in resultado:
            print("‚ùå ERRO ESPEC√çFICO DETECTADO: M√≥dulo intelligence n√£o encontrado")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Rotas de produ√ß√£o falharam: {e}")
        traceback.print_exc()
        return False

def main():
    """Executa diagn√≥stico completo"""
    print("üîç DIAGN√ìSTICO COMPLETO DA INTEGRA√á√ÉO CLAUDE AI")
    print("=" * 60)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    testes = [
        ("Sistema Antigo", teste_sistema_antigo),
        ("Sistema Novo", teste_sistema_novo),
        ("Interface Transi√ß√£o", teste_interface_transicao),
        ("Learning Core", teste_learning_core),
        ("Orchestrators", teste_orchestrators),
        ("Rotas Produ√ß√£o", teste_rotas_producao)
    ]
    
    resultados = []
    for nome, teste_func in testes:
        print(f"\nüìã TESTE: {nome}")
        print("-" * 30)
        
        try:
            resultado = teste_func()
            resultados.append((nome, resultado))
            status = "‚úÖ SUCESSO" if resultado else "‚ùå FALHA"
            print(f"üéØ {status}")
            
        except Exception as e:
            print(f"‚ùå ERRO CR√çTICO: {e}")
            resultados.append((nome, False))
    
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL:")
    print("=" * 60)
    
    sucessos = 0
    for nome, resultado in resultados:
        status = "‚úÖ SUCESSO" if resultado else "‚ùå FALHA"
        print(f"  {status}: {nome}")
        if resultado:
            sucessos += 1
    
    taxa_sucesso = sucessos / len(resultados) * 100
    print(f"\nüéØ TAXA DE SUCESSO: {sucessos}/{len(resultados)} ({taxa_sucesso:.1f}%)")
    
    if taxa_sucesso == 100:
        print("üéâ TODOS OS TESTES PASSARAM - SISTEMA TOTALMENTE FUNCIONAL!")
        print("‚úÖ PROBLEMA DOS LOGS RESOLVIDO")
    elif taxa_sucesso >= 80:
        print("‚úÖ SISTEMA MAJORITARIAMENTE FUNCIONAL")
        print("‚ö†Ô∏è ALGUMAS MELHORIAS NECESS√ÅRIAS")
    else:
        print("‚ùå SISTEMA COM PROBLEMAS CR√çTICOS")
        print("üîß CORRE√á√ïES NECESS√ÅRIAS")
    
    print(f"\n‚è∞ Conclu√≠do em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    return taxa_sucesso == 100

if __name__ == "__main__":
    main() 