#!/usr/bin/env python3
"""
üéØ MAPEADOR DE PROBLEMAS REAIS
==============================

Detecta apenas problemas CONFIRMADOS, n√£o suspeitos.
Ignora m√©todos comuns como logger, get, set, etc.
"""

import ast
import os
from pathlib import Path
from typing import Dict, List, Set, Tuple, Optional
import json
from datetime import datetime

# M√©todos/atributos que sabemos que existem
KNOWN_VALID = {
    # Logging
    'logger', 'info', 'debug', 'error', 'warning', 'critical',
    
    # Python built-ins
    'get', 'set', 'items', 'keys', 'values', 'append', 'extend',
    'strip', 'split', 'join', 'format', 'lower', 'upper', 'replace',
    'startswith', 'endswith', 'find', 'encode', 'decode',
    
    # SQLAlchemy
    'query', 'filter', 'filter_by', 'first', 'all', 'count',
    'order_by', 'limit', 'offset', 'delete', 'update',
    'add', 'commit', 'rollback', 'flush',
    
    # Flask
    'route', 'before_request', 'after_request', 'errorhandler',
    'json', 'args', 'form', 'files', 'method', 'headers',
    
    # Common
    'id', 'name', 'value', 'data', 'result', 'response',
    'status', 'message', 'error', 'success', 'config'
}

# Objetos que sabemos que existem
KNOWN_OBJECTS = {
    'self', 'cls', 'db', 'app', 'request', 'session', 'g',
    'current_user', 'login_user', 'logout_user',
    'json', 'os', 'sys', 'datetime', 'time', 're'
}

# Padr√µes de problemas CONFIRMADOS que queremos encontrar
REAL_PROBLEMS = {
    'methods': {
        # REMOVIDOS - esses m√©todos existem, o problema √© que o objeto pode ser None
        # 'obter_readers': 'M√©todo n√£o existe no orchestrator',
        # 'verificar_saude_sistema': 'M√©todo n√£o existe no orchestrator',
        # 'validar_estrutura_readme': 'M√©todo n√£o existe em readme_reader',
        # 'obter_estatisticas_gerais': 'M√©todo n√£o existe em database_reader',
        'capture_interaction': 'M√©todo correto √© capture_feedback',
        'analisar_intencao': 'M√©todo correto √© _detectar_intencao_refinada'
    },
    'attributes': {
        'semantic_manager': 'Deve usar get_semantic_mapper()',
        # REMOVIDOS - esses s√£o problemas de verifica√ß√£o de None, n√£o de exist√™ncia
        # 'readers': 'Atributo n√£o existe no orchestrator',
        # 'readme_reader': 'Pode n√£o estar inicializado',
        # 'database_reader': 'Pode n√£o estar inicializado'
    }
}

class RealProblemFinder(ast.NodeVisitor):
    """Encontra apenas problemas REAIS, n√£o suspeitos"""
    
    def __init__(self, filename: str):
        self.filename = filename
        self.problems = []
        self.current_class = None
        self.current_function = None
        self.in_try_block = False
        
    def visit_ClassDef(self, node):
        old_class = self.current_class
        self.current_class = node.name
        self.generic_visit(node)
        self.current_class = old_class
        
    def visit_FunctionDef(self, node):
        old_func = self.current_function
        self.current_function = node.name
        self.generic_visit(node)
        self.current_function = old_func
        
    def visit_Try(self, node):
        old_try = self.in_try_block
        self.in_try_block = True
        self.generic_visit(node)
        self.in_try_block = old_try
        
    def visit_Attribute(self, node):
        """Verifica acessos a atributos"""
        if isinstance(node.value, ast.Name):
            obj_name = node.value.id
            attr_name = node.attr
            
            # Verificar se √© um problema conhecido
            if attr_name in REAL_PROBLEMS['methods']:
                self.problems.append({
                    'file': self.filename,
                    'line': node.lineno,
                    'type': 'method',
                    'object': obj_name,
                    'attribute': attr_name,
                    'problem': REAL_PROBLEMS['methods'][attr_name],
                    'context': f"{self.current_class}.{self.current_function}" if self.current_class else self.current_function,
                    'in_try': self.in_try_block
                })
            elif obj_name in REAL_PROBLEMS['attributes']:
                self.problems.append({
                    'file': self.filename,
                    'line': node.lineno,
                    'type': 'attribute',
                    'object': obj_name,
                    'attribute': attr_name,
                    'problem': REAL_PROBLEMS['attributes'][obj_name],
                    'context': f"{self.current_class}.{self.current_function}" if self.current_class else self.current_function,
                    'in_try': self.in_try_block
                })
                
        self.generic_visit(node)
        
    def visit_Name(self, node):
        """Verifica uso de vari√°veis"""
        if isinstance(node.ctx, ast.Load):
            var_name = node.id
            
            # Verificar se √© uma vari√°vel problem√°tica conhecida
            if var_name in REAL_PROBLEMS['attributes'] and var_name not in KNOWN_OBJECTS:
                self.problems.append({
                    'file': self.filename,
                    'line': node.lineno,
                    'type': 'variable',
                    'name': var_name,
                    'problem': REAL_PROBLEMS['attributes'][var_name],
                    'context': f"{self.current_class}.{self.current_function}" if self.current_class else self.current_function,
                    'in_try': self.in_try_block
                })
                
        self.generic_visit(node)

def find_real_problems():
    """Encontra apenas problemas REAIS no c√≥digo"""
    
    print("üéØ PROCURANDO APENAS PROBLEMAS REAIS")
    print("=" * 50)
    
    base_dir = Path(__file__).parent
    all_problems = []
    
    # Percorrer arquivos Python
    for root, dirs, files in os.walk(base_dir):
        # Ignorar diret√≥rios
        dirs[:] = [d for d in dirs if not d.startswith('.') and d != '__pycache__']
        
        for file in files:
            if file.endswith('.py') and not file.startswith('test_'):
                filepath = Path(root) / file
                relpath = filepath.relative_to(base_dir)
                
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    tree = ast.parse(content)
                    finder = RealProblemFinder(str(relpath))
                    finder.visit(tree)
                    
                    if finder.problems:
                        all_problems.extend(finder.problems)
                        
                except Exception as e:
                    print(f"‚ùå Erro ao analisar {relpath}: {e}")
    
    # Agrupar por tipo de problema
    problems_by_type = {}
    for problem in all_problems:
        key = f"{problem['type']}:{problem.get('attribute', problem.get('name', ''))}"
        if key not in problems_by_type:
            problems_by_type[key] = []
        problems_by_type[key].append(problem)
    
    # Gerar relat√≥rio
    report = ["# üéØ PROBLEMAS REAIS CONFIRMADOS\n"]
    report.append(f"**Data**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    report.append(f"**Total de problemas**: {len(all_problems)}\n")
    report.append(f"**Tipos √∫nicos**: {len(problems_by_type)}\n")
    report.append("\n---\n")
    
    # Problemas por tipo
    for problem_key, instances in sorted(problems_by_type.items()):
        problem_type, problem_name = problem_key.split(':', 1)
        
        report.append(f"\n## {problem_type.upper()}: `{problem_name}`\n")
        report.append(f"**Problema**: {instances[0]['problem']}\n")
        report.append(f"**Ocorr√™ncias**: {len(instances)}\n")
        report.append("\n### Localiza√ß√µes:\n")
        
        for inst in instances[:10]:  # M√°ximo 10 exemplos
            report.append(f"- `{inst['file']}:{inst['line']}` - {inst['context'] or 'm√≥dulo'}")
            if inst.get('in_try'):
                report.append(" ‚ö†Ô∏è (em try/except)")
            report.append("\n")
            
        if len(instances) > 10:
            report.append(f"- ... e mais {len(instances) - 10} ocorr√™ncias\n")
    
    # Sugest√µes de corre√ß√£o
    report.append("\n---\n\n## üîß CORRE√á√ïES SUGERIDAS\n")
    
    corrections = {
        'obter_readers': """
```python
# Em orchestrators/main_orchestrator.py ou session_orchestrator.py
def obter_readers(self):
    \"\"\"Obt√©m os readers dispon√≠veis\"\"\"
    from ..scanning import get_scanning_manager
    scanning_manager = get_scanning_manager()
    return {
        'readme': scanning_manager.get_readme_scanner(),
        'database': scanning_manager.get_database_scanner()
    }
```""",
        'verificar_saude_sistema': """
```python
# Em orchestrators/main_orchestrator.py
def verificar_saude_sistema(self) -> Dict[str, Any]:
    \"\"\"Verifica a sa√∫de do sistema\"\"\"
    return {
        'status': 'healthy',
        'components': self._verificar_componentes(),
        'timestamp': datetime.now().isoformat()
    }
```""",
        'semantic_manager': """
```python
# Substituir semantic_manager por:
from ..mappers import get_semantic_mapper
semantic_mapper = get_semantic_mapper()
```"""
    }
    
    for problem_name, correction in corrections.items():
        if any(problem_name in key for key in problems_by_type):
            report.append(f"\n### Corre√ß√£o para `{problem_name}`:\n")
            report.append(correction)
            report.append("\n")
    
    # Salvar relat√≥rio
    report_path = base_dir / "PROBLEMAS_REAIS_CONFIRMADOS.md"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write('\n'.join(report))
    
    # Salvar JSON
    json_path = base_dir / "problemas_reais.json"
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump({
            'problems': all_problems,
            'summary': {
                'total': len(all_problems),
                'by_type': {k: len(v) for k, v in problems_by_type.items()}
            },
            'timestamp': datetime.now().isoformat()
        }, f, indent=2, ensure_ascii=False)
    
    # Resumo no console
    print(f"\n‚úÖ An√°lise completa!")
    print(f"üìä Total de problemas REAIS: {len(all_problems)}")
    print(f"üìã Tipos √∫nicos: {len(problems_by_type)}")
    print(f"üìÑ Relat√≥rio salvo em: {report_path}")
    print(f"üìÑ JSON salvo em: {json_path}")
    
    # Mostrar resumo
    print("\nüéØ PROBLEMAS ENCONTRADOS:")
    for problem_key, instances in sorted(problems_by_type.items()):
        problem_type, problem_name = problem_key.split(':', 1)
        print(f"  - {problem_type}: {problem_name} ({len(instances)} ocorr√™ncias)")

if __name__ == "__main__":
    find_real_problems() 