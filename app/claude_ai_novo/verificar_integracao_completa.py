"""
üîç VERIFICADOR DE INTEGRA√á√ÉO COMPLETA
====================================

Verifica se os 3 m√≥dulos fundamentais est√£o integrados:
1. Scanner (descobre estrutura)
2. Mapper (define sem√¢ntica)  
3. Loader (carrega dados)
"""

import sys
import os
from pathlib import Path

# Adicionar caminho raiz ao PYTHONPATH
root_path = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_path))

import logging
from typing import Dict, Any, List, Optional
import json
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def verificar_scanner_manager():
    """Verifica ScanningManager e suas capacidades"""
    logger.info("\n" + "="*60)
    logger.info("üîç VERIFICANDO SCANNING MANAGER")
    logger.info("="*60)
    
    resultado = {
        'disponivel': False,
        'database_manager': False,
        'auto_mapper': False,
        'get_database_info': False,
        'metodos_descoberta': []
    }
    
    try:
        from app.claude_ai_novo.scanning import get_scanning_manager
        scanner = get_scanning_manager()
        resultado['disponivel'] = True
        logger.info("‚úÖ ScanningManager dispon√≠vel")
        
        # Verificar DatabaseManager
        if hasattr(scanner, 'database_manager') and scanner.database_manager:
            resultado['database_manager'] = True
            logger.info("‚úÖ DatabaseManager integrado")
            
            # Verificar auto_mapper
            if hasattr(scanner.database_manager, 'auto_mapper'):
                resultado['auto_mapper'] = True
                logger.info("‚úÖ AutoMapper dispon√≠vel via DatabaseManager")
            else:
                logger.warning("‚ùå AutoMapper N√ÉO dispon√≠vel no DatabaseManager")
        
        # Verificar m√©todo get_database_info
        if hasattr(scanner, 'get_database_info'):
            resultado['get_database_info'] = True
            logger.info("‚úÖ M√©todo get_database_info() dispon√≠vel")
        else:
            logger.warning("‚ùå M√©todo get_database_info() N√ÉO dispon√≠vel")
        
        # Listar m√©todos de descoberta
        metodos_descoberta = [m for m in dir(scanner) if m.startswith(('discover_', 'scan_'))]
        resultado['metodos_descoberta'] = metodos_descoberta
        logger.info(f"üìä M√©todos de descoberta: {len(metodos_descoberta)}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar ScanningManager: {e}")
    
    return resultado


def verificar_mapper_manager():
    """Verifica MapperManager e suas capacidades"""
    logger.info("\n" + "="*60)
    logger.info("üó∫Ô∏è VERIFICANDO MAPPER MANAGER")
    logger.info("="*60)
    
    resultado = {
        'disponivel': False,
        'mappers_dominio': [],
        'initialize_with_schema': False,
        'apply_auto_suggestions': False,
        'metodos_mapeamento': []
    }
    
    try:
        from app.claude_ai_novo.mappers import get_mapper_manager
        mapper = get_mapper_manager()
        resultado['disponivel'] = True
        logger.info("‚úÖ MapperManager dispon√≠vel")
        
        # Verificar mappers de dom√≠nio
        if hasattr(mapper, 'mappers'):
            resultado['mappers_dominio'] = list(mapper.mappers.keys())
            logger.info(f"‚úÖ Mappers de dom√≠nio: {resultado['mappers_dominio']}")
        
        # Verificar m√©todos de integra√ß√£o
        if hasattr(mapper, 'initialize_with_schema'):
            resultado['initialize_with_schema'] = True
            logger.info("‚úÖ M√©todo initialize_with_schema() dispon√≠vel")
        else:
            logger.warning("‚ùå M√©todo initialize_with_schema() N√ÉO dispon√≠vel")
            
        if hasattr(mapper, 'apply_auto_suggestions'):
            resultado['apply_auto_suggestions'] = True
            logger.info("‚úÖ M√©todo apply_auto_suggestions() dispon√≠vel")
        else:
            logger.warning("‚ùå M√©todo apply_auto_suggestions() N√ÉO dispon√≠vel")
        
        # Listar m√©todos de mapeamento
        metodos_mapeamento = [m for m in dir(mapper) if m.startswith(('map_', 'get_mapping', 'analisar_'))]
        resultado['metodos_mapeamento'] = metodos_mapeamento
        logger.info(f"üìä M√©todos de mapeamento: {len(metodos_mapeamento)}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar MapperManager: {e}")
    
    return resultado


def verificar_loader_manager():
    """Verifica LoaderManager e suas capacidades"""
    logger.info("\n" + "="*60)
    logger.info("üì¶ VERIFICANDO LOADER MANAGER")
    logger.info("="*60)
    
    resultado = {
        'disponivel': False,
        'loaders_dominio': [],
        'configure_with_scanner': False,
        'configure_with_mapper': False,
        'scanner_configurado': False,
        'mapper_configurado': False,
        'metodos_carregamento': []
    }
    
    try:
        from app.claude_ai_novo.loaders import get_loader_manager
        loader = get_loader_manager()
        resultado['disponivel'] = True
        logger.info("‚úÖ LoaderManager dispon√≠vel")
        
        # Verificar loaders de dom√≠nio
        if hasattr(loader, '_loader_mapping'):
            resultado['loaders_dominio'] = list(loader._loader_mapping.keys())
            logger.info(f"‚úÖ Loaders de dom√≠nio: {resultado['loaders_dominio']}")
        
        # Verificar m√©todos de configura√ß√£o
        if hasattr(loader, 'configure_with_scanner'):
            resultado['configure_with_scanner'] = True
            logger.info("‚úÖ M√©todo configure_with_scanner() dispon√≠vel")
            
            # Verificar se scanner est√° configurado
            if hasattr(loader, 'scanner') and loader.scanner:
                resultado['scanner_configurado'] = True
                logger.info("‚úÖ Scanner j√° est√° configurado no LoaderManager")
            else:
                logger.warning("‚ö†Ô∏è Scanner N√ÉO est√° configurado no LoaderManager")
        
        if hasattr(loader, 'configure_with_mapper'):
            resultado['configure_with_mapper'] = True
            logger.info("‚úÖ M√©todo configure_with_mapper() dispon√≠vel")
            
            # Verificar se mapper est√° configurado
            if hasattr(loader, 'mapper') and loader.mapper:
                resultado['mapper_configurado'] = True
                logger.info("‚úÖ Mapper j√° est√° configurado no LoaderManager")
            else:
                logger.warning("‚ö†Ô∏è Mapper N√ÉO est√° configurado no LoaderManager")
        
        # Listar m√©todos de carregamento
        metodos_carregamento = [m for m in dir(loader) if m.startswith(('load_', 'get_best_loader'))]
        resultado['metodos_carregamento'] = metodos_carregamento
        logger.info(f"üìä M√©todos de carregamento: {len(metodos_carregamento)}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar LoaderManager: {e}")
    
    return resultado


def verificar_orchestrator():
    """Verifica MainOrchestrator e conex√µes"""
    logger.info("\n" + "="*60)
    logger.info("üé≠ VERIFICANDO MAIN ORCHESTRATOR")
    logger.info("="*60)
    
    resultado = {
        'disponivel': False,
        '_connect_modules': False,
        'componentes_registrados': [],
        'conexoes_verificadas': []
    }
    
    try:
        from app.claude_ai_novo.orchestrators import get_main_orchestrator
        orchestrator = get_main_orchestrator()
        resultado['disponivel'] = True
        logger.info("‚úÖ MainOrchestrator dispon√≠vel")
        
        # Verificar m√©todo _connect_modules
        if hasattr(orchestrator, '_connect_modules'):
            resultado['_connect_modules'] = True
            logger.info("‚úÖ M√©todo _connect_modules() dispon√≠vel")
        else:
            logger.warning("‚ùå M√©todo _connect_modules() N√ÉO dispon√≠vel")
        
        # Verificar componentes registrados
        if hasattr(orchestrator, 'components'):
            resultado['componentes_registrados'] = list(orchestrator.components.keys())
            logger.info(f"‚úÖ Componentes registrados: {resultado['componentes_registrados']}")
        
        # Verificar conex√µes espec√≠ficas
        conexoes = []
        if 'scanners' in orchestrator.components and 'loaders' in orchestrator.components:
            conexoes.append("Scanner ‚Üí Loader")
        if 'mappers' in orchestrator.components and 'loaders' in orchestrator.components:
            conexoes.append("Mapper ‚Üí Loader")
        if 'loaders' in orchestrator.components and 'providers' in orchestrator.components:
            conexoes.append("Loader ‚Üí Provider")
            
        resultado['conexoes_verificadas'] = conexoes
        logger.info(f"üîó Conex√µes poss√≠veis: {conexoes}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar MainOrchestrator: {e}")
    
    return resultado


def testar_integracao_funcional():
    """Testa se a integra√ß√£o est√° funcionando na pr√°tica"""
    logger.info("\n" + "="*60)
    logger.info("üß™ TESTANDO INTEGRA√á√ÉO FUNCIONAL")
    logger.info("="*60)
    
    resultado = {
        'scanner_loader': False,
        'mapper_loader': False,
        'auto_mapper_mapper': False,
        'fluxo_completo': False
    }
    
    try:
        # Teste 1: Scanner ‚Üí Loader
        logger.info("\nüîÑ Teste 1: Scanner ‚Üí Loader")
        from app.claude_ai_novo.scanning import get_scanning_manager
        from app.claude_ai_novo.loaders import get_loader_manager
        
        scanner = get_scanning_manager()
        loader = get_loader_manager()
        
        # Configurar loader com scanner
        if hasattr(loader, 'configure_with_scanner'):
            loader.configure_with_scanner(scanner)
            
            # Verificar se funcionou
            if hasattr(loader, 'scanner') and loader.scanner == scanner:
                resultado['scanner_loader'] = True
                logger.info("‚úÖ Scanner ‚Üí Loader integra√ß√£o funcional!")
            else:
                logger.warning("‚ùå Scanner ‚Üí Loader integra√ß√£o falhou")
        
        # Teste 2: Mapper ‚Üí Loader
        logger.info("\nüîÑ Teste 2: Mapper ‚Üí Loader")
        from app.claude_ai_novo.mappers import get_mapper_manager
        
        mapper = get_mapper_manager()
        
        if hasattr(loader, 'configure_with_mapper'):
            loader.configure_with_mapper(mapper)
            
            # Verificar se funcionou
            if hasattr(loader, 'mapper') and loader.mapper == mapper:
                resultado['mapper_loader'] = True
                logger.info("‚úÖ Mapper ‚Üí Loader integra√ß√£o funcional!")
            else:
                logger.warning("‚ùå Mapper ‚Üí Loader integra√ß√£o falhou")
        
        # Teste 3: AutoMapper ‚Üí MapperManager
        logger.info("\nüîÑ Teste 3: AutoMapper ‚Üí MapperManager")
        if hasattr(scanner, 'database_manager') and scanner.database_manager:
            if hasattr(scanner.database_manager, 'auto_mapper'):
                auto_mapper = scanner.database_manager.auto_mapper
                
                # Tentar gerar mapeamento autom√°tico
                if hasattr(auto_mapper, 'gerar_mapeamento_automatico'):
                    try:
                        # Testar com tabela pedidos
                        auto_mapping = auto_mapper.gerar_mapeamento_automatico('pedidos')
                        if auto_mapping:
                            logger.info("‚úÖ AutoMapper gerou mapeamento para 'pedidos'")
                            
                            # Verificar se mapper pode usar
                            if hasattr(mapper, 'apply_auto_suggestions'):
                                resultado['auto_mapper_mapper'] = True
                                logger.info("‚úÖ MapperManager PODE receber auto_mappings (m√©todo existe)")
                            else:
                                logger.warning("‚ùå MapperManager N√ÉO pode receber auto_mappings")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erro ao testar AutoMapper: {e}")
        
        # Teste 4: Fluxo completo
        logger.info("\nüîÑ Teste 4: Fluxo completo")
        try:
            # Scanner descobre
            if hasattr(scanner, 'get_database_info'):
                db_info = scanner.get_database_info()
                logger.info(f"üìä Scanner descobriu: {len(db_info.get('tables', {}))} tabelas")
            
            # Mapper inicializa com schema
            if hasattr(mapper, 'initialize_with_schema') and db_info:
                mapper.initialize_with_schema(db_info)
                logger.info("‚úÖ Mapper inicializado com schema do banco")
            
            # Loader usa ambos
            if loader.scanner and loader.mapper:
                resultado['fluxo_completo'] = True
                logger.info("‚úÖ FLUXO COMPLETO: Scanner ‚Üí Mapper ‚Üí Loader funcionando!")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro no fluxo completo: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro nos testes funcionais: {e}")
    
    return resultado


def gerar_relatorio_completo():
    """Gera relat√≥rio completo da verifica√ß√£o"""
    logger.info("\n" + "="*60)
    logger.info("üìÑ GERANDO RELAT√ìRIO COMPLETO")
    logger.info("="*60)
    
    relatorio = {
        'timestamp': datetime.now().isoformat(),
        'scanner': verificar_scanner_manager(),
        'mapper': verificar_mapper_manager(),
        'loader': verificar_loader_manager(),
        'orchestrator': verificar_orchestrator(),
        'testes_funcionais': testar_integracao_funcional()
    }
    
    # An√°lise de problemas
    problemas = []
    recomendacoes = []
    
    # Verificar problemas no Scanner
    if not relatorio['scanner']['auto_mapper']:
        problemas.append("AutoMapper n√£o est√° acess√≠vel via DatabaseManager")
        recomendacoes.append("Verificar se DatabaseManager exp√µe auto_mapper como propriedade p√∫blica")
    
    if not relatorio['scanner']['get_database_info']:
        problemas.append("ScanningManager n√£o tem m√©todo get_database_info()")
        recomendacoes.append("Implementar get_database_info() no ScanningManager")
    
    # Verificar problemas no Mapper
    if not relatorio['mapper']['apply_auto_suggestions']:
        problemas.append("MapperManager n√£o pode receber sugest√µes do AutoMapper")
        recomendacoes.append("Implementar apply_auto_suggestions() no MapperManager")
    
    # Verificar problemas no Loader
    if not relatorio['loader']['scanner_configurado']:
        problemas.append("LoaderManager n√£o tem Scanner configurado")
        recomendacoes.append("Garantir que Orchestrator chame loader.configure_with_scanner()")
    
    if not relatorio['loader']['mapper_configurado']:
        problemas.append("LoaderManager n√£o tem Mapper configurado")
        recomendacoes.append("Garantir que Orchestrator chame loader.configure_with_mapper()")
    
    # Verificar problemas no Orchestrator
    if not relatorio['orchestrator']['_connect_modules']:
        problemas.append("MainOrchestrator n√£o tem m√©todo _connect_modules()")
        recomendacoes.append("Implementar _connect_modules() no MainOrchestrator")
    
    # Adicionar ao relat√≥rio
    relatorio['analise'] = {
        'problemas_encontrados': problemas,
        'recomendacoes': recomendacoes,
        'integracao_completa': len(problemas) == 0
    }
    
    # Salvar relat√≥rio
    with open('verificacao_integracao_completa.json', 'w', encoding='utf-8') as f:
        json.dump(relatorio, f, indent=2, ensure_ascii=False)
    
    logger.info(f"\nüìä RESUMO:")
    logger.info(f"- Scanner: {'‚úÖ' if relatorio['scanner']['disponivel'] else '‚ùå'}")
    logger.info(f"- Mapper: {'‚úÖ' if relatorio['mapper']['disponivel'] else '‚ùå'}")
    logger.info(f"- Loader: {'‚úÖ' if relatorio['loader']['disponivel'] else '‚ùå'}")
    logger.info(f"- Orchestrator: {'‚úÖ' if relatorio['orchestrator']['disponivel'] else '‚ùå'}")
    logger.info(f"- Integra√ß√£o Completa: {'‚úÖ' if relatorio['analise']['integracao_completa'] else '‚ùå'}")
    logger.info(f"\n‚ö†Ô∏è Problemas encontrados: {len(problemas)}")
    
    if problemas:
        logger.info("\nüîß PROBLEMAS:")
        for p in problemas:
            logger.info(f"  - {p}")
        
        logger.info("\nüí° RECOMENDA√á√ïES:")
        for r in recomendacoes:
            logger.info(f"  - {r}")
    
    return relatorio


if __name__ == "__main__":
    logger.info("üöÄ Iniciando verifica√ß√£o de integra√ß√£o completa...")
    relatorio = gerar_relatorio_completo()
    logger.info("\n‚úÖ Verifica√ß√£o conclu√≠da! Relat√≥rio salvo em 'verificacao_integracao_completa.json'") 