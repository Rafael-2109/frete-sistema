#!/usr/bin/env python3
"""
An√°lise dos Orchestrators em Tempo Real
=======================================

Este arquivo executa uma an√°lise completa dos orchestrators
e gera relat√≥rio detalhado de funcionalidade e efici√™ncia.
"""
import os
import sys
import time
import json
from datetime import datetime
from typing import Dict, Any, List

# Configurar path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def analisar_init_orchestrators():
    """Analisa o __init__.py dos orchestrators"""
    print("üîç Analisando __init__.py dos orchestrators...")
    
    try:
        from __init__ import diagnose_orchestrator_module
        
        diagnostico = diagnose_orchestrator_module()
        
        print(f"   üìä Componentes carregados: {diagnostico['components_loaded']}")
        print(f"   üìä Total de componentes: {diagnostico['total_components']}")
        print(f"   üìä Status arquitetural: {diagnostico['architecture_status']}")
        
        for problema in diagnostico['problems']:
            if problema.startswith('‚úÖ'):
                print(f"   {problema}")
            elif problema.startswith('‚ö†Ô∏è'):
                print(f"   {problema}")
            else:
                print(f"   {problema}")
        
        return {
            'sucesso': True,
            'componentes': diagnostico['total_components'],
            'problemas': len([p for p in diagnostico['problems'] if p.startswith('‚ùå')]),
            'warnings': len([p for p in diagnostico['problems'] if p.startswith('‚ö†Ô∏è')]),
            'detalhes': diagnostico
        }
        
    except Exception as e:
        print(f"   ‚ùå Erro na an√°lise do __init__.py: {e}")
        return {'sucesso': False, 'erro': str(e)}

def analisar_orchestrator_manager():
    """Analisa o OrchestratorManager em tempo real"""
    print("üé≠ Analisando OrchestratorManager (MAESTRO)...")
    
    try:
        from orchestrator_manager import get_orchestrator_manager
        
        start_time = time.time()
        manager = get_orchestrator_manager()
        init_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Tempo de inicializa√ß√£o: {init_time:.3f}s")
        
        # Status dos orquestradores
        start_time = time.time()
        status = manager.get_orchestrator_status()
        status_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Tempo de status: {status_time:.3f}s")
        print(f"   üìä Total de orquestradores: {status['total_orchestrators']}")
        print(f"   üìä Tarefas ativas: {status['active_tasks']}")
        print(f"   üìä Hist√≥rico: {status['operation_history_count']}")
        
        # Teste de detec√ß√£o
        start_time = time.time()
        session_detect = manager._detect_appropriate_orchestrator("create_session", {"user": "test"})
        workflow_detect = manager._detect_appropriate_orchestrator("execute_workflow", {"workflow": "test"})
        detect_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Tempo de detec√ß√£o: {detect_time:.3f}s")
        print(f"   üîç Detec√ß√£o para sess√£o: {session_detect.value}")
        print(f"   üîç Detec√ß√£o para workflow: {workflow_detect.value}")
        
        # Teste de opera√ß√£o
        start_time = time.time()
        result = manager.orchestrate_operation("test_operation", {"teste": "dados"})
        operation_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Tempo de opera√ß√£o: {operation_time:.3f}s")
        print(f"   ‚úÖ Opera√ß√£o de teste: {result['success']}")
        
        return {
            'sucesso': True,
            'tempo_inicializacao': init_time,
            'tempo_status': status_time,
            'tempo_deteccao': detect_time,
            'tempo_operacao': operation_time,
            'total_orquestradores': status['total_orchestrators'],
            'detalhes': status
        }
        
    except Exception as e:
        print(f"   ‚ùå Erro no OrchestratorManager: {e}")
        return {'sucesso': False, 'erro': str(e)}

def analisar_main_orchestrator():
    """Analisa o MainOrchestrator em tempo real"""
    print("üéØ Analisando MainOrchestrator...")
    
    try:
        from main_orchestrator import MainOrchestrator
        
        start_time = time.time()
        orchestrator = MainOrchestrator()
        init_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Tempo de inicializa√ß√£o: {init_time:.3f}s")
        
        # Teste de workflows
        workflows = ["analyze_query", "full_processing", "intelligent_coordination", "natural_commands"]
        resultados = {}
        
        for workflow in workflows:
            start_time = time.time()
            result = orchestrator.execute_workflow(workflow, "test_operation", {"query": "teste"})
            exec_time = time.time() - start_time
            
            print(f"   ‚è±Ô∏è Workflow {workflow}: {exec_time:.3f}s")
            print(f"   ‚úÖ Resultado: {result['success']}")
            
            resultados[workflow] = {
                'sucesso': result['success'],
                'tempo_execucao': exec_time,
                'detalhes': result
            }
        
        # Verificar integra√ß√µes
        coord_disponivel = orchestrator.coordinator_manager is not None
        cmd_disponivel = orchestrator.auto_command_processor is not None
        sec_disponivel = orchestrator.security_guard is not None
        
        print(f"   üîó CoordinatorManager: {'‚úÖ' if coord_disponivel else '‚ùå'}")
        print(f"   üîó AutoCommandProcessor: {'‚úÖ' if cmd_disponivel else '‚ùå'}")
        print(f"   üîó SecurityGuard: {'‚úÖ' if sec_disponivel else '‚ùå'}")
        
        return {
            'sucesso': True,
            'tempo_inicializacao': init_time,
            'workflows': resultados,
            'integracoes': {
                'coordinator_manager': coord_disponivel,
                'auto_command_processor': cmd_disponivel,
                'security_guard': sec_disponivel
            }
        }
        
    except Exception as e:
        print(f"   ‚ùå Erro no MainOrchestrator: {e}")
        return {'sucesso': False, 'erro': str(e)}

def analisar_session_orchestrator():
    """Analisa o SessionOrchestrator em tempo real"""
    print("üîÑ Analisando SessionOrchestrator...")
    
    try:
        from session_orchestrator import get_session_orchestrator
        
        start_time = time.time()
        orchestrator = get_session_orchestrator()
        init_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Tempo de inicializa√ß√£o: {init_time:.3f}s")
        
        # Teste de sess√£o completa
        start_time = time.time()
        session_id = orchestrator.create_session(user_id=1, metadata={"teste": "tempo_real"})
        create_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Cria√ß√£o de sess√£o: {create_time:.3f}s")
        print(f"   ‚úÖ Sess√£o criada: {session_id}")
        
        # Inicializar
        start_time = time.time()
        init_result = orchestrator.initialize_session(session_id)
        init_session_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Inicializa√ß√£o: {init_session_time:.3f}s")
        print(f"   ‚úÖ Inicializada: {init_result}")
        
        # Workflow
        start_time = time.time()
        workflow_result = orchestrator.execute_session_workflow(session_id, "test_workflow", {"data": "teste"})
        workflow_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Workflow: {workflow_time:.3f}s")
        print(f"   ‚úÖ Workflow executado: {workflow_result.get('success', 'N/A')}")
        
        # Completar
        start_time = time.time()
        complete_result = orchestrator.complete_session(session_id)
        complete_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Completar: {complete_time:.3f}s")
        print(f"   ‚úÖ Completada: {complete_result}")
        
        # Verificar integra√ß√µes
        learning_disponivel = orchestrator.learning_core is not None
        sec_disponivel = orchestrator.security_guard is not None
        
        print(f"   üîó LearningCore: {'‚úÖ' if learning_disponivel else '‚ùå'}")
        print(f"   üîó SecurityGuard: {'‚úÖ' if sec_disponivel else '‚ùå'}")
        
        return {
            'sucesso': True,
            'tempo_inicializacao': init_time,
            'tempo_criar_sessao': create_time,
            'tempo_inicializar': init_session_time,
            'tempo_workflow': workflow_time,
            'tempo_completar': complete_time,
            'integracoes': {
                'learning_core': learning_disponivel,
                'security_guard': sec_disponivel
            }
        }
        
    except Exception as e:
        print(f"   ‚ùå Erro no SessionOrchestrator: {e}")
        return {'sucesso': False, 'erro': str(e)}

def analisar_workflow_orchestrator():
    """Analisa o WorkflowOrchestrator em tempo real"""
    print("‚öôÔ∏è Analisando WorkflowOrchestrator...")
    
    try:
        from workflow_orchestrator import WorkflowOrchestrator
        
        start_time = time.time()
        orchestrator = WorkflowOrchestrator()
        init_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è Tempo de inicializa√ß√£o: {init_time:.3f}s")
        
        # Teste de workflows
        templates = ["analise_completa", "processamento_lote"]
        resultados = {}
        
        for template in templates:
            start_time = time.time()
            result = orchestrator.executar_workflow(f"test_{template}", template, {"dados": "teste"})
            exec_time = time.time() - start_time
            
            print(f"   ‚è±Ô∏è Template {template}: {exec_time:.3f}s")
            print(f"   ‚úÖ Resultado: {result['sucesso']}")
            
            resultados[template] = {
                'sucesso': result['sucesso'],
                'tempo_execucao': exec_time,
                'detalhes': result
            }
        
        # Estat√≠sticas
        stats = orchestrator.obter_estatisticas()
        print(f"   üìä Templates dispon√≠veis: {len(stats['templates_disponiveis'])}")
        print(f"   üìä Executores registrados: {len(stats['executores_registrados'])}")
        
        return {
            'sucesso': True,
            'tempo_inicializacao': init_time,
            'templates': resultados,
            'estatisticas': stats
        }
        
    except Exception as e:
        print(f"   ‚ùå Erro no WorkflowOrchestrator: {e}")
        return {'sucesso': False, 'erro': str(e)}

def gerar_relatorio_completo():
    """Gera relat√≥rio completo da an√°lise"""
    print("üìã Gerando relat√≥rio completo...")
    
    relatorio = {
        'timestamp': datetime.now().isoformat(),
        'analise_init': analisar_init_orchestrators(),
        'orchestrator_manager': analisar_orchestrator_manager(),
        'main_orchestrator': analisar_main_orchestrator(),
        'session_orchestrator': analisar_session_orchestrator(),
        'workflow_orchestrator': analisar_workflow_orchestrator()
    }
    
    # Salvar relat√≥rio
    nome_arquivo = f"relatorio_orchestrators_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(nome_arquivo, 'w', encoding='utf-8') as f:
        json.dump(relatorio, f, indent=2, ensure_ascii=False)
    
    print(f"   üíæ Relat√≥rio salvo em: {nome_arquivo}")
    
    return relatorio

def exibir_resumo_executivo(relatorio: Dict[str, Any]):
    """Exibe resumo executivo da an√°lise"""
    print("\n" + "="*60)
    print("üìä RESUMO EXECUTIVO - AN√ÅLISE DOS ORCHESTRATORS")
    print("="*60)
    
    # Contar sucessos
    sucessos = sum([
        relatorio['analise_init']['sucesso'],
        relatorio['orchestrator_manager']['sucesso'],
        relatorio['main_orchestrator']['sucesso'],
        relatorio['session_orchestrator']['sucesso'],
        relatorio['workflow_orchestrator']['sucesso']
    ])
    
    total_testes = 5
    taxa_sucesso = (sucessos / total_testes) * 100
    
    print(f"üéØ Taxa de Sucesso: {taxa_sucesso:.1f}% ({sucessos}/{total_testes})")
    
    # Tempos de inicializa√ß√£o
    tempos_init = []
    if relatorio['orchestrator_manager']['sucesso']:
        tempos_init.append(relatorio['orchestrator_manager']['tempo_inicializacao'])
    if relatorio['main_orchestrator']['sucesso']:
        tempos_init.append(relatorio['main_orchestrator']['tempo_inicializacao'])
    if relatorio['session_orchestrator']['sucesso']:
        tempos_init.append(relatorio['session_orchestrator']['tempo_inicializacao'])
    if relatorio['workflow_orchestrator']['sucesso']:
        tempos_init.append(relatorio['workflow_orchestrator']['tempo_inicializacao'])
    
    if tempos_init:
        tempo_medio = sum(tempos_init) / len(tempos_init)
        print(f"‚è±Ô∏è Tempo M√©dio de Inicializa√ß√£o: {tempo_medio:.3f}s")
    
    # Status dos componentes
    if relatorio['analise_init']['sucesso']:
        print(f"üìä Componentes Carregados: {relatorio['analise_init']['componentes']}")
    
    if relatorio['orchestrator_manager']['sucesso']:
        print(f"üìä Orquestradores Ativos: {relatorio['orchestrator_manager']['total_orquestradores']}")
    
    # Integra√ß√µes
    if relatorio['main_orchestrator']['sucesso']:
        integracoes = relatorio['main_orchestrator']['integracoes']
        print(f"üîó Integra√ß√µes MainOrchestrator: {sum(integracoes.values())}/3")
    
    if relatorio['session_orchestrator']['sucesso']:
        integracoes = relatorio['session_orchestrator']['integracoes']
        print(f"üîó Integra√ß√µes SessionOrchestrator: {sum(integracoes.values())}/2")
    
    # Avalia√ß√£o final
    if taxa_sucesso >= 80:
        print("‚úÖ AVALIA√á√ÉO: EXCELENTE - Sistema funcionando corretamente")
    elif taxa_sucesso >= 60:
        print("‚ö†Ô∏è AVALIA√á√ÉO: BOM - Algumas funcionalidades com problemas")
    else:
        print("‚ùå AVALIA√á√ÉO: CR√çTICO - Sistema com problemas s√©rios")

if __name__ == "__main__":
    print("üöÄ AN√ÅLISE DOS ORCHESTRATORS EM TEMPO REAL")
    print("="*60)
    
    try:
        relatorio = gerar_relatorio_completo()
        exibir_resumo_executivo(relatorio)
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico na an√°lise: {e}")
        import traceback
        traceback.print_exc() 