"""
üîÑ SESSION ORCHESTRATOR - Gerenciamento de Sess√µes IA
===================================================

Responsabilidade: ORQUESTRAR e gerenciar o ciclo de vida das sess√µes IA.
Especializa√ß√µes: Lifecycle Management, Coordena√ß√£o de Componentes, Workflow, Estado de Sess√£o.
"""

import logging
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Callable
from enum import Enum
from dataclasses import dataclass, field
from threading import Lock

# Imports internos
try:
    from app.claude_ai_novo.memorizers.session_memory import get_session_memory
    from app.claude_ai_novo.analyzers.performance_analyzer import get_performance_analyzer
    from app.claude_ai_novo.utils.flask_fallback import get_current_user
except ImportError:
    try:
        # Fallback para imports relativos
        from ..memorizers.session_memory import get_session_memory
        from ..analyzers.performance_analyzer import get_performance_analyzer
        from ..utils.flask_fallback import get_current_user
    except ImportError as e:
        logging.warning(f"‚ö†Ô∏è Depend√™ncias n√£o dispon√≠veis: {e}")
        # Fallbacks seguros
        def get_session_memory():
            return MockSessionMemory()
        def get_performance_analyzer():
            return MockPerformanceAnalyzer
        def get_current_user():
            return None

logger = logging.getLogger(__name__)

class MockSessionMemory:
    """Mock para session_memory quando n√£o dispon√≠vel"""
    def __init__(self):
        self.sessions = {}
    
    def store_session(self, session_id: str, metadata: dict, user_id: Optional[int] = None):
        self.sessions[session_id] = {
            'metadata': metadata,
            'user_id': user_id,
            'stored_at': datetime.now()
        }
    
    def update_session_metadata(self, session_id: str, metadata: dict):
        if session_id in self.sessions:
            self.sessions[session_id]['metadata'].update(metadata)
    
    def get_session(self, session_id: str):
        return self.sessions.get(session_id)

class MockPerformanceAnalyzer:
    """Mock para performance_analyzer quando n√£o dispon√≠vel"""
    def analyze(self, *args, **kwargs):
        return {"performance": "mock", "status": "ok"}
    
    def get_metrics(self):
        return {"metrics": "mock", "healthy": True}

class SessionStatus(Enum):
    """Status poss√≠veis de uma sess√£o."""
    CREATED = "created"
    INITIALIZING = "initializing"
    ACTIVE = "active"
    PROCESSING = "processing"
    WAITING_INPUT = "waiting_input"
    COMPLETED = "completed"
    FAILED = "failed"
    EXPIRED = "expired"
    TERMINATED = "terminated"

class SessionPriority(Enum):
    """Prioridade de uma sess√£o."""
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"
    CRITICAL = "critical"

@dataclass
class SessionContext:
    """Contexto de uma sess√£o IA."""
    session_id: str
    user_id: Optional[int] = None
    status: SessionStatus = SessionStatus.CREATED
    priority: SessionPriority = SessionPriority.NORMAL
    created_at: datetime = field(default_factory=datetime.now)
    last_activity: datetime = field(default_factory=datetime.now)
    expires_at: Optional[datetime] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    components: Dict[str, Any] = field(default_factory=dict)
    workflow_state: Dict[str, Any] = field(default_factory=dict)
    error_history: List[Dict[str, Any]] = field(default_factory=list)
    
    def is_expired(self) -> bool:
        """Verifica se a sess√£o expirou."""
        return self.expires_at is not None and datetime.now() > self.expires_at
    
    def is_active(self) -> bool:
        """Verifica se a sess√£o est√° ativa."""
        return self.status in [SessionStatus.ACTIVE, SessionStatus.PROCESSING, SessionStatus.WAITING_INPUT]
    
    def update_activity(self):
        """Atualiza timestamp da √∫ltima atividade."""
        self.last_activity = datetime.now()

class SessionOrchestrator:
    """
    Orquestrador especializado no gerenciamento de sess√µes IA.
    
    Responsabilidades:
    - Gerenciar ciclo de vida das sess√µes
    - Coordenar componentes da sess√£o
    - Controlar workflow e estado
    - Monitorar performance e sa√∫de
    """
    
    def __init__(self, default_timeout: int = 3600):
        """
        Inicializa o orquestrador de sess√µes.
        
        Args:
            default_timeout: Timeout padr√£o em segundos (1 hora)
        """
        self.default_timeout = default_timeout
        self.active_sessions: Dict[str, SessionContext] = {}
        self.session_lock = Lock()
        
        # Inicializar depend√™ncias com fallbacks
        self.session_memory = self._get_session_memory_safe()
        self.performance_analyzer = self._get_performance_analyzer_safe()
        self.cleanup_handlers: List[Callable] = []
        
        # Lazy loading do m√≥dulo de alto valor
        self._learning_core = None
        
        # Lazy loading do SecurityGuard (CR√çTICO)
        self._security_guard = None
        
        # Lazy loading do ConversationManager (GEST√ÉO DE CONVERSAS)
        self._conversation_manager = None
        
        logger.info("üîÑ SessionOrchestrator inicializado")
    
    @property
    def learning_core(self):
        """Lazy loading do LearningCore"""
        if self._learning_core is None:
            try:
                from app.claude_ai_novo.learners.learning_core import get_learning_core
                self._learning_core = get_learning_core()
                logger.info("‚úÖ LearningCore integrado ao SessionOrchestrator")
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è LearningCore n√£o dispon√≠vel: {e}")
                self._learning_core = False  # Marcar como indispon√≠vel
        return self._learning_core if self._learning_core is not False else None
    
    @property
    def security_guard(self):
        """Lazy loading do SecurityGuard"""
        if self._security_guard is None:
            try:
                from app.claude_ai_novo.security.security_guard import get_security_guard
                self._security_guard = get_security_guard()
                logger.info("üîê SecurityGuard integrado ao SessionOrchestrator")
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è SecurityGuard n√£o dispon√≠vel: {e}")
                self._security_guard = False  # Marcar como indispon√≠vel
        return self._security_guard if self._security_guard is not False else None
    
    @property
    def conversation_manager(self):
        """Lazy loading do ConversationManager"""
        if self._conversation_manager is None:
            try:
                from app.claude_ai_novo.conversers.conversation_manager import get_conversation_manager
                self._conversation_manager = get_conversation_manager()
                logger.info("üí¨ ConversationManager integrado ao SessionOrchestrator")
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è ConversationManager n√£o dispon√≠vel: {e}")
                self._conversation_manager = False  # Marcar como indispon√≠vel
        return self._conversation_manager if self._conversation_manager is not False else None
    
    def _get_session_memory_safe(self):
        """Obt√©m session_memory com fallback seguro"""
        try:
            memory = get_session_memory()
            if memory is not None:
                return memory
        except Exception as e:
            logger.warning(f"Session memory n√£o dispon√≠vel: {e}")
        
        # Fallback mock
        return MockSessionMemory()
    
    def _get_performance_analyzer_safe(self):
        """Obt√©m performance_analyzer com fallback seguro"""
        try:
            analyzer = get_performance_analyzer()
            if analyzer is not None:
                return analyzer
        except Exception as e:
            logger.warning(f"Performance analyzer n√£o dispon√≠vel: {e}")
        
        # Fallback mock
        return MockPerformanceAnalyzer()
    
    def create_session(self, user_id: Optional[int] = None, 
                      priority: SessionPriority = SessionPriority.NORMAL,
                      timeout: Optional[int] = None,
                      metadata: Optional[Dict[str, Any]] = None) -> str:
        """
        Cria uma nova sess√£o IA.
        
        Args:
            user_id: ID do usu√°rio (opcional)
            priority: Prioridade da sess√£o
            timeout: Timeout personalizado em segundos
            metadata: Metadata inicial da sess√£o
            
        Returns:
            ID da sess√£o criada
        """
        try:
            # üîê VALIDA√á√ÉO DE SEGURAN√áA CR√çTICA
            if not self._validate_session_security("create_session", user_id, metadata):
                logger.warning(f"üö´ Cria√ß√£o de sess√£o bloqueada por motivos de seguran√ßa para usu√°rio {user_id}")
                raise PermissionError("Acesso negado para cria√ß√£o de sess√£o")
            
            session_id = str(uuid.uuid4())
            
            # Definir expira√ß√£o
            timeout_seconds = timeout or self.default_timeout
            expires_at = datetime.now() + timedelta(seconds=timeout_seconds)
            
            # Criar contexto da sess√£o
            session_context = SessionContext(
                session_id=session_id,
                user_id=user_id or self._get_current_user_id(),
                priority=priority,
                expires_at=expires_at,
                metadata=metadata or {}
            )
            
            # Adicionar metadata do sistema
            session_context.metadata.update({
                'created_by': 'session_orchestrator',
                'timeout_seconds': timeout_seconds,
                'priority': priority.value,
                'user_agent': self._get_user_agent(),
                'security_validated': True,  # Flag de seguran√ßa
                'created_timestamp': datetime.now().isoformat()
            })
            
            # Registrar sess√£o
            with self.session_lock:
                self.active_sessions[session_id] = session_context
            
            # Persistir na mem√≥ria
            self.session_memory.store_session(session_id, session_context.metadata, user_id)
            
            # üîê LOG DE AUDITORIA
            self._log_session_audit("create_session", session_id, user_id, True, "Sess√£o criada com sucesso")
            
            logger.info(f"üÜï Sess√£o criada: {session_id} (usu√°rio: {user_id}, prioridade: {priority.value})")
            return session_id
            
        except Exception as e:
            # üîê LOG DE AUDITORIA DE ERRO
            self._log_session_audit("create_session", "failed", user_id, False, f"Erro na cria√ß√£o: {str(e)}")
            logger.error(f"‚ùå Erro ao criar sess√£o: {e}")
            raise
    
    def initialize_session(self, session_id: str, 
                          components: Optional[Dict[str, Any]] = None) -> bool:
        """
        Inicializa uma sess√£o com componentes espec√≠ficos.
        
        Args:
            session_id: ID da sess√£o
            components: Componentes para inicializar
            
        Returns:
            True se sucesso, False caso contr√°rio
        """
        session = self.get_session(session_id)
        if not session:
            logger.error(f"‚ùå Sess√£o n√£o encontrada para inicializa√ß√£o: {session_id}")
            return False
        
        try:
            # Atualizar status
            session.status = SessionStatus.INITIALIZING
            session.update_activity()
            
            # Inicializar componentes
            if components:
                session.components.update(components)
            
            # Executar inicializa√ß√£o personalizada
            self._execute_initialization_workflow(session)
            
            # Marcar como ativa
            session.status = SessionStatus.ACTIVE
            
            # Atualizar metadata
            session.metadata.update({
                'initialized_at': datetime.now().isoformat(),
                'components_count': len(session.components),
                'initialization_success': True
            })
            
            # Persistir mudan√ßas
            self.session_memory.update_session_metadata(session_id, session.metadata)
            
            logger.info(f"üîß Sess√£o inicializada: {session_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na inicializa√ß√£o da sess√£o {session_id}: {e}")
            session.status = SessionStatus.FAILED
            session.error_history.append({
                'timestamp': datetime.now().isoformat(),
                'error': str(e),
                'context': 'initialization'
            })
            return False
    
    def execute_session_workflow(self, session_id: str, 
                                workflow_type: str,
                                workflow_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Executa workflow espec√≠fico na sess√£o.
        
        Args:
            session_id: ID da sess√£o
            workflow_type: Tipo do workflow
            workflow_data: Dados do workflow
            
        Returns:
            Resultado do workflow
        """
        session = self.get_session(session_id)
        if not session:
            return {'error': 'Sess√£o n√£o encontrada', 'session_id': session_id}
        
        if not session.is_active():
            return {'error': 'Sess√£o n√£o est√° ativa', 'status': session.status.value}
        
        try:
            # Atualizar status
            session.status = SessionStatus.PROCESSING
            session.update_activity()
            
            # Executar workflow espec√≠fico
            result = self._execute_workflow(session, workflow_type, workflow_data)
            
            # NOVA funcionalidade: Aprendizado vital√≠cio
            if self.learning_core and workflow_type in ['query', 'intelligent_query']:
                learning_result = self._execute_learning_workflow(session, workflow_data, result)
                result['learning_insights'] = learning_result
            
            # NOVA funcionalidade: Gest√£o de conversas
            if self.conversation_manager and workflow_type in ['query', 'intelligent_query', 'conversation']:
                conversation_result = self._execute_conversation_workflow(session, workflow_data, result)
                result['conversation_insights'] = conversation_result
            
            # Atualizar estado do workflow
            session.workflow_state[workflow_type] = {
                'executed_at': datetime.now().isoformat(),
                'data': workflow_data,
                'result': result
            }
            
            # Retornar ao status ativo
            session.status = SessionStatus.ACTIVE
            
            # Atualizar metadata
            session.metadata.update({
                'last_workflow': workflow_type,
                'last_workflow_at': datetime.now().isoformat(),
                'workflow_count': len(session.workflow_state)
            })
            
            # Persistir mudan√ßas
            self.session_memory.update_session_metadata(session_id, session.metadata)
            
            logger.info(f"‚öôÔ∏è Workflow executado: {workflow_type} na sess√£o {session_id}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro no workflow {workflow_type} da sess√£o {session_id}: {e}")
            session.status = SessionStatus.FAILED
            session.error_history.append({
                'timestamp': datetime.now().isoformat(),
                'error': str(e),
                'context': f'workflow_{workflow_type}'
            })
            return {'error': str(e), 'workflow_type': workflow_type}
    
    def _execute_learning_workflow(self, session: SessionContext, 
                                 workflow_data: Dict[str, Any],
                                 result: Dict[str, Any]) -> Dict[str, Any]:
        """
        Executa workflow de aprendizado vital√≠cio.
        
        Args:
            session: Contexto da sess√£o
            workflow_data: Dados do workflow
            result: Resultado do workflow
            
        Returns:
            Resultado do aprendizado
        """
        try:
            # Extrair informa√ß√µes para aprendizado
            consulta = workflow_data.get('query', workflow_data.get('text', ''))
            interpretacao = workflow_data.get('interpretation', workflow_data.get('context', {}))
            resposta = str(result.get('response', result.get('result', '')))
            feedback = workflow_data.get('feedback')
            
            # Executar aprendizado
            aprendizado = self.learning_core.aprender_com_interacao(
                consulta=consulta,
                interpretacao=interpretacao,
                resposta=resposta,
                feedback=feedback,
                usuario_id=session.user_id
            )
            
            # Atualizar metadata da sess√£o com aprendizado
            session.metadata.update({
                'learning_score': aprendizado.get('score_aprendizado', 0),
                'patterns_learned': len(aprendizado.get('padroes_detectados', [])),
                'last_learning_at': datetime.now().isoformat()
            })
            
            logger.info(f"üß† Aprendizado executado na sess√£o {session.session_id}: score {aprendizado.get('score_aprendizado', 0):.2f}")
            return aprendizado
            
        except Exception as e:
            logger.error(f"‚ùå Erro no aprendizado da sess√£o {session.session_id}: {e}")
            return {'error': str(e), 'learning_failed': True}
    
    def _execute_conversation_workflow(self, session: SessionContext, 
                                     workflow_data: Dict[str, Any],
                                     result: Dict[str, Any]) -> Dict[str, Any]:
        """
        Executa workflow de gest√£o de conversas.
        
        Args:
            session: Contexto da sess√£o
            workflow_data: Dados do workflow
            result: Resultado do workflow
            
        Returns:
            Resultado da gest√£o de conversas
        """
        try:
            # Extrair informa√ß√µes da conversa
            mensagem = workflow_data.get('query', workflow_data.get('message', ''))
            contexto = workflow_data.get('context', {})
            resposta = str(result.get('response', result.get('result', '')))
            
            # Executar gest√£o de conversas
            conversation_result = self.conversation_manager.manage_conversation(
                session_id=session.session_id,
                user_message=mensagem,
                ai_response=resposta,
                context=contexto,
                user_id=session.user_id
            )
            
            # Atualizar metadata da sess√£o com insights de conversa
            session.metadata.update({
                'conversation_turns': conversation_result.get('total_turns', 0),
                'conversation_score': conversation_result.get('conversation_score', 0),
                'context_continuity': conversation_result.get('context_continuity', 0),
                'last_conversation_at': datetime.now().isoformat()
            })
            
            logger.info(f"üí¨ Conversa gerenciada na sess√£o {session.session_id}: {conversation_result.get('total_turns', 0)} turnos")
            return conversation_result
            
        except Exception as e:
            logger.error(f"‚ùå Erro na gest√£o de conversa da sess√£o {session.session_id}: {e}")
            return {'error': str(e), 'conversation_failed': True}
    
    def apply_learned_knowledge(self, session_id: str, query: str) -> Dict[str, Any]:
        """
        Aplica conhecimento aprendido para melhorar uma consulta.
        
        Args:
            session_id: ID da sess√£o
            query: Consulta a ser melhorada
            
        Returns:
            Conhecimento aplic√°vel
        """
        session = self.get_session(session_id)
        if not session:
            return {'error': 'Sess√£o n√£o encontrada'}
        
        if not self.learning_core:
            return {'error': 'LearningCore n√£o dispon√≠vel'}
        
        try:
            # Aplicar conhecimento aprendido
            conhecimento = self.learning_core.aplicar_conhecimento(query)
            
            # Atualizar metadata da sess√£o
            session.metadata.update({
                'knowledge_applied': True,
                'knowledge_confidence': conhecimento.get('confianca_geral', 0),
                'last_knowledge_at': datetime.now().isoformat()
            })
            
            logger.info(f"üìö Conhecimento aplicado na sess√£o {session_id}: confian√ßa {conhecimento.get('confianca_geral', 0):.2f}")
            return conhecimento
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao aplicar conhecimento na sess√£o {session_id}: {e}")
            return {'error': str(e), 'knowledge_application_failed': True}
    
    def complete_session(self, session_id: str, 
                        result: Optional[Dict[str, Any]] = None) -> bool:
        """
        Completa uma sess√£o com resultado final.
        
        Args:
            session_id: ID da sess√£o
            result: Resultado final da sess√£o
            
        Returns:
            True se sucesso, False caso contr√°rio
        """
        session = self.get_session(session_id)
        if not session:
            return False
        
        try:
            # Atualizar status
            session.status = SessionStatus.COMPLETED
            session.update_activity()
            
            # Armazenar resultado
            if result:
                session.metadata['final_result'] = result
            
            # Metadata de conclus√£o
            session.metadata.update({
                'completed_at': datetime.now().isoformat(),
                'duration_seconds': (datetime.now() - session.created_at).total_seconds(),
                'completion_success': True
            })
            
            # Persistir mudan√ßas finais
            self.session_memory.update_session_metadata(session_id, session.metadata)
            
            # Executar cleanup
            self._execute_cleanup(session)
            
            # Remover da mem√≥ria ativa
            with self.session_lock:
                self.active_sessions.pop(session_id, None)
            
            logger.info(f"‚úÖ Sess√£o completada: {session_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao completar sess√£o {session_id}: {e}")
            return False
    
    def terminate_session(self, session_id: str, reason: str = "manual_termination") -> bool:
        """
        Termina uma sess√£o for√ßadamente.
        
        Args:
            session_id: ID da sess√£o
            reason: Motivo da termina√ß√£o
            
        Returns:
            True se sucesso, False caso contr√°rio
        """
        session = self.get_session(session_id)
        if not session:
            return False
        
        try:
            # Atualizar status
            session.status = SessionStatus.TERMINATED
            session.update_activity()
            
            # Metadata de termina√ß√£o
            session.metadata.update({
                'terminated_at': datetime.now().isoformat(),
                'termination_reason': reason,
                'forced_termination': True
            })
            
            # Persistir mudan√ßas
            self.session_memory.update_session_metadata(session_id, session.metadata)
            
            # Executar cleanup
            self._execute_cleanup(session)
            
            # Remover da mem√≥ria ativa
            with self.session_lock:
                self.active_sessions.pop(session_id, None)
            
            logger.info(f"üõë Sess√£o terminada: {session_id} (motivo: {reason})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao terminar sess√£o {session_id}: {e}")
            return False
    
    def get_session(self, session_id: str) -> Optional[SessionContext]:
        """
        Obt√©m contexto de uma sess√£o.
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            Contexto da sess√£o ou None se n√£o encontrada
        """
        with self.session_lock:
            return self.active_sessions.get(session_id)
    
    def get_user_sessions(self, user_id: int, include_inactive: bool = False) -> List[SessionContext]:
        """
        Obt√©m todas as sess√µes de um usu√°rio.
        
        Args:
            user_id: ID do usu√°rio
            include_inactive: Incluir sess√µes inativas
            
        Returns:
            Lista de contextos de sess√£o
        """
        sessions = []
        
        with self.session_lock:
            for session in self.active_sessions.values():
                if session.user_id == user_id:
                    if include_inactive or session.is_active():
                        sessions.append(session)
        
        return sessions
    
    def cleanup_expired_sessions(self) -> int:
        """
        Remove sess√µes expiradas.
        
        Returns:
            N√∫mero de sess√µes removidas
        """
        expired_sessions = []
        
        with self.session_lock:
            for session_id, session in self.active_sessions.items():
                if session.is_expired():
                    expired_sessions.append(session_id)
        
        # Remover sess√µes expiradas
        for session_id in expired_sessions:
            self.terminate_session(session_id, "expired")
        
        if expired_sessions:
            logger.info(f"üßπ {len(expired_sessions)} sess√µes expiradas removidas")
        
        return len(expired_sessions)
    
    def get_session_stats(self) -> Dict[str, Any]:
        """
        Obt√©m estat√≠sticas das sess√µes ativas.
        
        Returns:
            Estat√≠sticas das sess√µes
        """
        with self.session_lock:
            total_sessions = len(self.active_sessions)
            
            if total_sessions == 0:
                return {
                    'total_sessions': 0,
                    'by_status': {},
                    'by_priority': {},
                    'avg_duration': 0,
                    'generated_at': datetime.now().isoformat()
                }
            
            # Contar por status
            by_status = {}
            by_priority = {}
            durations = []
            
            for session in self.active_sessions.values():
                # Status
                status_key = session.status.value
                by_status[status_key] = by_status.get(status_key, 0) + 1
                
                # Prioridade
                priority_key = session.priority.value
                by_priority[priority_key] = by_priority.get(priority_key, 0) + 1
                
                # Dura√ß√£o
                duration = (datetime.now() - session.created_at).total_seconds()
                durations.append(duration)
            
            avg_duration = sum(durations) / len(durations) if durations else 0
            
            return {
                'total_sessions': total_sessions,
                'by_status': by_status,
                'by_priority': by_priority,
                'avg_duration': round(avg_duration, 2),
                'oldest_session': min(durations) if durations else 0,
                'newest_session': max(durations) if durations else 0,
                'generated_at': datetime.now().isoformat()
            }
    
    def register_cleanup_handler(self, handler: Callable):
        """
        Registra handler para cleanup de sess√µes.
        
        Args:
            handler: Fun√ß√£o de cleanup
        """
        self.cleanup_handlers.append(handler)
    
    def _execute_initialization_workflow(self, session: SessionContext):
        """Executa workflow de inicializa√ß√£o."""
        # Placeholder para l√≥gica de inicializa√ß√£o personalizada
        pass
    
    def _execute_workflow(self, session: SessionContext, 
                         workflow_type: str, 
                         workflow_data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa workflow espec√≠fico."""
        # Placeholder para workflows personalizados
        return {
            'workflow_type': workflow_type,
            'processed_at': datetime.now().isoformat(),
            'data_received': bool(workflow_data),
            'success': True
        }
    
    def _execute_cleanup(self, session: SessionContext):
        """Executa cleanup da sess√£o."""
        for handler in self.cleanup_handlers:
            try:
                handler(session)
            except Exception as e:
                logger.error(f"‚ùå Erro no cleanup handler: {e}")
    
    def _get_current_user_id(self) -> Optional[int]:
        """Obt√©m ID do usu√°rio atual."""
        try:
            user = get_current_user()
            return user.id if user else None
        except Exception as e:
            logger.warning(f"Current user n√£o dispon√≠vel: {e}")
            return None
    
    def _get_user_agent(self) -> str:
        """Obt√©m user agent com fallback."""
        try:
            # Tentar obter user agent real
            import flask
            return flask.request.headers.get('User-Agent', 'Unknown')
        except Exception:
            return 'SessionOrchestrator/1.0'

    def _validate_session_security(self, operation: str, user_id: Optional[int] = None, 
                                  metadata: Optional[Dict[str, Any]] = None) -> bool:
        """
        Valida seguran√ßa de opera√ß√µes de sess√£o.
        
        Args:
            operation: Opera√ß√£o de sess√£o
            user_id: ID do usu√°rio
            metadata: Metadata da sess√£o
            
        Returns:
            True se opera√ß√£o √© segura, False caso contr√°rio
        """
        try:
            if not self.security_guard:
                # Sem SecurityGuard, permitir opera√ß√£o (modo degradado)
                logger.warning("‚ö†Ô∏è SecurityGuard n√£o dispon√≠vel - sess√£o permitida em modo degradado")
                return True
            
            # Validar acesso do usu√°rio √† opera√ß√£o
            if not self.security_guard.validate_user_access(operation, "session_management"):
                logger.warning(f"üö´ Usu√°rio sem acesso √† opera√ß√£o de sess√£o: {operation}")
                return False
            
            # Validar metadata se fornecida
            if metadata and not self.security_guard.validate_input(metadata):
                logger.warning(f"üö´ Metadata inv√°lida para sess√£o: {operation}")
                return False
            
            # Valida√ß√µes espec√≠ficas por opera√ß√£o
            if operation == "create_session":
                # Verificar limites de sess√µes por usu√°rio
                if user_id and len(self.get_user_sessions(user_id, include_inactive=False)) >= 10:
                    logger.warning(f"üö´ Limite de sess√µes atingido para usu√°rio {user_id}")
                    return False
            
            elif operation in ["terminate_session", "force_terminate"]:
                # Opera√ß√µes cr√≠ticas requerem permiss√µes especiais
                if not self.security_guard.validate_user_access(operation, "admin_resource"):
                    logger.warning(f"üö´ Opera√ß√£o cr√≠tica de sess√£o bloqueada: {operation}")
                    return False
            
            logger.debug(f"‚úÖ Valida√ß√£o de seguran√ßa de sess√£o passou para: {operation}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o de seguran√ßa de sess√£o: {e}")
            # Em caso de erro, bloquear opera√ß√£o por seguran√ßa
            return False
    
    def _log_session_audit(self, operation: str, session_id: str, user_id: Optional[int],
                          success: bool, message: str):
        """
        Registra evento de auditoria de sess√£o.
        
        Args:
            operation: Opera√ß√£o de sess√£o
            session_id: ID da sess√£o
            user_id: ID do usu√°rio
            success: Se opera√ß√£o foi bem-sucedida
            message: Mensagem do evento
        """
        try:
            if self.security_guard:
                audit_event = {
                    'timestamp': datetime.now().isoformat(),
                    'component': 'SessionOrchestrator',
                    'operation': operation,
                    'session_id': session_id,
                    'user_id': user_id,
                    'success': success,
                    'message': message,
                    'user_authenticated': getattr(self.security_guard, '_is_user_authenticated', lambda: False)()
                }
                
                # Log estruturado para auditoria
                if success:
                    logger.info(f"üîê SESSION_AUDIT: {audit_event}")
                else:
                    logger.warning(f"üö´ SESSION_AUDIT: {audit_event}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro no log de auditoria de sess√£o: {e}")


# Inst√¢ncia global para conveni√™ncia
_session_orchestrator = None
_orchestrator_lock = Lock()

def get_session_orchestrator() -> SessionOrchestrator:
    """
    Retorna inst√¢ncia global do SessionOrchestrator.
    
    Returns:
        Inst√¢ncia do SessionOrchestrator
    """
    global _session_orchestrator
    
    if _session_orchestrator is None:
        with _orchestrator_lock:
            if _session_orchestrator is None:
                _session_orchestrator = SessionOrchestrator()
    
    return _session_orchestrator

def create_ai_session(user_id: Optional[int] = None, 
                     priority: SessionPriority = SessionPriority.NORMAL,
                     timeout: Optional[int] = None,
                     metadata: Optional[Dict[str, Any]] = None) -> str:
    """
    Fun√ß√£o de conveni√™ncia para criar sess√£o IA.
    
    Args:
        user_id: ID do usu√°rio (opcional)
        priority: Prioridade da sess√£o
        timeout: Timeout personalizado em segundos
        metadata: Metadata inicial da sess√£o
        
    Returns:
        ID da sess√£o criada
    """
    return get_session_orchestrator().create_session(user_id, priority, timeout, metadata)

def complete_ai_session(session_id: str, result: Optional[Dict[str, Any]] = None) -> bool:
    """
    Fun√ß√£o de conveni√™ncia para completar sess√£o IA.
    
    Args:
        session_id: ID da sess√£o
        result: Resultado final da sess√£o
        
    Returns:
        True se sucesso, False caso contr√°rio
    """
    return get_session_orchestrator().complete_session(session_id, result) 