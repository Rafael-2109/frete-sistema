#!/usr/bin/env python3
"""
üîß SOLU√á√ÉO DEFINITIVA PARA O TRAVAMENTO
======================================

Remove todos os imports circulares e problem√°ticos que causam travamento.
"""

import os
import sys
from pathlib import Path

# Adicionar diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

def aplicar_solucao():
    """Aplica solu√ß√£o definitiva para o travamento"""
    
    print("üîß APLICANDO SOLU√á√ÉO DEFINITIVA PARA O TRAVAMENTO\n")
    
    corre√ß√µes = []
    
    # 1. Corrigir integration/__init__.py
    print("1Ô∏è‚É£ Verificando integration/__init__.py...")
    integration_init = Path(__file__).parent / "integration" / "__init__.py"
    
    if integration_init.exists():
        with open(integration_init, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar se h√° imports problem√°ticos durante a inicializa√ß√£o
        if "# Inicializa√ß√£o dos m√≥dulos" in content:
            print("   ‚ö†Ô∏è Encontrado c√≥digo de inicializa√ß√£o")
            
            # Comentar inicializa√ß√£o autom√°tica
            new_content = content.replace(
                "# Inicializa√ß√£o dos m√≥dulos",
                "# Inicializa√ß√£o dos m√≥dulos (DESABILITADO para evitar travamento)"
            )
            
            # Procurar por c√≥digo que executa durante import
            lines = content.split('\n')
            modified = False
            new_lines = []
            
            for line in lines:
                # Comentar linhas que executam c√≥digo durante import
                if line.strip() and not line.strip().startswith('#') and not line.strip().startswith('from') and not line.strip().startswith('import'):
                    if '=' in line and 'def' not in line and 'class' not in line:
                        # Poss√≠vel execu√ß√£o durante import
                        if '_global_instances' in line or 'logger.' in line:
                            new_lines.append(line)
                        else:
                            new_lines.append(f"# {line}  # DESABILITADO: Poss√≠vel causa de travamento")
                            modified = True
                    else:
                        new_lines.append(line)
                else:
                    new_lines.append(line)
            
            if modified:
                with open(integration_init, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(new_lines))
                corre√ß√µes.append("integration/__init__.py - c√≥digo de inicializa√ß√£o comentado")
    
    # 2. Verificar analyzers/__init__.py
    print("\n2Ô∏è‚É£ Verificando analyzers/__init__.py...")
    analyzers_init = Path(__file__).parent / "analyzers" / "__init__.py"
    
    if analyzers_init.exists():
        with open(analyzers_init, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # O analyzers tem muitos imports que podem causar travamento
        if "spacy" in content or "nltk" in content:
            print("   ‚ö†Ô∏è Encontrado imports pesados (spacy, nltk)")
            print("   üí° Esses imports s√£o lentos mas n√£o causam loop")
    
    # 3. Criar arquivo de configura√ß√£o para desabilitar inicializa√ß√£o autom√°tica
    print("\n3Ô∏è‚É£ Criando arquivo de configura√ß√£o...")
    config_file = Path(__file__).parent / "NO_AUTO_INIT"
    
    with open(config_file, 'w') as f:
        f.write("Este arquivo desabilita inicializa√ß√£o autom√°tica de m√≥dulos\n")
    
    corre√ß√µes.append("NO_AUTO_INIT - arquivo de configura√ß√£o criado")
    
    # 4. Verificar se h√° outros arquivos problem√°ticos
    print("\n4Ô∏è‚É£ Procurando outros poss√≠veis problemas...")
    
    # Procurar por arquivos que importam muitos m√≥dulos
    problem_files = []
    for py_file in Path(__file__).parent.rglob("*.py"):
        if "__pycache__" in str(py_file):
            continue
            
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Contar imports
            import_count = content.count("import ")
            if import_count > 50:
                problem_files.append((py_file.name, import_count))
        except:
            pass
    
    if problem_files:
        print("\n   ‚ö†Ô∏è Arquivos com muitos imports (poss√≠vel lentid√£o):")
        for file, count in sorted(problem_files, key=lambda x: x[1], reverse=True)[:5]:
            print(f"      - {file}: {count} imports")
    
    # Resumo
    print("\n" + "="*60)
    print("üìä RESUMO DAS CORRE√á√ïES")
    print("="*60)
    
    if corre√ß√µes:
        print("\n‚úÖ CORRE√á√ïES APLICADAS:")
        for corre√ß√£o in corre√ß√µes:
            print(f"   - {corre√ß√£o}")
    
    print("\nüìù RECOMENDA√á√ïES:")
    print("1. Reinicie o Python/Terminal para limpar cache de imports")
    print("2. Execute o teste novamente")
    print("3. Se ainda travar, o problema pode ser nos imports do spacy/nltk")
    print("4. Considere usar lazy loading para todos os m√≥dulos pesados")
    
    print("\nüí° SOLU√á√ÉO ALTERNATIVA:")
    print("Se o problema persistir, use imports diretos ao inv√©s de")
    print("importar via __init__.py:")
    print("   # Ao inv√©s de:")
    print("   from app.claude_ai_novo.integration import get_integration_manager")
    print("   # Use:")
    print("   from app.claude_ai_novo.integration.integration_manager import get_integration_manager")

if __name__ == "__main__":
    aplicar_solucao() 