{
  "timestamp": "2025-07-12T19:17:27.488855",
  "stats": {
    "total_files": 181,
    "total_classes": 214,
    "unique_classes": 202,
    "duplicate_classes": 12,
    "files_with_duplicates": [
      "orchestrators\\orchestrator_manager.py",
      "analyzers\\analyzer_manager.py",
      "orchestrators\\main_orchestrator.py",
      "config\\basic_config.py",
      "analyzers\\performance_analyzer.py",
      "analyzers\\nlp_enhanced_analyzer.py",
      "analyzers\\intention_analyzer.py",
      "analyzers\\query_analyzer.py",
      "analyzers\\semantic_analyzer.py",
      "analyzers\\diagnostics_analyzer.py",
      "utils\\utils_manager.py",
      "analyzers\\structural_analyzer.py",
      "utils\\flask_context_wrapper.py",
      "config\\__init__.py",
      "analyzers\\__init__.py",
      "analyzers\\metacognitive_analyzer.py"
    ]
  },
  "duplicates": {
    "AnalyzerManager": [
      {
        "file": "analyzers\\analyzer_manager.py",
        "line": 103,
        "docstring": "Coordenar múltiplos analyzers (NLP, intenção, contexto, estrutural, semântico)\n\nGerencia e coordena ...",
        "bases": [
          "BaseContextManager"
        ],
        "methods": [
          "__init__",
          "_initialize_components",
          "analyze_query",
          "_should_use_nlp_analysis",
          "_calculate_combined_confidence",
          "_generate_combined_insights",
          "initialize_diagnostics_analyzer",
          "analyze_diagnostics",
          "analyze_intention",
          "analyze_semantic"
        ],
        "method_count": 18,
        "size_lines": 543
      },
      {
        "file": "analyzers\\__init__.py",
        "line": 77,
        "docstring": "",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_query"
        ],
        "method_count": 2,
        "size_lines": 8
      }
    ],
    "DiagnosticsAnalyzer": [
      {
        "file": "analyzers\\diagnostics_analyzer.py",
        "line": 21,
        "docstring": "Gerador de diagnósticos e estatísticas semânticas.\n\nProduz análises completas sobre qualidade, perfo...",
        "bases": [],
        "methods": [
          "__init__",
          "scanning_manager",
          "gerar_estatisticas_completas",
          "diagnosticar_qualidade",
          "_avaliar_qualidade_geral",
          "_determinar_status_geral",
          "gerar_relatorio_enriquecido",
          "_avaliar_integracao",
          "_verificar_saude_sistema",
          "_gerar_recomendacoes_sistema"
        ],
        "method_count": 11,
        "size_lines": 392
      },
      {
        "file": "analyzers\\__init__.py",
        "line": 73,
        "docstring": "",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_diagnostics"
        ],
        "method_count": 2,
        "size_lines": 3
      }
    ],
    "IntentionAnalyzer": [
      {
        "file": "analyzers\\intention_analyzer.py",
        "line": 13,
        "docstring": "Analisador especializado em detectar intenções do usuário",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_intention",
          "_detectar_intencoes_multiplas",
          "_analisar_contexto_intencao",
          "_detectar_contexto_temporal",
          "_detectar_escopo",
          "_detectar_especificidade",
          "_detectar_publico_alvo",
          "_detectar_urgencia",
          "_calcular_complexidade_intencao"
        ],
        "method_count": 13,
        "size_lines": 289
      },
      {
        "file": "analyzers\\__init__.py",
        "line": 38,
        "docstring": "",
        "bases": [],
        "methods": [
          "__init__",
          "analyze"
        ],
        "method_count": 2,
        "size_lines": 3
      }
    ],
    "MetacognitiveAnalyzer": [
      {
        "file": "analyzers\\metacognitive_analyzer.py",
        "line": 13,
        "docstring": "Sistema de IA Metacognitiva - Auto-reflexão e melhoria contínua",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_own_performance",
          "_assess_query_complexity",
          "_assess_response_quality",
          "_calculate_confidence",
          "_assess_cognitive_load",
          "_assess_domain_coverage",
          "_interpret_user_feedback",
          "_suggest_self_improvements"
        ],
        "method_count": 9,
        "size_lines": 181
      },
      {
        "file": "analyzers\\__init__.py",
        "line": 46,
        "docstring": "",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_own_performance"
        ],
        "method_count": 2,
        "size_lines": 3
      }
    ],
    "NLPEnhancedAnalyzer": [
      {
        "file": "analyzers\\nlp_enhanced_analyzer.py",
        "line": 66,
        "docstring": "Analisador com capacidades NLP avançadas",
        "bases": [],
        "methods": [
          "__init__",
          "analisar_com_nlp",
          "analyze_text",
          "_aplicar_correcoes",
          "_tokenizar_spacy",
          "_tokenizar_basico",
          "_extrair_entidades_spacy",
          "_detectar_negacoes",
          "_calcular_similaridades",
          "_extrair_palavras_chave"
        ],
        "method_count": 12,
        "size_lines": 280
      },
      {
        "file": "analyzers\\__init__.py",
        "line": 50,
        "docstring": "",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_text"
        ],
        "method_count": 2,
        "size_lines": 3
      }
    ],
    "PerformanceAnalyzer": [
      {
        "file": "analyzers\\performance_analyzer.py",
        "line": 32,
        "docstring": "Especialista em analisar performance e gerar analytics avançadas.\n\nResponsabilidades:\n- Analisar mét...",
        "bases": [],
        "methods": [
          "__init__",
          "_ensure_table_exists",
          "analyze_ai_performance",
          "analyze_user_behavior",
          "detect_anomalies",
          "_analyze_trends",
          "_create_distribution",
          "_calculate_engagement_score",
          "_get_engagement_level",
          "_generate_insights"
        ],
        "method_count": 13,
        "size_lines": 572
      },
      {
        "file": "analyzers\\__init__.py",
        "line": 67,
        "docstring": "",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_ai_performance",
          "analyze_user_behavior",
          "detect_anomalies"
        ],
        "method_count": 4,
        "size_lines": 5
      }
    ],
    "QueryAnalyzer": [
      {
        "file": "analyzers\\query_analyzer.py",
        "line": 45,
        "docstring": "Analisador de consultas avançado",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_query",
          "_detect_query_type",
          "_calculate_complexity",
          "_detect_domains",
          "_extract_entities",
          "_detect_temporal_patterns",
          "_has_question_words",
          "_detect_urgency"
        ],
        "method_count": 9,
        "size_lines": 175
      },
      {
        "file": "analyzers\\__init__.py",
        "line": 42,
        "docstring": "",
        "bases": [],
        "methods": [
          "__init__",
          "analyze"
        ],
        "method_count": 2,
        "size_lines": 3
      }
    ],
    "SemanticAnalyzer": [
      {
        "file": "analyzers\\semantic_analyzer.py",
        "line": 15,
        "docstring": "Analisador semântico para consultas, dados e contexto.\n\nResponsabilidades:\n- Análise semântica de co...",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_query",
          "extract_entities",
          "classify_intent",
          "analyze_semantic_similarity",
          "_extract_entities",
          "_identify_domains",
          "_analyze_sentiment",
          "_extract_keywords",
          "_determine_intent"
        ],
        "method_count": 15,
        "size_lines": 377
      },
      {
        "file": "analyzers\\__init__.py",
        "line": 61,
        "docstring": "",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_query",
          "extract_entities",
          "classify_intent"
        ],
        "method_count": 4,
        "size_lines": 5
      }
    ],
    "StructuralAnalyzer": [
      {
        "file": "analyzers\\structural_analyzer.py",
        "line": 14,
        "docstring": "Analisador estrutural para código, dados e arquitetura.\n\nResponsabilidades:\n- Análise de estrutura d...",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_structure",
          "validate_architecture",
          "detect_patterns",
          "_count_nested_levels",
          "_analyze_data_types",
          "_detect_structural_issues",
          "_generate_recommendations",
          "_assess_structure_quality",
          "_calculate_complexity"
        ],
        "method_count": 10,
        "size_lines": 260
      },
      {
        "file": "analyzers\\__init__.py",
        "line": 55,
        "docstring": "",
        "bases": [],
        "methods": [
          "__init__",
          "analyze_structure",
          "validate_architecture",
          "detect_patterns"
        ],
        "method_count": 4,
        "size_lines": 5
      }
    ],
    "ClaudeAIConfig": [
      {
        "file": "config\\basic_config.py",
        "line": 9,
        "docstring": "Configurações básicas do Claude AI - FONTE DA VERDADE",
        "bases": [],
        "methods": [
          "get_anthropic_api_key",
          "get_claude_params",
          "to_dict",
          "validate"
        ],
        "method_count": 4,
        "size_lines": 63
      },
      {
        "file": "config\\__init__.py",
        "line": 81,
        "docstring": "Classe de compatibilidade para configurações do Claude AI.\n\nRedireciona para o sistema de configuraç...",
        "bases": [],
        "methods": [
          "__init__",
          "get",
          "set",
          "reload",
          "get_ai_config",
          "get_database_config",
          "is_debug",
          "get_anthropic_api_key"
        ],
        "method_count": 8,
        "size_lines": 65
      }
    ],
    "OrchestrationMode": [
      {
        "file": "orchestrators\\main_orchestrator.py",
        "line": 21,
        "docstring": "Modos de orquestração",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "method_count": 0,
        "size_lines": 5
      },
      {
        "file": "orchestrators\\orchestrator_manager.py",
        "line": 37,
        "docstring": "Modos de orquestração disponíveis.",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "method_count": 0,
        "size_lines": 6
      }
    ],
    "FlaskContextWrapper": [
      {
        "file": "utils\\flask_context_wrapper.py",
        "line": 11,
        "docstring": "Wrapper para abstrair contexto Flask",
        "bases": [
          "BaseProcessor"
        ],
        "methods": [
          "__init__",
          "_init_flask_context",
          "get_app_config",
          "get_db_session",
          "is_flask_available",
          "get_flask_context_info",
          "execute_in_app_context"
        ],
        "method_count": 7,
        "size_lines": 87
      },
      {
        "file": "utils\\utils_manager.py",
        "line": 28,
        "docstring": "Wrapper para abstrair contexto Flask",
        "bases": [],
        "methods": [
          "__init__",
          "_init_flask_context",
          "_get_app_config",
          "_get_db_session",
          "is_flask_available"
        ],
        "method_count": 5,
        "size_lines": 44
      }
    ]
  },
  "analysis": {
    "AnalyzerManager": {
      "count": 2,
      "locations": [
        {
          "file": "analyzers\\analyzer_manager.py",
          "line": 103,
          "docstring": "Coordenar múltiplos analyzers (NLP, intenção, contexto, estrutural, semântico)\n\nGerencia e coordena ...",
          "bases": [
            "BaseContextManager"
          ],
          "methods": [
            "__init__",
            "_initialize_components",
            "analyze_query",
            "_should_use_nlp_analysis",
            "_calculate_combined_confidence",
            "_generate_combined_insights",
            "initialize_diagnostics_analyzer",
            "analyze_diagnostics",
            "analyze_intention",
            "analyze_semantic"
          ],
          "method_count": 18,
          "size_lines": 543
        },
        {
          "file": "analyzers\\__init__.py",
          "line": 77,
          "docstring": "",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_query"
          ],
          "method_count": 2,
          "size_lines": 8
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": false,
        "methods_identical": false,
        "method_overlap": 0.2,
        "size_variance": 535
      },
      "recommendation": "RENOMEAR: Baixa similaridade (20%). Provavelmente são classes diferentes."
    },
    "DiagnosticsAnalyzer": {
      "count": 2,
      "locations": [
        {
          "file": "analyzers\\diagnostics_analyzer.py",
          "line": 21,
          "docstring": "Gerador de diagnósticos e estatísticas semânticas.\n\nProduz análises completas sobre qualidade, perfo...",
          "bases": [],
          "methods": [
            "__init__",
            "scanning_manager",
            "gerar_estatisticas_completas",
            "diagnosticar_qualidade",
            "_avaliar_qualidade_geral",
            "_determinar_status_geral",
            "gerar_relatorio_enriquecido",
            "_avaliar_integracao",
            "_verificar_saude_sistema",
            "_gerar_recomendacoes_sistema"
          ],
          "method_count": 11,
          "size_lines": 392
        },
        {
          "file": "analyzers\\__init__.py",
          "line": 73,
          "docstring": "",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_diagnostics"
          ],
          "method_count": 2,
          "size_lines": 3
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": true,
        "methods_identical": false,
        "method_overlap": 0.09090909090909091,
        "size_variance": 389
      },
      "recommendation": "RENOMEAR: Baixa similaridade (9%). Provavelmente são classes diferentes."
    },
    "IntentionAnalyzer": {
      "count": 2,
      "locations": [
        {
          "file": "analyzers\\intention_analyzer.py",
          "line": 13,
          "docstring": "Analisador especializado em detectar intenções do usuário",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_intention",
            "_detectar_intencoes_multiplas",
            "_analisar_contexto_intencao",
            "_detectar_contexto_temporal",
            "_detectar_escopo",
            "_detectar_especificidade",
            "_detectar_publico_alvo",
            "_detectar_urgencia",
            "_calcular_complexidade_intencao"
          ],
          "method_count": 13,
          "size_lines": 289
        },
        {
          "file": "analyzers\\__init__.py",
          "line": 38,
          "docstring": "",
          "bases": [],
          "methods": [
            "__init__",
            "analyze"
          ],
          "method_count": 2,
          "size_lines": 3
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": true,
        "methods_identical": false,
        "method_overlap": 0.09090909090909091,
        "size_variance": 286
      },
      "recommendation": "RENOMEAR: Baixa similaridade (9%). Provavelmente são classes diferentes."
    },
    "MetacognitiveAnalyzer": {
      "count": 2,
      "locations": [
        {
          "file": "analyzers\\metacognitive_analyzer.py",
          "line": 13,
          "docstring": "Sistema de IA Metacognitiva - Auto-reflexão e melhoria contínua",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_own_performance",
            "_assess_query_complexity",
            "_assess_response_quality",
            "_calculate_confidence",
            "_assess_cognitive_load",
            "_assess_domain_coverage",
            "_interpret_user_feedback",
            "_suggest_self_improvements"
          ],
          "method_count": 9,
          "size_lines": 181
        },
        {
          "file": "analyzers\\__init__.py",
          "line": 46,
          "docstring": "",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_own_performance"
          ],
          "method_count": 2,
          "size_lines": 3
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": true,
        "methods_identical": false,
        "method_overlap": 0.2222222222222222,
        "size_variance": 178
      },
      "recommendation": "RENOMEAR: Baixa similaridade (22%). Provavelmente são classes diferentes."
    },
    "NLPEnhancedAnalyzer": {
      "count": 2,
      "locations": [
        {
          "file": "analyzers\\nlp_enhanced_analyzer.py",
          "line": 66,
          "docstring": "Analisador com capacidades NLP avançadas",
          "bases": [],
          "methods": [
            "__init__",
            "analisar_com_nlp",
            "analyze_text",
            "_aplicar_correcoes",
            "_tokenizar_spacy",
            "_tokenizar_basico",
            "_extrair_entidades_spacy",
            "_detectar_negacoes",
            "_calcular_similaridades",
            "_extrair_palavras_chave"
          ],
          "method_count": 12,
          "size_lines": 280
        },
        {
          "file": "analyzers\\__init__.py",
          "line": 50,
          "docstring": "",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_text"
          ],
          "method_count": 2,
          "size_lines": 3
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": true,
        "methods_identical": false,
        "method_overlap": 0.2,
        "size_variance": 277
      },
      "recommendation": "RENOMEAR: Baixa similaridade (20%). Provavelmente são classes diferentes."
    },
    "PerformanceAnalyzer": {
      "count": 2,
      "locations": [
        {
          "file": "analyzers\\performance_analyzer.py",
          "line": 32,
          "docstring": "Especialista em analisar performance e gerar analytics avançadas.\n\nResponsabilidades:\n- Analisar mét...",
          "bases": [],
          "methods": [
            "__init__",
            "_ensure_table_exists",
            "analyze_ai_performance",
            "analyze_user_behavior",
            "detect_anomalies",
            "_analyze_trends",
            "_create_distribution",
            "_calculate_engagement_score",
            "_get_engagement_level",
            "_generate_insights"
          ],
          "method_count": 13,
          "size_lines": 572
        },
        {
          "file": "analyzers\\__init__.py",
          "line": 67,
          "docstring": "",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_ai_performance",
            "analyze_user_behavior",
            "detect_anomalies"
          ],
          "method_count": 4,
          "size_lines": 5
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": true,
        "methods_identical": false,
        "method_overlap": 0.4,
        "size_variance": 567
      },
      "recommendation": "ANALISAR: Similaridade média (40%). Revisar caso a caso."
    },
    "QueryAnalyzer": {
      "count": 2,
      "locations": [
        {
          "file": "analyzers\\query_analyzer.py",
          "line": 45,
          "docstring": "Analisador de consultas avançado",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_query",
            "_detect_query_type",
            "_calculate_complexity",
            "_detect_domains",
            "_extract_entities",
            "_detect_temporal_patterns",
            "_has_question_words",
            "_detect_urgency"
          ],
          "method_count": 9,
          "size_lines": 175
        },
        {
          "file": "analyzers\\__init__.py",
          "line": 42,
          "docstring": "",
          "bases": [],
          "methods": [
            "__init__",
            "analyze"
          ],
          "method_count": 2,
          "size_lines": 3
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": true,
        "methods_identical": false,
        "method_overlap": 0.1,
        "size_variance": 172
      },
      "recommendation": "RENOMEAR: Baixa similaridade (10%). Provavelmente são classes diferentes."
    },
    "SemanticAnalyzer": {
      "count": 2,
      "locations": [
        {
          "file": "analyzers\\semantic_analyzer.py",
          "line": 15,
          "docstring": "Analisador semântico para consultas, dados e contexto.\n\nResponsabilidades:\n- Análise semântica de co...",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_query",
            "extract_entities",
            "classify_intent",
            "analyze_semantic_similarity",
            "_extract_entities",
            "_identify_domains",
            "_analyze_sentiment",
            "_extract_keywords",
            "_determine_intent"
          ],
          "method_count": 15,
          "size_lines": 377
        },
        {
          "file": "analyzers\\__init__.py",
          "line": 61,
          "docstring": "",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_query",
            "extract_entities",
            "classify_intent"
          ],
          "method_count": 4,
          "size_lines": 5
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": true,
        "methods_identical": false,
        "method_overlap": 0.4,
        "size_variance": 372
      },
      "recommendation": "ANALISAR: Similaridade média (40%). Revisar caso a caso."
    },
    "StructuralAnalyzer": {
      "count": 2,
      "locations": [
        {
          "file": "analyzers\\structural_analyzer.py",
          "line": 14,
          "docstring": "Analisador estrutural para código, dados e arquitetura.\n\nResponsabilidades:\n- Análise de estrutura d...",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_structure",
            "validate_architecture",
            "detect_patterns",
            "_count_nested_levels",
            "_analyze_data_types",
            "_detect_structural_issues",
            "_generate_recommendations",
            "_assess_structure_quality",
            "_calculate_complexity"
          ],
          "method_count": 10,
          "size_lines": 260
        },
        {
          "file": "analyzers\\__init__.py",
          "line": 55,
          "docstring": "",
          "bases": [],
          "methods": [
            "__init__",
            "analyze_structure",
            "validate_architecture",
            "detect_patterns"
          ],
          "method_count": 4,
          "size_lines": 5
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": true,
        "methods_identical": false,
        "method_overlap": 0.4,
        "size_variance": 255
      },
      "recommendation": "ANALISAR: Similaridade média (40%). Revisar caso a caso."
    },
    "ClaudeAIConfig": {
      "count": 2,
      "locations": [
        {
          "file": "config\\basic_config.py",
          "line": 9,
          "docstring": "Configurações básicas do Claude AI - FONTE DA VERDADE",
          "bases": [],
          "methods": [
            "get_anthropic_api_key",
            "get_claude_params",
            "to_dict",
            "validate"
          ],
          "method_count": 4,
          "size_lines": 63
        },
        {
          "file": "config\\__init__.py",
          "line": 81,
          "docstring": "Classe de compatibilidade para configurações do Claude AI.\n\nRedireciona para o sistema de configuraç...",
          "bases": [],
          "methods": [
            "__init__",
            "get",
            "set",
            "reload",
            "get_ai_config",
            "get_database_config",
            "is_debug",
            "get_anthropic_api_key"
          ],
          "method_count": 8,
          "size_lines": 65
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": true,
        "methods_identical": false,
        "method_overlap": 0.09090909090909091,
        "size_variance": 2
      },
      "recommendation": "RENOMEAR: Baixa similaridade (9%). Provavelmente são classes diferentes."
    },
    "OrchestrationMode": {
      "count": 2,
      "locations": [
        {
          "file": "orchestrators\\main_orchestrator.py",
          "line": 21,
          "docstring": "Modos de orquestração",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "method_count": 0,
          "size_lines": 5
        },
        {
          "file": "orchestrators\\orchestrator_manager.py",
          "line": 37,
          "docstring": "Modos de orquestração disponíveis.",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "method_count": 0,
          "size_lines": 6
        }
      ],
      "similarity": {
        "identical": true,
        "bases_identical": true,
        "methods_identical": true,
        "method_overlap": 0,
        "size_variance": 1
      },
      "recommendation": "CONSOLIDAR: Classes idênticas. Manter apenas uma em local apropriado."
    },
    "FlaskContextWrapper": {
      "count": 2,
      "locations": [
        {
          "file": "utils\\flask_context_wrapper.py",
          "line": 11,
          "docstring": "Wrapper para abstrair contexto Flask",
          "bases": [
            "BaseProcessor"
          ],
          "methods": [
            "__init__",
            "_init_flask_context",
            "get_app_config",
            "get_db_session",
            "is_flask_available",
            "get_flask_context_info",
            "execute_in_app_context"
          ],
          "method_count": 7,
          "size_lines": 87
        },
        {
          "file": "utils\\utils_manager.py",
          "line": 28,
          "docstring": "Wrapper para abstrair contexto Flask",
          "bases": [],
          "methods": [
            "__init__",
            "_init_flask_context",
            "_get_app_config",
            "_get_db_session",
            "is_flask_available"
          ],
          "method_count": 5,
          "size_lines": 44
        }
      ],
      "similarity": {
        "identical": false,
        "bases_identical": false,
        "methods_identical": false,
        "method_overlap": 0.3333333333333333,
        "size_variance": 43
      },
      "recommendation": "ANALISAR: Similaridade média (33%). Revisar caso a caso."
    }
  }
}