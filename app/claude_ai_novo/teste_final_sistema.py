#!/usr/bin/env python3
"""
üß™ TESTE FINAL DO SISTEMA
========================

Verifica se o sistema est√° funcionando corretamente ap√≥s todas as corre√ß√µes.
"""

import os
import sys
import time
import asyncio
from pathlib import Path

# Adicionar diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

# Configurar vari√°veis de ambiente
os.environ['USE_NEW_CLAUDE_SYSTEM'] = 'true'

def teste_completo():
    """Executa teste completo do sistema"""
    print("\nüß™ TESTE FINAL DO SISTEMA CLAUDE AI NOVO\n")
    
    sucesso_total = True
    
    # Teste 1: Imports diretos
    print("1Ô∏è‚É£ TESTANDO IMPORTS DIRETOS...")
    try:
        from app.claude_ai_novo.integration.integration_manager import get_integration_manager
        from app.claude_ai_novo.orchestrators.orchestrator_manager import get_orchestrator_manager
        print("   ‚úÖ Imports diretos funcionando")
    except Exception as e:
        print(f"   ‚ùå Erro nos imports: {e}")
        sucesso_total = False
        return sucesso_total
    
    # Teste 2: Criar inst√¢ncias
    print("\n2Ô∏è‚É£ TESTANDO CRIA√á√ÉO DE INST√ÇNCIAS...")
    try:
        start = time.time()
        integration_manager = get_integration_manager()
        print(f"   ‚úÖ IntegrationManager criado em {time.time() - start:.2f}s")
        
        # Verificar status
        status = integration_manager.get_system_status()
        print(f"   üìä Status: orchestrator_loaded={status.get('orchestrator_loaded', False)}")
        print(f"   üìä Dados dispon√≠veis: {status.get('data_provider_available', False)}")
        print(f"   üìä Claude dispon√≠vel: {status.get('claude_integration_available', False)}")
        
    except Exception as e:
        print(f"   ‚ùå Erro ao criar inst√¢ncias: {e}")
        sucesso_total = False
        return sucesso_total
    
    # Teste 3: Processar query simples
    print("\n3Ô∏è‚É£ TESTANDO PROCESSAMENTO DE QUERY...")
    try:
        # Criar fun√ß√£o async para teste
        async def testar_query():
            result = await integration_manager.process_unified_query(
                "teste do sistema",
                {"test": True}
            )
            return result
        
        # Executar
        start = time.time()
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(testar_query())
        
        print(f"   ‚úÖ Query processada em {time.time() - start:.2f}s")
        print(f"   üìä Resultado: success={result.get('success', False)}")
        
        if result.get('response'):
            print(f"   üìä Resposta: {str(result['response'])[:100]}...")
        
    except Exception as e:
        print(f"   ‚ùå Erro ao processar query: {e}")
        sucesso_total = False
    
    # Teste 4: Verificar componentes
    print("\n4Ô∏è‚É£ VERIFICANDO COMPONENTES DO SISTEMA...")
    try:
        # Carregar orchestrator
        integration_manager._ensure_orchestrator_loaded()
        
        if integration_manager.orchestrator_manager:
            print("   ‚úÖ OrchestratorManager carregado")
            
            # Verificar sub-componentes
            orch = integration_manager.orchestrator_manager
            if hasattr(orch, 'main_orchestrator'):
                print("   ‚úÖ MainOrchestrator dispon√≠vel")
            if hasattr(orch, 'session_orchestrator'):
                print("   ‚úÖ SessionOrchestrator dispon√≠vel")
            if hasattr(orch, 'workflow_orchestrator'):
                print("   ‚úÖ WorkflowOrchestrator dispon√≠vel")
        else:
            print("   ‚ö†Ô∏è OrchestratorManager n√£o carregado")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar componentes: {e}")
        sucesso_total = False
    
    # Teste 5: Testar claude_transition
    print("\n5Ô∏è‚É£ TESTANDO CLAUDE TRANSITION...")
    try:
        from app.claude_transition import processar_consulta_transicao
        
        start = time.time()
        resposta = processar_consulta_transicao("Como est√° o sistema?")
        
        print(f"   ‚úÖ Claude Transition funcionando em {time.time() - start:.2f}s")
        print(f"   üìä Resposta: {str(resposta)[:100]}...")
        
    except Exception as e:
        print(f"   ‚ùå Erro no Claude Transition: {e}")
        sucesso_total = False
    
    # Resumo final
    print("\n" + "="*60)
    print("üìä RESUMO DO TESTE FINAL")
    print("="*60)
    
    if sucesso_total:
        print("\n‚úÖ TODOS OS TESTES PASSARAM!")
        print("\nüéâ SISTEMA CLAUDE AI NOVO EST√Å 100% FUNCIONAL!")
        print("\nüí° O QUE FOI CORRIGIDO:")
        print("   - Imports circulares resolvidos")
        print("   - Travamentos eliminados")
        print("   - Lazy loading funcionando")
        print("   - Todos os componentes operacionais")
        
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("   1. Reinicie o servidor Flask")
        print("   2. O sistema est√° pronto para produ√ß√£o")
        print("   3. Use imports diretos em novos c√≥digos")
        
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM")
        print("Verifique os erros acima para mais detalhes")
    
    return sucesso_total

if __name__ == "__main__":
    # Executar teste
    sucesso = teste_completo()
    
    # Retornar c√≥digo de sa√≠da apropriado
    sys.exit(0 if sucesso else 1) 