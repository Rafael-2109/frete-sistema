#!/usr/bin/env python3
"""
üîç AN√ÅLISE DE IMPORTS QUEBRADOS - Claude AI Novo
==============================================

Script para detectar:
- Imports quebrados (n√£o encontrados)
- S√≠mbolos n√£o definidos
- Imports n√£o utilizados
- Depend√™ncias circulares
- Problemas de nomenclatura

An√°lise completa da pasta claude_ai_novo
"""

import os
import ast
import sys
import importlib.util
import logging
from pathlib import Path
from typing import Dict, List, Set, Any, Optional, Tuple
from collections import defaultdict, Counter
import re
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ImportAnalyzer:
    """Analisador de imports para detectar problemas"""
    
    def __init__(self, root_dir: str = "app/claude_ai_novo"):
        self.root_dir = Path(root_dir)
        self.results = {
            'broken_imports': [],
            'undefined_symbols': [],
            'unused_imports': [],
            'circular_dependencies': [],
            'naming_issues': [],
            'missing_modules': [],
            'statistics': {}
        }
        self.python_files = []
        self.module_graph = defaultdict(set)
        self.import_usage = defaultdict(list)
        
        # Padr√µes comuns de problemas
        self.common_issues = {
            'flask_context': ['current_app', 'g', 'request', 'session'],
            'database': ['db', 'session', 'models'],
            'auth': ['login_required', 'current_user'],
            'missing_inits': []
        }
    
    def scan_directory(self) -> Dict[str, Any]:
        """Escaneia diret√≥rio completo"""
        logger.info(f"üîç Iniciando an√°lise de imports em: {self.root_dir}")
        
        # 1. Coletar todos os arquivos Python
        self._collect_python_files()
        
        # 2. Analisar cada arquivo
        self._analyze_files()
        
        # 3. Detectar problemas espec√≠ficos
        self._detect_broken_imports()
        self._detect_undefined_symbols()
        self._detect_unused_imports()
        self._detect_circular_dependencies()
        self._detect_naming_issues()
        self._detect_missing_modules()
        
        # 4. Gerar estat√≠sticas
        self._generate_statistics()
        
        # 5. Gerar relat√≥rio
        return self._generate_report()
    
    def _collect_python_files(self):
        """Coleta todos os arquivos Python"""
        self.python_files = []
        
        for root, dirs, files in os.walk(self.root_dir):
            # Ignorar __pycache__ e diret√≥rios ocultos
            dirs[:] = [d for d in dirs if not d.startswith('.') and d != '__pycache__']
            
            for file in files:
                if file.endswith('.py'):
                    file_path = Path(root) / file
                    self.python_files.append(file_path)
        
        logger.info(f"üìÅ Encontrados {len(self.python_files)} arquivos Python")
    
    def _analyze_files(self):
        """Analisa cada arquivo Python"""
        for file_path in self.python_files:
            try:
                self._analyze_single_file(file_path)
            except Exception as e:
                logger.error(f"‚ùå Erro ao analisar {file_path}: {e}")
    
    def _analyze_single_file(self, file_path: Path):
        """Analisa um arquivo Python espec√≠fico"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Parse AST
            tree = ast.parse(content, filename=str(file_path))
            
            # Extrair imports
            imports = self._extract_imports(tree)
            
            # Extrair s√≠mbolos usados
            symbols = self._extract_symbols(tree)
            
            # Armazenar informa√ß√µes
            rel_path = str(file_path.relative_to(self.root_dir))
            self.import_usage[rel_path] = {
                'imports': imports,
                'symbols': symbols,
                'content': content,
                'tree': tree
            }
            
        except SyntaxError as e:
            logger.error(f"‚ùå Erro de sintaxe em {file_path}: {e}")
            self.results['broken_imports'].append({
                'file': str(file_path),
                'error': f"Syntax Error: {e}",
                'type': 'syntax_error'
            })
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar {file_path}: {e}")
    
    def _extract_imports(self, tree: ast.AST) -> List[Dict]:
        """Extrai imports de um AST"""
        imports = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    imports.append({
                        'type': 'import',
                        'module': alias.name,
                        'alias': alias.asname,
                        'line': node.lineno
                    })
            elif isinstance(node, ast.ImportFrom):
                module = node.module or ''
                for alias in node.names:
                    imports.append({
                        'type': 'from_import',
                        'module': module,
                        'name': alias.name,
                        'alias': alias.asname,
                        'line': node.lineno,
                        'level': node.level
                    })
        
        return imports
    
    def _extract_symbols(self, tree: ast.AST) -> Set[str]:
        """Extrai s√≠mbolos usados no c√≥digo"""
        symbols = set()
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Name):
                symbols.add(node.id)
            elif isinstance(node, ast.Attribute):
                # Para casos como module.function
                if isinstance(node.value, ast.Name):
                    symbols.add(f"{node.value.id}.{node.attr}")
        
        return symbols
    
    def _detect_broken_imports(self):
        """Detecta imports quebrados"""
        logger.info("üîç Detectando imports quebrados...")
        
        for file_path, info in self.import_usage.items():
            for import_info in info['imports']:
                try:
                    # Tentar resolver import
                    if import_info['type'] == 'import':
                        module_name = import_info['module']
                    else:  # from_import
                        module_name = import_info['module']
                    
                    # Verificar se √© import relativo ou absoluto
                    if import_info.get('level', 0) > 0:
                        # Import relativo
                        success = self._check_relative_import(file_path, import_info)
                    else:
                        # Import absoluto
                        success = self._check_absolute_import(module_name)
                    
                    if not success:
                        self.results['broken_imports'].append({
                            'file': file_path,
                            'import': import_info,
                            'error': f"M√≥dulo '{module_name}' n√£o encontrado",
                            'type': 'module_not_found'
                        })
                        
                except Exception as e:
                    self.results['broken_imports'].append({
                        'file': file_path,
                        'import': import_info,
                        'error': str(e),
                        'type': 'import_error'
                    })
    
    def _check_relative_import(self, file_path: str, import_info: Dict) -> bool:
        """Verifica import relativo"""
        try:
            # Calcular caminho relativo
            current_dir = Path(file_path).parent
            level = import_info.get('level', 1)
            
            # Subir n√≠veis necess√°rios
            target_dir = current_dir
            for _ in range(level):
                target_dir = target_dir.parent
            
            # Verificar se m√≥dulo existe
            module_name = import_info['module']
            if module_name:
                module_path = target_dir / module_name.replace('.', '/')
                return module_path.exists() or (module_path.with_suffix('.py')).exists()
            
            return True
            
        except Exception:
            return False
    
    def _check_absolute_import(self, module_name: str) -> bool:
        """Verifica import absoluto"""
        try:
            # Verificar se √© m√≥dulo built-in
            if module_name in sys.builtin_module_names:
                return True
            
            # Tentar importar
            spec = importlib.util.find_spec(module_name)
            return spec is not None
            
        except Exception:
            return False
    
    def _detect_undefined_symbols(self):
        """Detecta s√≠mbolos n√£o definidos"""
        logger.info("üîç Detectando s√≠mbolos n√£o definidos...")
        
        for file_path, info in self.import_usage.items():
            # S√≠mbolos importados
            imported_symbols = set()
            for import_info in info['imports']:
                if import_info['type'] == 'import':
                    name = import_info['alias'] or import_info['module'].split('.')[-1]
                    imported_symbols.add(name)
                else:  # from_import
                    name = import_info['alias'] or import_info['name']
                    imported_symbols.add(name)
            
            # S√≠mbolos definidos localmente
            defined_symbols = set()
            for node in ast.walk(info['tree']):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)):
                    defined_symbols.add(node.name)
                elif isinstance(node, ast.Assign):
                    for target in node.targets:
                        if isinstance(target, ast.Name):
                            defined_symbols.add(target.id)
            
            # S√≠mbolos built-in
            builtin_symbols = set(dir(__builtins__))
            
            # Verificar s√≠mbolos usados
            all_available = imported_symbols | defined_symbols | builtin_symbols
            
            for symbol in info['symbols']:
                # Separar s√≠mbolos compostos (module.function)
                base_symbol = symbol.split('.')[0]
                
                if base_symbol not in all_available and not base_symbol.startswith('_'):
                    self.results['undefined_symbols'].append({
                        'file': file_path,
                        'symbol': symbol,
                        'line': 'unknown',  # Seria necess√°rio mais an√°lise AST
                        'type': 'undefined_symbol'
                    })
    
    def _detect_unused_imports(self):
        """Detecta imports n√£o utilizados"""
        logger.info("üîç Detectando imports n√£o utilizados...")
        
        for file_path, info in self.import_usage.items():
            for import_info in info['imports']:
                # Nome do s√≠mbolo importado
                if import_info['type'] == 'import':
                    symbol_name = import_info['alias'] or import_info['module'].split('.')[-1]
                else:  # from_import
                    symbol_name = import_info['alias'] or import_info['name']
                
                # Verificar se √© usado
                if symbol_name not in info['symbols']:
                    # Verificar se √© usado como parte de outros s√≠mbolos
                    used_in_composite = any(
                        symbol.startswith(f"{symbol_name}.") 
                        for symbol in info['symbols']
                    )
                    
                    if not used_in_composite:
                        self.results['unused_imports'].append({
                            'file': file_path,
                            'import': import_info,
                            'symbol': symbol_name,
                            'type': 'unused_import'
                        })
    
    def _detect_circular_dependencies(self):
        """Detecta depend√™ncias circulares"""
        logger.info("üîç Detectando depend√™ncias circulares...")
        
        # Construir grafo de depend√™ncias
        for file_path, info in self.import_usage.items():
            for import_info in info['imports']:
                if import_info.get('level', 0) > 0:  # Import relativo
                    # Calcular m√≥dulo alvo
                    target_module = self._resolve_relative_import(file_path, import_info)
                    if target_module:
                        self.module_graph[file_path].add(target_module)
        
        # Detectar ciclos usando DFS
        visited = set()
        rec_stack = set()
        
        def has_cycle(node, path):
            if node in rec_stack:
                # Encontrou ciclo
                cycle_start = path.index(node)
                cycle = path[cycle_start:] + [node]
                self.results['circular_dependencies'].append({
                    'cycle': cycle,
                    'type': 'circular_dependency'
                })
                return True
            
            if node in visited:
                return False
            
            visited.add(node)
            rec_stack.add(node)
            path.append(node)
            
            for neighbor in self.module_graph[node]:
                if has_cycle(neighbor, path):
                    return True
            
            rec_stack.remove(node)
            path.pop()
            return False
        
        for node in self.module_graph:
            if node not in visited:
                has_cycle(node, [])
    
    def _resolve_relative_import(self, file_path: str, import_info: Dict) -> Optional[str]:
        """Resolve import relativo para caminho absoluto"""
        try:
            current_dir = Path(file_path).parent
            level = import_info.get('level', 1)
            
            # Subir n√≠veis necess√°rios
            target_dir = current_dir
            for _ in range(level):
                target_dir = target_dir.parent
            
            # Adicionar m√≥dulo
            module_name = import_info['module']
            if module_name:
                target_path = target_dir / module_name.replace('.', '/')
                return str(target_path.relative_to(self.root_dir))
            
            return str(target_dir.relative_to(self.root_dir))
            
        except Exception:
            return None
    
    def _detect_naming_issues(self):
        """Detecta problemas de nomenclatura"""
        logger.info("üîç Detectando problemas de nomenclatura...")
        
        for file_path, info in self.import_usage.items():
            for import_info in info['imports']:
                # Verificar conven√ß√µes de nomenclatura
                module_name = import_info['module']
                
                # Verificar snake_case vs camelCase
                if module_name and re.search(r'[A-Z]', module_name):
                    if not re.match(r'^[A-Z][a-zA-Z]*$', module_name):  # N√£o √© PascalCase
                        self.results['naming_issues'].append({
                            'file': file_path,
                            'import': import_info,
                            'issue': f"M√≥dulo '{module_name}' n√£o segue conven√ß√£o snake_case",
                            'type': 'naming_convention'
                        })
                
                # Verificar imports de nomes similares
                if import_info['type'] == 'from_import':
                    name = import_info['name']
                    if name and name.lower() in ['utils', 'helper', 'manager'] and not name.endswith('s'):
                        self.results['naming_issues'].append({
                            'file': file_path,
                            'import': import_info,
                            'issue': f"Nome '{name}' pode ser amb√≠guo",
                            'type': 'ambiguous_name'
                        })
    
    def _detect_missing_modules(self):
        """Detecta m√≥dulos que deveriam existir"""
        logger.info("üîç Detectando m√≥dulos ausentes...")
        
        # Verificar se pastas t√™m __init__.py
        for root, dirs, files in os.walk(self.root_dir):
            if '__init__.py' not in files and any(f.endswith('.py') for f in files):
                rel_path = str(Path(root).relative_to(self.root_dir))
                self.results['missing_modules'].append({
                    'directory': rel_path,
                    'issue': 'Falta __init__.py',
                    'type': 'missing_init'
                })
    
    def _generate_statistics(self):
        """Gera estat√≠sticas da an√°lise"""
        stats = {
            'total_files': len(self.python_files),
            'total_imports': sum(len(info['imports']) for info in self.import_usage.values()),
            'broken_imports': len(self.results['broken_imports']),
            'undefined_symbols': len(self.results['undefined_symbols']),
            'unused_imports': len(self.results['unused_imports']),
            'circular_dependencies': len(self.results['circular_dependencies']),
            'naming_issues': len(self.results['naming_issues']),
            'missing_modules': len(self.results['missing_modules']),
        }
        
        # Estat√≠sticas por tipo
        import_types = Counter()
        for info in self.import_usage.values():
            for import_info in info['imports']:
                import_types[import_info['type']] += 1
        
        stats['import_types'] = dict(import_types)
        
        # M√≥dulos mais importados
        module_counts = Counter()
        for info in self.import_usage.values():
            for import_info in info['imports']:
                module_counts[import_info['module']] += 1
        
        stats['most_imported'] = dict(module_counts.most_common(10))
        
        self.results['statistics'] = stats
    
    def _generate_report(self) -> Dict[str, Any]:
        """Gera relat√≥rio final"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        report = {
            'timestamp': timestamp,
            'summary': {
                'total_files_analyzed': self.results['statistics']['total_files'],
                'total_imports': self.results['statistics']['total_imports'],
                'total_issues': (
                    self.results['statistics']['broken_imports'] +
                    self.results['statistics']['undefined_symbols'] +
                    self.results['statistics']['unused_imports'] +
                    self.results['statistics']['circular_dependencies'] +
                    self.results['statistics']['naming_issues'] +
                    self.results['statistics']['missing_modules']
                )
            },
            'issues': self.results,
            'recommendations': self._generate_recommendations()
        }
        
        return report
    
    def _generate_recommendations(self) -> List[Dict]:
        """Gera recomenda√ß√µes baseadas nos problemas encontrados"""
        recommendations = []
        
        if self.results['broken_imports']:
            recommendations.append({
                'type': 'broken_imports',
                'priority': 'high',
                'description': 'Corrigir imports quebrados',
                'action': 'Verificar caminhos de m√≥dulos e instalar depend√™ncias ausentes'
            })
        
        if self.results['undefined_symbols']:
            recommendations.append({
                'type': 'undefined_symbols',
                'priority': 'high',
                'description': 'Definir s√≠mbolos n√£o encontrados',
                'action': 'Adicionar imports necess√°rios ou implementar s√≠mbolos ausentes'
            })
        
        if self.results['unused_imports']:
            recommendations.append({
                'type': 'unused_imports',
                'priority': 'medium',
                'description': 'Remover imports n√£o utilizados',
                'action': 'Limpar imports desnecess√°rios para melhorar performance'
            })
        
        if self.results['circular_dependencies']:
            recommendations.append({
                'type': 'circular_dependencies',
                'priority': 'high',
                'description': 'Resolver depend√™ncias circulares',
                'action': 'Refatorar c√≥digo para eliminar imports circulares'
            })
        
        if self.results['missing_modules']:
            recommendations.append({
                'type': 'missing_modules',
                'priority': 'medium',
                'description': 'Adicionar arquivos __init__.py',
                'action': 'Criar arquivos __init__.py em diret√≥rios Python'
            })
        
        return recommendations

def print_report(report: Dict[str, Any]):
    """Imprime relat√≥rio formatado"""
    print("\nüîç RELAT√ìRIO DE AN√ÅLISE DE IMPORTS")
    print("=" * 50)
    print(f"‚è∞ Timestamp: {report['timestamp']}")
    print(f"üìÅ Arquivos analisados: {report['summary']['total_files_analyzed']}")
    print(f"üì¶ Total de imports: {report['summary']['total_imports']}")
    print(f"‚ö†Ô∏è Total de problemas: {report['summary']['total_issues']}")
    
    print("\nüìä RESUMO DE PROBLEMAS:")
    print("-" * 30)
    issues = report['issues']
    print(f"‚ùå Imports quebrados: {len(issues['broken_imports'])}")
    print(f"‚ùì S√≠mbolos n√£o definidos: {len(issues['undefined_symbols'])}")
    print(f"üóëÔ∏è Imports n√£o utilizados: {len(issues['unused_imports'])}")
    print(f"üîÑ Depend√™ncias circulares: {len(issues['circular_dependencies'])}")
    print(f"üìù Problemas de nomenclatura: {len(issues['naming_issues'])}")
    print(f"üìÇ M√≥dulos ausentes: {len(issues['missing_modules'])}")
    
    # Detalhes dos problemas
    if issues['broken_imports']:
        print("\n‚ùå IMPORTS QUEBRADOS:")
        for issue in issues['broken_imports'][:5]:  # Mostrar apenas os primeiros 5
            print(f"  ‚Ä¢ {issue['file']}: {issue['error']}")
        if len(issues['broken_imports']) > 5:
            print(f"  ... e mais {len(issues['broken_imports']) - 5} imports quebrados")
    
    if issues['undefined_symbols']:
        print("\n‚ùì S√çMBOLOS N√ÉO DEFINIDOS:")
        for issue in issues['undefined_symbols'][:5]:
            print(f"  ‚Ä¢ {issue['file']}: {issue['symbol']}")
        if len(issues['undefined_symbols']) > 5:
            print(f"  ... e mais {len(issues['undefined_symbols']) - 5} s√≠mbolos n√£o definidos")
    
    if issues['unused_imports']:
        print("\nüóëÔ∏è IMPORTS N√ÉO UTILIZADOS:")
        for issue in issues['unused_imports'][:5]:
            print(f"  ‚Ä¢ {issue['file']}: {issue['symbol']}")
        if len(issues['unused_imports']) > 5:
            print(f"  ... e mais {len(issues['unused_imports']) - 5} imports n√£o utilizados")
    
    print("\nüéØ RECOMENDA√á√ïES:")
    print("-" * 20)
    for rec in report['recommendations']:
        priority_emoji = "üî¥" if rec['priority'] == 'high' else "üü°"
        print(f"{priority_emoji} {rec['description']}")
        print(f"   A√ß√£o: {rec['action']}")
    
    print("\nüìà ESTAT√çSTICAS EXTRAS:")
    print("-" * 25)
    stats = report['issues']['statistics']
    print(f"üìä Tipos de import:")
    for import_type, count in stats['import_types'].items():
        print(f"  ‚Ä¢ {import_type}: {count}")
    
    print(f"\nüì¶ M√≥dulos mais importados:")
    for module, count in list(stats['most_imported'].items())[:5]:
        print(f"  ‚Ä¢ {module}: {count} vezes")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando an√°lise de imports...")
    
    # Analisar pasta claude_ai_novo
    analyzer = ImportAnalyzer("app/claude_ai_novo")
    report = analyzer.scan_directory()
    
    # Imprimir relat√≥rio
    print_report(report)
    
    # Salvar relat√≥rio em arquivo
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    report_file = f"app/claude_ai_novo/relatorio_imports_{timestamp}.json"
    
    try:
        import json
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Relat√≥rio salvo em: {report_file}")
    except Exception as e:
        print(f"‚ùå Erro ao salvar relat√≥rio: {e}")

if __name__ == "__main__":
    main() 