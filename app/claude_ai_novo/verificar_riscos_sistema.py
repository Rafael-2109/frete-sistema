#!/usr/bin/env python3
"""
üîç VERIFICAR RISCOS DO SISTEMA
==============================

Analisa poss√≠veis problemas e riscos no sistema Claude AI Novo.
"""

import os
import sys
import asyncio
from pathlib import Path

# Adicionar diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

def verificar_riscos():
    """Verifica poss√≠veis riscos no sistema"""
    print("\nüîç VERIFICANDO RISCOS DO SISTEMA CLAUDE AI NOVO\n")
    
    riscos_encontrados = []
    avisos = []
    
    # 1. Verificar outros m√©todos async no SessionOrchestrator
    print("1Ô∏è‚É£ VERIFICANDO M√âTODOS ASYNC NO SESSION ORCHESTRATOR:")
    try:
        from app.claude_ai_novo.orchestrators.session_orchestrator import SessionOrchestrator
        
        # M√©todos que podem ter o mesmo problema
        metodos_risco = [
            '_execute_workflow',
            '_process_deliveries_status', 
            '_process_general_inquiry'
        ]
        
        for metodo in metodos_risco:
            if hasattr(SessionOrchestrator, metodo):
                print(f"   ‚úÖ {metodo} existe")
                # Verificar se j√° foi corrigido
                import inspect
                source = inspect.getsource(getattr(SessionOrchestrator, metodo))
                if "concurrent.futures" in source:
                    print(f"   ‚úÖ {metodo} j√° corrigido com ThreadPoolExecutor")
                elif "process_unified_query" in source or "integration_manager" in source:
                    avisos.append(f"‚ö†Ô∏è  {metodo} pode ter problema de event loop")
            else:
                print(f"   ‚ùå {metodo} n√£o encontrado")
                
    except Exception as e:
        riscos_encontrados.append(f"‚ùå Erro ao verificar SessionOrchestrator: {e}")
    
    # 2. Verificar MainOrchestrator
    print("\n2Ô∏è‚É£ VERIFICANDO MAIN ORCHESTRATOR:")
    try:
        from app.claude_ai_novo.orchestrators.main_orchestrator import MainOrchestrator
        
        # Verificar se tem m√©todos async
        for attr_name in dir(MainOrchestrator):
            if not attr_name.startswith('_'):
                continue
            attr = getattr(MainOrchestrator, attr_name)
            if callable(attr):
                import inspect
                if asyncio.iscoroutinefunction(attr):
                    avisos.append(f"‚ö†Ô∏è  MainOrchestrator.{attr_name} √© async - verificar uso")
                    
        print("   ‚úÖ MainOrchestrator verificado")
        
    except Exception as e:
        riscos_encontrados.append(f"‚ùå Erro ao verificar MainOrchestrator: {e}")
    
    # 3. Verificar IntegrationManager
    print("\n3Ô∏è‚É£ VERIFICANDO INTEGRATION MANAGER:")
    try:
        from app.claude_ai_novo.integration.integration_manager import IntegrationManager
        
        # Verificar m√©todos async principais
        metodos_async = ['process_unified_query', 'initialize_all_modules']
        
        for metodo in metodos_async:
            if hasattr(IntegrationManager, metodo):
                print(f"   ‚úÖ {metodo} √© async (esperado)")
            else:
                riscos_encontrados.append(f"‚ùå {metodo} n√£o encontrado no IntegrationManager")
                
    except Exception as e:
        riscos_encontrados.append(f"‚ùå Erro ao verificar IntegrationManager: {e}")
    
    # 4. Verificar imports circulares
    print("\n4Ô∏è‚É£ VERIFICANDO IMPORTS CIRCULARES:")
    try:
        # Tentar importar m√≥dulos principais
        modules = [
            'app.claude_ai_novo.orchestrators',
            'app.claude_ai_novo.integration', 
            'app.claude_ai_novo.coordinators',
            'app.claude_ai_novo.processors'
        ]
        
        for module in modules:
            try:
                __import__(module)
                print(f"   ‚úÖ {module} importa sem problemas")
            except ImportError as e:
                if "circular" in str(e).lower():
                    riscos_encontrados.append(f"‚ùå Import circular em {module}: {e}")
                else:
                    avisos.append(f"‚ö†Ô∏è  Problema de import em {module}: {e}")
                    
    except Exception as e:
        riscos_encontrados.append(f"‚ùå Erro ao verificar imports: {e}")
    
    # 5. Verificar vari√°veis de ambiente
    print("\n5Ô∏è‚É£ VERIFICANDO VARI√ÅVEIS DE AMBIENTE:")
    env_vars = {
        'DATABASE_URL': os.getenv('DATABASE_URL'),
        'ANTHROPIC_API_KEY': os.getenv('ANTHROPIC_API_KEY'),
        'REDIS_URL': os.getenv('REDIS_URL'),
        'USE_NEW_CLAUDE_SYSTEM': os.getenv('USE_NEW_CLAUDE_SYSTEM')
    }
    
    for var, value in env_vars.items():
        if value:
            print(f"   ‚úÖ {var} configurada")
        else:
            if var in ['DATABASE_URL', 'ANTHROPIC_API_KEY']:
                avisos.append(f"‚ö†Ô∏è  {var} n√£o configurada (necess√°ria em produ√ß√£o)")
            else:
                print(f"   ‚ÑπÔ∏è  {var} n√£o configurada (opcional)")
    
    # 6. Verificar conex√µes com banco
    print("\n6Ô∏è‚É£ VERIFICANDO CONEX√ïES COM BANCO:")
    try:
        # Verificar se h√° tentativas de conex√£o sem contexto Flask
        from app.claude_ai_novo.loaders.domain import get_pedidos_loader
        
        # Tentar criar loader (pode falhar sem contexto Flask)
        try:
            loader = get_pedidos_loader()
            if hasattr(loader, 'db'):
                avisos.append("‚ö†Ô∏è  Loaders podem tentar acessar DB sem contexto Flask")
        except Exception as e:
            if "application context" in str(e):
                avisos.append("‚ö†Ô∏è  Loaders precisam de contexto Flask para DB")
                
    except Exception as e:
        print(f"   ‚ÑπÔ∏è  N√£o foi poss√≠vel verificar loaders: {e}")
    
    # RESUMO
    print("\n" + "="*60)
    print("üìä RESUMO DA AN√ÅLISE DE RISCOS")
    print("="*60)
    
    if not riscos_encontrados and not avisos:
        print("\n‚úÖ NENHUM RISCO CR√çTICO ENCONTRADO!")
        print("   O sistema parece estar bem configurado.")
    else:
        if riscos_encontrados:
            print(f"\n‚ùå RISCOS CR√çTICOS ENCONTRADOS: {len(riscos_encontrados)}")
            for risco in riscos_encontrados:
                print(f"   {risco}")
                
        if avisos:
            print(f"\n‚ö†Ô∏è  AVISOS: {len(avisos)}")
            for aviso in avisos:
                print(f"   {aviso}")
    
    # Recomenda√ß√µes
    print("\nüí° RECOMENDA√á√ïES:")
    print("   1. Sempre testar em ambiente local antes de deploy")
    print("   2. Verificar logs do Render ap√≥s deploy")
    print("   3. Monitorar uso de mem√≥ria (muitos m√≥dulos carregados)")
    print("   4. Considerar cache mais agressivo para reduzir carga")
    
    print("\n‚úÖ VERIFICA√á√ÉO COMPLETA!")

if __name__ == "__main__":
    verificar_riscos() 