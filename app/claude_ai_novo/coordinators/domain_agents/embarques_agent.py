"""
üö¢ EMBARQUES AGENT - Agente Especialista em Embarques

Agente especializado em gest√£o de embarques:
- Embarques ativos e programados
- Volumes e cargas
- Libera√ß√£o de cargas
- Separa√ß√£o e picking
- Programa√ß√£o de sa√≠da
- Integra√ß√£o com transportadoras
"""

from typing import Dict, List, Any, Optional
from ...utils.agent_types import AgentType
from app.claude_ai_novo.coordinators.domain_agents.smart_base_agent import SmartBaseAgent


class EmbarquesAgent(SmartBaseAgent):
    """Agente especialista em embarques - COM TODAS AS CAPACIDADES"""
    
    def __init__(self, claude_client=None):
        super().__init__(AgentType.EMBARQUES, claude_client)
        # SmartBaseAgent j√° inicializa TODAS as capacidades automaticamente!
    
    def _resumir_dados_reais(self, dados_reais: Dict[str, Any]) -> Dict[str, Any]:
        """Resume dados reais espec√≠ficos para EMBARQUES"""
        try:
            resumo = {
                'timestamp': dados_reais.get('timestamp', ''),
                'dominio': 'embarques',
                'total_registros': 0,
                'dados_encontrados': False
            }
            
            # Processar dados espec√≠ficos de embarques
            if 'embarques' in dados_reais:
                dados_embarques = dados_reais['embarques']
                if isinstance(dados_embarques, dict):
                    resumo['total_embarques'] = dados_embarques.get('total_embarques', 0)
                    resumo['embarques_ativos'] = dados_embarques.get('embarques_ativos', 0)
                    resumo['embarques_pendentes'] = dados_embarques.get('embarques_pendentes', 0)
                    resumo['embarques_saindo_hoje'] = dados_embarques.get('embarques_hoje', 0)
                    resumo['dados_encontrados'] = True
                    
                    # Adicionar insights espec√≠ficos de embarques
                    if resumo['embarques_pendentes'] > 0:
                        resumo['alerta_pendentes'] = f"{resumo['embarques_pendentes']} embarques pendentes"
                    
                    if resumo['embarques_saindo_hoje'] > 5:
                        resumo['alerta_movimento'] = f"Movimento intenso: {resumo['embarques_saindo_hoje']} embarques hoje"
            
            # Processar dados de volumes e cargas
            if 'volumes' in dados_reais:
                dados_volumes = dados_reais['volumes']
                if isinstance(dados_volumes, dict):
                    resumo['total_volumes'] = dados_volumes.get('total_volumes', 0)
                    resumo['peso_total'] = dados_volumes.get('peso_total', 0)
                    resumo['dados_encontrados'] = True
            
            return resumo
            
        except Exception as e:
            self.logger_estruturado.error(f"‚ùå Erro ao resumir dados de embarques: {e}")
            return {'erro': str(e)}
    
    def _load_specialist_prompt(self) -> str:
        """System prompt especializado em embarques COM TODAS AS CAPACIDADES"""
        return """
üö¢ AGENTE ESPECIALISTA EM EMBARQUES - INTELIG√äNCIA COMPLETA

Voc√™ √© um especialista em gest√£o de embarques equipado com TODAS as capacidades avan√ßadas:

**CAPACIDADES ATIVAS:**
‚úÖ Dados reais do banco PostgreSQL
‚úÖ Claude 4 Sonnet (n√£o simulado)
‚úÖ Cache Redis para performance
‚úÖ Contexto conversacional (mem√≥ria)
‚úÖ Mapeamento sem√¢ntico inteligente
‚úÖ ML Models para predi√ß√µes
‚úÖ Logs estruturados para auditoria
‚úÖ An√°lise de tend√™ncias temporais
‚úÖ Sistema de valida√ß√£o e confian√ßa
‚úÖ Sugest√µes inteligentes contextuais
‚úÖ Alertas operacionais autom√°ticos

**DOM√çNIO DE ESPECIALIZA√á√ÉO:**
- Embarques ativos e programados
- Volumes e cargas por embarque
- Libera√ß√£o de cargas e documentos
- Separa√ß√£o e picking
- Programa√ß√£o de sa√≠da
- Integra√ß√£o com transportadoras
- Controle de expedi√ß√£o
- Otimiza√ß√£o de cargas

**DADOS QUE VOC√ä ANALISA:**
- Embarque: status, data_embarque, numero_embarque
- EmbarqueItem: pedidos,produtos, peso, dimens√µes, quantidade, valor_unitario, valor_total
- Separacao: items_separados, quantidade, protocolo, data_agenda
- Transportadora: assigna√ß√£o e performance
- Tabela de fretes: tipo_carga, modalidade, frete_peso, frete_valor
- Programa√ß√£o de sa√≠da e cronograma

**SEMPRE RESPONDA COM:**
1. Status atual dos embarques
2. Volumes e cargas pendentes
3. Cronograma de sa√≠das
4. Alertas para embarques atrasados
5. Efici√™ncia de separa√ß√£o
6. Sugest√µes de otimiza√ß√£o

**EXEMPLOS DE ALERTAS A GERAR:**
- "üö® CR√çTICO: 8 embarques programados sem separa√ß√£o"
- "‚ö†Ô∏è ATEN√á√ÉO: Embarque 1234 atrasado h√° 2 dias"
- "üìà TEND√äNCIA: Aumento de 15% no volume de embarques"
- "üí° OPORTUNIDADE: Otimizar rota para 3 embarques"
"""
    
    def _load_domain_knowledge(self) -> Dict[str, Any]:
        """Conhecimento espec√≠fico do dom√≠nio de embarques"""
        return {
            'main_models': [
                'Embarque',
                'EmbarqueItem', 
                'Separacao',
                'Transportadora',
                'TabelaFrete'
            ],
            'key_fields': [
                'numero',
                'status',
                'data_prevista_embarque',
                'data_embarque',
                'peso_total',
                'volumes_total',
                'separacao_status',
                'transportadora_nome'
            ],
            'kpis': [
                'embarques_no_prazo',
                'eficiencia_separacao',
                'utilizacao_capacidade',
                'tempo_medio_separacao',
                'performance_transportadora'
            ],
            'common_queries': [
                'embarques hoje',
                'embarques pendentes',
                'separa√ß√£o pendente',
                'embarques transportadora',
                'volumes por embarque',
                'embarques atrasados',
                'cronograma sa√≠da'
            ]
        }
    
    def _get_domain_keywords(self) -> List[str]:
        """Palavras-chave espec√≠ficas do dom√≠nio de embarques"""
        return [
            'embarque', 'embarques', 'embarcar',
            'separacao', 'separa√ß√£o', 'separar',
            'volume', 'volumes', 'carga', 'cargas',
            'picking', 'liberacao', 'libera√ß√£o',
            'programacao', 'programa√ß√£o', 'cronograma',
            'saida', 'sa√≠da', 'expedicao', 'expedi√ß√£o',
            'transportadora', 'motorista', 'veiculo',
            'pendente', 'ativo', 'liberado', 'carregado'
        ]


# Exporta√ß√µes principais
__all__ = [
    'EmbarquesAgent'
]
