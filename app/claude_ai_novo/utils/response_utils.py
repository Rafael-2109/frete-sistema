#!/usr/bin/env python3
"""
ResponseUtils - Utilit√°rios especializados
"""

from typing import Dict, Optional, Any
from datetime import datetime

class ResponseUtils:
    """Classe para utilit√°rios especializados"""
    
    def __init__(self):
        pass
        
    def _formatar_resultado_cursor(self, resultado: Dict[str, Any], titulo: str) -> str:
        """Formata resultado do Cursor Mode"""
        if 'error' in resultado:
            return f"‚ùå **Erro em {titulo}:** {resultado['error']}"
        
        timestamp = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        
        if titulo == 'An√°lise de C√≥digo':
            return f"""üîç **{titulo} Completa**

üìä **Vis√£o Geral:**
{self._formatar_analise_projeto(resultado)}

---
üéØ **Processado:** {timestamp}
‚ö° **Fonte:** Cursor Mode + Claude Development AI"""
        
        elif titulo == 'Gera√ß√£o de C√≥digo':
            if resultado.get('status') == 'success':
                return f"""üöÄ **{titulo} - Sucesso!**

üì¶ **M√≥dulo:** {resultado.get('module_name', 'N/A')}
üìÅ **Arquivos Criados:** {resultado.get('total_files', 0)} arquivos
üìã **Lista de Arquivos:**
{chr(10).join(f"‚Ä¢ {arquivo}" for arquivo in resultado.get('files_created', []))}

üìö **Documenta√ß√£o Gerada:**
{resultado.get('documentation', 'Documenta√ß√£o autom√°tica criada')}

---
üéØ **Processado:** {timestamp}
‚ö° **Fonte:** Cursor Mode + Code Generator"""
            else:
                return f"‚ùå **Erro na {titulo}:** {resultado.get('error', 'Erro desconhecido')}"
        
        else:
            # Formato gen√©rico
            return f"""‚úÖ **{titulo} Conclu√≠do**

üìã **Resultado:** {str(resultado)[:500]}...

---
üéØ **Processado:** {timestamp}
‚ö° **Fonte:** Cursor Mode"""
    def _formatar_analise_projeto(self, analise: Dict[str, Any]) -> str:
        """Formata an√°lise do projeto"""
        overview = analise.get('project_overview', {})
        issues = analise.get('potential_issues', [])
        
        return f"""‚Ä¢ **M√≥dulos:** {overview.get('total_modules', 0)}
‚Ä¢ **Modelos:** {overview.get('total_models', 0)}
‚Ä¢ **Rotas:** {overview.get('total_routes', 0)}
‚Ä¢ **Templates:** {overview.get('total_templates', 0)}
‚Ä¢ **Problemas Detectados:** {len(issues)}
‚Ä¢ **Arquitetura:** {overview.get('architecture_pattern', 'Flask MVC')}"""
    def _formatar_status_cursor(self, status: Dict[str, Any]) -> str:
        """Formata status do Cursor Mode"""
        return f"""üìä **Status do Cursor Mode**

üîß **Estado:** {'‚úÖ Ativo' if status['activated'] else '‚ùå Inativo'}

‚öôÔ∏è **Funcionalidades:**
{chr(10).join(f"‚Ä¢ {feature}: {'‚úÖ' if enabled else '‚ùå'}" for feature, enabled in status['features'].items())}

üõ†Ô∏è **Ferramentas:**
{chr(10).join(f"‚Ä¢ {tool}: {'‚úÖ' if available else '‚ùå'}" for tool, available in status['tools_available'].items())}

üìã **Capacidades Ativas:**
{chr(10).join(f"‚Ä¢ {cap}" for cap in status.get('capabilities', []))}

---
üéØ **Cursor Mode - Sistema similar ao Cursor integrado!**"""

# Fun√ß√µes auxiliares para formata√ß√£o de respostas
    def _gerar_resposta_erro(self, mensagem: str) -> Optional[Dict[str, Any]]:
        """Gera resposta de erro formatada"""
        return {
        'success': False,
        'error': mensagem,
        'response': f"‚ùå **Erro:** {mensagem}",
        'status': 'error'
    }
    def _gerar_resposta_sucesso(self, resposta: str) -> Optional[Dict[str, Any]]:
        """Gera resposta de sucesso formatada"""
        return {
        'success': True,
        'response': resposta,
        'status': 'success'
    }

# Adicionar nova fun√ß√£o de detec√ß√£o de consultas de desenvolvimento

# Inst√¢ncia global
_responseutils = None

def get_responseutils():
    """Retorna inst√¢ncia de ResponseUtils"""
    global _responseutils
    if _responseutils is None:
        _responseutils = ResponseUtils()
    return _responseutils
