#!/usr/bin/env python3
"""
üî¨ VERIFICAR M√âTODOS ASYNC NO MAIN ORCHESTRATOR
==============================================

Analisa detalhadamente os m√©todos ass√≠ncronos para confirmar
se n√£o h√° riscos de conflito com event loop.
"""

import os
import sys
import ast
import inspect
from pathlib import Path

# Adicionar diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

def analisar_metodos_async():
    """Analisa m√©todos async no MainOrchestrator"""
    print("\nüî¨ AN√ÅLISE DETALHADA DOS M√âTODOS ASYNC\n")
    
    # Ler arquivo do MainOrchestrator
    main_orch_path = Path(__file__).parent / "orchestrators" / "main_orchestrator.py"
    
    with open(main_orch_path, 'r', encoding='utf-8') as f:
        codigo = f.read()
    
    # Parse do c√≥digo
    tree = ast.parse(codigo)
    
    # Encontrar classe MainOrchestrator
    for node in ast.walk(tree):
        if isinstance(node, ast.ClassDef) and node.name == "MainOrchestrator":
            print("üìã M√âTODOS ASYNC NO MAIN ORCHESTRATOR:\n")
            
            metodos_async = []
            metodos_sync_com_async = []
            
            for item in node.body:
                if isinstance(item, ast.AsyncFunctionDef):
                    metodos_async.append(item.name)
                elif isinstance(item, ast.FunctionDef):
                    # Verificar se m√©todo sync chama fun√ß√µes async
                    for subnode in ast.walk(item):
                        if isinstance(subnode, ast.Await):
                            metodos_sync_com_async.append(item.name)
                            break
            
            # Listar m√©todos async
            print("1Ô∏è‚É£ M√âTODOS ASS√çNCRONOS:")
            for metodo in metodos_async:
                print(f"   - {metodo}")
            
            print(f"\n   Total: {len(metodos_async)} m√©todos async")
            
            # Verificar chamadas
            print("\n2Ô∏è‚É£ AN√ÅLISE DE CHAMADAS:")
            
            # Verificar quem chama esses m√©todos
            for metodo in metodos_async:
                print(f"\n   üîç Analisando '{metodo}':")
                chamadores = []
                
                for item in node.body:
                    if isinstance(item, ast.FunctionDef) or isinstance(item, ast.AsyncFunctionDef):
                        for subnode in ast.walk(item):
                            if isinstance(subnode, ast.Attribute) and subnode.attr == metodo:
                                chamadores.append(item.name)
                
                if chamadores:
                    print(f"      Chamado por: {', '.join(set(chamadores))}")
                else:
                    print(f"      ‚ö†Ô∏è N√£o encontradas chamadas diretas")
    
    # Verificar padr√µes de uso
    print("\n3Ô∏è‚É£ PADR√ïES DE USO:")
    
    # Procurar por run_until_complete, asyncio.run, etc
    padroes_risco = []
    padroes_seguros = []
    
    if "run_until_complete" in codigo:
        padroes_risco.append("run_until_complete (pode causar conflito)")
    
    if "asyncio.run(" in codigo:
        padroes_seguros.append("asyncio.run (cria novo event loop)")
    
    if "ThreadPoolExecutor" in codigo:
        padroes_seguros.append("ThreadPoolExecutor (executa em thread separada)")
    
    if "await " in codigo:
        padroes_seguros.append("await (uso correto dentro de async)")
    
    print("\n   ‚úÖ Padr√µes SEGUROS encontrados:")
    for padrao in padroes_seguros:
        print(f"      - {padrao}")
    
    if padroes_risco:
        print("\n   ‚ö†Ô∏è Padr√µes de RISCO encontrados:")
        for padrao in padroes_risco:
            print(f"      - {padrao}")
    else:
        print("\n   ‚úÖ Nenhum padr√£o de risco encontrado!")
    
    # Verificar execute_workflow especificamente
    print("\n4Ô∏è‚É£ AN√ÅLISE DO execute_workflow:")
    
    # Procurar defini√ß√£o do execute_workflow
    for node in ast.walk(tree):
        if isinstance(node, ast.FunctionDef) and node.name == "execute_workflow":
            print("   ‚úÖ execute_workflow √© S√çNCRONO")
            
            # Verificar se chama m√©todos async
            usa_async = False
            for subnode in ast.walk(node):
                if isinstance(subnode, ast.Await):
                    usa_async = True
                    break
            
            if usa_async:
                print("   ‚ö†Ô∏è execute_workflow usa await (precisa ser async)")
            else:
                print("   ‚úÖ execute_workflow N√ÉO usa await diretamente")
    
    # Recomenda√ß√µes
    print("\n5Ô∏è‚É£ RECOMENDA√á√ïES:")
    print("   - Os m√©todos async internos s√£o seguros se chamados corretamente")
    print("   - execute_workflow √© s√≠ncrono e n√£o deve chamar async diretamente")
    print("   - Use ThreadPoolExecutor para chamar async de sync (como j√° foi feito)")
    print("   - Evite run_until_complete em produ√ß√£o (pode conflitar)")

if __name__ == "__main__":
    analisar_metodos_async() 