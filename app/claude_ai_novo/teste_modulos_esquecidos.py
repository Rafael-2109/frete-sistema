#!/usr/bin/env python3
"""
üîç TESTE DE M√ìDULOS ESQUECIDOS
=============================

Testa se os m√≥dulos cr√≠ticos esquecidos est√£o dispon√≠veis para integra√ß√£o.
"""

def teste_modulos_esquecidos():
    """Testa disponibilidade dos m√≥dulos cr√≠ticos esquecidos."""
    print("üîç TESTE DE M√ìDULOS ESQUECIDOS NA INTEGRA√á√ÉO")
    print("=" * 50)
    
    modulos_esquecidos = {
        'security_guard': {'disponivel': False, 'critico': True},
        'tools_manager': {'disponivel': False, 'critico': False},
        'integration_manager': {'disponivel': False, 'critico': False},
        'processor_manager': {'disponivel': False, 'critico': False}
    }
    
    # Teste 1: SecurityGuard (CR√çTICO)
    print("\nüîí TESTANDO SECURITY GUARD (CR√çTICO)")
    print("-" * 40)
    try:
        from security.security_guard import SecurityGuard
        guard = SecurityGuard()
        print(f"‚úÖ SecurityGuard: Dispon√≠vel - {type(guard).__name__}")
        modulos_esquecidos['security_guard']['disponivel'] = True
        
        # Testar funcionalidades b√°sicas
        if hasattr(guard, 'validate_operation'):
            print("‚úÖ SecurityGuard: M√©todo validate_operation dispon√≠vel")
        if hasattr(guard, 'validate_user'):
            print("‚úÖ SecurityGuard: M√©todo validate_user dispon√≠vel")
        if hasattr(guard, 'log_security_event'):
            print("‚úÖ SecurityGuard: M√©todo log_security_event dispon√≠vel")
            
    except Exception as e:
        print(f"‚ùå SecurityGuard: {e}")
    
    # Teste 2: ToolsManager
    print("\nüîß TESTANDO TOOLS MANAGER")
    print("-" * 40)
    try:
        from tools.tools_manager import ToolsManager
        tools_mgr = ToolsManager()
        print(f"‚úÖ ToolsManager: Dispon√≠vel - {type(tools_mgr).__name__}")
        modulos_esquecidos['tools_manager']['disponivel'] = True
        
        # Testar funcionalidades b√°sicas
        if hasattr(tools_mgr, 'register_tool'):
            print("‚úÖ ToolsManager: M√©todo register_tool dispon√≠vel")
        if hasattr(tools_mgr, 'get_available_tools'):
            print("‚úÖ ToolsManager: M√©todo get_available_tools dispon√≠vel")
            
    except Exception as e:
        print(f"‚ùå ToolsManager: {e}")
    
    # Teste 3: IntegrationManager
    print("\nüîó TESTANDO INTEGRATION MANAGER")
    print("-" * 40)
    try:
        from integration.integration_manager import IntegrationManager
        integration_mgr = IntegrationManager()
        print(f"‚úÖ IntegrationManager: Dispon√≠vel - {type(integration_mgr).__name__}")
        modulos_esquecidos['integration_manager']['disponivel'] = True
        
        # Testar funcionalidades b√°sicas
        if hasattr(integration_mgr, 'register_integration'):
            print("‚úÖ IntegrationManager: M√©todo register_integration dispon√≠vel")
        if hasattr(integration_mgr, 'execute_integration'):
            print("‚úÖ IntegrationManager: M√©todo execute_integration dispon√≠vel")
            
    except Exception as e:
        print(f"‚ùå IntegrationManager: {e}")
    
    # Teste 4: ProcessorManager (completo)
    print("\n‚öôÔ∏è TESTANDO PROCESSOR MANAGER COMPLETO")
    print("-" * 40)
    try:
        from processors.processor_manager import ProcessorManager
        processor_mgr = ProcessorManager()
        print(f"‚úÖ ProcessorManager: Dispon√≠vel - {type(processor_mgr).__name__}")
        modulos_esquecidos['processor_manager']['disponivel'] = True
        
        # Testar funcionalidades b√°sicas
        if hasattr(processor_mgr, 'register_processor'):
            print("‚úÖ ProcessorManager: M√©todo register_processor dispon√≠vel")
        if hasattr(processor_mgr, 'process_data'):
            print("‚úÖ ProcessorManager: M√©todo process_data dispon√≠vel")
            
    except Exception as e:
        print(f"‚ùå ProcessorManager: {e}")
    
    # An√°lise dos resultados
    print("\n" + "=" * 50)
    print("üìä AN√ÅLISE DOS M√ìDULOS ESQUECIDOS")
    print("=" * 50)
    
    total_modulos = len(modulos_esquecidos)
    modulos_disponiveis = sum(1 for m in modulos_esquecidos.values() if m['disponivel'])
    modulos_criticos = sum(1 for m in modulos_esquecidos.values() if m['critico'] and m['disponivel'])
    
    print(f"üì¶ Total de m√≥dulos esquecidos: {total_modulos}")
    print(f"‚úÖ M√≥dulos dispon√≠veis: {modulos_disponiveis}/{total_modulos}")
    print(f"üî• M√≥dulos cr√≠ticos dispon√≠veis: {modulos_criticos}")
    
    # Status por m√≥dulo
    for nome, info in modulos_esquecidos.items():
        status = "‚úÖ DISPON√çVEL" if info['disponivel'] else "‚ùå INDISPON√çVEL"
        criticidade = "üî• CR√çTICO" if info['critico'] else "‚ö†Ô∏è IMPORTANTE"
        print(f"   {nome}: {status} ({criticidade})")
    
    # Resultado final
    if modulos_disponiveis == total_modulos:
        print("\nüéâ PERFEITO! Todos os m√≥dulos esquecidos est√£o dispon√≠veis!")
        return True
    elif modulos_criticos > 0:
        print("\n‚ö†Ô∏è ATEN√á√ÉO! M√≥dulos cr√≠ticos dispon√≠veis mas outros faltando.")
        return True
    else:
        print("\n‚ùå PROBLEMA! M√≥dulos cr√≠ticos n√£o dispon√≠veis.")
        return False

def demonstrar_gaps_integracao():
    """Demonstra os gaps na integra√ß√£o atual."""
    print("\nüîç GAPS IDENTIFICADOS NA INTEGRA√á√ÉO")
    print("=" * 50)
    
    print("\nüî• GAPS CR√çTICOS:")
    print("   1. SecurityGuard - N√ÉO integrado em nenhum orchestrator")
    print("   2. Valida√ß√£o de seguran√ßa - Sistema vulner√°vel")
    print("   3. Controle de acesso - Sem prote√ß√£o adequada")
    
    print("\n‚ö†Ô∏è GAPS IMPORTANTES:")
    print("   4. ToolsManager - Ferramentas n√£o coordenadas")
    print("   5. IntegrationManager - Integra√ß√µes fragmentadas")
    print("   6. ProcessorManager - Processamento n√£o otimizado")
    
    print("\nüìä IMPACTO DOS GAPS:")
    print("   ‚Ä¢ Sistema sem seguran√ßa adequada")
    print("   ‚Ä¢ ~1.310 linhas de c√≥digo desperdi√ßadas")
    print("   ‚Ä¢ Funcionalidades n√£o aproveitadas")
    print("   ‚Ä¢ ROI da arquitetura n√£o maximizado")
    
    print("\nüéØ PR√ìXIMA A√á√ÉO:")
    print("   Integrar os 4 m√≥dulos esquecidos aos orchestrators")
    print("   para garantir sistema completo e seguro.")

def verificar_status_integracao_atual():
    """Verifica o status atual da integra√ß√£o considerando os gaps."""
    print("\nüìä STATUS ATUAL DA INTEGRA√á√ÉO (COM GAPS)")
    print("=" * 50)
    
    # M√≥dulos j√° integrados
    integrados = [
        "CoordinatorManager", "LearningCore", "AutoCommandProcessor",
        "AnalyzerManager", "ProcessorManager (parcial)", "MapperManager",
        "ValidatorManager", "ProviderManager", "MemoryManager",
        "Enrichers", "DataManager"
    ]
    
    # M√≥dulos esquecidos
    esquecidos = [
        "SecurityGuard (CR√çTICO)", "ToolsManager", 
        "IntegrationManager", "ProcessorManager (completo)"
    ]
    
    print(f"‚úÖ M√ìDULOS INTEGRADOS ({len(integrados)}):")
    for i, modulo in enumerate(integrados, 1):
        print(f"   {i:2d}. {modulo}")
    
    print(f"\n‚ùå M√ìDULOS ESQUECIDOS ({len(esquecidos)}):")
    for i, modulo in enumerate(esquecidos, 1):
        print(f"   {i:2d}. {modulo}")
    
    total_modulos = len(integrados) + len(esquecidos)
    percentual = (len(integrados) / total_modulos) * 100
    
    print(f"\nüéØ INTEGRA√á√ÉO ATUAL: {len(integrados)}/{total_modulos} ({percentual:.0f}%)")
    
    if percentual >= 80:
        print("üéâ EXCELENTE! Mas ainda h√° gaps cr√≠ticos de seguran√ßa.")
    elif percentual >= 60:
        print("‚úÖ BOM! Mas precisa integrar m√≥dulos esquecidos.")
    else:
        print("‚ö†Ô∏è REGULAR! Muitos m√≥dulos importantes esquecidos.")
    
    return percentual

if __name__ == "__main__":
    sucesso = teste_modulos_esquecidos()
    
    if sucesso:
        demonstrar_gaps_integracao()
    
    percentual = verificar_status_integracao_atual()
    
    print(f"\nüéØ CONCLUS√ÉO: {'PRECISA CORRIGIR GAPS' if percentual < 100 else 'INTEGRA√á√ÉO COMPLETA'}") 