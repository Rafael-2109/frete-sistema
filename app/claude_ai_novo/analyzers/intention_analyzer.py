#!/usr/bin/env python3
"""
IntentionAnalyzer - An√°lise especializada
"""

import os
import anthropic
import logging
import re
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta, date
from flask_login import current_user
from sqlalchemy import func, and_, or_, text
from app import db
import json
from app.utils.redis_cache import redis_cache, cache_aside, cached_query
from app.utils.grupo_empresarial import GrupoEmpresarialDetector, detectar_grupo_empresarial
from app.utils.ml_models_real import get_ml_models_system
import config_ai
from app.utils.api_helper import get_system_alerts
from app.utils.ai_logging import ai_logger, AILogger
from app.utils.redis_cache import intelligent_cache
import re
import time
import asyncio
import re
from app.utils.grupo_empresarial import GrupoEmpresarialDetector
from app import db
from app.fretes.models import Frete
from app.embarques.models import Embarque
from app.transportadoras.models import Transportadora
from app.pedidos.models import Pedido
from app.monitoramento.models import EntregaMonitorada, AgendamentoEntrega
from app.faturamento.models import RelatorioFaturamentoImportado
from app import db
from app.monitoramento.models import EntregaMonitorada
from app import db
from app.fretes.models import Frete, DespesaExtra
from app.transportadoras.models import Transportadora
from app import db
from app.monitoramento.models import AgendamentoEntrega
from app import db
from app.monitoramento.models import EntregaMonitorada
from app.fretes.models import Frete
from app.utils.grupo_empresarial import detectar_grupo_empresarial
from app.utils.grupo_empresarial import detectar_grupo_empresarial
import re
from app import db
from app.monitoramento.models import EntregaMonitorada, AgendamentoEntrega
from app.embarques.models import Embarque, EmbarqueItem
from app.pedidos.models import Pedido
from app import db
from app.faturamento.models import RelatorioFaturamentoImportado
from app.monitoramento.models import EntregaMonitorada
from app.pedidos.models import Pedido
from app.utils.grupo_empresarial import GrupoEmpresarialDetector
import re
import re
import re
import re
from app import db
from app.fretes.models import Frete, DespesaExtra
from app.transportadoras.models import Transportadora
from app import db
from app.transportadoras.models import Transportadora
from app.fretes.models import Frete
from app import db
from app.pedidos.models import Pedido
from app import db
from app.embarques.models import Embarque, EmbarqueItem
from datetime import date
from app import db
from app.faturamento.models import RelatorioFaturamentoImportado as RelatorioImportado
from app import db
from app.fretes.models import DespesaExtra
from app.financeiro.models import PendenciaFinanceiraNF
from app.utils.ai_logging import logger

# Configurar logger
logger = logging.getLogger(__name__)

class IntentionAnalyzer:
    """Classe para an√°lise especializada"""
    
    def __init__(self):
        pass
    
    def analyze_intention(self, query: str) -> Dict[str, Any]:
        """Analisa a inten√ß√£o do usu√°rio na consulta"""
        intencoes = self._detectar_intencao_refinada(query)
        
        # Determinar inten√ß√£o principal
        intencao_principal = max(intencoes, key=intencoes.get) if intencoes else "analise_dados"
        confianca = max(intencoes.values()) if intencoes else 0.5
        
        # Determinar se deve usar sistema avan√ßado
        usar_avancado = self._deve_usar_sistema_avancado(query, intencoes)
        
        return {
            'intention': intencao_principal,
            'confidence': confianca,
            'all_intentions': intencoes,
            'use_advanced': usar_avancado,
            'query_length': len(query.split()),
            'complexity': 'high' if len(query.split()) > 15 else 'medium' if len(query.split()) > 8 else 'low'
        }
        
    def _detectar_intencao_refinada(self, consulta: str) -> Dict[str, float]:
        """
        Detecta m√∫ltiplas inten√ß√µes com scores de confian√ßa
        Retorna dict com probabilidades ao inv√©s de categoria √∫nica
        """
        consulta_lower = consulta.lower()
        
        intencoes_scores = {
            "analise_dados": 0.0,
            "desenvolvimento": 0.0,
            "resolucao_problema": 0.0,
            "explicacao_conceitual": 0.0,
            "comando_acao": 0.0
        }
        
        # Palavras-chave com pesos
        padroes = {
            "analise_dados": {
                "palavras": ["quantos", "qual", "status", "relat√≥rio", "dados", "estat√≠stica", 
                           "total", "quantidade", "listar", "mostrar", "ver", "como", "quando"],
                "peso": 0.2
            },
            "desenvolvimento": {
                "palavras": ["criar", "desenvolver", "implementar", "c√≥digo", "fun√ß√£o", 
                           "m√≥dulo", "classe", "api", "rota", "template"],
                "peso": 0.25
            },
            "resolucao_problema": {
                "palavras": ["erro", "bug", "problema", "n√£o funciona", "corrigir", 
                           "resolver", "falha", "exception", "debug"],
                "peso": 0.3
            },
            "explicacao_conceitual": {
                "palavras": ["como funciona", "o que √©", "explique", "entender", 
                           "por que", "quando usar", "diferen√ßa entre"],
                "peso": 0.15
            },
            "comando_acao": {
                "palavras": ["gerar", "exportar", "executar", "fazer", "processar",
                           "excel", "relat√≥rio", "planilha", "baixar"],
                "peso": 0.2
            }
        }
        
        # Calcular scores
        for intencao, config in padroes.items():
            for palavra in config["palavras"]:
                if palavra in consulta_lower:
                    intencoes_scores[intencao] += config["peso"]
        
        # Normalizar scores
        total = sum(intencoes_scores.values())
        if total > 0:
            for intencao in intencoes_scores:
                intencoes_scores[intencao] /= total
        
        return intencoes_scores
    def _deve_usar_sistema_avancado(self, consulta: str, intencoes: Dict[str, float]) -> bool:
        """
        Decide logicamente se deve usar sistemas avan√ßados
        Baseado em crit√©rios objetivos, n√£o apenas palavras-chave
        """
        # Crit√©rios l√≥gicos
        criterios = {
            "complexidade_alta": len(consulta.split()) > 20,
            "multiplas_intencoes": sum(1 for s in intencoes.values() if s > 0.2) >= 2,
            "solicitacao_explicita": any(termo in consulta.lower() for termo in 
                                       ["an√°lise avan√ßada", "an√°lise profunda", "detalhada"]),
            "consulta_ambigua": max(intencoes.values()) < 0.4 if intencoes else False,
            "historico_contexto": hasattr(self, '_ultimo_contexto_carregado') and 
                                self._ultimo_contexto_carregado.get('registros_carregados', 0) > 1000
        }
        
        # Log para debug
        logger.debug(f"üîç Crit√©rios sistema avan√ßado: {criterios}")
        
        # Decis√£o baseada em m√∫ltiplos fatores
        pontos = sum(1 for criterio, valor in criterios.items() if valor)
        
        # Caso especial: m√∫ltiplas inten√ß√µes sempre usa avan√ßado
        if criterios["multiplas_intencoes"]:
            usar_avancado = True
        else:
            usar_avancado = pontos >= 2  # Precisa de pelo menos 2 crit√©rios verdadeiros
        
        if usar_avancado:
            logger.info(f"üöÄ Sistema avan√ßado ativado: {pontos} crit√©rios atendidos")
        
        return usar_avancado

# Inst√¢ncia global
_intentionanalyzer = None

def get_intentionanalyzer():
    """Retorna inst√¢ncia de IntentionAnalyzer"""
    global _intentionanalyzer
    if _intentionanalyzer is None:
        _intentionanalyzer = IntentionAnalyzer()
    return _intentionanalyzer

# Alias para compatibilidade
def get_intention_analyzer():
    """Retorna inst√¢ncia de IntentionAnalyzer (alias para compatibilidade)"""
    return get_intentionanalyzer()

# Exporta√ß√µes
__all__ = [
    'IntentionAnalyzer',
    'get_intentionanalyzer', 
    'get_intention_analyzer'
]
