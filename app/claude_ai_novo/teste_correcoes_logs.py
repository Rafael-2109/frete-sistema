#!/usr/bin/env python3
"""
üîß TESTE DAS CORRE√á√ïES DOS LOGS
============================

Script para testar as corre√ß√µes aplicadas aos problemas identificados nos logs.
"""

import sys
import traceback
from datetime import datetime

def test_processors_imports():
    """Testa os imports dos processors"""
    print("üîß Testando imports dos processors...")
    
    try:
        # Teste 1: date import em base.py
        from app.claude_ai_novo.processors.base import date
        print("‚úÖ date importado com sucesso de processors.base")
        
        # Teste 2: get_context_processor (alias)
        from app.claude_ai_novo.processors.context_processor import get_context_processor
        print("‚úÖ get_context_processor importado com sucesso")
        
        # Teste 3: get_query_processor
        from app.claude_ai_novo.processors.query_processor import get_query_processor
        print("‚úÖ get_query_processor importado com sucesso")
        
        # Teste 4: Instanciar processors
        context_proc = get_context_processor()
        query_proc = get_query_processor()
        
        print(f"‚úÖ ContextProcessor: {type(context_proc)}")
        print(f"‚úÖ QueryProcessor: {type(query_proc)}")
        
    except Exception as e:
        print(f"‚ùå Erro nos imports dos processors: {e}")
        traceback.print_exc()
        return False
    
    return True

def test_performance_cache():
    """Testa o PerformanceCache"""
    print("\nüöÄ Testando PerformanceCache...")
    
    try:
        # Teste 1: Import da classe
        from app.claude_ai_novo.utils.performance_cache import PerformanceCache
        print("‚úÖ PerformanceCache importado com sucesso")
        
        # Teste 2: Instanciar
        cache = PerformanceCache()
        print(f"‚úÖ PerformanceCache instanciado: {type(cache)}")
        
        # Teste 3: M√©todos b√°sicos
        stats = cache.get_cache_stats()
        print(f"‚úÖ Cache stats: {stats}")
        
    except Exception as e:
        print(f"‚ùå Erro no PerformanceCache: {e}")
        traceback.print_exc()
        return False
    
    return True

def test_pattern_learning():
    """Testa o PatternLearning"""
    print("\nüéØ Testando PatternLearning...")
    
    try:
        # Teste 1: Import
        from app.claude_ai_novo.learners.pattern_learning import get_pattern_learner
        print("‚úÖ get_pattern_learner importado")
        
        # Teste 2: Instanciar
        learner = get_pattern_learner()
        print(f"‚úÖ PatternLearner instanciado: {type(learner)}")
        
        # Teste 3: Testar m√©todo sem banco (deve falhar graciosamente)
        padroes = learner.extrair_e_salvar_padroes("teste", {"dominio": "test"})
        print(f"‚úÖ M√©todo chamado sem erro: {len(padroes)} padr√µes")
        
    except Exception as e:
        print(f"‚ùå Erro no PatternLearning: {e}")
        traceback.print_exc()
        return False
    
    return True

def test_all_imports():
    """Testa todos os imports cr√≠ticos"""
    print("\nüîç Testando imports cr√≠ticos...")
    
    critical_imports = [
        "app.claude_ai_novo.processors.base",
        "app.claude_ai_novo.processors.context_processor", 
        "app.claude_ai_novo.processors.query_processor",
        "app.claude_ai_novo.utils.performance_cache",
        "app.claude_ai_novo.learners.pattern_learning",
        "app.claude_ai_novo.learners.learning_core",
        "app.claude_ai_novo.utils.validation_utils",
        "app.claude_ai_novo.utils.utils_manager"
    ]
    
    success_count = 0
    
    for import_path in critical_imports:
        try:
            __import__(import_path)
            print(f"‚úÖ {import_path}")
            success_count += 1
        except Exception as e:
            print(f"‚ùå {import_path}: {e}")
    
    print(f"\nüìä Resultado: {success_count}/{len(critical_imports)} imports bem-sucedidos")
    return success_count == len(critical_imports)

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ TESTE DAS CORRE√á√ïES DOS LOGS")
    print("=" * 40)
    print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    results = []
    
    # Executar testes
    results.append(("Processors Imports", test_processors_imports()))
    results.append(("PerformanceCache", test_performance_cache()))
    results.append(("PatternLearning", test_pattern_learning()))
    results.append(("All Critical Imports", test_all_imports()))
    
    # Relat√≥rio final
    print("\n" + "=" * 40)
    print("üìã RELAT√ìRIO FINAL")
    print("=" * 40)
    
    for test_name, success in results:
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
    
    total_success = sum(1 for _, success in results if success)
    total_tests = len(results)
    
    print(f"\nTotal: {total_success}/{total_tests} testes passaram")
    
    if total_success == total_tests:
        print("üéâ TODOS OS TESTES PASSARAM!")
        return 0
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 