#!/usr/bin/env python3
"""
Teste direto do sistema de m√©tricas otimizado
"""

import time
import sys
import os

# Adicionar path do projeto
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

def main():
    print("=" * 60)
    print("üöÄ TESTE DIRETO DO SISTEMA DE M√âTRICAS OTIMIZADO")
    print("=" * 60)
    
    try:
        # Importar diretamente o m√≥dulo otimizado
        print("\n1Ô∏è‚É£ Importando m√≥dulo otimizado...")
        from app.claude_ai_novo.monitoring.real_time_metrics import get_claude_metrics
        print("‚úÖ Importa√ß√£o bem-sucedida!")
        
        # Obter inst√¢ncia
        print("\n2Ô∏è‚É£ Obtendo inst√¢ncia do sistema de m√©tricas...")
        metrics = get_claude_metrics()
        print(f"‚úÖ Inst√¢ncia obtida: {metrics.__class__.__name__}")
        
        # Testar performance
        print("\n3Ô∏è‚É£ Testando performance de get_comprehensive_metrics()...")
        tempos = []
        
        for i in range(5):
            start = time.time()
            result = metrics.get_comprehensive_metrics()
            elapsed = time.time() - start
            tempos.append(elapsed)
            print(f"   Chamada {i+1}: {elapsed:.3f}s")
        
        # An√°lise
        tempo_medio = sum(tempos) / len(tempos)
        tempo_max = max(tempos)
        tempo_min = min(tempos)
        
        print(f"\nüìä AN√ÅLISE DE PERFORMANCE:")
        print(f"   - Tempo m√©dio: {tempo_medio:.3f}s")
        print(f"   - Tempo m√≠nimo: {tempo_min:.3f}s")
        print(f"   - Tempo m√°ximo: {tempo_max:.3f}s")
        
        # Verificar se √© singleton
        print("\n4Ô∏è‚É£ Verificando padr√£o Singleton...")
        metrics2 = get_claude_metrics()
        if metrics is metrics2:
            print("‚úÖ Singleton funcionando! Mesma inst√¢ncia retornada")
        else:
            print("‚ùå Problema: Inst√¢ncias diferentes!")
        
        # Mostrar algumas m√©tricas
        print("\n5Ô∏è‚É£ M√©tricas obtidas:")
        print(f"   - System Score: {result['system_health']['system_score']}%")
        print(f"   - Modules Active: {result['system_health']['modules_active']}")
        print(f"   - Orchestrators: {result['orchestrators']['active_orchestrators']}")
        print(f"   - Status: {result['status']}")
        
        # Resultado final
        print("\n" + "=" * 60)
        if tempo_medio < 0.01:  # Menos de 10ms
            print("üéâ EXCELENTE: Performance √ìTIMA!")
            print("   - Resposta em milissegundos")
            print("   - Cache funcionando perfeitamente")
            print("   - Problema de 100+ segundos TOTALMENTE RESOLVIDO")
        elif tempo_medio < 0.1:  # Menos de 100ms
            print("‚úÖ BOM: Performance adequada")
            print("   - Resposta r√°pida")
            print("   - Melhoria significativa")
        else:
            print("‚ùå PROBLEMA: Ainda lento!")
            print("   - Verificar implementa√ß√£o")
        
        print("\nüìù COMPARA√á√ÉO:")
        print(f"   - ANTES: 100+ segundos (com reinicializa√ß√µes)")
        print(f"   - AGORA: {tempo_medio:.3f} segundos")
        print(f"   - MELHORIA: {(100/tempo_medio):.0f}x mais r√°pido!")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 