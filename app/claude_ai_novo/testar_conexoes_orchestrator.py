#!/usr/bin/env python3
"""
üß™ TESTE DE CONEX√ïES DO ORCHESTRATOR
====================================

Verifica se todas as conex√µes entre m√≥dulos est√£o funcionando corretamente.
"""

import os
import sys
import logging
from typing import Dict, Any

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..')))

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def testar_conexoes_basicas():
    """Testa se os m√≥dulos b√°sicos foram modificados corretamente"""
    logger.info("\nüîç TESTANDO MODIFICA√á√ïES B√ÅSICAS")
    logger.info("=" * 60)
    
    resultados = {
        'loader_aceita_injecao': False,
        'provider_aceita_injecao': False,
        'orchestrator_tem_connect': False
    }
    
    try:
        # 1. Testar LoaderManager
        logger.info("\nüìä Testando LoaderManager...")
        from app.claude_ai_novo.loaders.loader_manager import LoaderManager
        
        # Verificar se aceita par√¢metros
        try:
            loader = LoaderManager(scanner=None, mapper=None)
            resultados['loader_aceita_injecao'] = True
            logger.info("‚úÖ LoaderManager aceita scanner e mapper via inje√ß√£o")
        except TypeError as e:
            logger.error(f"‚ùå LoaderManager n√£o aceita inje√ß√£o: {e}")
            
        # Verificar m√©todos de configura√ß√£o
        if hasattr(loader, 'configure_with_scanner'):
            logger.info("‚úÖ LoaderManager tem m√©todo configure_with_scanner")
        else:
            logger.warning("‚ùå LoaderManager n√£o tem m√©todo configure_with_scanner")
            
        if hasattr(loader, 'configure_with_mapper'):
            logger.info("‚úÖ LoaderManager tem m√©todo configure_with_mapper")
        else:
            logger.warning("‚ùå LoaderManager n√£o tem m√©todo configure_with_mapper")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar LoaderManager: {e}")
        
    try:
        # 2. Testar DataProvider
        logger.info("\nüìä Testando DataProvider...")
        from app.claude_ai_novo.providers.data_provider import DataProvider
        
        # Verificar se aceita loader
        try:
            provider = DataProvider(loader=None)
            resultados['provider_aceita_injecao'] = True
            logger.info("‚úÖ DataProvider aceita loader via inje√ß√£o")
        except TypeError as e:
            logger.error(f"‚ùå DataProvider n√£o aceita inje√ß√£o: {e}")
            
        # Verificar m√©todo set_loader
        if hasattr(provider, 'set_loader'):
            logger.info("‚úÖ DataProvider tem m√©todo set_loader")
        else:
            logger.warning("‚ùå DataProvider n√£o tem m√©todo set_loader")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar DataProvider: {e}")
        
    try:
        # 3. Testar MainOrchestrator
        logger.info("\nüìä Testando MainOrchestrator...")
        from app.claude_ai_novo.orchestrators.main_orchestrator import MainOrchestrator
        
        orchestrator = MainOrchestrator()
        
        # Verificar se tem _connect_modules
        if hasattr(orchestrator, '_connect_modules'):
            resultados['orchestrator_tem_connect'] = True
            logger.info("‚úÖ MainOrchestrator tem m√©todo _connect_modules")
        else:
            logger.error("‚ùå MainOrchestrator n√£o tem m√©todo _connect_modules")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar MainOrchestrator: {e}")
        
    return resultados

def testar_conexoes_orchestrator():
    """Testa as conex√µes estabelecidas pelo Orchestrator"""
    logger.info("\nüîó TESTANDO CONEX√ïES DO ORCHESTRATOR")
    logger.info("=" * 60)
    
    conexoes = {
        'scanner_loader': False,
        'loader_provider': False,
        'memorizer_processor': False,
        'learner_analyzer': False
    }
    
    try:
        from app.claude_ai_novo.orchestrators import get_orchestrator_manager
        
        logger.info("üìä Criando OrchestratorManager...")
        orchestrator_manager = get_orchestrator_manager()
        
        if hasattr(orchestrator_manager, 'main_orchestrator'):
            main_orch = orchestrator_manager.main_orchestrator
            
            # Verificar componentes carregados
            if hasattr(main_orch, 'components'):
                componentes = list(main_orch.components.keys())
                logger.info(f"\n‚úÖ Componentes carregados: {componentes}")
                logger.info(f"   Total: {len(componentes)} componentes")
                
                # Testar conex√£o Scanner ‚Üí Loader
                if 'loaders' in main_orch.components and 'scanners' in main_orch.components:
                    loader = main_orch.components['loaders']
                    if hasattr(loader, 'scanner') and loader.scanner is not None:
                        conexoes['scanner_loader'] = True
                        logger.info("\n‚úÖ Scanner ‚Üí Loader: CONECTADO")
                        
                        # Verificar se scanner tem info do banco
                        if hasattr(loader, 'db_info') and loader.db_info:
                            logger.info("   ‚îî‚îÄ LoaderManager tem acesso a db_info do Scanner")
                    else:
                        logger.warning("\n‚ùå Scanner ‚Üí Loader: N√ÉO conectado")
                        if hasattr(loader, 'scanner'):
                            logger.info("   ‚îî‚îÄ Loader tem atributo scanner mas est√° None")
                
                # Testar conex√£o Loader ‚Üí Provider
                if 'providers' in main_orch.components and 'loaders' in main_orch.components:
                    provider = main_orch.components['providers']
                    if hasattr(provider, 'loader') and provider.loader is not None:
                        conexoes['loader_provider'] = True
                        logger.info("\n‚úÖ Loader ‚Üí Provider: CONECTADO")
                    else:
                        logger.warning("\n‚ùå Loader ‚Üí Provider: N√ÉO conectado")
                        if hasattr(provider, 'loader'):
                            logger.info("   ‚îî‚îÄ Provider tem atributo loader mas est√° None")
                
                # Testar conex√£o Memorizer ‚Üí Processor
                if 'processors' in main_orch.components and 'memorizers' in main_orch.components:
                    processor = main_orch.components['processors']
                    if hasattr(processor, 'memory') and processor.memory is not None:
                        conexoes['memorizer_processor'] = True
                        logger.info("\n‚úÖ Memorizer ‚Üí Processor: CONECTADO")
                    else:
                        logger.warning("\n‚ùå Memorizer ‚Üí Processor: N√ÉO conectado")
                        logger.info("   ‚îî‚îÄ Processor n√£o tem memory configurado")
                
                # Testar conex√£o Learner ‚Üí Analyzer
                if 'analyzers' in main_orch.components and 'learners' in main_orch.components:
                    analyzer = main_orch.components['analyzers']
                    if hasattr(analyzer, 'learner') and analyzer.learner is not None:
                        conexoes['learner_analyzer'] = True
                        logger.info("\n‚úÖ Learner ‚Üí Analyzer: CONECTADO")
                    else:
                        logger.warning("\n‚ùå Learner ‚Üí Analyzer: N√ÉO conectado")
                        logger.info("   ‚îî‚îÄ Analyzer n√£o tem learner configurado")
                        
            else:
                logger.error("‚ùå MainOrchestrator n√£o tem componentes")
        else:
            logger.error("‚ùå OrchestratorManager n√£o tem main_orchestrator")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar conex√µes: {e}")
        import traceback
        traceback.print_exc()
        
    return conexoes

def testar_fluxo_query():
    """Testa um fluxo completo de query"""
    logger.info("\nüîÑ TESTANDO FLUXO DE QUERY")
    logger.info("=" * 60)
    
    try:
        from app.claude_ai_novo.orchestrators import get_orchestrator_manager
        
        orchestrator = get_orchestrator_manager()
        
        # Tentar executar uma query simples
        logger.info("\nüìù Executando query de teste...")
        result = orchestrator.process_query(
            query="teste de conex√£o",
            context={"test": True}
        )
        
        if result:
            logger.info("‚úÖ Query executada com sucesso")
            
            # Verificar metadados
            if 'metadata' in result:
                logger.info("\nüìä Metadados da execu√ß√£o:")
                for key, value in result['metadata'].items():
                    logger.info(f"   - {key}: {value}")
                    
            # Verificar se usou loader otimizado
            if result.get('metadata', {}).get('source') == 'loader_manager':
                logger.info("\n‚úÖ DataProvider usou LoaderManager (otimizado)")
            else:
                logger.warning("\n‚ö†Ô∏è DataProvider n√£o usou LoaderManager")
                
        else:
            logger.warning("‚ö†Ô∏è Query retornou resultado vazio")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar fluxo: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Executa todos os testes de conex√£o"""
    logger.info("üß™ TESTE COMPLETO DE CONEX√ïES DO ORCHESTRATOR")
    logger.info("=" * 60)
    
    # 1. Testar modifica√ß√µes b√°sicas
    resultados_basicos = testar_conexoes_basicas()
    
    # 2. Testar conex√µes do orchestrator
    conexoes = testar_conexoes_orchestrator()
    
    # 3. Testar fluxo de query
    testar_fluxo_query()
    
    # Resumo final
    logger.info("\n" + "=" * 60)
    logger.info("üìä RESUMO DOS TESTES")
    logger.info("=" * 60)
    
    logger.info("\nüîß Modifica√ß√µes B√°sicas:")
    for teste, resultado in resultados_basicos.items():
        status = "‚úÖ" if resultado else "‚ùå"
        logger.info(f"   {status} {teste}")
        
    logger.info("\nüîó Conex√µes Estabelecidas:")
    for conexao, resultado in conexoes.items():
        status = "‚úÖ" if resultado else "‚ùå"
        logger.info(f"   {status} {conexao}")
        
    # Contagem final
    total_basicos = sum(resultados_basicos.values())
    total_conexoes = sum(conexoes.values())
    
    logger.info(f"\nüìà Resultado Final:")
    logger.info(f"   - Modifica√ß√µes b√°sicas: {total_basicos}/{len(resultados_basicos)}")
    logger.info(f"   - Conex√µes funcionando: {total_conexoes}/{len(conexoes)}")
    
    if total_basicos == len(resultados_basicos) and total_conexoes > 0:
        logger.info("\n‚úÖ Sistema est√° no caminho certo!")
        logger.info("   Pr√≥ximo passo: Implementar m√©todos faltantes nos m√≥dulos")
    else:
        logger.warning("\n‚ö†Ô∏è Algumas conex√µes ainda precisam ser implementadas")
        logger.info("   Verifique os m√©todos faltantes nos m√≥dulos")

if __name__ == "__main__":
    main() 