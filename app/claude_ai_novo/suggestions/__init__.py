"""
üí° SUGGESTIONS - Sistema de Sugest√µes
===================================

M√≥dulos respons√°veis por gera√ß√£o e gerenciamento de sugest√µes inteligentes.
"""

import logging
from typing import Dict, List, Any, Optional

logger = logging.getLogger(__name__)

# Importa√ß√µes com fallback robusto
try:
    from .suggestion_engine import SuggestionsEngine, get_suggestions_engine
    _suggestions_engine_available = True
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è SuggestionsEngine n√£o dispon√≠vel: {e}")
    _suggestions_engine_available = False

try:
    from .suggestions_manager import SuggestionsManager, get_suggestions_manager
    _suggestions_manager_available = True
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è SuggestionsManager n√£o dispon√≠vel: {e}")
    _suggestions_manager_available = False

# Inst√¢ncias globais
_suggestions_engine_instance = None
_suggestions_manager_instance = None

def get_suggestions_engine() -> Optional[object]:
    """
    Obt√©m inst√¢ncia do engine de sugest√µes.
    
    Returns:
        Inst√¢ncia do SuggestionsEngine ou None se n√£o dispon√≠vel
    """
    global _suggestions_engine_instance
    
    if not _suggestions_engine_available:
        logger.warning("‚ö†Ô∏è SuggestionsEngine n√£o est√° dispon√≠vel")
        return None
    
    if _suggestions_engine_instance is None:
        try:
            from .suggestion_engine import SuggestionsEngine
            _suggestions_engine_instance = SuggestionsEngine()
            logger.info("‚úÖ SuggestionsEngine inicializado com sucesso")
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar SuggestionsEngine: {e}")
            return None
    
    return _suggestions_engine_instance

def get_suggestions_manager() -> Optional[object]:
    """
    Obt√©m inst√¢ncia do gerenciador de sugest√µes.
    
    Returns:
        Inst√¢ncia do SuggestionsManager ou None se n√£o dispon√≠vel
    """
    global _suggestions_manager_instance
    
    if not _suggestions_manager_available:
        logger.warning("‚ö†Ô∏è SuggestionsManager n√£o est√° dispon√≠vel")
        return None
    
    if _suggestions_manager_instance is None:
        try:
            from .suggestions_manager import SuggestionsManager
            _suggestions_manager_instance = SuggestionsManager()
            logger.info("‚úÖ SuggestionsManager inicializado com sucesso")
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar SuggestionsManager: {e}")
            return None
    
    return _suggestions_manager_instance

def generate_suggestions(context: Dict[str, Any], suggestion_type: str = 'general', **kwargs) -> Dict[str, Any]:
    """
    Gera sugest√µes usando o gerenciador dispon√≠vel.
    
    Args:
        context: Contexto para gera√ß√£o de sugest√µes
        suggestion_type: Tipo de sugest√£o
        **kwargs: Par√¢metros adicionais
        
    Returns:
        Conjunto de sugest√µes geradas
    """
    try:
        # Tentar usar o gerenciador primeiro (mais avan√ßado)
        manager = get_suggestions_manager()
        if manager and hasattr(manager, 'generate_suggestions'):
            return manager.generate_suggestions(context, suggestion_type, **kwargs)
        
        # Fallback para engine b√°sico
        engine = get_suggestions_engine()
        if engine and hasattr(engine, 'generate_suggestions'):
            return engine.generate_suggestions(context, suggestion_type, **kwargs)
        
        # Fallback final
        return {
            'error': 'Nenhum sistema de sugest√µes dispon√≠vel',
            'fallback_suggestions': [
                {
                    'text': 'Explorar funcionalidades do sistema',
                    'type': 'general',
                    'confidence': 0.5
                }
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar sugest√µes: {e}")
        return {
            'error': str(e),
            'fallback_suggestions': []
        }

def register_suggestion_engine(engine_name: str, engine_callable, priority: int = 5) -> bool:
    """
    Registra um engine de sugest√£o no gerenciador.
    
    Args:
        engine_name: Nome do engine
        engine_callable: Fun√ß√£o callable do engine
        priority: Prioridade do engine
        
    Returns:
        True se registrado com sucesso
    """
    try:
        manager = get_suggestions_manager()
        if manager and hasattr(manager, 'register_suggestion_engine'):
            return manager.register_suggestion_engine(engine_name, engine_callable, priority)
        
        logger.warning("‚ö†Ô∏è SuggestionsManager n√£o dispon√≠vel para registro")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao registrar engine: {e}")
        return False

def submit_suggestion_feedback(suggestion_id: str, feedback_type: str, user_action: str, context: Optional[Dict] = None) -> bool:
    """
    Submete feedback sobre uma sugest√£o.
    
    Args:
        suggestion_id: ID da sugest√£o
        feedback_type: Tipo de feedback
        user_action: A√ß√£o do usu√°rio
        context: Contexto adicional
        
    Returns:
        True se feedback processado com sucesso
    """
    try:
        manager = get_suggestions_manager()
        if manager and hasattr(manager, 'submit_feedback'):
            return manager.submit_feedback(suggestion_id, feedback_type, user_action, context)
        
        logger.warning("‚ö†Ô∏è SuggestionsManager n√£o dispon√≠vel para feedback")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao submeter feedback: {e}")
        return False

def get_suggestion_recommendations(user_profile: Dict[str, Any], session_context: Dict[str, Any]) -> Dict[str, Any]:
    """
    Obt√©m recomenda√ß√µes personalizadas.
    
    Args:
        user_profile: Perfil do usu√°rio
        session_context: Contexto da sess√£o
        
    Returns:
        Recomenda√ß√µes personalizadas
    """
    try:
        manager = get_suggestions_manager()
        if manager and hasattr(manager, 'get_suggestion_recommendations'):
            return manager.get_suggestion_recommendations(user_profile, session_context)
        
        # Fallback b√°sico
        return {
            'personalized_suggestions': [
                {
                    'text': f"Consulta recomendada para {user_profile.get('role', 'usu√°rio')}",
                    'type': 'personalized',
                    'confidence': 0.6
                }
            ],
            'trending_suggestions': [
                {
                    'text': 'Verificar status das entregas',
                    'type': 'trending',
                    'confidence': 0.7
                }
            ],
            'contextual_suggestions': [],
            'quick_actions': [
                {
                    'text': 'Acessar dashboard principal',
                    'type': 'navigation',
                    'confidence': 0.8
                }
            ]
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter recomenda√ß√µes: {e}")
        return {
            'error': str(e),
            'personalized_suggestions': [],
            'trending_suggestions': [],
            'contextual_suggestions': [],
            'quick_actions': []
        }

def optimize_suggestions_performance() -> Dict[str, Any]:
    """
    Otimiza performance do sistema de sugest√µes.
    
    Returns:
        Relat√≥rio de otimiza√ß√£o
    """
    try:
        manager = get_suggestions_manager()
        if manager and hasattr(manager, 'optimize_suggestion_performance'):
            return manager.optimize_suggestion_performance()
        
        return {
            'message': 'SuggestionsManager n√£o dispon√≠vel para otimiza√ß√£o',
            'actions_taken': []
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro na otimiza√ß√£o: {e}")
        return {
            'error': str(e),
            'actions_taken': []
        }

def get_suggestions_status() -> Dict[str, Any]:
    """
    Obt√©m status do sistema de sugest√µes.
    
    Returns:
        Status detalhado
    """
    return {
        'suggestions_engine': {
            'available': _suggestions_engine_available,
            'initialized': _suggestions_engine_instance is not None
        },
        'suggestions_manager': {
            'available': _suggestions_manager_available,
            'initialized': _suggestions_manager_instance is not None
        },
        'total_components': 2,
        'active_components': sum([
            _suggestions_engine_available,
            _suggestions_manager_available
        ]),
        'primary_system': 'manager' if _suggestions_manager_available else 'engine' if _suggestions_engine_available else 'none'
    }

# Exporta√ß√µes
__all__ = [
    'get_suggestions_engine',
    'get_suggestions_manager',
    'generate_suggestions',
    'register_suggestion_engine',
    'submit_suggestion_feedback',
    'get_suggestion_recommendations',
    'optimize_suggestions_performance',
    'get_suggestions_status'
]