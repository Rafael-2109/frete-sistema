#!/usr/bin/env python3
"""
Sistema de Contexto Conversacional - Sistema de Fretes
Implementa mem√≥ria conversacional para Claude AI com persist√™ncia Redis
"""

import json
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from dataclasses import dataclass, asdict

logger = logging.getLogger(__name__)

@dataclass
class ConversationMessage:
    """Mensagem individual na conversa"""
    role: str  # 'user' ou 'assistant'
    content: str
    timestamp: str
    metadata: Optional[Dict[str, Any]] = None
    
    def to_dict(self):
        return asdict(self)

class ConversationContext:
    """
    Gerenciador de contexto conversacional com persist√™ncia Redis
    Baseado em: https://medium.com/@rendysatriadalimunthe/showcasing-a-context-aware-conversational-ai-85cf13af2891
    """
    
    def __init__(self, redis_cache=None):
        self.redis_cache = redis_cache
        self.context_ttl = 3600  # 1 hora de TTL para contexto
        self.max_messages = 20   # M√°ximo de mensagens no contexto
        
        # Configura√ß√µes de contexto
        self.system_prompt = """Voc√™ √© um assistente especializado em log√≠stica e fretes. 
        Use o HIST√ìRICO da conversa anterior para dar respostas contextuais e coerentes.
        Se o usu√°rio fizer perguntas de seguimento como "E em maio?" ou "E esse cliente?", 
        use o contexto anterior para entender sobre qual cliente/per√≠odo ele est√° perguntando.
        
        IMPORTANTE: Sempre mantenha a continuidade da conversa."""
    
    def _get_context_key(self, user_id: str) -> str:
        """Gera chave √∫nica para contexto do usu√°rio no Redis"""
        return f"conversation_context:{user_id}"
    
    def add_message(self, user_id: str, role: str, content: str, metadata: Optional[Dict[str, Any]] = None) -> bool:
        """
        Adiciona nova mensagem ao contexto da conversa
        
        Args:
            user_id: ID √∫nico do usu√°rio
            role: 'user' ou 'assistant'
            content: Conte√∫do da mensagem
            metadata: Dados adicionais (cliente detectado, per√≠odo, etc.)
        """
        try:
            message = ConversationMessage(
                role=role,
                content=content,
                timestamp=datetime.now().isoformat(),
                metadata=metadata or {}
            )
            
            # Buscar contexto existente
            context_history = self.get_context(user_id)
            
            # Adicionar nova mensagem
            context_history.append(message.to_dict())
            
            # Manter apenas as √∫ltimas N mensagens
            if len(context_history) > self.max_messages:
                context_history = context_history[-self.max_messages:]
            
            # Salvar no Redis se dispon√≠vel
            if self.redis_cache and self.redis_cache.disponivel:
                context_key = self._get_context_key(user_id)
                success = self.redis_cache.set(context_key, context_history, self.context_ttl)
                if success:
                    logger.debug(f"‚úÖ Contexto salvo no Redis para usu√°rio {user_id}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Falha ao salvar contexto no Redis para usu√°rio {user_id}")
            
            # Fallback: usar cache em mem√≥ria (tempor√°rio)
            if not hasattr(self, '_memory_cache'):
                self._memory_cache = {}
            
            self._memory_cache[user_id] = {
                'history': context_history,
                'expires': datetime.now() + timedelta(seconds=self.context_ttl)
            }
            
            logger.debug(f"üíæ Contexto salvo em mem√≥ria para usu√°rio {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao adicionar mensagem ao contexto: {e}")
            return False
    
    def get_context(self, user_id: str) -> List[Dict[str, Any]]:
        """
        Recupera hist√≥rico de contexto do usu√°rio
        
        Returns:
            Lista de mensagens da conversa
        """
        try:
            # Tentar Redis primeiro
            if self.redis_cache and self.redis_cache.disponivel:
                context_key = self._get_context_key(user_id)
                context_data = self.redis_cache.get(context_key)
                
                if context_data:
                    logger.debug(f"üéØ Contexto recuperado do Redis para usu√°rio {user_id}")
                    return context_data
            
            # Fallback: cache em mem√≥ria
            if hasattr(self, '_memory_cache') and user_id in self._memory_cache:
                cache_entry = self._memory_cache[user_id]
                
                # Verificar expira√ß√£o
                if datetime.now() < cache_entry['expires']:
                    logger.debug(f"üíæ Contexto recuperado da mem√≥ria para usu√°rio {user_id}")
                    return cache_entry['history']
                else:
                    # Contexto expirado
                    del self._memory_cache[user_id]
                    logger.debug(f"‚è∞ Contexto expirado removido para usu√°rio {user_id}")
            
            # Sem contexto encontrado
            logger.debug(f"üÜï Nenhum contexto encontrado para usu√°rio {user_id}")
            return []
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao recuperar contexto: {e}")
            return []
    
    def build_context_prompt(self, user_id: str, new_question: str) -> str:
        """
        Constr√≥i prompt completo com contexto hist√≥rico
        
        Args:
            user_id: ID do usu√°rio
            new_question: Nova pergunta do usu√°rio
            
        Returns:
            Prompt completo com contexto
        """
        try:
            # Recuperar hist√≥rico
            history = self.get_context(user_id)
            
            if not history:
                # Sem hist√≥rico - pergunta independente
                return new_question
            
            # Construir contexto hist√≥rico
            context_lines = ["=== HIST√ìRICO DA CONVERSA ==="]
            
            for msg in history[-10:]:  # √öltimas 10 mensagens
                role_emoji = "üë§" if msg['role'] == 'user' else "ü§ñ"
                timestamp = msg.get('timestamp', '')
                content = msg.get('content', '')
                
                # Adicionar metadados se existirem
                metadata = msg.get('metadata', {})
                metadata_info = ""
                if metadata:
                    if 'cliente_detectado' in metadata:
                        metadata_info = f" [Cliente: {metadata['cliente_detectado']}]"
                    if 'periodo_detectado' in metadata:
                        metadata_info += f" [Per√≠odo: {metadata['periodo_detectado']}]"
                
                context_lines.append(f"{role_emoji} {content}{metadata_info}")
            
            context_lines.append("=== NOVA PERGUNTA ===")
            context_lines.append(f"üë§ {new_question}")
            context_lines.append("")
            context_lines.append("üß† INSTRU√á√ïES: Use o hist√≥rico acima para entender o contexto.")
            context_lines.append("Se a nova pergunta se refere a algo mencionado anteriormente (cliente, per√≠odo, etc.), mantenha a continuidade.")
            
            full_prompt = "\n".join(context_lines)
            
            logger.debug(f"üß† Prompt contextual constru√≠do para usu√°rio {user_id} ({len(history)} mensagens)")
            return full_prompt
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao construir prompt contextual: {e}")
            return new_question
    
    def extract_metadata(self, user_question: str, ai_response: str) -> Dict[str, Any]:
        """
        Extrai metadados da conversa para melhor contexto
        
        Args:
            user_question: Pergunta do usu√°rio
            ai_response: Resposta da IA
            
        Returns:
            Dicion√°rio com metadados extra√≠dos
        """
        metadata = {}
        
        try:
            # Detectar clientes mencionados
            clientes_conhecidos = ['Assai', 'Atacad√£o', 'Carrefour', 'Tenda', 'Mateus', 'Fort']
            for cliente in clientes_conhecidos:
                if cliente.lower() in user_question.lower() or cliente.lower() in ai_response.lower():
                    metadata['cliente_detectado'] = cliente
                    break
            
            # Detectar per√≠odos/meses
            meses = ['janeiro', 'fevereiro', 'mar√ßo', 'abril', 'maio', 'junho',
                    'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
            for mes in meses:
                if mes in user_question.lower() or mes in ai_response.lower():
                    metadata['periodo_detectado'] = mes.capitalize()
                    break
            
            # Detectar tipos de consulta
            if any(word in user_question.lower() for word in ['quantas', 'quantidade', 'total']):
                metadata['tipo_consulta'] = 'quantitativa'
            elif any(word in user_question.lower() for word in ['listar', 'mostrar', 'quais']):
                metadata['tipo_consulta'] = 'listagem'
            
            logger.debug(f"üîç Metadados extra√≠dos: {metadata}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair metadados: {e}")
        
        return metadata
    
    def clear_context(self, user_id: str) -> bool:
        """
        Limpa contexto de um usu√°rio espec√≠fico
        
        Args:
            user_id: ID do usu√°rio
            
        Returns:
            True se limpeza foi bem-sucedida
        """
        try:
            # Limpar do Redis
            if self.redis_cache and self.redis_cache.disponivel:
                context_key = self._get_context_key(user_id)
                self.redis_cache.delete(context_key)
                logger.info(f"üóëÔ∏è Contexto Redis limpo para usu√°rio {user_id}")
            
            # Limpar da mem√≥ria
            if hasattr(self, '_memory_cache') and user_id in self._memory_cache:
                del self._memory_cache[user_id]
                logger.info(f"üóëÔ∏è Contexto mem√≥ria limpo para usu√°rio {user_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar contexto: {e}")
            return False
    
    def get_context_summary(self, user_id: str) -> Dict[str, Any]:
        """
        Retorna resumo do contexto atual do usu√°rio
        
        Returns:
            Dicion√°rio com informa√ß√µes do contexto
        """
        try:
            history = self.get_context(user_id)
            
            if not history:
                return {
                    'has_context': False,
                    'message_count': 0,
                    'last_interaction': None
                }
            
            # Extrair informa√ß√µes do contexto
            last_message = history[-1] if history else None
            user_messages = [msg for msg in history if msg['role'] == 'user']
            assistant_messages = [msg for msg in history if msg['role'] == 'assistant']
            
            # Detectar temas principais
            all_content = " ".join([msg['content'] for msg in history])
            clientes_mencionados = []
            clientes_conhecidos = ['Assai', 'Atacad√£o', 'Carrefour', 'Tenda', 'Mateus', 'Fort']
            
            for cliente in clientes_conhecidos:
                if cliente.lower() in all_content.lower():
                    clientes_mencionados.append(cliente)
            
            return {
                'has_context': True,
                'message_count': len(history),
                'user_messages': len(user_messages),
                'assistant_messages': len(assistant_messages),
                'last_interaction': last_message['timestamp'] if last_message else None,
                'clientes_mencionados': clientes_mencionados,
                'storage_type': 'redis' if (self.redis_cache and self.redis_cache.disponivel) else 'memory'
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar resumo do contexto: {e}")
            return {'has_context': False, 'error': str(e)}


# Inst√¢ncia global do gerenciador de contexto
conversation_context = None

def init_conversation_context(redis_cache=None):
    """Inicializa o gerenciador de contexto conversacional"""
    global conversation_context
    try:
        conversation_context = ConversationContext(redis_cache)
        logger.info("üß† Sistema de Contexto Conversacional inicializado")
        return conversation_context
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar contexto conversacional: {e}")
        return None

def get_conversation_context():
    """Retorna inst√¢ncia do gerenciador de contexto"""
    return conversation_context 