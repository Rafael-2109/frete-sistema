#!/usr/bin/env python3
"""
Teste simples dos m√≥dulos sem depend√™ncias do Flask
"""

import sys
import os

# Adicionar diret√≥rios ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
sys.path.insert(0, os.path.dirname(__file__))

print("üß™ Teste Simples do claude_ai_novo\n")

# Teste 1: Importar fun√ß√£o corrigida diretamente
print("1Ô∏è‚É£ Testando generate_api_fallback_response...")
try:
    # Import direto do m√≥dulo
    import processors.response_processor as rp
    
    # Testar se a fun√ß√£o existe
    if hasattr(rp, 'generate_api_fallback_response'):
        result = rp.generate_api_fallback_response("Erro de teste")
        print(f"   ‚úÖ Fun√ß√£o existe e retorna: {result}")
    else:
        print("   ‚ùå Fun√ß√£o n√£o encontrada no m√≥dulo")
except Exception as e:
    print(f"   ‚ùå Erro: {e}")

# Teste 2: Verificar BaseModule
print("\n2Ô∏è‚É£ Testando BaseModule...")
try:
    # Import direto
    import utils.base_classes as bc
    
    # Verificar se BaseModule existe
    if hasattr(bc, 'BaseModule'):
        print("   ‚úÖ BaseModule existe no m√≥dulo")
        
        # Testar atributos esperados na defini√ß√£o da classe
        base_module_code = bc.BaseModule.__init__.__code__
        expected_attrs = ['logger', 'components', 'db', 'config', 'initialized', 'redis_cache']
        
        print("   üìã Atributos definidos no __init__:")
        for attr in expected_attrs:
            if attr in base_module_code.co_names or attr in str(base_module_code.co_consts):
                print(f"      ‚úì {attr}")
            else:
                print(f"      ? {attr} (verificar manualmente)")
                
    else:
        print("   ‚ùå BaseModule n√£o encontrada")
except Exception as e:
    print(f"   ‚ùå Erro: {e}")

# Teste 3: Verificar m√©todo process_query no SessionOrchestrator
print("\n3Ô∏è‚É£ Testando SessionOrchestrator.process_query...")
try:
    # Import direto
    import orchestrators.session_orchestrator as so
    
    # Verificar se SessionOrchestrator existe
    if hasattr(so, 'SessionOrchestrator'):
        # Verificar se o m√©todo existe
        if hasattr(so.SessionOrchestrator, 'process_query'):
            print("   ‚úÖ M√©todo process_query existe no SessionOrchestrator")
            
            # Verificar se √© async
            import inspect
            if inspect.iscoroutinefunction(so.SessionOrchestrator.process_query):
                print("   ‚úÖ M√©todo √© async (correto)")
            else:
                print("   ‚ö†Ô∏è M√©todo n√£o √© async")
        else:
            print("   ‚ùå M√©todo process_query n√£o encontrado")
    else:
        print("   ‚ùå SessionOrchestrator n√£o encontrada")
except Exception as e:
    print(f"   ‚ùå Erro: {e}")

# Teste 4: Verificar estrutura dos arquivos
print("\n4Ô∏è‚É£ Verificando estrutura dos arquivos...")
files_to_check = [
    "processors/response_processor.py",
    "utils/base_classes.py", 
    "orchestrators/orchestrator_manager.py",
    "orchestrators/session_orchestrator.py"
]

for file in files_to_check:
    full_path = os.path.join(os.path.dirname(__file__), file)
    if os.path.exists(full_path):
        size = os.path.getsize(full_path)
        print(f"   ‚úÖ {file} ({size} bytes)")
    else:
        print(f"   ‚ùå {file} n√£o encontrado")

print("\n‚úÖ Teste conclu√≠do!")
print("\nüìù Resumo das corre√ß√µes aplicadas:")
print("1. Adicionada fun√ß√£o generate_api_fallback_response no response_processor.py")
print("2. Criada classe BaseModule com todos os atributos necess√°rios no base_classes.py")
print("3. Adicionado m√©todo async process_query no SessionOrchestrator")
print("4. Corrigido loop circular no OrchestratorManager (integration_manager sempre retorna None)")
print("\n‚ö†Ô∏è Nota: Para testar completamente, instale as depend√™ncias do Flask.")