#!/usr/bin/env python3
"""
üîç TESTE DE INTEGRA√á√ÉO ENTRE SISTEMA ANTIGO E NOVO
=================================================

Testa se o claude_ai_novo est√° funcionando corretamente e se pode ser 
importado pelo sistema antigo sem erros.
"""

import sys
import os
import traceback

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def teste_importacao_learning_core():
    """Testa se o learning_core pode ser importado"""
    try:
        print("üß† Testando importa√ß√£o do learning_core...")
        from app.claude_ai_novo.learners.learning_core import get_lifelong_learning
        
        lifelong = get_lifelong_learning()
        print(f"‚úÖ Learning Core importado com sucesso: {type(lifelong)}")
        
        # Testar m√©todo aplicar_conhecimento
        teste_consulta = "Como est√£o as entregas do Atacad√£o?"
        resultado = lifelong.aplicar_conhecimento(teste_consulta)
        print(f"‚úÖ M√©todo aplicar_conhecimento funcionou: {type(resultado)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o do learning_core: {e}")
        traceback.print_exc()
        return False

def teste_importacao_orchestrators():
    """Testa se os orchestrators podem ser importados"""
    try:
        print("üéº Testando importa√ß√£o dos orchestrators...")
        from app.claude_ai_novo.orchestrators.orchestrator_manager import get_orchestrator_manager
        
        orchestrator = get_orchestrator_manager()
        print(f"‚úÖ Orchestrator Manager importado com sucesso: {type(orchestrator)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o dos orchestrators: {e}")
        traceback.print_exc()
        return False

def teste_importacao_analyzers():
    """Testa se os analyzers podem ser importados"""
    try:
        print("üîç Testando importa√ß√£o dos analyzers...")
        from app.claude_ai_novo.analyzers.analyzer_manager import get_analyzer_manager
        
        analyzer = get_analyzer_manager()
        print(f"‚úÖ Analyzer Manager importado com sucesso: {type(analyzer)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o dos analyzers: {e}")
        traceback.print_exc()
        return False

def teste_importacao_security():
    """Testa se o security guard pode ser importado"""
    try:
        print("üîí Testando importa√ß√£o do security guard...")
        from app.claude_ai_novo.security.security_guard import get_security_guard
        
        security = get_security_guard()
        print(f"‚úÖ Security Guard importado com sucesso: {type(security)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o do security guard: {e}")
        traceback.print_exc()
        return False

def teste_inicializacao_sistema_novo():
    """Testa se o sistema novo pode ser inicializado"""
    try:
        print("üöÄ Testando inicializa√ß√£o do sistema novo...")
        from app.claude_ai_novo import get_system_status
        
        status = get_system_status()
        print(f"‚úÖ Sistema novo inicializado: {status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o do sistema novo: {e}")
        traceback.print_exc()
        return False

def main():
    """Executa todos os testes"""
    print("üîç TESTE DE INTEGRA√á√ÉO SISTEMA ANTIGO ‚Üí NOVO")
    print("=" * 50)
    
    testes = [
        ("Learning Core", teste_importacao_learning_core),
        ("Orchestrators", teste_importacao_orchestrators),
        ("Analyzers", teste_importacao_analyzers),
        ("Security Guard", teste_importacao_security),
        ("Sistema Novo", teste_inicializacao_sistema_novo)
    ]
    
    resultados = []
    for nome, teste_func in testes:
        print(f"\nüìã Executando teste: {nome}")
        resultado = teste_func()
        resultados.append((nome, resultado))
        print(f"{'‚úÖ' if resultado else '‚ùå'} {nome}: {'SUCESSO' if resultado else 'FALHA'}")
    
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES:")
    
    sucessos = 0
    for nome, resultado in resultados:
        status = "‚úÖ SUCESSO" if resultado else "‚ùå FALHA"
        print(f"  {status}: {nome}")
        if resultado:
            sucessos += 1
    
    print(f"\nüéØ TAXA DE SUCESSO: {sucessos}/{len(resultados)} ({sucessos/len(resultados)*100:.1f}%)")
    
    if sucessos == len(resultados):
        print("üéâ TODOS OS TESTES PASSARAM - SISTEMA NOVO EST√Å FUNCIONAL!")
    else:
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM - VERIFICAR LOGS ACIMA")
    
    return sucessos == len(resultados)

if __name__ == "__main__":
    main() 