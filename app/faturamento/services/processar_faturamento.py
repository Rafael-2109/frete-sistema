"""
Processamento de Faturamento Simplificado
========================================

Implementa√ß√£o simplificada e otimizada do processamento de NFs
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from decimal import Decimal
from app.estoque.services.estoque_tempo_real import ServicoEstoqueTempoReal
from app import db
from app.faturamento.models import FaturamentoProduto, RelatorioFaturamentoImportado
from app.estoque.models import MovimentacaoEstoque
from app.separacao.models import Separacao
from app.embarques.models import Embarque, EmbarqueItem
from app.carteira.models import FaturamentoParcialJustificativa, InconsistenciaFaturamento

logger = logging.getLogger(__name__)


class ProcessadorFaturamento:
    """
    Processador simplificado de faturamento
    """

    def processar_nfs_importadas(
        self, usuario: str = "Importa√ß√£o Odoo", limpar_inconsistencias: bool = True
    ) -> Optional[Dict[str, Any]]:
        """
        Processa todas as NFs importadas seguindo l√≥gica simplificada
        COM MELHORIAS: Commits em lotes e tratamento de erros isolados
        """
        resultado = {
            "processadas": 0,
            "ja_processadas": 0,
            "canceladas": 0,
            "com_embarque": 0,
            "sem_separacao": 0,
            "erros": [],
            "detalhes": [],
            "movimentacoes_criadas": 0,
            "embarque_items_atualizados": 0
        }

        try:
            # 0. Limpar inconsist√™ncias anteriores se solicitado
            if limpar_inconsistencias:
                logger.info("üßπ Limpando inconsist√™ncias anteriores...")
                try:
                    # Limpar todas as inconsist√™ncias n√£o resolvidas
                    # Mant√©m as resolvidas como hist√≥rico
                    deletadas = InconsistenciaFaturamento.query.filter_by(resolvida=False).delete()
                    db.session.commit()
                    logger.info(f"‚úÖ {deletadas} inconsist√™ncias n√£o resolvidas removidas antes do processamento")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao limpar inconsist√™ncias: {e}")
                    db.session.rollback()

            # 1. Buscar TODAS as NFs ativas
            nfs_pendentes = self._buscar_nfs_pendentes()
            logger.info(f"üìä Total de NFs para processar: {len(nfs_pendentes)}")
            
            # LOG DETALHADO: Verificar quantas t√™m movimenta√ß√£o
            nfs_com_mov = 0
            nfs_sem_mov = 0
            for nf in nfs_pendentes:
                tem_mov = MovimentacaoEstoque.query.filter(
                    MovimentacaoEstoque.observacao.like(f"%NF {nf.numero_nf}%")
                ).first()
                if tem_mov:
                    nfs_com_mov += 1
                else:
                    nfs_sem_mov += 1
            
            logger.info(f"üìä Status inicial: {nfs_com_mov} j√° t√™m movimenta√ß√£o, {nfs_sem_mov} precisam ser processadas")
            
            # AJUSTE MAIS SEGURO: Processar em lotes com SAVEPOINTS
            # Lote de 20 √© ideal: ~14s por commit, baixo risco de timeout SSL
            TAMANHO_LOTE_COMMIT = 20  # Commit a cada 20 NFs processadas
            nfs_processadas_lote = []  # Lista de NFs processadas com sucesso no lote

            for idx, nf in enumerate(nfs_pendentes):
                # Criar SAVEPOINT para cada NF
                savepoint = None
                try:
                    # SEGURAN√áA M√ÅXIMA: Savepoint permite rollback parcial
                    savepoint = db.session.begin_nested()
                    
                    logger.info(
                        f"üîÑ [{idx+1}/{len(nfs_pendentes)}] Processando NF {nf.numero_nf} - Pedido: {nf.origem}"
                    )

                    # 1.A - J√° tem movimenta√ß√£o com separacao_lote_id?
                    if self._tem_movimentacao_com_lote(nf.numero_nf):
                        logger.info(f"‚úÖ NF {nf.numero_nf} j√° processada com lote - pulando")
                        resultado["ja_processadas"] += 1
                        savepoint.commit()  # Liberar savepoint
                        continue

                    # 1.B - NF Cancelada?
                    if self._nf_cancelada(nf):
                        self._processar_cancelamento(nf)
                        resultado["canceladas"] += 1
                        logger.info(f"üö´ NF {nf.numero_nf} cancelada - movimenta√ß√µes removidas")
                        savepoint.commit()  # Confirmar altera√ß√µes desta NF
                        nfs_processadas_lote.append(nf.numero_nf)
                        continue

                    # 1.C - Processar NF (com ou sem movimenta√ß√£o "Sem Separa√ß√£o")
                    processou, mov_criadas, emb_atualizados = self._processar_nf(nf, usuario)
                    if processou:
                        resultado["processadas"] += 1
                        resultado["movimentacoes_criadas"] += mov_criadas
                        resultado["embarque_items_atualizados"] += emb_atualizados
                        savepoint.commit()  # Confirmar altera√ß√µes desta NF
                        nfs_processadas_lote.append(nf.numero_nf)
                    else:
                        # N√£o processou mas n√£o √© erro - fazer commit do savepoint
                        savepoint.commit()
                        
                    # AJUSTE SEGURO: Commit em lote a cada N NFs para evitar timeout
                    if len(nfs_processadas_lote) >= TAMANHO_LOTE_COMMIT:
                        # Fazer commit do lote com retry para SSL
                        commit_sucesso = False
                        max_tentativas = 3
                        
                        for tentativa in range(max_tentativas):
                            try:
                                db.session.commit()
                                logger.info(f"‚úÖ Lote {(idx//TAMANHO_LOTE_COMMIT)+1} com {len(nfs_processadas_lote)} NFs commitado com sucesso")
                                commit_sucesso = True
                                nfs_processadas_lote = []  # Resetar lista
                                break
                            except Exception as commit_error:
                                error_msg = str(commit_error).lower()
                                
                                # Verificar se √© erro SSL recuper√°vel
                                if 'ssl' in error_msg or 'decryption' in error_msg or 'eof' in error_msg:
                                    if tentativa < max_tentativas - 1:
                                        logger.warning(f"‚ö†Ô∏è Erro SSL no commit do lote, tentativa {tentativa + 1}/{max_tentativas}")
                                        # Aguardar antes de tentar novamente
                                        import time
                                        time.sleep(0.5 * (tentativa + 1))  # Delay crescente
                                        
                                        # For√ßar reconex√£o
                                        try:
                                            db.session.rollback()
                                            db.session.close()
                                            db.engine.dispose()
                                        except Exception as e:
                                            logger.error(f"‚ùå Erro ao fechar conex√£o: {e}")
                                            pass
                                    else:
                                        logger.error(f"‚ùå Erro SSL persistente ap√≥s {max_tentativas} tentativas")
                                        db.session.rollback()
                                        resultado["erros"].append(f"Lote ({len(nfs_processadas_lote)} NFs): Erro SSL no commit ap√≥s {max_tentativas} tentativas")
                                        nfs_processadas_lote = []
                                else:
                                    # Erro n√£o relacionado a SSL - n√£o tentar novamente
                                    logger.error(f"‚ùå Erro no commit do lote: {commit_error}")
                                    db.session.rollback()
                                    resultado["erros"].append(f"Lote ({len(nfs_processadas_lote)} NFs): Erro no commit")
                                    nfs_processadas_lote = []
                                    break

                except Exception as e:
                    # SEGURAN√áA: Rollback apenas do savepoint desta NF
                    if savepoint and not savepoint.is_active:
                        # Savepoint j√° foi commitado, n√£o precisa fazer nada
                        pass
                    elif savepoint:
                        try:
                            savepoint.rollback()  # Rollback APENAS desta NF
                            logger.warning(f"‚ö†Ô∏è Rollback do savepoint para NF {nf.numero_nf}")
                        except Exception as e:
                            logger.error(f"‚ùå Erro ao fazer rollback do savepoint para NF {nf.numero_nf}: {str(e)}")
                            pass
                    
                    logger.error(f"‚ùå Erro ao processar NF {nf.numero_nf}: {str(e)}")
                    resultado["erros"].append(f"NF {nf.numero_nf}: {str(e)}")
                    # Continuar com as outras NFs - o savepoint protegeu as anteriores
                    continue

            # AJUSTE SEGURO: Commit final para NFs restantes no √∫ltimo lote
            if len(nfs_processadas_lote) > 0:
                try:
                    db.session.commit()
                    logger.info(f"‚úÖ √öltimo lote de {len(nfs_processadas_lote)} NFs commitado com sucesso")
                except Exception as e:
                    logger.error(f"‚ùå Erro no commit do √∫ltimo lote: {e}")
                    # Tentar reconectar
                    try:
                        db.session.rollback()
                        db.session.close()
                        db.engine.dispose()
                        resultado["erros"].append(f"√öltimo lote ({len(nfs_processadas_lote)} NFs): Erro no commit")
                    except Exception as e:
                        logger.error(f"‚ùå Erro no commit do √∫ltimo lote: {e}")
                        pass
            
            # Estat√≠sticas finais
            logger.info(f"‚úÖ Processamento completo: {resultado['processadas']} NFs processadas")
            if resultado.get('movimentacoes_criadas', 0) > 0:
                logger.info(f"üìä Movimenta√ß√µes criadas: {resultado['movimentacoes_criadas']}")
            if resultado.get('embarque_items_atualizados', 0) > 0:
                logger.info(f"üì¶ EmbarqueItems atualizados: {resultado['embarque_items_atualizados']}")

        except Exception as e:
            db.session.rollback()
            logger.error(f"‚ùå Erro geral no processamento: {str(e)}")
            resultado["erro_geral"] = str(e)

        return resultado

    def _buscar_nfs_pendentes(self) -> List[RelatorioFaturamentoImportado]:
        """
        Busca TODAS as NFs ativas que t√™m produtos
        """
        # Subquery para NFs que t√™m produtos
        nfs_com_produtos = db.session.query(FaturamentoProduto.numero_nf).distinct().subquery()

        # Buscar todas as NFs ativas com produtos
        return (
            RelatorioFaturamentoImportado.query.filter(
                RelatorioFaturamentoImportado.ativo == True,
                RelatorioFaturamentoImportado.numero_nf.in_(db.session.query(nfs_com_produtos.c.numero_nf)),
            )
            .order_by(RelatorioFaturamentoImportado.numero_nf.desc())
            .all()
        )

    def _tem_movimentacao_com_lote(self, numero_nf: str) -> bool:
        """
        Verifica se NF j√° tem movimenta√ß√£o COM separacao_lote_id
        """
        return (
            MovimentacaoEstoque.query.filter(
                MovimentacaoEstoque.observacao.like(f"%NF {numero_nf}%"),
                MovimentacaoEstoque.observacao.like("%lote separa√ß√£o%"),
                ~MovimentacaoEstoque.observacao.like("%Sem Separa√ß√£o%"),
            ).first()
            is not None
        )

    def _nf_cancelada(self, nf: RelatorioFaturamentoImportado) -> bool:
        """
        Verifica se NF est√° cancelada
        """
        produto_cancelado = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf, status_nf="Cancelado").first()

        return produto_cancelado is not None or not nf.ativo

    def _processar_cancelamento(self, nf: RelatorioFaturamentoImportado):
        """
        Remove movimenta√ß√µes de NF cancelada
        """
        MovimentacaoEstoque.query.filter(MovimentacaoEstoque.observacao.like(f"%NF {nf.numero_nf}%")).delete()

    def _processar_nf(self, nf: RelatorioFaturamentoImportado, usuario: str) -> tuple:
        """
        Processa uma NF seguindo a l√≥gica simplificada
        Retorna: (processou, movimentacoes_criadas, embarque_items_atualizados)
        """
        movimentacoes_criadas = 0
        embarque_items_atualizados = 0
        
        # 2. NF consta em EmbarqueItem?
        embarque_item = EmbarqueItem.query.filter_by(nota_fiscal=nf.numero_nf).first()

        if embarque_item and embarque_item.pedido == nf.origem:
            # Caso 1: NF vinculada e pedido bate
            logger.info(f"üì¶ NF {nf.numero_nf} j√° vinculada em EmbarqueItem com mesmo pedido")
            self._apagar_movimentacao_anterior(nf.numero_nf)

            # Gravar movimenta√ß√£o com o lote do EmbarqueItem
            if embarque_item.separacao_lote_id:
                mov_criadas = self._criar_movimentacao_com_lote(nf, embarque_item.separacao_lote_id, usuario)
                movimentacoes_criadas += mov_criadas
                
                # Limpar erro de valida√ß√£o se existir
                if embarque_item.erro_validacao in ['NF_PENDENTE_FATURAMENTO', 'NF_DIVERGENTE']:
                    embarque_item.erro_validacao = None
                    logger.info(f"‚úÖ Erro de valida√ß√£o limpo para EmbarqueItem ID {embarque_item.id}")
                    embarque_items_atualizados += 1
                
                # Avaliar score para verificar se h√° diverg√™ncia
                self._avaliar_score_e_gerar_inconsistencia(nf, embarque_item.separacao_lote_id, usuario)
                return True, movimentacoes_criadas, embarque_items_atualizados
            else:
                logger.error(f"‚ùå EmbarqueItem sem separacao_lote_id para NF {nf.numero_nf}")
                return False, 0, 0

        elif embarque_item:
            # NF vinculada mas pedido n√£o bate
            logger.warning(f"‚ö†Ô∏è NF {nf.numero_nf} em EmbarqueItem mas pedido divergente")
            mov_criadas = self._criar_movimentacao_sem_separacao(nf, usuario)
            movimentacoes_criadas += mov_criadas
            self._gerar_inconsistencia_divergencia_embarque(nf, embarque_item, usuario)
            return True, movimentacoes_criadas, embarque_items_atualizados

        # 3. Origem da NF consta em algum embarque ativo?
        embarque_ativo = self._buscar_embarque_ativo_por_pedido(nf.origem)

        if embarque_ativo:
            # Caso 2: Pedido encontrado em embarque ativo
            logger.info(f"üö¢ NF {nf.numero_nf} tem embarque ativo - avaliando score")
            self._apagar_movimentacao_anterior(nf.numero_nf)
            processou, mov_criadas, emb_atualizados = self._avaliar_score_completo(nf, usuario)
            return processou, mov_criadas, emb_atualizados
        else:
            # N√£o - Registra "Sem Separa√ß√£o" + inconsist√™ncia
            logger.info(f"‚ùå NF {nf.numero_nf} sem embarque ativo - registrando 'Sem Separa√ß√£o'")
            mov_criadas = self._criar_movimentacao_sem_separacao(nf, usuario)
            movimentacoes_criadas += mov_criadas
            self._gerar_inconsistencia_sem_separacao(nf, usuario)
            return True, movimentacoes_criadas, embarque_items_atualizados

    def _buscar_embarque_ativo_por_pedido(self, num_pedido: str) -> Optional[EmbarqueItem]:
        """
        Busca embarque ativo por n√∫mero do pedido que precisa de processamento
        
        Processa SE:
        1. NF vazia (ainda n√£o preenchida) OU  
        2. erro_validacao != None (tem erro para resolver)
        
        N√ÉO processa SE:
        NF preenchida E erro_validacao = None (j√° est√° tudo OK!)
        """
        from sqlalchemy import or_
        
        return (
            EmbarqueItem.query.join(Embarque, EmbarqueItem.embarque_id == Embarque.id)
            .filter(
                EmbarqueItem.pedido == num_pedido,
                Embarque.status == "ativo",
                EmbarqueItem.status == "ativo",
                or_(
                    # Caso 1: NF vazia (ainda n√£o preenchida)
                    EmbarqueItem.nota_fiscal.is_(None),
                    EmbarqueItem.nota_fiscal == '',
                    # Caso 2: Tem erro de valida√ß√£o para resolver
                    EmbarqueItem.erro_validacao.isnot(None)
                )
            )
            .first()
        )

    def _apagar_movimentacao_anterior(self, numero_nf: str):
        """
        Apaga movimenta√ß√µes anteriores da NF (exceto as com lote)
        """
        MovimentacaoEstoque.query.filter(
            MovimentacaoEstoque.observacao.like(f"%NF {numero_nf}%"),
            MovimentacaoEstoque.observacao.like("%Sem Separa√ß√£o%"),
        ).delete()

    def _avaliar_score_e_gerar_inconsistencia(self, nf: RelatorioFaturamentoImportado, lote_id: str, usuario: str):
        """
        Avalia score para gerar inconsist√™ncia se houver diverg√™ncia (Caso 1)
        """
        # Buscar separa√ß√µes do lote
        separacoes = Separacao.query.filter_by(separacao_lote_id=lote_id).all()

        if separacoes:
            tem_divergencia = self._calcular_divergencia_lote(nf, separacoes)
            if tem_divergencia:
                self._criar_justificativa_divergencia(nf, lote_id, usuario)

    def _avaliar_score_completo(self, nf: RelatorioFaturamentoImportado, usuario: str) -> tuple:
        """
        Avalia score completo para encontrar melhor lote (Caso 2)
        Retorna: (processou, movimentacoes_criadas, embarque_items_atualizados)
        """
        movimentacoes_criadas = 0
        embarque_items_atualizados = 0
        
        # Verificar se h√° apenas 1 EmbarqueItem com o pedido
        embarques_pedido = EmbarqueItem.query.filter_by(pedido=nf.origem).all()

        if len(embarques_pedido) == 1:
            # Apenas 1 EmbarqueItem - usar seu lote
            lote_id = embarques_pedido[0].separacao_lote_id
            if lote_id:
                logger.info(f"‚úÖ √önico EmbarqueItem encontrado para pedido {nf.origem} - lote {lote_id}")
                mov_criadas = self._criar_movimentacao_com_lote(nf, lote_id, usuario)
                movimentacoes_criadas += mov_criadas
                if self._atualizar_embarque_item(nf.numero_nf, lote_id):
                    embarque_items_atualizados += 1
                # Avaliar diverg√™ncia
                self._avaliar_score_e_gerar_inconsistencia(nf, lote_id, usuario)
                return True, movimentacoes_criadas, embarque_items_atualizados

        # M√∫ltiplos embarques ou nenhum - avaliar por score
        return self._avaliar_melhor_lote_por_score(nf, embarques_pedido, usuario)

    def _calcular_divergencia_lote(self, nf: RelatorioFaturamentoImportado, separacoes: List[Separacao]) -> bool:
        """
        Calcula se h√° diverg√™ncia entre NF e separa√ß√µes de um lote
        """
        produtos_nf = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()

        tem_divergencia = False

        for prod_nf in produtos_nf:
            sep_correspondente = next(
                (sep for sep in separacoes if str(sep.cod_produto).strip() == str(prod_nf.cod_produto).strip()), None
            )

            if sep_correspondente and sep_correspondente.qtd_saldo > 0:
                qtd_nf = Decimal(str(prod_nf.qtd_produto_faturado))
                qtd_sep = Decimal(str(sep_correspondente.qtd_saldo))

                max_qtd = max(qtd_nf, qtd_sep)
                if max_qtd > 0:
                    # Diverg√™ncia se diferen√ßa > 5%
                    if abs(qtd_nf - qtd_sep) / max_qtd > 0.05:
                        tem_divergencia = True
                        break
            else:
                # Produto n√£o encontrado ou sem saldo
                tem_divergencia = True
                break

        return tem_divergencia

    def _avaliar_melhor_lote_por_score(
        self, nf: RelatorioFaturamentoImportado, embarques_pedido: List[EmbarqueItem], usuario: str
    ) -> tuple:
        """
        Avalia m√∫ltiplos lotes e escolhe o melhor por score
        Retorna: (processou, movimentacoes_criadas, embarque_items_atualizados)
        """
        movimentacoes_criadas = 0
        embarque_items_atualizados = 0
        
        # Coletar todos os lotes √∫nicos
        lotes_unicos = set()
        for item in embarques_pedido:
            if item.separacao_lote_id:
                lotes_unicos.add(item.separacao_lote_id)

        if not lotes_unicos:
            logger.warning(f"‚ö†Ô∏è Nenhum lote encontrado para pedido {nf.origem}")
            mov_criadas = self._criar_movimentacao_sem_separacao(nf, usuario)
            movimentacoes_criadas += mov_criadas
            self._gerar_inconsistencia_sem_separacao(nf, usuario)
            return True, movimentacoes_criadas, embarque_items_atualizados

        # Buscar produtos da NF
        produtos_nf = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()

        melhor_score = 0
        melhor_lote = None

        # Avaliar cada lote
        for lote_id in lotes_unicos:
            # Buscar separa√ß√µes do lote
            separacoes_lote = Separacao.query.filter_by(separacao_lote_id=lote_id).all()

            if not separacoes_lote:
                continue

            # Calcular score do lote
            score_produtos = []

            for prod_nf in produtos_nf:
                sep_correspondente = next(
                    (
                        sep
                        for sep in separacoes_lote
                        if str(sep.cod_produto).strip() == str(prod_nf.cod_produto).strip()
                    ),
                    None,
                )

                if sep_correspondente and sep_correspondente.qtd_saldo > 0:
                    qtd_nf = Decimal(str(prod_nf.qtd_produto_faturado))
                    qtd_sep = Decimal(str(sep_correspondente.qtd_saldo))

                    max_qtd = max(qtd_nf, qtd_sep)
                    if max_qtd > 0:
                        score_produto = float(min(qtd_nf, qtd_sep) / max_qtd)
                        score_produtos.append(score_produto)
                else:
                    score_produtos.append(0)

            # Score m√©dio do lote
            score_lote = sum(score_produtos) / len(score_produtos) if score_produtos else 0

            logger.info(f"  Lote {lote_id}: score {score_lote:.2f}")

            if score_lote > melhor_score:
                melhor_score = score_lote
                melhor_lote = lote_id

        if melhor_lote:
            logger.info(f"‚úÖ Melhor lote para NF {nf.numero_nf}: {melhor_lote} (score: {melhor_score:.2f})")
            mov_criadas = self._criar_movimentacao_com_lote(nf, melhor_lote, usuario)
            movimentacoes_criadas += mov_criadas
            if self._atualizar_embarque_item(nf.numero_nf, melhor_lote):
                embarque_items_atualizados += 1
            self._avaliar_score_e_gerar_inconsistencia(nf, melhor_lote, usuario)
            return True, movimentacoes_criadas, embarque_items_atualizados
        else:
            logger.warning(f"‚ö†Ô∏è Nenhum lote adequado encontrado para NF {nf.numero_nf}")
            mov_criadas = self._criar_movimentacao_sem_separacao(nf, usuario)
            movimentacoes_criadas += mov_criadas
            self._gerar_inconsistencia_sem_separacao(nf, usuario)
            return True, movimentacoes_criadas, embarque_items_atualizados

    def _criar_movimentacao_sem_separacao(self, nf: RelatorioFaturamentoImportado, usuario: str) -> int:
        """
        Cria movimenta√ß√£o 'Sem Separa√ß√£o'
        Retorna: quantidade de movimenta√ß√µes criadas
        """
        movimentacoes_criadas = 0
        
        # Verificar se j√° existe
        existe = MovimentacaoEstoque.query.filter(
            MovimentacaoEstoque.observacao.like(f"%NF {nf.numero_nf}%"),
            MovimentacaoEstoque.observacao.like("%Sem Separa√ß√£o%"),
        ).first()

        if existe:
            logger.debug(f"Movimenta√ß√£o 'Sem Separa√ß√£o' j√° existe para NF {nf.numero_nf}")
            return 0

        produtos = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()
        logger.info(f"üì¶ Criando {len(produtos)} movimenta√ß√µes 'Sem Separa√ß√£o' para NF {nf.numero_nf}")

        for produto in produtos:
            try:
                mov = MovimentacaoEstoque()
                mov.cod_produto = produto.cod_produto
                mov.nome_produto = produto.nome_produto
                mov.tipo_movimentacao = "FATURAMENTO"
                mov.local_movimentacao = "VENDA"
                mov.data_movimentacao = datetime.now().date()
                mov.qtd_movimentacao = -abs(produto.qtd_produto_faturado)
                mov.observacao = f"Baixa autom√°tica NF {nf.numero_nf} - Sem Separa√ß√£o"
                mov.criado_por = usuario
                db.session.add(mov)
                movimentacoes_criadas += 1
                logger.debug(f"  ‚úì Movimenta√ß√£o criada: {produto.cod_produto} - Qtd: {mov.qtd_movimentacao}")
            except Exception as e:
                logger.error(f"  ‚úó Erro ao criar movimenta√ß√£o para produto {produto.cod_produto}: {e}")
        
        logger.info(f"‚úÖ {movimentacoes_criadas} movimenta√ß√µes 'Sem Separa√ß√£o' preparadas para NF {nf.numero_nf}")
        return movimentacoes_criadas

    def _criar_movimentacao_com_lote(self, nf: RelatorioFaturamentoImportado, lote_id: str, usuario: str) -> int:
        """
        Cria movimenta√ß√£o com lote de separa√ß√£o
        Retorna: quantidade de movimenta√ß√µes criadas
        """
        movimentacoes_criadas = 0
        produtos = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()
        logger.info(f"üì¶ Criando {len(produtos)} movimenta√ß√µes com lote {lote_id} para NF {nf.numero_nf}")

        for produto in produtos:
            try:
                mov = MovimentacaoEstoque()
                mov.cod_produto = produto.cod_produto
                mov.nome_produto = produto.nome_produto
                mov.tipo_movimentacao = "FATURAMENTO"
                mov.local_movimentacao = "VENDA"
                mov.data_movimentacao = datetime.now().date()
                mov.qtd_movimentacao = -abs(produto.qtd_produto_faturado)
                mov.observacao = f"Baixa autom√°tica NF {nf.numero_nf} - lote separa√ß√£o {lote_id}"
                mov.criado_por = usuario
                db.session.add(mov)
                movimentacoes_criadas += 1
                logger.debug(f"  ‚úì Movimenta√ß√£o criada: {produto.cod_produto} - Qtd: {mov.qtd_movimentacao}")

                # Abater MovimentacaoPrevista SEM fallback de data
                try:
                    sep = Separacao.query.filter_by(separacao_lote_id=lote_id, cod_produto=produto.cod_produto).first()
                    if sep and sep.expedicao:
                        ServicoEstoqueTempoReal.atualizar_movimentacao_prevista(
                            cod_produto=produto.cod_produto,
                            data=sep.expedicao,
                            qtd_entrada=Decimal("0"),
                            qtd_saida=Decimal(str(-abs(produto.qtd_produto_faturado))),
                        )
                        logger.debug(f"  ‚úì Previs√£o abatida para {produto.cod_produto}")
                except Exception as e:
                    logger.debug(f"  ‚ö†Ô∏è Falha ao abater previs√£o {produto.cod_produto}: {e}")
                    
            except Exception as e:
                logger.error(f"  ‚úó Erro ao criar movimenta√ß√£o para produto {produto.cod_produto}: {e}")
        
        logger.info(f"‚úÖ {movimentacoes_criadas} movimenta√ß√µes com lote preparadas para NF {nf.numero_nf}")        
        return movimentacoes_criadas

    def _criar_justificativa_divergencia(self, nf: RelatorioFaturamentoImportado, lote_id: str, usuario: str):
        """
        Cria justificativa para diverg√™ncia
        """
        produtos = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()
        separacoes = Separacao.query.filter_by(separacao_lote_id=lote_id).all()

        for sep in separacoes:
            prod_corresp = next(
                (p for p in produtos if str(p.cod_produto).strip() == str(sep.cod_produto).strip()), None
            )

            if prod_corresp:
                qtd_fat = Decimal(str(prod_corresp.qtd_produto_faturado))
                qtd_sep = Decimal(str(sep.qtd_saldo))

                if abs(qtd_fat - qtd_sep) > 0:
                    just = FaturamentoParcialJustificativa()
                    just.separacao_lote_id = lote_id
                    just.num_pedido = nf.origem
                    just.cod_produto = sep.cod_produto
                    just.numero_nf = nf.numero_nf
                    just.qtd_separada = float(qtd_sep)
                    just.qtd_faturada = float(qtd_fat)
                    just.qtd_saldo = float(abs(qtd_sep - qtd_fat))
                    just.motivo_nao_faturamento = "DIVERGENCIA_AUTO"
                    just.descricao_detalhada = f"Diverg√™ncia: Separado {qtd_sep}, Faturado {qtd_fat}"
                    just.classificacao_saldo = "NECESSITA_COMP"  # Max 20 chars
                    just.criado_por = usuario
                    db.session.add(just)

    def _atualizar_embarque_item(self, numero_nf: str, lote_id: str) -> bool:
        """
        Atualiza EmbarqueItem com a NF
        Retorna: True se atualizou, False caso contr√°rio
        """
        try:
            # Primeiro verificar se existe item para atualizar
            item = EmbarqueItem.query.filter_by(separacao_lote_id=lote_id, nota_fiscal=None).first()
            
            if not item:
                # Verificar se j√° foi atualizado anteriormente
                item_ja_atualizado = EmbarqueItem.query.filter_by(
                    separacao_lote_id=lote_id, 
                    nota_fiscal=numero_nf
                ).first()
                
                if item_ja_atualizado:
                    logger.debug(f"EmbarqueItem do lote {lote_id} j√° possui NF {numero_nf}")
                    return False
                else:
                    logger.warning(f"‚ö†Ô∏è Nenhum EmbarqueItem encontrado para lote {lote_id} sem NF")
                    return False
            
            # Atualizar o item
            item.nota_fiscal = numero_nf
            
            # Tamb√©m limpar erro de valida√ß√£o se existir
            if item.erro_validacao in ['NF_PENDENTE_FATURAMENTO', 'NF_DIVERGENTE']:
                item.erro_validacao = None
                logger.info(f"‚úÖ Erro de valida√ß√£o limpo para EmbarqueItem do lote {lote_id}")
            
            logger.info(f"‚úÖ NF {numero_nf} vinculada ao EmbarqueItem do lote {lote_id} (ID: {item.id})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar EmbarqueItem do lote {lote_id} com NF {numero_nf}: {e}")
            return False

    def _gerar_inconsistencia_divergencia_embarque(
        self, nf: RelatorioFaturamentoImportado, embarque_item: EmbarqueItem, usuario: str
    ):
        """
        Gera inconsist√™ncia para diverg√™ncia NF x Embarque
        """
        # Verificar se j√° existe inconsist√™ncia para esta NF
        inc_existente = InconsistenciaFaturamento.query.filter_by(
            numero_nf=nf.numero_nf, tipo="DIVERGENCIA_NF_EMBARQUE"
        ).first()

        produtos = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()
        qtd_total = sum(float(p.qtd_produto_faturado) for p in produtos)

        if inc_existente:
            # Atualizar existente
            inc_existente.num_pedido = nf.origem
            inc_existente.cod_produto = produtos[0].cod_produto if produtos else "MULTIPLOS"
            inc_existente.qtd_faturada = qtd_total
            inc_existente.observacao_resolucao = f"""
            NF {nf.numero_nf} vinculada ao embarque mas com pedido divergente:
            - Pedido NF: {nf.origem}
            - Pedido EmbarqueItem: {embarque_item.pedido}
            - Embarque ID: {embarque_item.embarque_id}
            """
            inc_existente.resolvida = False
            inc_existente.atualizado_por = usuario
            inc_existente.atualizado_em = datetime.now()
        else:
            # Criar nova
            inc = InconsistenciaFaturamento()
            inc.tipo = "DIVERGENCIA_NF_EMBARQUE"
            inc.numero_nf = nf.numero_nf
            inc.num_pedido = nf.origem
            inc.cod_produto = produtos[0].cod_produto if produtos else "MULTIPLOS"
            inc.qtd_faturada = qtd_total
            inc.observacao_resolucao = f"""
            NF {nf.numero_nf} vinculada ao embarque mas com pedido divergente:
            - Pedido NF: {nf.origem}
            - Pedido EmbarqueItem: {embarque_item.pedido}
            - Embarque ID: {embarque_item.embarque_id}
            """
            inc.resolvida = False
            inc.criado_por = usuario
            db.session.add(inc)

    def _gerar_inconsistencia_sem_separacao(self, nf: RelatorioFaturamentoImportado, usuario: str):
        """
        Gera inconsist√™ncia para NF sem separa√ß√£o
        """
        # Verificar se j√° existe inconsist√™ncia para esta NF
        inc_existente = InconsistenciaFaturamento.query.filter_by(
            numero_nf=nf.numero_nf, tipo="NF_SEM_SEPARACAO"
        ).first()

        produtos = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()
        qtd_total = sum(float(p.qtd_produto_faturado) for p in produtos)

        if inc_existente:
            # Atualizar existente
            inc_existente.num_pedido = nf.origem
            inc_existente.cod_produto = produtos[0].cod_produto if produtos else "MULTIPLOS"
            inc_existente.qtd_faturada = qtd_total
            inc_existente.observacao_resolucao = f"NF {nf.numero_nf} processada sem separa√ß√£o - Pedido {nf.origem}"
            inc_existente.resolvida = False
            inc_existente.atualizado_por = usuario
            inc_existente.atualizado_em = datetime.now()
        else:
            # Criar nova
            inc = InconsistenciaFaturamento()
            inc.tipo = "NF_SEM_SEPARACAO"
            inc.numero_nf = nf.numero_nf
            inc.num_pedido = nf.origem
            inc.cod_produto = produtos[0].cod_produto if produtos else "MULTIPLOS"
            inc.qtd_faturada = qtd_total
            inc.observacao_resolucao = f"NF {nf.numero_nf} processada sem separa√ß√£o - Pedido {nf.origem}"
            inc.resolvida = False
            inc.criado_por = usuario
            db.session.add(inc)
