"""
Processamento de Faturamento Simplificado
========================================

Implementa√ß√£o simplificada e otimizada do processamento de NFs
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from decimal import Decimal
# MIGRADO: ServicoEstoqueTempoReal -> ServicoEstoqueSimples (02/09/2025)
from app.estoque.services.estoque_simples import ServicoEstoqueSimples as ServicoEstoqueTempoReal
from app import db
from app.faturamento.models import FaturamentoProduto, RelatorioFaturamentoImportado
from app.estoque.models import MovimentacaoEstoque
from app.separacao.models import Separacao
from app.embarques.models import Embarque, EmbarqueItem
from app.carteira.models import FaturamentoParcialJustificativa, InconsistenciaFaturamento

logger = logging.getLogger(__name__)


class ProcessadorFaturamento:
    """
    Processador simplificado de faturamento
    """

    def processar_nfs_importadas(
        self, usuario: str = "Importa√ß√£o Odoo", 
        limpar_inconsistencias: bool = True,
        nfs_especificas: List[str] = None
    ) -> Optional[Dict[str, Any]]:
        """
        Processa NFs importadas seguindo l√≥gica simplificada
        COM MELHORIAS: Commits em lotes e tratamento de erros isolados
        
        Args:
            usuario: Usu√°rio respons√°vel pelo processamento
            limpar_inconsistencias: Se deve limpar inconsist√™ncias anteriores
            nfs_especificas: Lista de NFs espec√≠ficas para processar (otimiza√ß√£o)
                           Se None, busca NFs n√£o processadas
                           
        Cen√°rios de Processamento/Reprocessamento:
            1. NF nova importada ‚Üí Cria MovimentacaoEstoque
            2. NF sem EmbarqueItem ‚Üí Cria como "Sem Separa√ß√£o", reprocessa quando tiver
            3. NF sem Separacao ‚Üí Cria sem lote, reprocessa quando encontrar
            4. NF com erro em EmbarqueItem ‚Üí Reprocessa ap√≥s corre√ß√£o
            5. NF reativada (des-cancelada) ‚Üí Reprocessa para recriar movimenta√ß√µes
        """
        resultado = {
            "processadas": 0,
            "ja_processadas": 0,
            "canceladas": 0,
            "com_embarque": 0,
            "sem_separacao": 0,
            "erros": [],
            "detalhes": [],
            "movimentacoes_criadas": 0,
            "embarque_items_atualizados": 0
        }

        try:
            # 0. Limpar inconsist√™ncias anteriores se solicitado
            if limpar_inconsistencias:
                logger.info("üßπ Limpando inconsist√™ncias anteriores...")
                try:
                    # Limpar todas as inconsist√™ncias n√£o resolvidas
                    # Mant√©m as resolvidas como hist√≥rico
                    deletadas = InconsistenciaFaturamento.query.filter_by(resolvida=False).delete()
                    db.session.commit()
                    logger.info(f"‚úÖ {deletadas} inconsist√™ncias n√£o resolvidas removidas antes do processamento")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao limpar inconsist√™ncias: {e}")
                    db.session.rollback()

            # 1. Buscar NFs para processar
            if nfs_especificas:
                # üöÄ OTIMIZA√á√ÉO: Processar apenas NFs espec√≠ficas (novas ou atualizadas)
                logger.info(f"üéØ Processando {len(nfs_especificas)} NFs espec√≠ficas...")
                nfs_pendentes = self._buscar_nfs_especificas(nfs_especificas)
            else:
                # Fallback: buscar NFs n√£o processadas (m√©todo otimizado)
                logger.info("üîç Buscando NFs n√£o processadas...")
                nfs_pendentes = self._buscar_nfs_nao_processadas()
            
            logger.info(f"üìä Total de NFs para processar: {len(nfs_pendentes)}")
            
            # Cache de separa√ß√µes por lote para evitar queries repetidas
            cache_separacoes = {}
            
            for idx, nf in enumerate(nfs_pendentes):
                try:
                    logger.debug(f"[{idx+1}/{len(nfs_pendentes)}] NF {nf.numero_nf}")

                    # Processar NF (verifica√ß√£o redundante removida)
                    processou, mov_criadas, emb_atualizados = self._processar_nf_simplificado(
                        nf, usuario, cache_separacoes
                    )
                    
                    if processou:
                        resultado["processadas"] += 1
                        resultado["movimentacoes_criadas"] += mov_criadas
                        resultado["embarque_items_atualizados"] += emb_atualizados

                except Exception as e:
                    logger.error(f"‚ùå Erro NF {nf.numero_nf}: {str(e)}")
                    resultado["erros"].append(f"NF {nf.numero_nf}: {str(e)}")
                    db.session.rollback()  # Rollback espec√≠fico do erro
                    continue

            # Commit √∫nico no final (mais simples e seguro)
            try:
                db.session.commit()
                logger.debug(f"‚úÖ Commit final de {resultado['processadas']} NFs processadas")
            except Exception as e:
                logger.error(f"‚ùå Erro no commit final: {e}")
                db.session.rollback()
            
            # NOVO: Atualizar status das separa√ß√µes para FATURADO
            logger.info("üîÑ Atualizando status das separa√ß√µes para FATURADO...")
            separacoes_atualizadas = self._atualizar_status_separacoes_faturadas()
            if separacoes_atualizadas > 0:
                logger.info(f"‚úÖ {separacoes_atualizadas} separa√ß√µes atualizadas para status FATURADO")
                resultado["separacoes_atualizadas_status"] = separacoes_atualizadas
            
            # Estat√≠sticas finais
            logger.info(f"‚úÖ Processamento completo: {resultado['processadas']} NFs processadas")
            if resultado.get('movimentacoes_criadas', 0) > 0:
                logger.info(f"üìä Movimenta√ß√µes criadas: {resultado['movimentacoes_criadas']}")
            if resultado.get('embarque_items_atualizados', 0) > 0:
                logger.info(f"üì¶ EmbarqueItems atualizados: {resultado['embarque_items_atualizados']}")

        except Exception as e:
            db.session.rollback()
            logger.error(f"‚ùå Erro geral no processamento: {str(e)}")
            resultado["erro_geral"] = str(e)

        return resultado

    def _buscar_nfs_especificas(self, nfs_lista: List[str]) -> List[RelatorioFaturamentoImportado]:
        """
        Busca NFs espec√≠ficas da lista fornecida
        
        Args:
            nfs_lista: Lista de n√∫meros de NF para buscar
        """
        if not nfs_lista:
            return []
        
        # Remover duplicatas
        nfs_unicas = list(set(nfs_lista))
        
        return (
            RelatorioFaturamentoImportado.query.filter(
                RelatorioFaturamentoImportado.ativo == True,
                RelatorioFaturamentoImportado.numero_nf.in_(nfs_unicas)
            )
            .order_by(RelatorioFaturamentoImportado.numero_nf.desc())
            .all()
        )
    
    def _buscar_nfs_nao_processadas(self) -> List[RelatorioFaturamentoImportado]:
        """
        FLUXO √öNICO: Busca NFs que precisam ser processadas ou REprocessadas
        Inclui:
        - NFs sem MovimentacaoEstoque
        - NFs com MovimentacaoEstoque mas sem separacao_lote_id (processamento incompleto)
        - NFs em EmbarqueItem com erro_validacao pendente
        
        GARANTE: N√£o duplica√ß√£o - _tem_movimentacao_com_lote() verifica antes de criar
        """
        # Subquery para NFs que j√° t√™m movimenta√ß√£o COMPLETA (com lote)
        nfs_processadas_completas = db.session.query(MovimentacaoEstoque.numero_nf).filter(
            MovimentacaoEstoque.numero_nf.isnot(None),
            MovimentacaoEstoque.separacao_lote_id.isnot(None),  # Tem lote = processamento completo
            MovimentacaoEstoque.status_nf == 'FATURADO'
        ).distinct().subquery()
        
        # Subquery para NFs que precisam reprocessamento (sem lote ou com erro)
        nfs_reprocessar = db.session.query(MovimentacaoEstoque.numero_nf).filter(
            MovimentacaoEstoque.numero_nf.isnot(None),
            MovimentacaoEstoque.separacao_lote_id.is_(None),  # Sem lote = precisa reprocessar
            MovimentacaoEstoque.status_nf == 'FATURADO'
        ).distinct().subquery()
        
        # Subquery para NFs em EmbarqueItem com erro
        nfs_com_erro_embarque = db.session.query(EmbarqueItem.nota_fiscal).filter(
            EmbarqueItem.nota_fiscal.isnot(None),
            EmbarqueItem.erro_validacao.isnot(None)  # Com erro = precisa reprocessar
        ).distinct().subquery()
        
        # Subquery para NFs que t√™m produtos ativos
        nfs_com_produtos = db.session.query(FaturamentoProduto.numero_nf).filter(
            FaturamentoProduto.status_nf != 'Cancelado'  # Ignorar canceladas
        ).distinct().subquery()
        
        # Buscar NFs que:
        # 1. N√£o est√£o processadas completamente OU
        # 2. Est√£o marcadas para reprocessamento OU  
        # 3. T√™m erro em EmbarqueItem
        return (
            RelatorioFaturamentoImportado.query.filter(
                RelatorioFaturamentoImportado.ativo == True,
                RelatorioFaturamentoImportado.numero_nf.in_(db.session.query(nfs_com_produtos.c.numero_nf)),
                db.or_(
                    # NFs n√£o processadas completamente
                    ~RelatorioFaturamentoImportado.numero_nf.in_(db.session.query(nfs_processadas_completas.c.numero_nf)),
                    # NFs que precisam reprocessamento (sem lote)
                    RelatorioFaturamentoImportado.numero_nf.in_(db.session.query(nfs_reprocessar.c.numero_nf)),
                    # NFs com erro em EmbarqueItem
                    RelatorioFaturamentoImportado.numero_nf.in_(db.session.query(nfs_com_erro_embarque.c.numero_nf))
                )
            )
            .order_by(RelatorioFaturamentoImportado.numero_nf.desc())
            .all()  # Sem limite - m√°ximo 50 NFs/dia na pr√°tica
        )
        
    def processar_fluxo_completo(self) -> Dict[str, Any]:
        """
        FLUXO √öNICO COMPLETO: Processa todas as NFs que precisam (novas + incompletas)
        
        Garante:
        - N√£o duplica movimenta√ß√µes (verifica antes de criar)
        - Processa NFs novas
        - Reprocessa NFs incompletas
        - Tenta vincular separa√ß√µes que apareceram depois
        
        Returns:
            Dicion√°rio com estat√≠sticas completas
        """
        logger.info("üöÄ FLUXO √öNICO: Processando todas as NFs pendentes...")
        
        # Usar o m√©todo j√° otimizado que pega TUDO que precisa
        resultado = self.processar_nfs_importadas(
            usuario="Sincroniza√ß√£o Completa",
            limpar_inconsistencias=True,
            nfs_especificas=None  # None = busca autom√°tica de todas pendentes
        )
        
        if resultado:
            logger.info(f"‚úÖ FLUXO COMPLETO CONCLU√çDO:")
            logger.info(f"   - {resultado.get('processadas', 0)} NFs processadas")
            logger.info(f"   - {resultado.get('movimentacoes_criadas', 0)} movimenta√ß√µes criadas")
            logger.info(f"   - {resultado.get('embarque_items_atualizados', 0)} embarques atualizados")
            logger.info(f"   - {resultado.get('sem_separacao', 0)} sem separa√ß√£o (tentar√£o novamente depois)")
            
        return resultado or {"sucesso": False, "erro": "Processamento retornou None"}

    def _tem_movimentacao_com_lote(self, numero_nf: str) -> bool:
        """
        Verifica se NF j√° tem movimenta√ß√£o COM separacao_lote_id
        Sem fallback - todos os registros j√° foram migrados
        """
        resultado = MovimentacaoEstoque.query.filter(
            MovimentacaoEstoque.numero_nf == numero_nf,
            MovimentacaoEstoque.separacao_lote_id.isnot(None),
            MovimentacaoEstoque.status_nf == 'FATURADO'
        ).first()
        
        return resultado is not None

    def _processar_nf_simplificado(self, nf: RelatorioFaturamentoImportado, usuario: str, cache_separacoes: dict = None) -> tuple:
        """
        Processa NF seguindo ESPECIFICACAO_SINCRONIZACAO_ODOO.md
        
        L√≥gica:
        1. tipo_envio="total" ou 1 EmbarqueItem ativo ‚Üí processar direto
        2. tipo_envio="parcial" com m√∫ltiplos EmbarqueItems ‚Üí avaliar score
        3. Sem pedido encontrado ‚Üí criar sem lote
        
        Usa cache de separa√ß√µes para evitar queries repetidas
        
        Retorna: (processou, movimentacoes_criadas, embarque_items_atualizados)
        """
        movimentacoes_criadas = 0
        embarque_items_atualizados = 0
        separacao_lote_id = None
        
        # Inicializar cache se n√£o fornecido
        if cache_separacoes is None:
            cache_separacoes = {}
        
        logger.info(f"üìã Processando NF {nf.numero_nf} - Pedido {nf.origem}")
        
        # Buscar EmbarqueItems ativos para o pedido
        embarque_items = EmbarqueItem.query.join(
            Embarque, EmbarqueItem.embarque_id == Embarque.id
        ).filter(
            EmbarqueItem.pedido == nf.origem,
            EmbarqueItem.status == 'ativo',
            Embarque.status == 'ativo'
        ).all()
        
        # NOVO: Se n√£o encontrou com o pedido correto, verificar se h√° items com diverg√™ncia
        if not embarque_items:
            # Buscar EmbarqueItems que t√™m a NF mas com pedido divergente
            embarque_items_divergentes = EmbarqueItem.query.join(
                Embarque, EmbarqueItem.embarque_id == Embarque.id
            ).filter(
                EmbarqueItem.nota_fiscal == nf.numero_nf,
                EmbarqueItem.pedido != nf.origem,  # Pedido diferente
                EmbarqueItem.status == 'ativo',
                Embarque.status == 'ativo'
            ).all()
            
            if embarque_items_divergentes:
                logger.warning(f"‚ö†Ô∏è Encontrados {len(embarque_items_divergentes)} EmbarqueItems com diverg√™ncia para NF {nf.numero_nf}")
                # Criar inconsist√™ncias para cada item divergente
                for item_div in embarque_items_divergentes:
                    self._gerar_inconsistencia_divergencia_embarque(nf, item_div, usuario)
                    # Marcar erro de valida√ß√£o no EmbarqueItem
                    if not item_div.erro_validacao:
                        item_div.erro_validacao = f"NF_DIVERGENTE: Pedido NF ({nf.origem}) != Pedido Item ({item_div.pedido})"
            
            # 4.4 da especifica√ß√£o - Pedido n√£o encontrado
            logger.warning(f"‚ö†Ô∏è NF {nf.numero_nf} sem embarque ativo - criando sem lote")
            mov_criadas = self._criar_movimentacao_sem_separacao(nf, usuario)
            return True, mov_criadas, 0
        
        # Se apenas 1 EmbarqueItem, usar direto
        if len(embarque_items) == 1:
            separacao_lote_id = embarque_items[0].separacao_lote_id
            if separacao_lote_id:
                logger.info(f"‚úÖ √önico EmbarqueItem encontrado - usando lote {separacao_lote_id}")
            else:
                logger.warning(f"‚ö†Ô∏è EmbarqueItem sem lote - criando sem separa√ß√£o")
                mov_criadas = self._criar_movimentacao_sem_separacao(nf, usuario)
                return True, mov_criadas, 0
        else:
            # M√∫ltiplos EmbarqueItems - verificar tipo_envio das Separa√ß√µes
            logger.info(f"üîç {len(embarque_items)} EmbarqueItems encontrados - analisando tipo_envio")
            
            # Coletar lotes e verificar tipo_envio
            lotes_parciais = []
            lote_total = None
            
            for item in embarque_items:
                if not item.separacao_lote_id:
                    continue
                    
                # Usar cache ou buscar Separa√ß√µes do lote
                cache_key = f"{item.separacao_lote_id}_{nf.origem}"
                if cache_key not in cache_separacoes:
                    # Buscar apenas n√£o sincronizadas
                    cache_separacoes[cache_key] = Separacao.query.filter_by(
                        separacao_lote_id=item.separacao_lote_id,
                        num_pedido=nf.origem,
                        sincronizado_nf=False  # IMPORTANTE: apenas n√£o sincronizadas
                    ).all()
                
                separacoes_lote = cache_separacoes[cache_key]
                
                # Verificar tipo_envio da primeira Separa√ß√£o
                separacao = separacoes_lote[0] if separacoes_lote else None
                
                if separacao:
                    if separacao.tipo_envio == 'total':
                        lote_total = item.separacao_lote_id
                        logger.info(f"  ‚Ä¢ Lote {item.separacao_lote_id}: tipo_envio=TOTAL")
                        break  # Se encontrou total, usar este
                    else:
                        lotes_parciais.append(item.separacao_lote_id)
                        logger.info(f"  ‚Ä¢ Lote {item.separacao_lote_id}: tipo_envio=PARCIAL")
            
            # Decis√£o baseada no tipo_envio
            if lote_total:
                # 4.1 da especifica√ß√£o - Separa√ß√£o completa
                separacao_lote_id = lote_total
                logger.info(f"‚úÖ Usando lote TOTAL {separacao_lote_id}")
            elif len(lotes_parciais) == 1:
                # 4.2 da especifica√ß√£o - Parcial √∫nico
                separacao_lote_id = lotes_parciais[0]
                logger.info(f"‚úÖ √önico lote PARCIAL {separacao_lote_id}")
            elif len(lotes_parciais) > 1:
                # 4.3 da especifica√ß√£o - M√∫ltiplos parciais, calcular score
                logger.info(f"üìä Calculando score para {len(lotes_parciais)} lotes parciais")
                separacao_lote_id = self._calcular_melhor_lote_por_score_simples(nf, lotes_parciais, cache_separacoes, usuario)
            else:
                # Nenhum lote v√°lido encontrado
                logger.warning(f"‚ö†Ô∏è Nenhum lote v√°lido encontrado - criando sem separa√ß√£o")
                mov_criadas = self._criar_movimentacao_sem_separacao(nf, usuario)
                return True, mov_criadas, 0
        
        # PROCESSAR COM O LOTE ENCONTRADO
        if separacao_lote_id:
            logger.info(f"üì¶ Processando NF {nf.numero_nf} com lote {separacao_lote_id}")
            
            # 1. Atualizar EmbarqueItem
            embarque_item = EmbarqueItem.query.filter_by(
                separacao_lote_id=separacao_lote_id,
                pedido=nf.origem,
                status='ativo'
            ).first()
            
            if embarque_item:
                if not embarque_item.nota_fiscal:
                    embarque_item.nota_fiscal = nf.numero_nf
                    embarque_item.erro_validacao = None
                    embarque_items_atualizados += 1
                    logger.info(f"‚úÖ EmbarqueItem atualizado com NF {nf.numero_nf}")
            
            # 2. Atualizar Separa√ß√µes do lote
            separacoes_atualizadas = Separacao.query.filter_by(
                separacao_lote_id=separacao_lote_id,
                num_pedido=nf.origem,
                sincronizado_nf=False
            ).update({
                'numero_nf': nf.numero_nf,
                'sincronizado_nf': True,
                'data_sincronizacao': datetime.now()
            })
            
            if separacoes_atualizadas > 0:
                logger.info(f"‚úÖ {separacoes_atualizadas} Separa√ß√µes marcadas como sincronizadas")
            
            # 3. Criar MovimentacaoEstoque
            mov_criadas = self._criar_movimentacao_com_lote(nf, separacao_lote_id, usuario, cache_separacoes)
            movimentacoes_criadas += mov_criadas
            
            # 4. Atualizar status das Separa√ß√µes para FATURADO
            separacoes_status = Separacao.query.filter_by(
                separacao_lote_id=separacao_lote_id,
                num_pedido=nf.origem
            ).filter(
                Separacao.status != 'FATURADO'
            ).update({
                'status': 'FATURADO'
            })
            
            if separacoes_status > 0:
                logger.info(f"‚úÖ {separacoes_status} Separa√ß√µes atualizadas para status FATURADO")
        
        return True, movimentacoes_criadas, embarque_items_atualizados
    
    def _calcular_melhor_lote_por_score_simples(self, nf: RelatorioFaturamentoImportado, lotes_candidatos: list, cache_separacoes: dict = None, usuario: str = 'sistema') -> Optional[str]:
        """
        Calcula score simples para m√∫ltiplos lotes parciais
        Score baseado em match de produtos e quantidades
        NOVO: Cria FaturamentoParcialJustificativa quando score < 0.99
        
        Returns:
            separacao_lote_id do melhor match
        """
        # Buscar produtos da NF
        produtos_nf = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()
        
        # Criar dict para f√°cil acesso
        nf_produtos_dict = {}
        for prod in produtos_nf:
            nf_produtos_dict[prod.cod_produto] = float(prod.qtd_produto_faturado)
        
        melhor_score = 0
        melhor_lote = None
        detalhes_melhor_lote = {}  # Para guardar informa√ß√µes do melhor match
        
        for lote_id in lotes_candidatos:
            # Usar cache se dispon√≠vel
            cache_key = f"{lote_id}_{nf.origem}"
            if cache_separacoes and cache_key in cache_separacoes:
                separacoes = cache_separacoes[cache_key]
            else:
                # Buscar separa√ß√µes do lote
                separacoes = Separacao.query.filter_by(
                    separacao_lote_id=lote_id,
                    num_pedido=nf.origem,
                    sincronizado_nf=False
                ).all()
                # Adicionar ao cache se fornecido
                if cache_separacoes is not None:
                    cache_separacoes[cache_key] = separacoes
            
            if not separacoes:
                continue
            
            # Calcular score e guardar detalhes
            score_total = 0
            produtos_matched = 0
            detalhes_produtos = {}
            
            for sep in separacoes:
                if sep.cod_produto in nf_produtos_dict:
                    qtd_nf = nf_produtos_dict[sep.cod_produto]
                    qtd_sep = float(sep.qtd_saldo or 0)
                    
                    if qtd_sep > 0 and qtd_nf > 0:
                        # Score baseado na proximidade das quantidades
                        # 1.0 = quantidades id√™nticas, 0.0 = completamente diferentes
                        ratio = min(qtd_nf, qtd_sep) / max(qtd_nf, qtd_sep)
                        score_total += ratio
                        produtos_matched += 1
                        
                        # Guardar detalhes para poss√≠vel justificativa
                        detalhes_produtos[sep.cod_produto] = {
                            'qtd_separada': qtd_sep,
                            'qtd_faturada': qtd_nf,
                            'qtd_saldo': qtd_sep - qtd_nf if qtd_sep > qtd_nf else 0,
                            'ratio': ratio
                        }
            
            # Score m√©dio do lote
            if produtos_matched > 0:
                score_lote = score_total / len(nf_produtos_dict)  # Normalizar pelo total de produtos na NF
                logger.info(f"  Lote {lote_id}: score {score_lote:.2%} ({produtos_matched}/{len(nf_produtos_dict)} produtos)")
                
                if score_lote > melhor_score:
                    melhor_score = score_lote
                    melhor_lote = lote_id
                    detalhes_melhor_lote = detalhes_produtos
        
        # NOVO: Criar FaturamentoParcialJustificativa se score < 0.99 (diverg√™ncia > 1%)
        if melhor_lote and melhor_score < 0.99:
            logger.warning(f"‚ö†Ô∏è Score {melhor_score:.2%} < 99% para lote {melhor_lote} - criando justificativas")
            
            for cod_produto, detalhes in detalhes_melhor_lote.items():
                # Verificar se h√° diverg√™ncia significativa
                if detalhes['ratio'] < 0.99:
                    # Verificar se j√° existe justificativa
                    just_existente = FaturamentoParcialJustificativa.query.filter_by(
                        separacao_lote_id=melhor_lote,
                        num_pedido=nf.origem if hasattr(nf, 'origem') else None,
                        cod_produto=cod_produto,
                        numero_nf=nf.numero_nf
                    ).first()
                    
                    if not just_existente:
                        # Criar nova justificativa
                        just = FaturamentoParcialJustificativa()
                        just.separacao_lote_id = melhor_lote
                        just.num_pedido = nf.origem if hasattr(nf, 'origem') else None
                        just.cod_produto = cod_produto
                        just.numero_nf = nf.numero_nf
                        just.qtd_separada = detalhes['qtd_separada']
                        just.qtd_faturada = detalhes['qtd_faturada']
                        just.qtd_saldo = detalhes['qtd_saldo']
                        
                        # Deixar campos vazios como solicitado
                        just.motivo_nao_faturamento = ''  # Para preenchimento posterior
                        just.classificacao_saldo = ''  # Para preenchimento posterior
                        just.descricao_detalhada = f"Diverg√™ncia detectada: Score {detalhes['ratio']:.2%}"
                        just.criado_por = usuario
                        # criado_em tem default
                        
                        db.session.add(just)
                        logger.info(f"  üìù Justificativa criada para produto {cod_produto}: Sep {detalhes['qtd_separada']} x Fat {detalhes['qtd_faturada']}")
        
        if melhor_lote:
            logger.info(f"‚úÖ Melhor lote selecionado: {melhor_lote} (score: {melhor_score:.2%})")
        else:
            # Se nenhum lote teve score > 0, pegar o primeiro
            melhor_lote = lotes_candidatos[0] if lotes_candidatos else None
            logger.warning(f"‚ö†Ô∏è Nenhum lote com score positivo, usando primeiro: {melhor_lote}")
        
        return melhor_lote

    def _criar_movimentacao_sem_separacao(self, nf: RelatorioFaturamentoImportado, usuario: str) -> int:
        """
        Cria movimenta√ß√£o 'Sem Separa√ß√£o'
        Verifica por campos estruturados para evitar duplica√ß√£o
        NOVO: Cria inconsist√™ncia tipo NF_SEM_SEPARACAO
        Retorna: quantidade de movimenta√ß√µes criadas
        """
        movimentacoes_criadas = 0
        
        # Verificar se j√° existe usando campos estruturados
        existe = MovimentacaoEstoque.query.filter(
            MovimentacaoEstoque.numero_nf == nf.numero_nf,
            MovimentacaoEstoque.separacao_lote_id.is_(None),  # Sem lote
            MovimentacaoEstoque.status_nf == 'FATURADO'
        ).first()

        if existe:
            logger.debug(f"Movimenta√ß√£o 'Sem Separa√ß√£o' j√° existe para NF {nf.numero_nf}")
            return 0

        produtos = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()
        logger.info(f"üì¶ Criando {len(produtos)} movimenta√ß√µes 'Sem Separa√ß√£o' para NF {nf.numero_nf}")
        
        # NOVO: Criar inconsist√™ncia NF_SEM_SEPARACAO
        self._criar_inconsistencia_nf_sem_separacao(nf, produtos, usuario)
        

        for produto in produtos:
            try:
                mov = MovimentacaoEstoque()
                mov.cod_produto = produto.cod_produto
                mov.nome_produto = produto.nome_produto
                mov.tipo_movimentacao = "FATURAMENTO"
                mov.local_movimentacao = "VENDA"
                mov.data_movimentacao = datetime.now().date()
                mov.qtd_movimentacao = -abs(produto.qtd_produto_faturado)
                
                # NOVO: Campos estruturados
                mov.numero_nf = nf.numero_nf
                mov.num_pedido = nf.origem if hasattr(nf, 'origem') else None
                mov.tipo_origem = 'ODOO'  # ProcessadorFaturamento processa dados do Odoo
                mov.status_nf = 'FATURADO'
                mov.separacao_lote_id = None  # Sem separa√ß√£o
                
                # Manter observa√ß√£o para compatibilidade
                mov.observacao = f"Baixa autom√°tica NF {nf.numero_nf} - Sem Separa√ß√£o"
                mov.criado_por = usuario
                db.session.add(mov)
                movimentacoes_criadas += 1
                logger.debug(f"  ‚úì Movimenta√ß√£o criada: {produto.cod_produto} - Qtd: {mov.qtd_movimentacao}")
            except Exception as e:
                logger.error(f"  ‚úó Erro ao criar movimenta√ß√£o para produto {produto.cod_produto}: {e}")
        
        logger.info(f"‚úÖ {movimentacoes_criadas} movimenta√ß√µes 'Sem Separa√ß√£o' preparadas para NF {nf.numero_nf}")
        return movimentacoes_criadas

    def _criar_movimentacao_com_lote(self, nf: RelatorioFaturamentoImportado, lote_id: str, usuario: str, cache_separacoes: dict = None) -> int:
        """
        Cria movimenta√ß√£o com lote de separa√ß√£o
        Se j√° existir movimenta√ß√£o sem lote, apenas preenche o lote
        Retorna: quantidade de movimenta√ß√µes criadas/atualizadas
        """
        # Verificar se j√° existe movimenta√ß√£o sem lote para esta NF
        movs_sem_lote = MovimentacaoEstoque.query.filter(
            MovimentacaoEstoque.numero_nf == nf.numero_nf,
            MovimentacaoEstoque.separacao_lote_id.is_(None),
            MovimentacaoEstoque.status_nf == 'FATURADO'
        ).all()
        
        if movs_sem_lote:
            # Apenas preencher o lote nas movimenta√ß√µes existentes
            logger.info(f"üîÑ Atualizando {len(movs_sem_lote)} movimenta√ß√µes existentes com lote {lote_id}")
            for mov in movs_sem_lote:
                mov.separacao_lote_id = lote_id
                mov.atualizado_em = datetime.now()
                mov.atualizado_por = 'ProcessadorFaturamento - Lote preenchido'
            return len(movs_sem_lote)
        
        # Criar novas movimenta√ß√µes se n√£o existirem
        movimentacoes_criadas = 0
        produtos = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()
        logger.info(f"üì¶ Criando {len(produtos)} movimenta√ß√µes com lote {lote_id} para NF {nf.numero_nf}")

        for produto in produtos:
            try:
                mov = MovimentacaoEstoque()
                mov.cod_produto = produto.cod_produto
                mov.nome_produto = produto.nome_produto
                mov.tipo_movimentacao = "FATURAMENTO"
                mov.local_movimentacao = "VENDA"
                mov.data_movimentacao = datetime.now().date()
                mov.qtd_movimentacao = -abs(produto.qtd_produto_faturado)
                
                # NOVO: Campos estruturados
                mov.separacao_lote_id = lote_id
                mov.numero_nf = nf.numero_nf
                mov.num_pedido = nf.origem if hasattr(nf, 'origem') else None
                mov.tipo_origem = 'ODOO'  # ProcessadorFaturamento processa dados do Odoo
                mov.status_nf = 'FATURADO'
                
                # Buscar c√≥digo do embarque se existir
                embarque_item = EmbarqueItem.query.filter_by(
                    separacao_lote_id=lote_id,
                    pedido=nf.origem
                ).first()
                if embarque_item:
                    mov.codigo_embarque = embarque_item.embarque_id
                
                # Manter observa√ß√£o para compatibilidade
                mov.observacao = f"Baixa autom√°tica NF {nf.numero_nf} - lote separa√ß√£o {lote_id}"
                mov.criado_por = usuario
                db.session.add(mov)
                movimentacoes_criadas += 1
                logger.debug(f"  ‚úì Movimenta√ß√£o criada: {produto.cod_produto} - Qtd: {mov.qtd_movimentacao}")

                # Abater MovimentacaoPrevista SEM fallback de data
                try:
                    # Buscar separa√ß√£o no cache ou no banco
                    sep = None
                    if cache_separacoes:
                        # Procurar em todas as chaves do cache que cont√©m o lote_id
                        for cache_key, separacoes in cache_separacoes.items():
                            if cache_key.startswith(f"{lote_id}_"):
                                sep = next((s for s in separacoes if s.cod_produto == produto.cod_produto), None)
                                if sep:
                                    break
                    
                    # Se n√£o encontrou no cache, buscar no banco
                    if not sep:
                        sep = Separacao.query.filter_by(separacao_lote_id=lote_id, cod_produto=produto.cod_produto).first()
                    
                    if sep and sep.expedicao:
                        ServicoEstoqueTempoReal.atualizar_movimentacao_prevista(
                            cod_produto=produto.cod_produto,
                            data=sep.expedicao,
                            qtd_entrada=Decimal("0"),
                            qtd_saida=Decimal(str(-abs(produto.qtd_produto_faturado))),
                        )
                        logger.debug(f"  ‚úì Previs√£o abatida para {produto.cod_produto}")
                except Exception as e:
                    logger.debug(f"  ‚ö†Ô∏è Falha ao abater previs√£o {produto.cod_produto}: {e}")
                    
            except Exception as e:
                logger.error(f"  ‚úó Erro ao criar movimenta√ß√£o para produto {produto.cod_produto}: {e}")
        
        logger.info(f"‚úÖ {movimentacoes_criadas} movimenta√ß√µes com lote preparadas para NF {nf.numero_nf}")        
        return movimentacoes_criadas


    def _criar_justificativa_divergencia(self, nf: RelatorioFaturamentoImportado, lote_id: str, usuario: str):
        """
        Cria justificativa para diverg√™ncia
        """
        produtos = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()
        separacoes = Separacao.query.filter_by(separacao_lote_id=lote_id).all()

        for sep in separacoes:
            prod_corresp = next(
                (p for p in produtos if str(p.cod_produto).strip() == str(sep.cod_produto).strip()), None
            )

            if prod_corresp:
                qtd_fat = Decimal(str(prod_corresp.qtd_produto_faturado))
                qtd_sep = Decimal(str(sep.qtd_saldo))

                if abs(qtd_fat - qtd_sep) > 0:
                    just = FaturamentoParcialJustificativa()
                    just.separacao_lote_id = lote_id
                    just.num_pedido = nf.origem
                    just.cod_produto = sep.cod_produto
                    just.numero_nf = nf.numero_nf
                    just.qtd_separada = float(qtd_sep)
                    just.qtd_faturada = float(qtd_fat)
                    just.qtd_saldo = float(abs(qtd_sep - qtd_fat))
                    just.motivo_nao_faturamento = "DIVERGENCIA_AUTO"
                    just.descricao_detalhada = f"Diverg√™ncia: Separado {qtd_sep}, Faturado {qtd_fat}"
                    just.classificacao_saldo = "NECESSITA_COMP"  # Max 20 chars
                    just.criado_por = usuario
                    db.session.add(just)

    def _atualizar_embarque_item(self, numero_nf: str, lote_id: str) -> bool:
        """
        Atualiza EmbarqueItem com a NF e marca o Pedido como FATURADO
        Retorna: True se atualizou, False caso contr√°rio
        """
        try:
            # Primeiro verificar se existe item para atualizar
            item = EmbarqueItem.query.filter_by(separacao_lote_id=lote_id, nota_fiscal=None).first()
            
            if not item:
                # Verificar se j√° foi atualizado anteriormente
                item_ja_atualizado = EmbarqueItem.query.filter_by(
                    separacao_lote_id=lote_id, 
                    nota_fiscal=numero_nf
                ).first()
                
                if item_ja_atualizado:
                    logger.debug(f"EmbarqueItem do lote {lote_id} j√° possui NF {numero_nf}")
                    return False
                else:
                    logger.warning(f"‚ö†Ô∏è Nenhum EmbarqueItem encontrado para lote {lote_id} sem NF")
                    return False
            
            # Atualizar o item
            item.nota_fiscal = numero_nf
            
            # Tamb√©m limpar erro de valida√ß√£o se existir
            if item.erro_validacao in ['NF_PENDENTE_FATURAMENTO', 'NF_DIVERGENTE']:
                item.erro_validacao = None
                logger.info(f"‚úÖ Erro de valida√ß√£o limpo para EmbarqueItem do lote {lote_id}")
            
            # IMPORTANTE: Atualizar status das Separa√ß√µes para FATURADO
            # Como Pedido √© VIEW, atualizamos direto na Separa√ß√£o
            separacoes_atualizadas = Separacao.query.filter_by(
                separacao_lote_id=lote_id
            ).filter(
                Separacao.status != 'FATURADO'
            ).update({
                'status': 'FATURADO'
            })
            
            if separacoes_atualizadas > 0:
                logger.info(f"‚úÖ {separacoes_atualizadas} Separa√ß√µes marcadas como FATURADO (lote {lote_id})")
            
            logger.info(f"‚úÖ NF {numero_nf} vinculada ao EmbarqueItem do lote {lote_id} (ID: {item.id})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar EmbarqueItem do lote {lote_id} com NF {numero_nf}: {e}")
            return False

    def _gerar_inconsistencia_divergencia_embarque(
        self, nf: RelatorioFaturamentoImportado, embarque_item: EmbarqueItem, usuario: str
    ):
        """
        Gera inconsist√™ncia para diverg√™ncia NF x Embarque
        IMPORTANTE: Uma linha por produto para facilitar an√°lise
        """
        produtos = FaturamentoProduto.query.filter_by(numero_nf=nf.numero_nf).all()
        inconsistencias_criadas = 0
        
        # Criar uma inconsist√™ncia por produto
        for produto in produtos:
            # Verificar se j√° existe inconsist√™ncia n√£o resolvida para este produto
            inc_existente = InconsistenciaFaturamento.query.filter_by(
                numero_nf=nf.numero_nf,
                cod_produto=produto.cod_produto,
                tipo="DIVERGENCIA_NF_EMBARQUE",
                resolvida=False
            ).first()
            
            if inc_existente:
                # Atualizar observa√ß√£o com informa√ß√µes mais recentes
                inc_existente.observacao_resolucao = (
                    f"NF {nf.numero_nf} produto {produto.cod_produto} com diverg√™ncia: "
                    f"Pedido NF: {nf.origem if hasattr(nf, 'origem') else 'N/A'}, "
                    f"Pedido EmbarqueItem: {embarque_item.pedido}, "
                    f"Embarque ID: {embarque_item.embarque_id}, "
                    f"Lote: {embarque_item.separacao_lote_id}"
                )
                logger.debug(f"Inconsist√™ncia DIVERGENCIA_NF_EMBARQUE atualizada para produto {produto.cod_produto}")
            else:
                # Criar nova inconsist√™ncia
                inc = InconsistenciaFaturamento()
                inc.tipo = "DIVERGENCIA_NF_EMBARQUE"
                inc.numero_nf = nf.numero_nf
                inc.num_pedido = nf.origem if hasattr(nf, 'origem') else None
                inc.cod_produto = produto.cod_produto
                inc.qtd_faturada = float(produto.qtd_produto_faturado)
                inc.saldo_disponivel = None  # N√£o aplic√°vel neste caso
                inc.qtd_excesso = None  # N√£o aplic√°vel
                inc.resolvida = False
                inc.acao_tomada = None  # Para usu√°rio definir
                inc.observacao_resolucao = (
                    f"NF {nf.numero_nf} produto {produto.cod_produto} com diverg√™ncia: "
                    f"Pedido NF: {nf.origem if hasattr(nf, 'origem') else 'N/A'}, "
                    f"Pedido EmbarqueItem: {embarque_item.pedido}, "
                    f"Embarque ID: {embarque_item.embarque_id}, "
                    f"Lote: {embarque_item.separacao_lote_id}"
                )
                # detectada_em tem default
                inc.resolvida_em = None
                inc.resolvida_por = None
                
                db.session.add(inc)
                inconsistencias_criadas += 1
        
        if inconsistencias_criadas > 0:
            logger.info(f"‚ö†Ô∏è {inconsistencias_criadas} inconsist√™ncias DIVERGENCIA_NF_EMBARQUE criadas para NF {nf.numero_nf}")

    def _criar_inconsistencia_nf_sem_separacao(self, nf: RelatorioFaturamentoImportado, produtos: list, usuario: str):
        """
        Cria inconsist√™ncia para NF sem separa√ß√£o
        IMPORTANTE: Uma linha por produto para facilitar an√°lise
        """
        inconsistencias_criadas = 0
        
        # Criar uma inconsist√™ncia por produto
        for produto in produtos:
            # Verificar se j√° existe inconsist√™ncia n√£o resolvida para este produto
            inc_existente = InconsistenciaFaturamento.query.filter_by(
                numero_nf=nf.numero_nf,
                cod_produto=produto.cod_produto,
                tipo="NF_SEM_SEPARACAO",
                resolvida=False
            ).first()
            
            if inc_existente:
                logger.debug(f"Inconsist√™ncia j√° existe para NF {nf.numero_nf} produto {produto.cod_produto}")
                continue
            
            # Criar nova inconsist√™ncia
            inc = InconsistenciaFaturamento()
            inc.tipo = "NF_SEM_SEPARACAO"
            inc.numero_nf = nf.numero_nf
            inc.num_pedido = nf.origem if hasattr(nf, 'origem') else None
            inc.cod_produto = produto.cod_produto
            inc.qtd_faturada = float(produto.qtd_produto_faturado)
            inc.saldo_disponivel = None  # N√£o h√° separa√ß√£o
            inc.qtd_excesso = None  # N√£o aplic√°vel
            inc.resolvida = False
            inc.acao_tomada = None  # Para usu√°rio definir
            inc.observacao_resolucao = (
                f"Produto {produto.cod_produto} - {produto.nome_produto[:50]}... "
                f"faturado sem separa√ß√£o. Qtd: {produto.qtd_produto_faturado}. "
                f"Verificar pedido {nf.origem if hasattr(nf, 'origem') else 'N/A'}"
            )
            # detectada_em tem default
            inc.resolvida_em = None
            inc.resolvida_por = None
            
            db.session.add(inc)
            inconsistencias_criadas += 1
        
        if inconsistencias_criadas > 0:
            logger.info(f"‚ö†Ô∏è {inconsistencias_criadas} inconsist√™ncias NF_SEM_SEPARACAO criadas para NF {nf.numero_nf}")
    
    def _atualizar_status_separacoes_faturadas(self) -> int:
        """
        Atualiza o status das Separa√ß√µes para FATURADO quando t√™m NF preenchida
        e existe faturamento correspondente.
        
        Como Pedido agora √© uma VIEW, trabalhamos diretamente com Separa√ß√£o
        
        Returns:
            N√∫mero de separa√ß√µes atualizadas
        """
        contador = 0
        
        try:
            # Buscar separa√ß√µes com NF mas sem status FATURADO
            separacoes_com_nf = Separacao.query.filter(
                Separacao.numero_nf.isnot(None),
                Separacao.numero_nf != "",
                Separacao.sincronizado_nf == True,
                Separacao.status != 'FATURADO'
            ).all()
            
            logger.info(f"üìä Encontradas {len(separacoes_com_nf)} separa√ß√µes com NF mas sem status FATURADO")
            
            for sep in separacoes_com_nf:
                # Verificar se existe faturamento para esta NF
                faturamento_existe = FaturamentoProduto.query.filter_by(
                    numero_nf=sep.numero_nf
                ).first()
                
                if faturamento_existe:
                    status_antigo = sep.status
                    sep.status = 'FATURADO'
                    contador += 1
                    logger.debug(f"  ‚Ä¢ Separa√ß√£o {sep.separacao_lote_id}/{sep.num_pedido}: '{status_antigo}' ‚Üí 'FATURADO' (NF: {sep.numero_nf})")
            
            # Tamb√©m verificar EmbarqueItems com NF para garantir Separa√ß√µes FATURADAS
            logger.info("üîç Verificando EmbarqueItems com NF para garantir Separa√ß√µes FATURADAS...")
            
            embarque_items_com_nf = EmbarqueItem.query.filter(
                EmbarqueItem.nota_fiscal.isnot(None),
                EmbarqueItem.nota_fiscal != "",
                EmbarqueItem.separacao_lote_id.isnot(None)
            ).all()
            
            for item in embarque_items_com_nf:
                # Atualizar todas as separa√ß√µes deste lote
                sep_atualizadas = Separacao.query.filter_by(
                    separacao_lote_id=item.separacao_lote_id
                ).filter(
                    Separacao.status != 'FATURADO'
                ).update({
                    'status': 'FATURADO',
                    'numero_nf': item.nota_fiscal,
                    'sincronizado_nf': True,
                    'data_sincronizacao': datetime.now()
                })
                
                if sep_atualizadas > 0:
                    contador += sep_atualizadas
                    logger.debug(f"  ‚Ä¢ {sep_atualizadas} separa√ß√µes do lote {item.separacao_lote_id} atualizadas para FATURADO")
            
            if contador > 0:
                db.session.commit()
                logger.info(f"‚úÖ Total: {contador} separa√ß√µes atualizadas para FATURADO")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar status das separa√ß√µes: {e}")
            db.session.rollback()
        
        return contador
