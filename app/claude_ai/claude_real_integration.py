#!/usr/bin/env python3
"""
Integra√ß√£o Claude REAL - API Anthropic
Sistema que usa o Claude verdadeiro ao inv√©s de simula√ß√£o
"""

import os
import anthropic
import logging
import re
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import json
from flask_login import current_user
from sqlalchemy import func, and_, or_

# Configurar logger
logger = logging.getLogger(__name__)

# Importar sistema de cache Redis
try:
    from app.utils.redis_cache import redis_cache, cache_aside, cached_query
    REDIS_DISPONIVEL = redis_cache.disponivel
    logger.info(f"üöÄ Redis Cache: {'Ativo' if REDIS_DISPONIVEL else 'Inativo'}")
except ImportError:
    REDIS_DISPONIVEL = False
    logger.warning("‚ö†Ô∏è Redis Cache n√£o dispon√≠vel - usando cache em mem√≥ria")

# Importar sistema de contexto conversacional
try:
    from .conversation_context import init_conversation_context, get_conversation_context
    # Inicializar contexto conversacional
    if REDIS_DISPONIVEL:
        init_conversation_context(redis_cache)
        logger.info("üß† Sistema de Contexto Conversacional inicializado com Redis")
    else:
        init_conversation_context()
        logger.info("üß† Sistema de Contexto Conversacional inicializado (mem√≥ria)")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Sistema de Contexto Conversacional n√£o dispon√≠vel: {e}")

class ClaudeRealIntegration:
    """Integra√ß√£o com Claude REAL da Anthropic"""
    
    def __init__(self):
        """Inicializa integra√ß√£o com Claude real"""
        self.api_key = os.getenv('ANTHROPIC_API_KEY')
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è ANTHROPIC_API_KEY n√£o configurada - usando modo simulado")
            self.client = None
            self.modo_real = False
        else:
            try:
                self.client = anthropic.Anthropic(api_key=self.api_key)
                self.modo_real = True
                logger.info("üöÄ Claude REAL conectado com sucesso!")
            except Exception as e:
                logger.error(f"‚ùå Erro ao conectar Claude real: {e}")
                self.client = None
                self.modo_real = False
        
        # Cache para evitar queries repetitivas (REDIS OU MEM√ìRIA)
        if REDIS_DISPONIVEL:
            self._cache = redis_cache
            self._cache_timeout = 300  # 5 minutos
            logger.info("‚úÖ Usando Redis Cache para consultas Claude")
        else:
            self._cache = {}
            self._cache_timeout = 300  # 5 minutos fallback
            logger.info("‚ö†Ô∏è Usando cache em mem√≥ria (fallback)")
        
        # System prompt MODULAR para Claude real com M√öLTIPLOS DOM√çNIOS
        self.system_prompt = """Voc√™ √© Claude integrado ao Sistema de Fretes Industrial com INTELIG√äNCIA MODULAR.

üéØ **DETEC√á√ÉO AUTOM√ÅTICA DE DOM√çNIO**:
Voc√™ detecta automaticamente o tipo de consulta e adapta sua resposta:

üì¶ **ENTREGAS** = Monitoramento, status de entrega, canhotos, prazos, reagendamentos
üöö **FRETES** = Cota√ß√µes, valores, aprova√ß√µes, CTe, transportadoras, conta corrente  
üöõ **TRANSPORTADORAS** = Cadastros, freteiros vs empresas, desempenho por transportadora
üìã **PEDIDOS** = Status (aberto/cotado/faturado), expedi√ß√£o, agendamentos, protocolos
üö¢ **EMBARQUES** = Despachos, portaria, movimenta√ß√£o f√≠sica, volumes
üí∞ **FATURAMENTO** = Notas fiscais, valores faturados, origens, incoterms
üí≥ **FINANCEIRO** = Despesas extras, pend√™ncias, vencimentos, conta corrente

üß† **CONTEXTO CONVERSACIONAL ATIVO**:
- Voc√™ LEMBRA de perguntas anteriores nesta sess√£o
- Perguntas de seguimento mant√™m o contexto (cliente, dom√≠nio, per√≠odo)
- Adapta automaticamente entre dom√≠nios baseado na consulta

IMPORTANTE - DIFERENCIA√á√ÉO RIGOROSA:
üè¢ **CLIENTES**: ASSAI ‚â† ATACAD√ÉO (concorrentes, NUNCA confundir!)
üè¨ **FILIAIS**: "Cliente 001" = filial espec√≠fica vs "Cliente" = grupo
üéØ **DOM√çNIOS**: Entrega ‚â† Frete ‚â† Embarque (conceitos diferentes)

AN√ÅLISE TEMPORAL INTELIGENTE:
üìÖ **"Maio"** = M√äS INTEIRO de maio (n√£o apenas 7 dias)
üìÖ **"Junho"** = M√äS INTEIRO de junho (n√£o apenas 7 dias)  
üìÖ **"30 dias"** = √öltimos 30 dias corridos
üìÖ **"Semana"** = √öltimos 7 dias apenas

üéØ **DADOS ESPEC√çFICOS POR DOM√çNIO**:

**ENTREGAS** (padr√£o):
‚úÖ Status de entrega, prazos, reagendamentos, canhotos
‚úÖ Datas previstas vs realizadas, lead time, performance

**FRETES**:
‚úÖ Valores cotados vs considerados, aprova√ß√µes pendentes
‚úÖ CTe emitidos, status de pagamento, transportadoras

**TRANSPORTADORAS**:
‚úÖ Freteiros vs empresas, volume de fretes, desempenho
‚úÖ Valores m√©dios, cidades de atua√ß√£o, conta corrente

**PEDIDOS**:
‚úÖ Status (aberto/cotado/faturado), valores, pesos
‚úÖ Expedi√ß√£o, agendamentos, protocolos, rotas

**EMBARQUES**:
‚úÖ N√∫meros de embarque, motoristas, placas, portaria
‚úÖ Datas de cria√ß√£o vs despacho, status aguardando/despachado

**FATURAMENTO**:
‚úÖ NFs emitidas, valores faturados, origens, clientes
‚úÖ Ticket m√©dio, incoterms, datas de fatura

**FINANCEIRO**:
‚úÖ Despesas extras, pend√™ncias, vencimentos
‚úÖ Valores pendentes, tipos de despesa, observa√ß√µes

CONTEXTO ATUAL: {dados_contexto_especifico}

INSTRU√á√ïES CR√çTICAS:
1. **DOM√çNIO AUTOM√ÅTICO** - Detecte o dom√≠nio e foque nos dados relevantes
2. **PRECIS√ÉO POR CONTEXTO** - Use m√©tricas espec√≠ficas do dom√≠nio
3. **DADOS COMPLETOS** - Inclua todas as informa√ß√µes do dom√≠nio detectado
4. **TRANSI√á√ÉO INTELIGENTE** - Se pergunta muda dom√≠nio, adapte automaticamente
5. **CONTINUIDADE** - Mantenha contexto conversacional entre dom√≠nios
6. **JAMAIS CONFUNDIR** - Clientes, dom√≠nios e conceitos s√£o distintos

EXEMPLOS DE ADAPTA√á√ÉO:
- "Fretes do Assai" ‚Üí DOM√çNIO: Fretes | CLIENTE: Assai espec√≠fico
- "Transportadoras freteiras" ‚Üí DOM√çNIO: Transportadoras | FILTRO: freteiro=True  
- "Pedidos sem cota√ß√£o" ‚Üí DOM√çNIO: Pedidos | FILTRO: status=aberto
- "Embarques aguardando" ‚Üí DOM√çNIO: Embarques | FILTRO: sem data_embarque

Responda com intelig√™ncia contextual, adaptando automaticamente ao dom√≠nio detectado."""
    
    def processar_consulta_real(self, consulta: str, user_context: Dict = None) -> str:
        """Processa consulta usando Claude REAL com contexto inteligente e MEM√ìRIA CONVERSACIONAL"""
        
        if not self.modo_real:
            return self._fallback_simulado(consulta)
        
        # üìä DETECTAR COMANDOS DE EXPORT EXCEL
        if self._is_excel_command(consulta):
            return self._processar_comando_excel(consulta, user_context)
        
        # üß† SISTEMA DE CONTEXTO CONVERSACIONAL
        user_id = str(user_context.get('user_id', 'anonymous')) if user_context else 'anonymous'
        context_manager = get_conversation_context()
        
        # Construir prompt com contexto conversacional
        consulta_com_contexto = consulta
        if context_manager:
            consulta_com_contexto = context_manager.build_context_prompt(user_id, consulta)
            logger.info(f"üß† Contexto conversacional aplicado para usu√°rio {user_id}")
        
        # REDIS CACHE PARA CONSULTAS CLAUDE (usando consulta original para cache)
        if REDIS_DISPONIVEL:
            # Verificar se consulta similar j√° foi processada
            resultado_cache = redis_cache.cache_consulta_claude(
                consulta=consulta,  # Usar consulta original para cache
                cliente=user_context.get('cliente_filter') if user_context else None,
                periodo_dias=30  # padr√£o
            )
            
            if resultado_cache:
                logger.info("üéØ CACHE HIT: Resposta Claude carregada do Redis")
                # Adicionar timestamp atual mas manter resposta cacheada
                resultado_cache = resultado_cache.replace(
                    "üïí **Processado:** ",
                    f"üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')} ‚ö° (Redis Cache) | Original: "
                )
                
                # Adicionar mensagem ao contexto
                if context_manager:
                    metadata = context_manager.extract_metadata(consulta, resultado_cache)
                    context_manager.add_message(user_id, 'user', consulta, metadata)
                    context_manager.add_message(user_id, 'assistant', resultado_cache, metadata)
                
                return resultado_cache
        
        try:
            # Analisar consulta para contexto inteligente (usar consulta original)
            contexto_analisado = self._analisar_consulta(consulta)
            
            # Carregar dados espec√≠ficos baseados na an√°lise (j√° usa Redis internamente)
            dados_contexto = self._carregar_contexto_inteligente(contexto_analisado)
            
            # Preparar mensagens para Claude real
            tipo_analise = contexto_analisado.get('tipo_consulta', 'geral')
            cliente_contexto = contexto_analisado.get('cliente_especifico')
            periodo_dias = contexto_analisado.get('periodo_dias', 30)
            correcao_usuario = contexto_analisado.get('correcao_usuario', False)
            
            # Construir instru√ß√£o espec√≠fica baseada no tipo de consulta
            if correcao_usuario:
                instrucao_especifica = f"""
üö® IMPORTANTE: O usu√°rio FEZ UMA CORRE√á√ÉO indicando que a interpreta√ß√£o anterior estava INCORRETA.
Trate esta consulta como GERAL (todos os dados) e N√ÉO aplique filtros espec√≠ficos de cliente.
Analise os dados de TODOS os clientes dispon√≠veis no per√≠odo de {periodo_dias} dias."""
            elif tipo_analise == "geral" and not cliente_contexto:
                instrucao_especifica = f"""
üåê CONSULTA GERAL: Analise TODOS os dados dispon√≠veis (todos os clientes) no per√≠odo de {periodo_dias} dias.
N√ÉO filtrar por cliente espec√≠fico - mostrar dados agregados de todos os clientes."""
            elif cliente_contexto:
                instrucao_especifica = f"""
üéØ CONSULTA ESPEC√çFICA: Analise APENAS dados do cliente "{cliente_contexto}" no per√≠odo de {periodo_dias} dias.
N√ÉO misturar com dados de outros clientes."""
            else:
                instrucao_especifica = f"""
üìä AN√ÅLISE PADR√ÉO: Analise os dados dispon√≠veis no per√≠odo de {periodo_dias} dias."""
            
            messages = [
                {
                    "role": "user", 
                    "content": f"""CONSULTA DO USU√ÅRIO (com contexto conversacional): {consulta_com_contexto}

AN√ÅLISE DA CONSULTA ORIGINAL:
{json.dumps(contexto_analisado, indent=2, ensure_ascii=False)}

DADOS ESPEC√çFICOS CARREGADOS:
{json.dumps(dados_contexto, indent=2, ensure_ascii=False)}

CONTEXTO DO USU√ÅRIO:
{json.dumps(user_context or {}, indent=2, ensure_ascii=False)}

{instrucao_especifica}

Se h√° HIST√ìRICO CONVERSACIONAL acima, USE-O para manter continuidade da conversa.

Por favor, forne√ßa uma resposta completa incluindo:
- Datas de entrega realizadas
- Cumprimento de prazos
- Hist√≥rico de agendamentos e protocolos  
- Reagendamentos (se houver)
- Status detalhado de cada entrega
- CONTINUIDADE com perguntas anteriores (se houver contexto)"""
                }
            ]
            
            # Chamar Claude REAL (agora Claude 4 Sonnet!)
            response = self.client.messages.create(
                model="claude-sonnet-4-20250514",  # Claude 4 Sonnet
                max_tokens=4000,
                temperature=0.1,  # Determin√≠stico para dados cr√≠ticos
                system=self.system_prompt.format(
                    dados_contexto_especifico=self._descrever_contexto_carregado(contexto_analisado)
                ),
                messages=messages
            )
            
            resultado = response.content[0].text
            
            # Log da intera√ß√£o
            logger.info(f"‚úÖ Claude REAL (4.0) processou: '{consulta[:50]}...'")
            
            # Indicador de performance (se veio do cache)
            cache_indicator = ""
            if dados_contexto.get('_from_cache'):
                cache_indicator = " ‚ö° (Dados em Cache)"
            
            resposta_final = f"""ü§ñ **CLAUDE 4 SONNET REAL**{cache_indicator}

{resultado}

---
üß† **Powered by:** Claude 4 Sonnet (Anthropic) - Modelo mais avan√ßado dispon√≠vel + Contexto Conversacional
üéØ **Contexto:** {contexto_analisado.get('tipo_consulta', 'Geral').title()}
üìä **Dados:** {contexto_analisado.get('periodo_dias', 7)} dias | {contexto_analisado.get('registros_carregados', 0)} registros
üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚ö° **Modo:** IA Real Industrial{' + Redis Cache' if REDIS_DISPONIVEL else ''} + Mem√≥ria Conversacional"""
            
            # üß† ADICIONAR CONVERSA AO CONTEXTO
            if context_manager:
                metadata = context_manager.extract_metadata(consulta, resultado)
                context_manager.add_message(user_id, 'user', consulta, metadata)
                context_manager.add_message(user_id, 'assistant', resposta_final, metadata)
                logger.info(f"üß† Conversa adicionada ao contexto para usu√°rio {user_id}")
            
            # Salvar resposta no Redis cache para consultas similares (usar consulta original)
            if REDIS_DISPONIVEL:
                redis_cache.cache_consulta_claude(
                    consulta=consulta,  # Consulta original para cache
                    cliente=user_context.get('cliente_filter') if user_context else None,
                    periodo_dias=contexto_analisado.get('periodo_dias', 30),
                    resultado=resposta_final,
                    ttl=300  # 5 minutos para respostas Claude
                )
                logger.info("üíæ Resposta Claude salva no Redis cache")
            
            return resposta_final
            
        except Exception as e:
            logger.error(f"‚ùå Erro no Claude real: {e}")
            return self._fallback_simulado(consulta)
    
    def _analisar_consulta(self, consulta: str) -> Dict[str, Any]:
        """Analisa a consulta para determinar contexto espec√≠fico"""
        consulta_lower = consulta.lower()
        
        analise = {
            "consulta_original": consulta,
            "timestamp_analise": datetime.now().isoformat(),
            "tipo_consulta": "geral",
            "dominio": "entregas",  # ‚úÖ NOVO: Detectar dom√≠nio automaticamente
            "cliente_especifico": None,
            "periodo_dias": 30,  # Default 30 dias para an√°lises mais completas
            "filtro_geografico": None,
            "foco_dados": [],
            "metricas_solicitadas": [],
            "correcao_usuario": False
        }
        
        # üö® DETEC√á√ÉO DE CORRE√á√ïES DO USU√ÅRIO - PRIMEIRA VERIFICA√á√ÉO
        palavras_correcao = [
            "n√£o pedi", "n√£o √©", "n√£o ped√≠", "n√£o era", "n√£o quero",
            "me trouxe", "trouxe errado", "dados incorretos", "n√£o √© isso",
            "n√£o era isso", "errou", "equivocado", "incorreto", "engano",
            "n√£o espec√≠fico", "n√£o cliente", "de novo", "novamente", "corrigir",
            "n√£o mencionei", "n√£o falei", "n√£o disse", "veja que", "veja as"
        ]
        
        # Verificar se h√° palavras de corre√ß√£o
        for palavra_correcao in palavras_correcao:
            if palavra_correcao in consulta_lower:
                analise["correcao_usuario"] = True
                analise["tipo_consulta"] = "geral"  # For√ßar consulta geral
                analise["cliente_especifico"] = None  # Resetar cliente espec√≠fico
                logger.info(f"üö® CORRE√á√ÉO DETECTADA: Usu√°rio corrigiu interpreta√ß√£o com '{palavra_correcao}'")
                break
        
        # üéØ NOVO: DETEC√á√ÉO AUTOM√ÅTICA DE DOM√çNIO
        dominios = {
            "fretes": [
                "frete", "cota√ß√£o", "cotado", "valor frete", "tabela frete", "freteiro",
                "aprova√ß√£o", "aprovado", "pendente aprova√ß√£o", "cte", "conhecimento",
                "conta corrente", "valor pago", "desconto", "multa"
            ],
            "transportadoras": [
                "transportadora", "transportador", "freteiro", "motorista", "veiculo",
                "placa", "cnpj transportadora", "raz√£o social", "expresso", "jadlog",
                "rapid√£o", "merc√∫rio", "rodonaves", "jamef"
            ],
            "pedidos": [
                "pedido", "cota√ß√£o manual", "sem cota√ß√£o", "aberto", "num pedido",
                "valor pedido", "peso pedido", "expedi√ß√£o", "agenda", "protocolo",
                "rota", "sub rota", "separa√ß√£o"
            ],
            "embarques": [
                "embarque", "embarcado", "data embarque", "separa√ß√£o", "nota fiscal",
                "nf", "volumes", "peso embarque", "portaria", "sa√≠da", "despacho"
            ],
            "faturamento": [
                "fatura", "faturado", "nota fiscal", "nf", "origem", "relat√≥rio",
                "importado", "valor nf", "cliente faturamento", "status fatura"
            ],
            "financeiro": [
                "pend√™ncia", "pendente", "despesa extra", "documento", "vencimento",
                "observa√ß√£o financeira", "status financeiro", "valor pendente"
            ],
            "entregas": [
                "entrega", "entregue", "monitoramento", "reagendamento", "protocolo",
                "canhoto", "data entrega", "prazo", "atraso", "pontualidade",
                "status entrega", "pend√™ncia financeira"
            ]
        }
        
        # Detectar dom√≠nio baseado nas palavras-chave
        pontuacao_dominios = {}
        for dominio, palavras in dominios.items():
            pontos = 0
            for palavra in palavras:
                if palavra in consulta_lower:
                    pontos += 1
            if pontos > 0:
                pontuacao_dominios[dominio] = pontos
        
        # Escolher dom√≠nio com maior pontua√ß√£o
        if pontuacao_dominios:
            dominio_detectado = max(pontuacao_dominios, key=pontuacao_dominios.get)
            analise["dominio"] = dominio_detectado
            logger.info(f"üéØ Dom√≠nio detectado: {dominio_detectado} (pontos: {pontuacao_dominios})")
        else:
            # Se n√£o detectou nenhum dom√≠nio espec√≠fico, usar entregas como padr√£o
            analise["dominio"] = "entregas"
            logger.info("üéØ Dom√≠nio padr√£o: entregas")
        
        # AN√ÅLISE DE CLIENTE ESPEC√çFICO - APENAS SE N√ÉO HOUVER CORRE√á√ÉO
        if not analise["correcao_usuario"]:
            # DETECTAR CLIENTES ESPEC√çFICOS POR NOME EXATO
            if "assai" in consulta_lower:
                analise["tipo_consulta"] = "cliente_especifico"
                analise["cliente_especifico"] = "Assai"
                logger.info("üéØ Cliente espec√≠fico detectado: Assai")
            elif "atacad√£o" in consulta_lower or "atacadao" in consulta_lower:
                analise["tipo_consulta"] = "cliente_especifico" 
                analise["cliente_especifico"] = "Atacad√£o"
                logger.info("üéØ Cliente espec√≠fico detectado: Atacad√£o")
            elif "tenda" in consulta_lower:
                analise["tipo_consulta"] = "cliente_especifico"
                analise["cliente_especifico"] = "Tenda"
                logger.info("üéØ Cliente espec√≠fico detectado: Tenda")
            elif "carrefour" in consulta_lower:
                analise["tipo_consulta"] = "cliente_especifico"
                analise["cliente_especifico"] = "Carrefour"
                logger.info("üéØ Cliente espec√≠fico detectado: Carrefour")
            
            # Detectar grupos vs clientes espec√≠ficos
            elif re.search(r"supermercados|atacados|varejo", consulta_lower):
                analise["tipo_consulta"] = "grupo_clientes"
                analise["cliente_especifico"] = "GRUPO_CLIENTES"
                logger.info("üéØ Grupo de clientes detectado")
            
            # Detectar filiais por padr√µes num√©ricos
            else:
                filial_patterns = [
                    r"(\w+)\s*(\d{3,4})",  # Cliente 123, Loja 456
                    r"(\w+)\s*lj\s*(\d+)",  # Cliente LJ 189
                    r"filial\s*(\d+)"      # Filial 001
                ]
                
                for pattern in filial_patterns:
                    match = re.search(pattern, consulta_lower)
                    if match:
                        analise["tipo_consulta"] = "filial_especifica"
                        analise["filial_detectada"] = match.groups()
                        logger.info(f"üéØ Filial espec√≠fica detectada: {match.groups()}")
                        break
        else:
            logger.info("üö® AN√ÅLISE DE CLIENTE IGNORADA: Usu√°rio fez corre√ß√£o - usando consulta geral")
        
        # üîç DETEC√á√ÉO DE CONSULTAS EXPLICITAMENTE GEN√âRICAS
        consultas_genericas = [
            "entregas pendentes", "relat√≥rio", "excel", "exportar", "gere um relat√≥rio",
            "todas as entregas", "dados gerais", "situa√ß√£o geral", "status geral",
            "pend√™ncias", "atrasadas", "no prazo", "estat√≠sticas", "resumo geral"
        ]
        
        for consulta_generica in consultas_genericas:
            if consulta_generica in consulta_lower:
                if analise["tipo_consulta"] != "geral":
                    logger.info(f"üîÑ CORRE√á√ÉO: Consulta '{consulta_generica}' detectada - for√ßando para geral")
                    analise["tipo_consulta"] = "geral"
                    analise["cliente_especifico"] = None
                break
        
        # AN√ÅLISE TEMPORAL INTELIGENTE - CORRIGIDA
        if "maio" in consulta_lower:
            # Maio inteiro = todo o m√™s de maio
            hoje = datetime.now()
            if hoje.month >= 5:  # Se estivermos em maio ou depois
                inicio_maio = datetime(hoje.year, 5, 1)
                dias_maio = (hoje - inicio_maio).days + 1
                analise["periodo_dias"] = min(dias_maio, 31)  # M√°ximo 31 dias de maio
            else:
                analise["periodo_dias"] = 31  # Maio do ano anterior
            analise["mes_especifico"] = "maio"
            
        elif "junho" in consulta_lower:
            # Junho inteiro = todo o m√™s de junho
            hoje = datetime.now()
            if hoje.month >= 6:  # Se estivermos em junho ou depois
                inicio_junho = datetime(hoje.year, 6, 1)
                dias_junho = (hoje - inicio_junho).days + 1
                analise["periodo_dias"] = min(dias_junho, 30)  # M√°ximo 30 dias de junho
            else:
                analise["periodo_dias"] = 30  # Junho do ano anterior
            analise["mes_especifico"] = "junho"
            
        elif re.search(r"(\d+)\s*dias?", consulta_lower):
            dias_match = re.search(r"(\d+)\s*dias?", consulta_lower)
            analise["periodo_dias"] = int(dias_match.group(1))
        elif "30 dias" in consulta_lower or "m√™s" in consulta_lower:
            analise["periodo_dias"] = 30
        elif "60 dias" in consulta_lower or "2 meses" in consulta_lower:
            analise["periodo_dias"] = 60
        elif "semana" in consulta_lower:
            analise["periodo_dias"] = 7
            
        # AN√ÅLISE GEOGR√ÅFICA - DETEC√á√ÉO RIGOROSA
        # Buscar padr√µes espec√≠ficos para UF para evitar falsos positivos
        uf_patterns = [
            r'\b(SP|RJ|MG|RS|PR|SC|GO|DF|BA|PE)\b',  # UF mai√∫scula isolada
            r'\bUF\s+(SP|RJ|MG|RS|PR|SC|GO|DF|BA|PE)\b',  # "UF SP"
            r'\b(S√£o Paulo|Rio de Janeiro|Minas Gerais|Rio Grande do Sul|Paran√°|Santa Catarina|Goi√°s|Distrito Federal|Bahia|Pernambuco)\b',  # Nome completo
            r'\b(sp|rj|mg|rs|pr|sc|go|df|ba|pe)\s+(clientes?|entregas?|vendas?)\b'  # "sp clientes", "pe entregas"
        ]
        
        for pattern in uf_patterns:
            match = re.search(pattern, consulta, re.IGNORECASE)
            if match:
                uf_encontrada = match.group(1).upper()
                # Mapear nomes completos para siglas
                mapeamento_ufs = {
                    'S√ÉO PAULO': 'SP', 'RIO DE JANEIRO': 'RJ', 'MINAS GERAIS': 'MG',
                    'RIO GRANDE DO SUL': 'RS', 'PARAN√Å': 'PR', 'SANTA CATARINA': 'SC',
                    'GOI√ÅS': 'GO', 'DISTRITO FEDERAL': 'DF', 'BAHIA': 'BA', 'PERNAMBUCO': 'PE'
                }
                uf_final = mapeamento_ufs.get(uf_encontrada, uf_encontrada)
                
                analise["filtro_geografico"] = uf_final
                analise["tipo_consulta"] = "geografico"
                logger.info(f"üó∫Ô∏è Filtro geogr√°fico detectado: {uf_final}")
                break
        
        # AN√ÅLISE DE FOCO DOS DADOS
        if "entrega" in consulta_lower:
            analise["foco_dados"].append("entregas_monitoradas")
        if "frete" in consulta_lower:
            analise["foco_dados"].append("fretes")
        if "embarque" in consulta_lower:
            analise["foco_dados"].append("embarques")
        if "pedido" in consulta_lower:
            analise["foco_dados"].append("pedidos")
            
        # Se n√£o especificou, usar padr√£o baseado na consulta
        if not analise["foco_dados"]:
            if any(palavra in consulta_lower for palavra in ["como est√°", "status", "situa√ß√£o"]):
                analise["foco_dados"] = ["entregas_monitoradas", "embarques"]
            else:
                analise["foco_dados"] = ["entregas_monitoradas"]
        
        # M√âTRICAS SOLICITADAS - EXPANDIDAS
        if any(palavra in consulta_lower for palavra in ["prazo", "atraso", "pontualidade"]):
            analise["metricas_solicitadas"].append("performance_prazo")
        if any(palavra in consulta_lower for palavra in ["comparar", "compara√ß√£o", "tend√™ncia"]):
            analise["metricas_solicitadas"].append("comparacao_temporal")
        if "m√©dia" in consulta_lower:
            analise["metricas_solicitadas"].append("medias")
        if any(palavra in consulta_lower for palavra in ["reagenda", "agendamento", "protocolo"]):
            analise["metricas_solicitadas"].append("agendamentos")
        
        # üìù LOGS DE DEBUG DA AN√ÅLISE
        logger.info(f"üìä AN√ÅLISE CONCLU√çDA: {analise['tipo_consulta'].upper()}")
        logger.info(f"üë§ Cliente: {analise['cliente_especifico'] or 'TODOS'}")
        logger.info(f"üìÖ Per√≠odo: {analise['periodo_dias']} dias")
        logger.info(f"üö® Corre√ß√£o: {'SIM' if analise['correcao_usuario'] else 'N√ÉO'}")
        logger.info(f"üéØ Foco: {', '.join(analise['foco_dados']) if analise['foco_dados'] else 'PADR√ÉO'}")
        
        return analise
    
    def _carregar_contexto_inteligente(self, analise: Dict[str, Any]) -> Dict[str, Any]:
        """Carrega dados espec√≠ficos baseados na an√°lise da consulta"""
        
        # CACHE-ASIDE PATTERN: Verificar se dados est√£o no Redis
        if REDIS_DISPONIVEL:
            chave_cache = redis_cache._gerar_chave(
                "contexto_inteligente",
                cliente=analise.get("cliente_especifico"),
                periodo_dias=analise.get("periodo_dias", 30),
                foco_dados=analise.get("foco_dados", []),
                filtro_geografico=analise.get("filtro_geografico")
            )
            
            # Tentar buscar do cache primeiro (Cache Hit)
            dados_cache = redis_cache.get(chave_cache)
            if dados_cache:
                logger.info("üéØ CACHE HIT: Contexto inteligente carregado do Redis")
                return dados_cache
        
        # CACHE MISS: Carregar dados do banco de dados
        logger.info("üí® CACHE MISS: Carregando contexto do banco de dados")
        
        try:
            from app import db
            from app.fretes.models import Frete
            from app.embarques.models import Embarque
            from app.transportadoras.models import Transportadora
            from app.pedidos.models import Pedido
            from app.monitoramento.models import EntregaMonitorada, AgendamentoEntrega
            from app.faturamento.models import RelatorioFaturamentoImportado
            
            # Data limite baseada na an√°lise
            data_limite = datetime.now() - timedelta(days=analise.get("periodo_dias", 30))
            
            contexto = {
                "analise_aplicada": analise,
                "timestamp": datetime.now().isoformat(),
                "registros_carregados": 0,
                "dados_especificos": {},
                "_from_cache": False  # Indicador que veio do banco
            }
            
            # FILTROS BASEADOS NO USU√ÅRIO (VENDEDOR)
            filtros_usuario = self._obter_filtros_usuario()
            
            # CARREGAR DADOS ESPEC√çFICOS POR FOCO
            if "entregas_monitoradas" in analise["foco_dados"]:
                # Usar cache espec√≠fico para entregas se dispon√≠vel
                if REDIS_DISPONIVEL:
                    entregas_cache = redis_cache.cache_entregas_cliente(
                        cliente=analise.get("cliente_especifico", ""),
                        periodo_dias=analise.get("periodo_dias", 30)
                    )
                    if entregas_cache:
                        contexto["dados_especificos"]["entregas"] = entregas_cache
                        contexto["registros_carregados"] += entregas_cache.get("total_registros", 0)
                        logger.info("üéØ CACHE HIT: Entregas carregadas do Redis")
                    else:
                        # Cache miss - carregar do banco e salvar no cache
                        dados_entregas = self._carregar_entregas_banco(analise, filtros_usuario, data_limite)
                        contexto["dados_especificos"]["entregas"] = dados_entregas
                        contexto["registros_carregados"] += dados_entregas.get("total_registros", 0)
                        
                        # Salvar no cache Redis
                        redis_cache.cache_entregas_cliente(
                            cliente=analise.get("cliente_especifico", ""),
                            periodo_dias=analise.get("periodo_dias", 30),
                            entregas=dados_entregas,
                            ttl=120  # 2 minutos para entregas
                        )
                        logger.info("üíæ Entregas salvas no Redis cache")
                else:
                    # Redis n√£o dispon√≠vel - carregar diretamente do banco
                    dados_entregas = self._carregar_entregas_banco(analise, filtros_usuario, data_limite)
                    contexto["dados_especificos"]["entregas"] = dados_entregas
                    contexto["registros_carregados"] += dados_entregas.get("total_registros", 0)
            
            # CARREGAR FRETES SE SOLICITADO
            if "fretes" in analise["foco_dados"]:
                dados_fretes = self._carregar_fretes_banco(analise, data_limite)
                contexto["dados_especificos"]["fretes"] = dados_fretes
                contexto["registros_carregados"] += dados_fretes.get("total_registros", 0)
            
            # ESTAT√çSTICAS GERAIS COM REDIS CACHE
            if REDIS_DISPONIVEL:
                estatisticas = redis_cache.cache_estatisticas_cliente(
                    cliente=analise.get("cliente_especifico", "geral"),
                    periodo_dias=analise.get("periodo_dias", 30)
                )
                if not estatisticas:
                    # Cache miss - calcular e salvar
                    estatisticas = self._calcular_estatisticas_especificas(analise, filtros_usuario)
                    redis_cache.cache_estatisticas_cliente(
                        cliente=analise.get("cliente_especifico", "geral"),
                        periodo_dias=analise.get("periodo_dias", 30),
                        dados=estatisticas,
                        ttl=180  # 3 minutos para estat√≠sticas
                    )
                    logger.info("üíæ Estat√≠sticas salvas no Redis cache")
                else:
                    logger.info("üéØ CACHE HIT: Estat√≠sticas carregadas do Redis")
            else:
                # Fallback sem Redis
                stats_key = f"stats_{analise.get('cliente_especifico', 'geral')}_{analise.get('periodo_dias', 30)}"
                if stats_key not in self._cache or (datetime.now().timestamp() - self._cache[stats_key]["timestamp"]) > self._cache_timeout:
                    estatisticas = self._calcular_estatisticas_especificas(analise, filtros_usuario)
                    self._cache[stats_key] = {
                        "data": estatisticas,
                        "timestamp": datetime.now().timestamp()
                    }
                else:
                    estatisticas = self._cache[stats_key]["data"]
            
            contexto["estatisticas"] = estatisticas
            
            # Salvar contexto completo no Redis para pr√≥ximas consultas similares
            if REDIS_DISPONIVEL:
                redis_cache.set(chave_cache, contexto, ttl=300)  # 5 minutos
                logger.info("üíæ Contexto completo salvo no Redis cache")
            
            return contexto
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar contexto inteligente: {e}")
            return {"erro": str(e), "timestamp": datetime.now().isoformat(), "_from_cache": False}
    
    def _carregar_entregas_banco(self, analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
        """Carrega entregas espec√≠ficas do banco de dados"""
        from app import db
        from app.monitoramento.models import EntregaMonitorada
        
        query_entregas = db.session.query(EntregaMonitorada).filter(
            EntregaMonitorada.data_embarque >= data_limite
        )
        
        # Aplicar filtro de cliente espec√≠fico - APENAS SE ESPECIFICADO
        cliente_especifico = analise.get("cliente_especifico")
        correcao_usuario = analise.get("correcao_usuario", False)
        
        # Se houve corre√ß√£o do usu√°rio, N√ÉO aplicar filtro de cliente
        if not correcao_usuario and cliente_especifico:
            logger.info(f"üéØ Aplicando filtro de cliente: {cliente_especifico}")
            
            if cliente_especifico == "GRUPO_CLIENTES":
                # Filtro gen√©rico para grupos de clientes
                query_entregas = query_entregas.filter(
                    or_(
                        EntregaMonitorada.cliente.ilike('%atacado%'),
                        EntregaMonitorada.cliente.ilike('%supermercado%'),
                        EntregaMonitorada.cliente.ilike('%varejo%')
                    )
                )
            elif cliente_especifico == "Assai":
                # APENAS Assai - NUNCA Atacad√£o
                query_entregas = query_entregas.filter(
                    and_(
                        EntregaMonitorada.cliente.ilike('%assai%'),
                        ~EntregaMonitorada.cliente.ilike('%atacad√£o%'),
                        ~EntregaMonitorada.cliente.ilike('%atacadao%')
                    )
                )
            elif cliente_especifico == "Atacad√£o":
                # APENAS Atacad√£o - NUNCA Assai
                query_entregas = query_entregas.filter(
                    and_(
                        or_(
                            EntregaMonitorada.cliente.ilike('%atacad√£o%'),
                            EntregaMonitorada.cliente.ilike('%atacadao%')
                        ),
                        ~EntregaMonitorada.cliente.ilike('%assai%')
                    )
                )
            else:
                # Outros clientes espec√≠ficos
                query_entregas = query_entregas.filter(
                    EntregaMonitorada.cliente.ilike(f'%{cliente_especifico}%')
                )
        else:
            if correcao_usuario:
                logger.info("üö® FILTRO DE CLIENTE IGNORADO: Usu√°rio fez corre√ß√£o - buscando todos os clientes")
            else:
                logger.info("üåê CONSULTA GERAL: Buscando dados de todos os clientes")
        
        # Aplicar filtro geogr√°fico
        if analise.get("filtro_geografico"):
            query_entregas = query_entregas.filter(
                EntregaMonitorada.uf == analise["filtro_geografico"]
            )
        
        # Aplicar filtros de usu√°rio (vendedor)
        if filtros_usuario.get("vendedor_restricao"):
            query_entregas = query_entregas.filter(
                EntregaMonitorada.vendedor == filtros_usuario["vendedor"]
            )
        
        entregas = query_entregas.order_by(EntregaMonitorada.data_embarque.desc()).limit(100).all()
        
        # Calcular m√©tricas se solicitado
        metricas_entregas = {}
        if "performance_prazo" in analise.get("metricas_solicitadas", []):
            metricas_entregas = self._calcular_metricas_prazo(entregas)
        
        # Carregar agendamentos se solicitado
        agendamentos_info = {}
        if "agendamentos" in analise.get("metricas_solicitadas", []):
            agendamentos_info = self._carregar_agendamentos(entregas)
        
        return {
            "registros": [
                {
                    "id": e.id,
                    "numero_nf": e.numero_nf,
                    "cliente": e.cliente,
                    "uf": e.uf,
                    "municipio": e.municipio,
                    "transportadora": e.transportadora,
                    "status_finalizacao": e.status_finalizacao,
                    "data_embarque": e.data_embarque.isoformat() if e.data_embarque else None,
                    "data_entrega_prevista": e.data_entrega_prevista.isoformat() if e.data_entrega_prevista else None,
                    "data_entrega_realizada": e.data_hora_entrega_realizada.isoformat() if e.data_hora_entrega_realizada else None,
                    "entregue": e.entregue,
                    "valor_nf": float(e.valor_nf or 0),
                    "vendedor": e.vendedor,
                    "lead_time": e.lead_time,
                    "no_prazo": self._verificar_prazo_entrega(e),
                    "dias_atraso": self._calcular_dias_atraso(e)
                }
                for e in entregas
            ],
            "total_registros": len(entregas),
            "metricas": metricas_entregas,
            "agendamentos": agendamentos_info
        }
    
    def _carregar_fretes_banco(self, analise: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
        """Carrega fretes espec√≠ficos do banco de dados"""
        from app import db
        from app.fretes.models import Frete
        
        query_fretes = db.session.query(Frete).filter(
            Frete.criado_em >= data_limite
        )
        
        if analise.get("cliente_especifico") and analise["cliente_especifico"] != "GRUPO_CLIENTES":
            query_fretes = query_fretes.filter(
                Frete.nome_cliente.ilike(f'%{analise["cliente_especifico"]}%')
            )
        
        fretes = query_fretes.order_by(Frete.criado_em.desc()).limit(50).all()
        
        return {
            "registros": [
                {
                    "id": f.id,
                    "cliente": f.nome_cliente,
                    "uf_destino": f.uf_destino,
                    "valor_cotado": float(f.valor_cotado or 0),
                    "valor_considerado": float(f.valor_considerado or 0),
                    "peso_total": float(f.peso_total or 0),
                    "status": f.status,
                    "data_criacao": f.criado_em.isoformat() if f.criado_em else None
                }
                for f in fretes
            ],
            "total_registros": len(fretes)
        }
    
    def _carregar_agendamentos(self, entregas: List) -> Dict[str, Any]:
        """Carrega informa√ß√µes de agendamentos e reagendamentos"""
        try:
            from app import db
            from app.monitoramento.models import AgendamentoEntrega
            
            agendamentos_info = {
                "total_agendamentos": 0,
                "reagendamentos": 0,
                "agendamentos_detalhes": []
            }
            
            for entrega in entregas:
                agendamentos = db.session.query(AgendamentoEntrega).filter(
                    AgendamentoEntrega.entrega_id == entrega.id
                ).order_by(AgendamentoEntrega.data_agendamento.desc()).all()
                
                if agendamentos:
                    agendamentos_info["total_agendamentos"] += len(agendamentos)
                    if len(agendamentos) > 1:
                        agendamentos_info["reagendamentos"] += 1
                    
                    for ag in agendamentos:
                        agendamentos_info["agendamentos_detalhes"].append({
                            "entrega_id": entrega.id,
                            "numero_nf": entrega.numero_nf,
                            "cliente": entrega.cliente,
                            "data_agendamento": ag.data_agendamento.isoformat() if ag.data_agendamento else None,
                            "protocolo": getattr(ag, 'protocolo', None),
                            "status": getattr(ag, 'status', 'Aguardando confirma√ß√£o'),
                            "observacoes": getattr(ag, 'observacoes', None)
                        })
            
            return agendamentos_info
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar agendamentos: {e}")
            return {"erro": str(e)}
    
    def _verificar_prazo_entrega(self, entrega) -> bool:
        """Verifica se entrega foi realizada no prazo"""
        if not entrega.data_hora_entrega_realizada or not entrega.data_entrega_prevista:
            return None
        
        return entrega.data_hora_entrega_realizada.date() <= entrega.data_entrega_prevista
    
    def _calcular_dias_atraso(self, entrega) -> int:
        """Calcula dias de atraso da entrega"""
        if not entrega.data_hora_entrega_realizada or not entrega.data_entrega_prevista:
            return None
        
        if entrega.data_hora_entrega_realizada.date() > entrega.data_entrega_prevista:
            return (entrega.data_hora_entrega_realizada.date() - entrega.data_entrega_prevista).days
        
        return 0
    
    def _obter_filtros_usuario(self) -> Dict[str, Any]:
        """Obt√©m filtros espec√≠ficos do usu√°rio atual"""
        filtros = {
            "vendedor_restricao": False,
            "vendedor": None,
            "perfil": "admin"
        }
        
        try:
            if hasattr(current_user, 'vendedor') and current_user.vendedor:
                filtros["vendedor_restricao"] = True
                filtros["vendedor"] = current_user.nome
                filtros["perfil"] = "vendedor"
        except:
            pass  # Se n√£o conseguir identificar, usar padr√£o admin
            
        return filtros
    
    def _calcular_metricas_prazo(self, entregas: List) -> Dict[str, Any]:
        """Calcula m√©tricas de performance de prazo"""
        if not entregas:
            return {}
        
        total_entregas = len(entregas)
        entregas_realizadas = [e for e in entregas if e.data_hora_entrega_realizada]
        entregas_no_prazo = [
            e for e in entregas_realizadas 
            if e.data_entrega_prevista and e.data_hora_entrega_realizada 
            and e.data_hora_entrega_realizada.date() <= e.data_entrega_prevista
        ]
        
        # Calcular atrasos
        atrasos = []
        for e in entregas_realizadas:
            if e.data_entrega_prevista and e.data_hora_entrega_realizada.date() > e.data_entrega_prevista:
                atraso = (e.data_hora_entrega_realizada.date() - e.data_entrega_prevista).days
                atrasos.append(atraso)
        
        return {
            "total_entregas": total_entregas,
            "entregas_realizadas": len(entregas_realizadas),
            "entregas_no_prazo": len(entregas_no_prazo),
            "entregas_atrasadas": len(atrasos),
            "percentual_no_prazo": round((len(entregas_no_prazo) / len(entregas_realizadas) * 100), 1) if entregas_realizadas else 0,
            "media_lead_time": round(sum(e.lead_time for e in entregas if e.lead_time) / len([e for e in entregas if e.lead_time]), 1) if any(e.lead_time for e in entregas) else None,
            "media_atraso": round(sum(atrasos) / len(atrasos), 1) if atrasos else 0,
            "maior_atraso": max(atrasos) if atrasos else 0
        }
    
    def _calcular_estatisticas_especificas(self, analise: Dict[str, Any], filtros_usuario: Dict[str, Any]) -> Dict[str, Any]:
        """Calcula estat√≠sticas espec√≠ficas para o contexto"""
        try:
            from app import db
            from app.monitoramento.models import EntregaMonitorada
            from app.fretes.models import Frete
            
            data_limite = datetime.now() - timedelta(days=analise.get("periodo_dias", 30))
            
            # Base query para entregas
            query_base = db.session.query(EntregaMonitorada).filter(
                EntregaMonitorada.data_embarque >= data_limite
            )
            
            # Aplicar filtros espec√≠ficos
            if analise.get("cliente_especifico"):
                if analise["cliente_especifico"] == "GRUPO_CLIENTES":
                    # Filtro gen√©rico para grupos de clientes
                    query_base = query_base.filter(
                        or_(
                            EntregaMonitorada.cliente.ilike('%atacado%'),
                            EntregaMonitorada.cliente.ilike('%supermercado%'),
                            EntregaMonitorada.cliente.ilike('%varejo%')
                        )
                    )
                elif analise["cliente_especifico"] == "Assai":
                    # APENAS Assai
                    query_base = query_base.filter(
                        and_(
                            EntregaMonitorada.cliente.ilike('%assai%'),
                            ~EntregaMonitorada.cliente.ilike('%atacad√£o%'),
                            ~EntregaMonitorada.cliente.ilike('%atacadao%')
                        )
                    )
                elif analise["cliente_especifico"] == "Atacad√£o":
                    # APENAS Atacad√£o
                    query_base = query_base.filter(
                        and_(
                            or_(
                                EntregaMonitorada.cliente.ilike('%atacad√£o%'),
                                EntregaMonitorada.cliente.ilike('%atacadao%')
                            ),
                            ~EntregaMonitorada.cliente.ilike('%assai%')
                        )
                    )
                else:
                    query_base = query_base.filter(EntregaMonitorada.cliente.ilike(f'%{analise["cliente_especifico"]}%'))
            
            if filtros_usuario.get("vendedor_restricao"):
                query_base = query_base.filter(EntregaMonitorada.vendedor == filtros_usuario["vendedor"])
            
            total_entregas = query_base.count()
            entregas_entregues = query_base.filter(EntregaMonitorada.status_finalizacao == 'Entregue').count()
            entregas_pendentes = query_base.filter(EntregaMonitorada.status_finalizacao.in_(['Pendente', 'Em tr√¢nsito'])).count()
            
            return {
                "periodo_analisado": f"{analise.get('periodo_dias', 30)} dias",
                "total_entregas": total_entregas,
                "entregas_entregues": entregas_entregues,
                "entregas_pendentes": entregas_pendentes,  
                "percentual_entregues": round((entregas_entregues / total_entregas * 100), 1) if total_entregas > 0 else 0,
                "cliente_especifico": analise.get("cliente_especifico"),
                "filtro_geografico": analise.get("filtro_geografico"),
                "restricao_vendedor": filtros_usuario.get("vendedor_restricao", False)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao calcular estat√≠sticas: {e}")
            return {"erro": str(e)}
    
    def _descrever_contexto_carregado(self, analise: Dict[str, Any]) -> str:
        """Descreve o contexto carregado para o prompt"""
        descricao = []
        
        if analise.get("cliente_especifico"):
            descricao.append(f"- Dados espec√≠ficos do cliente: {analise['cliente_especifico']}")
        
        if analise.get("periodo_dias"):
            if analise.get("mes_especifico"):
                descricao.append(f"- Per√≠odo: M√™s de {analise['mes_especifico']} ({analise['periodo_dias']} dias)")
            else:
                descricao.append(f"- Per√≠odo: √öltimos {analise['periodo_dias']} dias")
        
        if analise.get("filtro_geografico"):
            descricao.append(f"- Filtro geogr√°fico: {analise['filtro_geografico']}")
        
        if analise.get("foco_dados"):
            descricao.append(f"- Foco dos dados: {', '.join(analise['foco_dados'])}")
        
        if analise.get("metricas_solicitadas"):
            descricao.append(f"- M√©tricas calculadas: {', '.join(analise['metricas_solicitadas'])}")
        
        return "\n".join(descricao) if descricao else "- Dados gerais do sistema"
    
    def _get_tools_description(self) -> str:
        """Descri√ß√£o das ferramentas dispon√≠veis"""
        return """
FERRAMENTAS AVAN√áADAS DISPON√çVEIS:
1. An√°lise contextual inteligente - Detecta automaticamente cliente, per√≠odo, geografia
2. Filtros por permiss√£o - Vendedores veem apenas seus clientes
3. M√©tricas calculadas - Performance, atrasos, compara√ß√µes temporais
4. Cache inteligente - Estat√≠sticas otimizadas para consultas frequentes
5. Diferencia√ß√£o rigorosa - Assai ‚â† Atacad√£o (nunca confunde)
6. An√°lises temporais corretas - M√™s = m√™s inteiro, n√£o 7 dias
7. Dados completos - Datas de entrega, prazos, reagendamentos, protocolos
8. Hist√≥rico de agendamentos - Reagendas e protocolos completos
"""
    
    def _is_excel_command(self, consulta: str) -> bool:
        """üß† DETEC√á√ÉO INTELIGENTE DE COMANDOS EXCEL"""
        comandos_excel = [
            # Comandos diretos de Excel
            'excel', 'planilha', 'xls', 'xlsx', 'exportar', 'export',
            'gerar relat√≥rio', 'gere relat√≥rio', 'gerar planilha',
            'relat√≥rio em excel', 'baixar dados', 'download',
            
            # üìã ENTREGAS PENDENTES (espec√≠fico)
            'relat√≥rio de entregas pendentes',
            'entregas pendentes', 'pendentes com agendamento',
            'entregas n√£o entregues', 'entregas aguardando',
            
            # üî¥ ENTREGAS ATRASADAS (espec√≠fico)  
            'relat√≥rio de entregas atrasadas',
            'entregas atrasadas', 'entregas em atraso',
            
            # üìä RELAT√ìRIOS GEN√âRICOS
            'relat√≥rio das entregas', 'relat√≥rio de monitoramento',
            'dados das entregas', 'planilha das entregas'
        ]
        
        consulta_lower = consulta.lower()
        
        # Detectar comando direto
        if any(comando in consulta_lower for comando in comandos_excel):
            return True
        
        # Detec√ß√£o contextual para padr√µes como:
        # "Gere um relat√≥rio em excel das entregas pendentes"
        if 'relat√≥rio' in consulta_lower and ('entrega' in consulta_lower or 'monitoramento' in consulta_lower):
            return True
            
        return False
    
    def _processar_comando_excel(self, consulta: str, user_context: Dict = None) -> str:
        """üß† PROCESSAMENTO INTELIGENTE DE COMANDOS EXCEL"""
        try:
            from .excel_generator import get_excel_generator
            
            logger.info(f"üìä Processando comando Excel: {consulta}")
            
            excel_generator = get_excel_generator()
            consulta_lower = consulta.lower()
            
            # üéØ AN√ÅLISE INTELIGENTE DE COMANDOS (mesma l√≥gica da rota API)
            
            # 1. ENTREGAS PENDENTES (priorit√°rio - conceito diferente de atrasadas)
            if any(palavra in consulta_lower for palavra in ['entregas pendentes', 'pendente', 'n√£o entregue', 'aguardando entrega', 'pendentes com agendamento']):
                logger.info("üìã CLAUDE: Detectado comando ENTREGAS PENDENTES")
                
                # Detectar filtros no comando
                filtros = {}
                if 'uf' in consulta_lower:
                    import re
                    match = re.search(r'uf\s+([A-Z]{2})', consulta.upper())
                    if match:
                        filtros['uf'] = match.group(1)
                if 'cliente' in consulta_lower:
                    import re
                    match = re.search(r'cliente\s+([a-zA-Z\s]+)', consulta_lower)
                    if match:
                        filtros['cliente'] = match.group(1).strip()
                if 'vendedor' in consulta_lower:
                    import re
                    match = re.search(r'vendedor\s+([a-zA-Z\s]+)', consulta_lower)
                    if match:
                        filtros['vendedor'] = match.group(1).strip()
                        
                resultado = excel_generator.gerar_relatorio_entregas_pendentes(filtros)
                
            # 2. ENTREGAS ATRASADAS (espec√≠fico para atrasos)
            elif any(palavra in consulta_lower for palavra in ['entregas atrasadas', 'atraso', 'atrasado', 'atrasada', 'em atraso']):
                logger.info("üî¥ CLAUDE: Detectado comando ENTREGAS ATRASADAS")
                
                # Detectar filtros no comando
                filtros = {}
                if 'cliente' in consulta_lower:
                    import re
                    match = re.search(r'cliente\s+([a-zA-Z\s]+)', consulta_lower)
                    if match:
                        filtros['cliente'] = match.group(1).strip()
                if 'uf' in consulta_lower:
                    import re
                    match = re.search(r'uf\s+([A-Z]{2})', consulta.upper())
                    if match:
                        filtros['uf'] = match.group(1)
                
                resultado = excel_generator.gerar_relatorio_entregas_atrasadas(filtros)
                
            # 3. CLIENTE ESPEC√çFICO
            elif any(cliente in consulta_lower for cliente in ['assai', 'atacad√£o', 'carrefour', 'walmart', 'tenda', 'mateus', 'fort']):
                logger.info("üë§ CLAUDE: Detectado comando CLIENTE ESPEC√çFICO")
                
                # Detectar cliente
                cliente = None
                clientes_mapeamento = {
                    'assai': 'Assai',
                    'atacad√£o': 'Atacad√£o',
                    'carrefour': 'Carrefour',
                    'walmart': 'Walmart',
                    'tenda': 'Tenda',
                    'mateus': 'Mateus',
                    'fort': 'Fort'
                }
                
                for nome_comando, nome_real in clientes_mapeamento.items():
                    if nome_comando in consulta_lower:
                        cliente = nome_real
                        break
                
                if cliente:
                    # Detectar per√≠odo se especificado
                    periodo = 30  # padr√£o
                    if '√∫ltimos' in consulta_lower or 'ultimo' in consulta_lower:
                        import re
                        match = re.search(r'(\d+)\s*dias?', consulta_lower)
                        if match:
                            periodo = int(match.group(1))
                    
                    resultado = excel_generator.gerar_relatorio_cliente_especifico(cliente, periodo)
                else:
                    # Fallback para entregas pendentes
                    resultado = excel_generator.gerar_relatorio_entregas_pendentes()
            
            # 4. COMANDOS GEN√âRICOS COM PALAVRAS-CHAVE EXCEL
            elif any(palavra in consulta_lower for palavra in ['relat√≥rio', 'planilha', 'excel', 'exportar']):
                logger.info("üìä CLAUDE: Detectado comando GEN√âRICO - Default para ENTREGAS PENDENTES")
                # Para comandos gen√©ricos, usar entregas pendentes por ser mais abrangente
                resultado = excel_generator.gerar_relatorio_entregas_pendentes()
            
            else:
                logger.warning("‚ö†Ô∏è CLAUDE: Comando Excel n√£o reconhecido - usando fallback ENTREGAS PENDENTES")
                # Fallback para entregas pendentes (mais √∫til que atrasadas)
                resultado = excel_generator.gerar_relatorio_entregas_pendentes()
            
            if resultado and resultado.get('success'):
                # üéØ RESPOSTA PERSONALIZADA POR TIPO DE RELAT√ìRIO
                
                # Determinar tipo de relat√≥rio pelo nome do arquivo
                filename = resultado['filename']
                is_pendentes = 'pendentes' in filename
                is_atrasadas = 'atrasadas' in filename
                is_cliente = any(cliente in filename.lower() for cliente in ['assai', 'atacadao', 'carrefour', 'tenda', 'mateus', 'fort', 'walmart'])
                
                # T√≠tulo e descri√ß√£o espec√≠ficos
                if is_pendentes:
                    titulo_relatorio = "üìã **ENTREGAS PENDENTES - EXCEL GERADO!**"
                    aba_principal = "Entregas Pendentes"
                    descricao_especifica = """
üéØ **DIFERENCIAL DESTE RELAT√ìRIO**:
‚Ä¢ üü¢ Entregas no prazo (ainda dentro do prazo previsto)
‚Ä¢ üü° Entregas pr√≥ximas (vencem em 1-2 dias)
‚Ä¢ üî¥ Entregas atrasadas (j√° passaram do prazo)
‚Ä¢ ‚ö™ Entregas sem agendamento (precisam ser agendadas)

üìä **INCLUI AGENDAMENTOS E PROTOCOLOS**:"""
                    
                    # Estat√≠sticas espec√≠ficas de pendentes se dispon√≠veis
                    estatisticas = resultado.get('estatisticas', {})
                    if estatisticas:
                        descricao_especifica += f"""
‚Ä¢ Total Pendentes: {estatisticas.get('total_pendentes', 0)}
‚Ä¢ ‚ö™ Sem Agendamento: {estatisticas.get('sem_agendamento', 0)}
‚Ä¢ üü¢ No Prazo: {estatisticas.get('no_prazo', 0)}
‚Ä¢ üî¥ Atrasadas: {estatisticas.get('atrasadas', 0)}
‚Ä¢ ‚úÖ Com Agendamento: {estatisticas.get('com_agendamento', 0)}"""
                    
                elif is_atrasadas:
                    titulo_relatorio = "üî¥ **ENTREGAS ATRASADAS - EXCEL GERADO!**"
                    aba_principal = "Entregas Atrasadas"
                    descricao_especifica = """
‚ö†Ô∏è **FOCO EM PROBLEMAS CR√çTICOS**:
‚Ä¢ Apenas entregas que J√Å passaram do prazo
‚Ä¢ Dias de atraso calculados automaticamente
‚Ä¢ Prioriza√ß√£o por criticidade do atraso
‚Ä¢ A√ß√µes urgentes recomendadas"""
                    
                elif is_cliente:
                    titulo_relatorio = "üë§ **RELAT√ìRIO DE CLIENTE - EXCEL GERADO!**"
                    aba_principal = "Dados do Cliente"
                    cliente_nome = resultado.get('cliente', 'Cliente')
                    periodo = resultado.get('periodo_dias', 30)
                    descricao_especifica = f"""
üéØ **AN√ÅLISE PERSONALIZADA COMPLETA**:
‚Ä¢ Cliente: {cliente_nome}
‚Ä¢ Per√≠odo: {periodo} dias
‚Ä¢ Performance completa de entregas
‚Ä¢ Hist√≥rico de agendamentos e protocolos"""
                    
                else:
                    titulo_relatorio = "üìä **RELAT√ìRIO EXCEL GERADO!**"
                    aba_principal = "Dados Principais"
                    descricao_especifica = ""
                
                # Retornar resposta formatada
                return f"""{titulo_relatorio}

‚úÖ **Arquivo**: `{resultado['filename']}`
üìà **Registros**: {resultado['total_registros']}
üí∞ **Valor Total**: R$ {resultado.get('valor_total', 0):,.2f}
üìÖ **Gerado**: {datetime.now().strftime('%d/%m/%Y %H:%M')}

üîó **DOWNLOAD**: [Clique aqui para baixar]({resultado['file_url']})

üìã **Conte√∫do do Relat√≥rio**:
‚Ä¢ **Aba "{aba_principal}"**: Dados completos com agendamentos e protocolos
‚Ä¢ **Aba "Resumo"**: Estat√≠sticas executivas e KPIs principais  
‚Ä¢ **Aba "An√°lise por Status"**: Categoriza√ß√£o detalhada
‚Ä¢ **Aba "Status Agendamentos"**: Informa√ß√µes de agendamentos
‚Ä¢ **Aba "A√ß√µes Priorit√°rias"**: Lista priorizada de a√ß√µes por criticidade{descricao_especifica}

üí° **Como usar**: 
1. Clique no link de download acima
2. Abra o arquivo Excel
3. Navegue pelas abas para an√°lise completa
4. Use filtros do Excel para an√°lises espec√≠ficas

üöÄ **Funcionalidades Avan√ßadas**:
- Dados atualizados em tempo real do sistema
- Informa√ß√µes completas de agendamentos e protocolos
- C√°lculos autom√°ticos de prazos e status
- Prioriza√ß√£o inteligente de a√ß√µes necess√°rias
- An√°lise categ√≥rica por status de entrega

---
üß† **Powered by:** Claude 4 Sonnet (Anthropic) - Modelo mais avan√ßado dispon√≠vel
üìä **Dados:** Sistema de Fretes em tempo real
üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚ö° **Modo:** IA Real Industrial + Export Excel Autom√°tico"""
            
            else:
                return f"""‚ùå **ERRO AO GERAR EXCEL**

**Problema detectado:** {resultado.get('message', 'Erro desconhecido')}

üîß **Poss√≠veis solu√ß√µes:**
1. Verificar se h√° dados dispon√≠veis no per√≠odo
2. Confirmar se cliente existe no sistema  
3. Tentar comando mais espec√≠fico

üìù **Exemplos de comandos que funcionam:**
- "Gerar Excel de entregas atrasadas"
- "Exportar dados do Assai para Excel"
- "Relat√≥rio de performance em planilha"

üÜò **Se o problema persistir:**
- Entre em contato com suporte t√©cnico
- Erro t√©cnico: `{resultado.get('error', 'N/A')}`

---
‚ö†Ô∏è **Sistema de Export Excel em desenvolvimento cont√≠nuo**"""
                
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico no comando Excel: {e}")
            return f"""‚ùå **ERRO CR√çTICO NO COMANDO EXCEL**

**Erro:** {str(e)}

üîß **Poss√≠veis causas:**
- Servi√ßo de Excel temporariamente indispon√≠vel
- Problema de conectividade interna
- Sobrecarga do sistema

üÜò **Solu√ß√µes:**
1. Aguardar alguns minutos e tentar novamente
2. Usar exporta√ß√µes manuais do sistema
3. Contactar suporte se erro persistir

---
‚ö†Ô∏è **Sistema tentar√° auto-recupera√ß√£o automaticamente**"""
    
    def _fallback_simulado(self, consulta: str) -> str:
        """Fallback quando Claude real n√£o est√° dispon√≠vel"""
        return f"""ü§ñ **MODO SIMULADO** (Claude Real n√£o dispon√≠vel)

Consulta recebida: "{consulta}"

‚ö†Ô∏è **Para ativar Claude REAL:**
1. Configure ANTHROPIC_API_KEY nas vari√°veis de ambiente
2. Obtenha chave em: https://console.anthropic.com/
3. Reinicie o sistema

üí° **Com Claude 4 Sonnet Real voc√™ ter√°:**
- Intelig√™ncia industrial de ponta
- An√°lises contextuais precisas
- Diferencia√ß√£o rigorosa de clientes (Assai ‚â† Atacad√£o)
- M√©tricas calculadas automaticamente
- Performance otimizada com cache
- Dados completos com reagendamentos

üîÑ **Por enquanto, usando sistema b√°sico...**"""

# Inst√¢ncia global
claude_integration = ClaudeRealIntegration()

def processar_com_claude_real(consulta: str, user_context: Dict = None) -> str:
    """Fun√ß√£o p√∫blica para processar com Claude real"""
    return claude_integration.processar_consulta_real(consulta, user_context)

# üéØ NOVAS FUN√á√ïES MODULARES POR DOM√çNIO

def _carregar_dados_entregas(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üì¶ Carrega dados espec√≠ficos de ENTREGAS (padr√£o)"""
    dados_entregas = _carregar_entregas_banco(analise, filtros_usuario, data_limite)
    return {
        "tipo_dados": "entregas",
        "entregas": dados_entregas,
        "registros_carregados": dados_entregas.get("total_registros", 0)
    }

def _carregar_dados_fretes(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üöõ Carrega dados espec√≠ficos de FRETES"""
    try:
        from app import db
        from app.fretes.models import Frete, DespesaExtra
        from app.transportadoras.models import Transportadora
        
        # Query de fretes
        query_fretes = db.session.query(Frete).filter(
            Frete.criado_em >= data_limite
        )
        
        # Aplicar filtros
        if analise.get("cliente_especifico") and not analise.get("correcao_usuario"):
            query_fretes = query_fretes.filter(
                Frete.nome_cliente.ilike(f'%{analise["cliente_especifico"]}%')
            )
        
        fretes = query_fretes.order_by(Frete.criado_em.desc()).limit(50).all()
        
        # Estat√≠sticas de fretes
        total_fretes = len(fretes)
        fretes_aprovados = len([f for f in fretes if f.status_aprovacao == 'aprovado'])
        fretes_pendentes = len([f for f in fretes if f.status_aprovacao == 'pendente'])
        valor_total_cotado = sum(float(f.valor_cotado or 0) for f in fretes)
        
        return {
            "tipo_dados": "fretes",
            "fretes": {
                "registros": [
                    {
                        "id": f.id,
                        "cliente": f.nome_cliente,
                        "uf_destino": f.uf_destino,
                        "transportadora": f.transportadora,
                        "valor_cotado": float(f.valor_cotado or 0),
                        "valor_considerado": float(f.valor_considerado or 0),
                        "peso_total": float(f.peso_total or 0),
                        "status_aprovacao": f.status_aprovacao,
                        "cte": f.cte,
                        "data_criacao": f.criado_em.isoformat() if f.criado_em else None
                    }
                    for f in fretes
                ],
                "estatisticas": {
                    "total_fretes": total_fretes,
                    "fretes_aprovados": fretes_aprovados,
                    "fretes_pendentes": fretes_pendentes,
                    "percentual_aprovacao": round((fretes_aprovados / total_fretes * 100), 1) if total_fretes > 0 else 0,
                    "valor_total_cotado": valor_total_cotado
                }
            },
            "registros_carregados": total_fretes
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados de fretes: {e}")
        return {"erro": str(e), "tipo_dados": "fretes"}

def _carregar_dados_transportadoras(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üöö Carrega dados espec√≠ficos de TRANSPORTADORAS"""
    try:
        from app import db
        from app.transportadoras.models import Transportadora
        from app.fretes.models import Frete
        
        # Transportadoras ativas
        transportadoras = db.session.query(Transportadora).filter(
            Transportadora.ativo == True
        ).all()
        
        # Fretes por transportadora
        fretes_por_transportadora = {}
        for transportadora in transportadoras:
            fretes_query = db.session.query(Frete).filter(
                Frete.transportadora == transportadora.razao_social,
                Frete.criado_em >= data_limite
            )
            
            fretes_count = fretes_query.count()
            valor_total = sum(float(f.valor_cotado or 0) for f in fretes_query.all())
            
            fretes_por_transportadora[transportadora.razao_social] = {
                "total_fretes": fretes_count,
                "valor_total": valor_total,
                "media_valor": round(valor_total / fretes_count, 2) if fretes_count > 0 else 0
            }
        
        return {
            "tipo_dados": "transportadoras",
            "transportadoras": {
                "registros": [
                    {
                        "id": t.id,
                        "razao_social": t.razao_social,
                        "cnpj": t.cnpj,
                        "cidade": t.cidade,
                        "uf": t.uf,
                        "tipo": "Freteiro" if getattr(t, 'freteiro', False) else "Empresa",
                        "fretes_periodo": fretes_por_transportadora.get(t.razao_social, {})
                    }
                    for t in transportadoras
                ],
                "estatisticas": {
                    "total_transportadoras": len(transportadoras),
                    "freteiros": len([t for t in transportadoras if getattr(t, 'freteiro', False)]),
                    "empresas": len([t for t in transportadoras if not getattr(t, 'freteiro', False)])
                }
            },
            "registros_carregados": len(transportadoras)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados de transportadoras: {e}")
        return {"erro": str(e), "tipo_dados": "transportadoras"}

def _carregar_dados_pedidos(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üìã Carrega dados espec√≠ficos de PEDIDOS"""
    try:
        from app import db
        from app.pedidos.models import Pedido
        
        # Query de pedidos
        query_pedidos = db.session.query(Pedido).filter(
            Pedido.expedicao >= data_limite.date()
        )
        
        # Aplicar filtros
        if analise.get("cliente_especifico") and not analise.get("correcao_usuario"):
            query_pedidos = query_pedidos.filter(
                Pedido.raz_social_red.ilike(f'%{analise["cliente_especifico"]}%')
            )
        
        pedidos = query_pedidos.order_by(Pedido.expedicao.desc()).limit(100).all()
        
        # Estat√≠sticas de pedidos
        total_pedidos = len(pedidos)
        pedidos_abertos = len([p for p in pedidos if not p.cotacao_id and not p.nf])
        pedidos_cotados = len([p for p in pedidos if p.cotacao_id and not p.nf])
        pedidos_faturados = len([p for p in pedidos if p.nf])
        valor_total = sum(float(p.valor_saldo_total or 0) for p in pedidos)
        
        return {
            "tipo_dados": "pedidos",
            "pedidos": {
                "registros": [
                    {
                        "id": p.id,
                        "num_pedido": p.num_pedido,
                        "cliente": p.raz_social_red,
                        "cnpj_cpf": p.cnpj_cpf,
                        "cidade": p.nome_cidade,
                        "uf": p.cod_uf,
                        "valor_total": float(p.valor_saldo_total or 0),
                        "peso_total": float(p.peso_total or 0),
                        "rota": p.rota,
                        "expedicao": p.expedicao.isoformat() if p.expedicao else None,
                        "agendamento": p.agendamento.isoformat() if p.agendamento else None,
                        "protocolo": p.protocolo,
                        "nf": p.nf,
                        "status": "FATURADO" if p.nf else ("COTADO" if p.cotacao_id else "ABERTO")
                    }
                    for p in pedidos
                ],
                "estatisticas": {
                    "total_pedidos": total_pedidos,
                    "pedidos_abertos": pedidos_abertos,
                    "pedidos_cotados": pedidos_cotados,
                    "pedidos_faturados": pedidos_faturados,
                    "valor_total": valor_total,
                    "percentual_faturamento": round((pedidos_faturados / total_pedidos * 100), 1) if total_pedidos > 0 else 0
                }
            },
            "registros_carregados": total_pedidos
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados de pedidos: {e}")
        return {"erro": str(e), "tipo_dados": "pedidos"}

def _carregar_dados_embarques(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üì¶ Carrega dados espec√≠ficos de EMBARQUES"""
    try:
        from app import db
        from app.embarques.models import Embarque, EmbarqueItem
        
        # Query de embarques
        query_embarques = db.session.query(Embarque).filter(
            Embarque.data_criacao >= data_limite,
            Embarque.status == 'ativo'
        )
        
        embarques = query_embarques.order_by(Embarque.numero.desc()).limit(50).all()
        
        # Estat√≠sticas
        total_embarques = len(embarques)
        embarques_sem_data = len([e for e in embarques if not e.data_embarque])
        embarques_despachados = len([e for e in embarques if e.data_embarque])
        
        return {
            "tipo_dados": "embarques",
            "embarques": {
                "registros": [
                    {
                        "id": e.id,
                        "numero": e.numero,
                        "motorista": e.motorista,
                        "placa_veiculo": e.placa_veiculo,
                        "data_criacao": e.data_criacao.isoformat() if e.data_criacao else None,
                        "data_embarque": e.data_embarque.isoformat() if e.data_embarque else None,
                        "status": "Despachado" if e.data_embarque else "Aguardando",
                        "observacoes": e.observacoes
                    }
                    for e in embarques
                ],
                "estatisticas": {
                    "total_embarques": total_embarques,
                    "embarques_despachados": embarques_despachados,
                    "embarques_aguardando": embarques_sem_data,
                    "percentual_despachado": round((embarques_despachados / total_embarques * 100), 1) if total_embarques > 0 else 0
                }
            },
            "registros_carregados": total_embarques
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados de embarques: {e}")
        return {"erro": str(e), "tipo_dados": "embarques"}

def _carregar_dados_faturamento(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üí∞ Carrega dados espec√≠ficos de FATURAMENTO"""
    try:
        from app import db
        from app.faturamento.models import RelatorioFaturamentoImportado as RelatorioImportado
        
        # Query de faturamento
        query_faturamento = db.session.query(RelatorioImportado).filter(
            RelatorioImportado.data_fatura >= data_limite.date()
        )
        
        # Aplicar filtros
        if analise.get("cliente_especifico") and not analise.get("correcao_usuario"):
            query_faturamento = query_faturamento.filter(
                RelatorioImportado.cliente.ilike(f'%{analise["cliente_especifico"]}%')
            )
        
        faturas = query_faturamento.order_by(RelatorioImportado.data_fatura.desc()).limit(100).all()
        
        # Estat√≠sticas
        total_faturas = len(faturas)
        valor_total_faturado = sum(float(f.valor_total or 0) for f in faturas)
        
        return {
            "tipo_dados": "faturamento",
            "faturamento": {
                "registros": [
                    {
                        "id": f.id,
                        "numero_nf": f.numero_nf,
                        "cliente": f.cliente,
                        "origem": f.origem,
                        "valor_total": float(f.valor_total or 0),
                        "data_fatura": f.data_fatura.isoformat() if f.data_fatura else None,
                        "incoterm": f.incoterm
                    }
                    for f in faturas
                ],
                "estatisticas": {
                    "total_faturas": total_faturas,
                    "valor_total_faturado": valor_total_faturado,
                    "ticket_medio": round(valor_total_faturado / total_faturas, 2) if total_faturas > 0 else 0
                }
            },
            "registros_carregados": total_faturas
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados de faturamento: {e}")
        return {"erro": str(e), "tipo_dados": "faturamento"}

def _carregar_dados_financeiro(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üí≥ Carrega dados espec√≠ficos de FINANCEIRO"""
    try:
        from app import db
        from app.fretes.models import DespesaExtra
        from app.monitoramento.models import PendenciaFinanceira
        
        # Despesas extras
        query_despesas = db.session.query(DespesaExtra).filter(
            DespesaExtra.data_vencimento >= data_limite.date()
        )
        
        despesas = query_despesas.order_by(DespesaExtra.data_vencimento.desc()).limit(50).all()
        
        # Pend√™ncias financeiras
        try:
            pendencias = db.session.query(PendenciaFinanceira).filter(
                PendenciaFinanceira.criado_em >= data_limite
            ).limit(50).all()
        except:
            pendencias = []  # Fallback se tabela n√£o existir
        
        # Estat√≠sticas
        total_despesas = len(despesas)
        valor_total_despesas = sum(float(d.valor_despesa or 0) for d in despesas)
        
        return {
            "tipo_dados": "financeiro",
            "financeiro": {
                "despesas_extras": [
                    {
                        "id": d.id,
                        "tipo_despesa": d.tipo_despesa,
                        "valor": float(d.valor_despesa or 0),
                        "vencimento": d.data_vencimento.isoformat() if d.data_vencimento else None,
                        "numero_documento": d.numero_documento,
                        "observacoes": d.observacoes
                    }
                    for d in despesas
                ],
                "pendencias_financeiras": [
                    {
                        "id": p.id,
                        "observacao": p.observacao,
                        "criado_em": p.criado_em.isoformat() if p.criado_em else None
                    }
                    for p in pendencias
                ],
                "estatisticas": {
                    "total_despesas": total_despesas,
                    "valor_total_despesas": valor_total_despesas,
                    "total_pendencias": len(pendencias)
                }
            },
            "registros_carregados": total_despesas + len(pendencias)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados financeiros: {e}")
        return {"erro": str(e), "tipo_dados": "financeiro"}

def _calcular_estatisticas_por_dominio(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], dominio: str) -> Dict[str, Any]:
    """üìä Calcula estat√≠sticas espec√≠ficas baseadas no dom√≠nio"""
    try:
        # Para entregas, usar a fun√ß√£o existente
        if dominio == "entregas":
            return _calcular_estatisticas_especificas(analise, filtros_usuario)
        
        # Para outros dom√≠nios, estat√≠sticas j√° est√£o inclu√≠das nos dados carregados
        return {
            "dominio": dominio,
            "periodo_analisado": f"{analise.get('periodo_dias', 30)} dias",
            "cliente_especifico": analise.get("cliente_especifico"),
            "nota": f"Estat√≠sticas espec√≠ficas inclu√≠das nos dados de {dominio}"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao calcular estat√≠sticas do dom√≠nio {dominio}: {e}")
        return {"erro": str(e), "dominio": dominio} 