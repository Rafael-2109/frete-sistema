#!/usr/bin/env python3
"""
Integra√ß√£o Claude REAL - API Anthropic
Sistema que usa o Claude verdadeiro ao inv√©s de simula√ß√£o
"""

import os
import anthropic
import logging
import re
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import json
from flask_login import current_user

logger = logging.getLogger(__name__)

class ClaudeRealIntegration:
    """Integra√ß√£o com Claude REAL da Anthropic"""
    
    def __init__(self):
        """Inicializa integra√ß√£o com Claude real"""
        self.api_key = os.getenv('ANTHROPIC_API_KEY')
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è ANTHROPIC_API_KEY n√£o configurada - usando modo simulado")
            self.client = None
            self.modo_real = False
        else:
            try:
                self.client = anthropic.Anthropic(api_key=self.api_key)
                self.modo_real = True
                logger.info("üöÄ Claude REAL conectado com sucesso!")
            except Exception as e:
                logger.error(f"‚ùå Erro ao conectar Claude real: {e}")
                self.client = None
                self.modo_real = False
        
        # Cache para evitar queries repetitivas
        self._cache = {}
        self._cache_timeout = 300  # 5 minutos
        
        # System prompt PODEROSO para Claude real
        self.system_prompt = """Voc√™ √© Claude integrado ao Sistema de Fretes de uma IND√öSTRIA QUE FATURA R$ 200 MILH√ïES/ANO. 

CONTEXTO EMPRESARIAL:
- Sistema cr√≠tico de gest√£o de fretes
- Volume alto de opera√ß√µes
- Precis√£o √© fundamental para tomada de decis√£o

IMPORTANTE - DIFERENCIA√á√ÉO DE CLIENTES:
üè¢ **ATACADOS** (m√∫ltiplos clientes): "Total Atacado", "Bento Atacado", "ATR Atacado", "MIKRO ATACADO E DISTRIBUIDOR"
üéØ **ATACAD√ÉO** (cliente espec√≠fico): Refere-se especificamente ao cliente "Atacad√£o"
üè™ **FILIAIS**: "Atacad√£o 154", "Atacad√£o 183", "Assai LJ 189", "Assai LJ 315"

DIFEREN√áA CONCEITUAL NO SISTEMA:
üöö **FRETES** = Cota√ß√µes, contratos de transporte, valores, aprova√ß√µes
üì¶ **ENTREGAS** = Monitoramento p√≥s-embarque, status de entrega, canhotos, datas realizadas
üöõ **EMBARQUES** = Despachos, envios, movimenta√ß√£o f√≠sica

FLUXO DE PEDIDOS:
1. **ABERTO**: Sem cota√ß√£o, tem data_expedicao (previs√£o), data_agenda, protocolo_agendamento
2. **COTADO**: Com embarques, data_embarque_prevista, data_agenda, protocolo_agendamento  
3. **FATURADO**: Procurar num_pedido ‚Üí RelatorioFaturamentoImportado.origem ‚Üí numero_nf ‚Üí EntregaMonitorada

DADOS DISPON√çVEIS EM CONTEXTO:
{dados_contexto_especifico}

SUAS CAPACIDADES AVAN√áADAS:
- An√°lise inteligente de dados reais
- Insights preditivos e recomenda√ß√µes estrat√©gicas
- Detec√ß√£o de padr√µes e anomalias
- C√°lculos de performance automatizados
- Compara√ß√µes temporais flex√≠veis

INSTRU√á√ïES CR√çTICAS:
1. **PRECIS√ÉO ABSOLUTA** - Dados incorretos custam milh√µes
2. **CONTEXTO ESPEC√çFICO** - Se perguntou sobre Atacad√£o, foque no Atacad√£o
3. **AN√ÅLISE TEMPORAL** - Default 7 dias, mas aceite personaliza√ß√µes (30, 60 dias, compara√ß√µes)
4. **M√âTRICAS CALCULADAS** - Inclua % entregas no prazo, atrasos m√©dios, compara√ß√µes
5. **VENDEDORES** - Mostre apenas clientes que t√™m permiss√£o
6. **INTELIG√äNCIA CONTEXTUAL** - Diferencie "atacados" de "Atacad√£o" de "filiais"

EXEMPLOS DE INTERPRETA√á√ÉO:
- "Entregas dos atacados" ‚Üí Todos clientes com "atacado" no nome
- "Entregas do Atacad√£o" ‚Üí Cliente espec√≠fico "Atacad√£o"  
- "Atacad√£o 154" ‚Üí Filial espec√≠fica do Atacad√£o
- "Como est√£o as entregas?" ‚Üí √öltimos 7 dias, oferecer outros per√≠odos

Responda sempre em portugu√™s brasileiro com precis√£o industrial."""
    
    def processar_consulta_real(self, consulta: str, user_context: Dict = None) -> str:
        """Processa consulta usando Claude REAL com contexto inteligente"""
        
        if not self.modo_real:
            return self._fallback_simulado(consulta)
        
        try:
            # Analisar consulta para contexto inteligente
            contexto_analisado = self._analisar_consulta(consulta)
            
            # Carregar dados espec√≠ficos baseados na an√°lise
            dados_contexto = self._carregar_contexto_inteligente(contexto_analisado)
            
            # Preparar mensagens para Claude real
            messages = [
                {
                    "role": "user", 
                    "content": f"""CONSULTA DO USU√ÅRIO: {consulta}

AN√ÅLISE DA CONSULTA:
{json.dumps(contexto_analisado, indent=2, ensure_ascii=False)}

DADOS ESPEC√çFICOS CARREGADOS:
{json.dumps(dados_contexto, indent=2, ensure_ascii=False)}

CONTEXTO DO USU√ÅRIO:
{json.dumps(user_context or {}, indent=2, ensure_ascii=False)}

Por favor, analise a consulta e forne√ßa uma resposta inteligente, precisa e acion√°vel usando os dados espec√≠ficos carregados para esta consulta."""
                }
            ]
            
            # Chamar Claude REAL (agora Claude 4 Sonnet!)
            response = self.client.messages.create(
                model="claude-sonnet-4-20250514",  # Claude 4 Sonnet
                max_tokens=4000,
                temperature=0.1,  # Determin√≠stico para dados cr√≠ticos
                system=self.system_prompt.format(
                    dados_contexto_especifico=self._descrever_contexto_carregado(contexto_analisado)
                ),
                messages=messages
            )
            
            resultado = response.content[0].text
            
            # Log da intera√ß√£o
            logger.info(f"‚úÖ Claude REAL (4.0) processou: '{consulta[:50]}...'")
            
            return f"""ü§ñ **CLAUDE 4 SONNET REAL** (Industrial R$ 200MM/ano)

{resultado}

---
üß† **Powered by:** Claude 4 Sonnet (Anthropic) - Modelo mais avan√ßado dispon√≠vel
üéØ **Contexto:** {contexto_analisado.get('tipo_consulta', 'Geral').title()}
üìä **Dados:** {contexto_analisado.get('periodo_dias', 7)} dias | {contexto_analisado.get('registros_carregados', 0)} registros
üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚ö° **Modo:** IA Real Industrial"""
            
        except Exception as e:
            logger.error(f"‚ùå Erro no Claude real: {e}")
            return self._fallback_simulado(consulta)
    
    def _analisar_consulta(self, consulta: str) -> Dict[str, Any]:
        """Analisa a consulta para determinar contexto espec√≠fico"""
        consulta_lower = consulta.lower()
        
        analise = {
            "consulta_original": consulta,
            "timestamp_analise": datetime.now().isoformat(),
            "tipo_consulta": "geral",
            "cliente_especifico": None,
            "periodo_dias": 7,  # Default 7 dias
            "filtro_geografico": None,
            "foco_dados": [],
            "metricas_solicitadas": []
        }
        
        # AN√ÅLISE DE CLIENTE ESPEC√çFICO
        if "atacad√£o" in consulta_lower and not re.search(r"atacad[oa]s", consulta_lower):
            analise["cliente_especifico"] = "Atacad√£o"
            analise["tipo_consulta"] = "cliente_especifico"
            
            # Verificar se √© filial espec√≠fica
            filial_match = re.search(r"atacad√£o\s*(\d+)", consulta_lower)
            if filial_match:
                analise["filial"] = filial_match.group(1)
                analise["cliente_especifico"] = f"Atacad√£o {filial_match.group(1)}"
        
        elif "assai" in consulta_lower:
            analise["cliente_especifico"] = "Assai"
            analise["tipo_consulta"] = "cliente_especifico"
            
            # Verificar filial Assai
            filial_match = re.search(r"assai\s*(?:lj\s*)?(\d+)", consulta_lower)
            if filial_match:
                analise["filial"] = filial_match.group(1)
                analise["cliente_especifico"] = f"Assai LJ {filial_match.group(1)}"
                
        elif re.search(r"atacad[oa]s", consulta_lower):
            analise["tipo_consulta"] = "grupo_atacados"
            analise["cliente_especifico"] = "GRUPO_ATACADOS"
        
        # AN√ÅLISE TEMPORAL
        if re.search(r"(\d+)\s*dias?", consulta_lower):
            dias_match = re.search(r"(\d+)\s*dias?", consulta_lower)
            analise["periodo_dias"] = int(dias_match.group(1))
        elif "30 dias" in consulta_lower or "m√™s" in consulta_lower:
            analise["periodo_dias"] = 30
        elif "60 dias" in consulta_lower or "2 meses" in consulta_lower:
            analise["periodo_dias"] = 60
        elif "semana" in consulta_lower:
            analise["periodo_dias"] = 7
            
        # AN√ÅLISE GEOGR√ÅFICA
        ufs = ["sp", "rj", "mg", "rs", "pr", "sc", "go", "df", "ba", "pe"]
        for uf in ufs:
            if f" {uf}" in consulta_lower or f" {uf.upper()}" in consulta:
                analise["filtro_geografico"] = uf.upper()
                analise["tipo_consulta"] = "geografico"
                break
        
        # AN√ÅLISE DE FOCO DOS DADOS
        if "entrega" in consulta_lower:
            analise["foco_dados"].append("entregas_monitoradas")
        if "frete" in consulta_lower:
            analise["foco_dados"].append("fretes")
        if "embarque" in consulta_lower:
            analise["foco_dados"].append("embarques")
        if "pedido" in consulta_lower:
            analise["foco_dados"].append("pedidos")
            
        # Se n√£o especificou, usar padr√£o baseado na consulta
        if not analise["foco_dados"]:
            if any(palavra in consulta_lower for palavra in ["como est√°", "status", "situa√ß√£o"]):
                analise["foco_dados"] = ["entregas_monitoradas", "embarques"]
            else:
                analise["foco_dados"] = ["entregas_monitoradas"]
        
        # M√âTRICAS SOLICITADAS
        if any(palavra in consulta_lower for palavra in ["prazo", "atraso", "pontualidade"]):
            analise["metricas_solicitadas"].append("performance_prazo")
        if any(palavra in consulta_lower for palavra in ["comparar", "compara√ß√£o", "tend√™ncia"]):
            analise["metricas_solicitadas"].append("comparacao_temporal")
        if "m√©dia" in consulta_lower:
            analise["metricas_solicitadas"].append("medias")
            
        return analise
    
    def _carregar_contexto_inteligente(self, analise: Dict[str, Any]) -> Dict[str, Any]:
        """Carrega dados espec√≠ficos baseados na an√°lise da consulta"""
        try:
            from app import db
            from app.fretes.models import Frete
            from app.embarques.models import Embarque
            from app.transportadoras.models import Transportadora
            from app.pedidos.models import Pedido
            from app.monitoramento.models import EntregaMonitorada
            from app.faturamento.models import RelatorioFaturamentoImportado
            from sqlalchemy import func, and_, or_
            
            # Data limite baseada na an√°lise
            data_limite = datetime.now() - timedelta(days=analise.get("periodo_dias", 7))
            
            contexto = {
                "analise_aplicada": analise,
                "timestamp": datetime.now().isoformat(),
                "registros_carregados": 0,
                "dados_especificos": {}
            }
            
            # FILTROS BASEADOS NO USU√ÅRIO (VENDEDOR)
            filtros_usuario = self._obter_filtros_usuario()
            
            # CARREGAR DADOS ESPEC√çFICOS POR FOCO
            if "entregas_monitoradas" in analise["foco_dados"]:
                query_entregas = db.session.query(EntregaMonitorada).filter(
                    EntregaMonitorada.data_embarque >= data_limite
                )
                
                # Aplicar filtro de cliente espec√≠fico
                if analise.get("cliente_especifico"):
                    if analise["cliente_especifico"] == "GRUPO_ATACADOS":
                        query_entregas = query_entregas.filter(
                            EntregaMonitorada.cliente.ilike('%atacado%')
                        )
                    else:
                        query_entregas = query_entregas.filter(
                            EntregaMonitorada.cliente.ilike(f'%{analise["cliente_especifico"]}%')
                        )
                
                # Aplicar filtro geogr√°fico
                if analise.get("filtro_geografico"):
                    query_entregas = query_entregas.filter(
                        EntregaMonitorada.uf == analise["filtro_geografico"]
                    )
                
                # Aplicar filtros de usu√°rio (vendedor)
                if filtros_usuario.get("vendedor_restricao"):
                    query_entregas = query_entregas.filter(
                        EntregaMonitorada.vendedor == filtros_usuario["vendedor"]
                    )
                
                entregas = query_entregas.order_by(EntregaMonitorada.data_embarque.desc()).limit(50).all()
                
                # Calcular m√©tricas se solicitado
                metricas_entregas = {}
                if "performance_prazo" in analise.get("metricas_solicitadas", []):
                    metricas_entregas = self._calcular_metricas_prazo(entregas)
                
                contexto["dados_especificos"]["entregas"] = {
                    "registros": [
                        {
                            "id": e.id,
                            "numero_nf": e.numero_nf,
                            "cliente": e.cliente,
                            "uf": e.uf,
                            "municipio": e.municipio,
                            "transportadora": e.transportadora,
                            "status_finalizacao": e.status_finalizacao,
                            "data_embarque": e.data_embarque.isoformat() if e.data_embarque else None,
                            "data_entrega_prevista": e.data_entrega_prevista.isoformat() if e.data_entrega_prevista else None,
                            "data_entrega_realizada": e.data_hora_entrega_realizada.isoformat() if e.data_hora_entrega_realizada else None,
                            "entregue": e.entregue,
                            "valor_nf": float(e.valor_nf or 0),
                            "vendedor": e.vendedor,
                            "lead_time": e.lead_time
                        }
                        for e in entregas
                    ],
                    "total_registros": len(entregas),
                    "metricas": metricas_entregas
                }
                contexto["registros_carregados"] += len(entregas)
            
            # CARREGAR FRETES SE SOLICITADO
            if "fretes" in analise["foco_dados"]:
                query_fretes = db.session.query(Frete).filter(
                    Frete.criado_em >= data_limite
                )
                
                if analise.get("cliente_especifico") and analise["cliente_especifico"] != "GRUPO_ATACADOS":
                    query_fretes = query_fretes.filter(
                        Frete.nome_cliente.ilike(f'%{analise["cliente_especifico"]}%')
                    )
                
                fretes = query_fretes.order_by(Frete.criado_em.desc()).limit(30).all()
                
                contexto["dados_especificos"]["fretes"] = {
                    "registros": [
                        {
                            "id": f.id,
                            "cliente": f.nome_cliente,
                            "uf_destino": f.uf_destino,
                            "valor_cotado": float(f.valor_cotado or 0),
                            "valor_considerado": float(f.valor_considerado or 0),
                            "peso_total": float(f.peso_total or 0),
                            "status": f.status,
                            "data_criacao": f.criado_em.isoformat() if f.criado_em else None
                        }
                        for f in fretes
                    ],
                    "total_registros": len(fretes)
                }
                contexto["registros_carregados"] += len(fretes)
            
            # ESTAT√çSTICAS GERAIS (CACHE)
            stats_key = f"stats_{analise.get('cliente_especifico', 'geral')}_{analise.get('periodo_dias', 7)}"
            if stats_key not in self._cache or (datetime.now().timestamp() - self._cache[stats_key]["timestamp"]) > self._cache_timeout:
                estatisticas = self._calcular_estatisticas_especificas(analise, filtros_usuario)
                self._cache[stats_key] = {
                    "data": estatisticas,
                    "timestamp": datetime.now().timestamp()
                }
            else:
                estatisticas = self._cache[stats_key]["data"]
            
            contexto["estatisticas"] = estatisticas
            
            return contexto
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar contexto inteligente: {e}")
            return {"erro": str(e), "timestamp": datetime.now().isoformat()}
    
    def _obter_filtros_usuario(self) -> Dict[str, Any]:
        """Obt√©m filtros espec√≠ficos do usu√°rio atual"""
        filtros = {
            "vendedor_restricao": False,
            "vendedor": None,
            "perfil": "admin"
        }
        
        try:
            if hasattr(current_user, 'vendedor') and current_user.vendedor:
                filtros["vendedor_restricao"] = True
                filtros["vendedor"] = current_user.nome
                filtros["perfil"] = "vendedor"
        except:
            pass  # Se n√£o conseguir identificar, usar padr√£o admin
            
        return filtros
    
    def _calcular_metricas_prazo(self, entregas: List) -> Dict[str, Any]:
        """Calcula m√©tricas de performance de prazo"""
        if not entregas:
            return {}
        
        total_entregas = len(entregas)
        entregas_realizadas = [e for e in entregas if e.data_hora_entrega_realizada]
        entregas_no_prazo = [
            e for e in entregas_realizadas 
            if e.data_entrega_prevista and e.data_hora_entrega_realizada 
            and e.data_hora_entrega_realizada.date() <= e.data_entrega_prevista
        ]
        
        return {
            "total_entregas": total_entregas,
            "entregas_realizadas": len(entregas_realizadas),
            "entregas_no_prazo": len(entregas_no_prazo),
            "percentual_no_prazo": round((len(entregas_no_prazo) / len(entregas_realizadas) * 100), 1) if entregas_realizadas else 0,
            "media_lead_time": round(sum(e.lead_time for e in entregas if e.lead_time) / len([e for e in entregas if e.lead_time]), 1) if any(e.lead_time for e in entregas) else None
        }
    
    def _calcular_estatisticas_especificas(self, analise: Dict[str, Any], filtros_usuario: Dict[str, Any]) -> Dict[str, Any]:
        """Calcula estat√≠sticas espec√≠ficas para o contexto"""
        try:
            from app import db
            from app.monitoramento.models import EntregaMonitorada
            from app.fretes.models import Frete
            
            data_limite = datetime.now() - timedelta(days=analise.get("periodo_dias", 7))
            
            # Base query para entregas
            query_base = db.session.query(EntregaMonitorada).filter(
                EntregaMonitorada.data_embarque >= data_limite
            )
            
            # Aplicar filtros espec√≠ficos
            if analise.get("cliente_especifico"):
                if analise["cliente_especifico"] == "GRUPO_ATACADOS":
                    query_base = query_base.filter(EntregaMonitorada.cliente.ilike('%atacado%'))
                else:
                    query_base = query_base.filter(EntregaMonitorada.cliente.ilike(f'%{analise["cliente_especifico"]}%'))
            
            if filtros_usuario.get("vendedor_restricao"):
                query_base = query_base.filter(EntregaMonitorada.vendedor == filtros_usuario["vendedor"])
            
            total_entregas = query_base.count()
            entregas_entregues = query_base.filter(EntregaMonitorada.status_finalizacao == 'Entregue').count()
            entregas_pendentes = query_base.filter(EntregaMonitorada.status_finalizacao.in_(['Pendente', 'Em tr√¢nsito'])).count()
            
            return {
                "periodo_analisado": f"{analise.get('periodo_dias', 7)} dias",
                "total_entregas": total_entregas,
                "entregas_entregues": entregas_entregues,
                "entregas_pendentes": entregas_pendentes,
                "percentual_entregues": round((entregas_entregues / total_entregas * 100), 1) if total_entregas > 0 else 0,
                "cliente_especifico": analise.get("cliente_especifico"),
                "filtro_geografico": analise.get("filtro_geografico"),
                "restricao_vendedor": filtros_usuario.get("vendedor_restricao", False)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao calcular estat√≠sticas: {e}")
            return {"erro": str(e)}
    
    def _descrever_contexto_carregado(self, analise: Dict[str, Any]) -> str:
        """Descreve o contexto carregado para o prompt"""
        descricao = []
        
        if analise.get("cliente_especifico"):
            descricao.append(f"- Dados espec√≠ficos do cliente: {analise['cliente_especifico']}")
        
        if analise.get("periodo_dias"):
            descricao.append(f"- Per√≠odo: √öltimos {analise['periodo_dias']} dias")
        
        if analise.get("filtro_geografico"):
            descricao.append(f"- Filtro geogr√°fico: {analise['filtro_geografico']}")
        
        if analise.get("foco_dados"):
            descricao.append(f"- Foco dos dados: {', '.join(analise['foco_dados'])}")
        
        if analise.get("metricas_solicitadas"):
            descricao.append(f"- M√©tricas calculadas: {', '.join(analise['metricas_solicitadas'])}")
        
        return "\n".join(descricao) if descricao else "- Dados gerais do sistema"
    
    def _get_tools_description(self) -> str:
        """Descri√ß√£o das ferramentas dispon√≠veis"""
        return """
FERRAMENTAS AVAN√áADAS DISPON√çVEIS:
1. An√°lise contextual inteligente - Detecta automaticamente cliente, per√≠odo, geografia
2. Filtros por permiss√£o - Vendedores veem apenas seus clientes
3. M√©tricas calculadas - Performance, atrasos, compara√ß√µes temporais
4. Cache inteligente - Estat√≠sticas otimizadas para consultas frequentes
5. Diferencia√ß√£o sem√¢ntica - Distingue "atacados" vs "Atacad√£o" vs filiais
6. An√°lises temporais flex√≠veis - 7, 30, 60 dias ou per√≠odos customizados
7. Correla√ß√£o de dados - Liga pedidos ‚Üí faturamento ‚Üí monitoramento
"""
    
    def _fallback_simulado(self, consulta: str) -> str:
        """Fallback quando Claude real n√£o est√° dispon√≠vel"""
        return f"""ü§ñ **MODO SIMULADO** (Claude Real n√£o dispon√≠vel)

Consulta recebida: "{consulta}"

‚ö†Ô∏è **Para ativar Claude REAL:**
1. Configure ANTHROPIC_API_KEY nas vari√°veis de ambiente
2. Obtenha chave em: https://console.anthropic.com/
3. Reinicie o sistema

üí° **Com Claude 4 Sonnet Real voc√™ ter√°:**
- Intelig√™ncia de R$ 200MM/ano industrial
- An√°lises contextuais precisas
- Diferencia√ß√£o inteligente de clientes
- M√©tricas calculadas automaticamente
- Performance otimizada com cache

üîÑ **Por enquanto, usando sistema b√°sico...**"""

# Inst√¢ncia global
claude_integration = ClaudeRealIntegration()

def processar_com_claude_real(consulta: str, user_context: Dict = None) -> str:
    """Fun√ß√£o p√∫blica para processar com Claude real"""
    return claude_integration.processar_consulta_real(consulta, user_context) 