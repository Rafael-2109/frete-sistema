#!/usr/bin/env python3
"""
Integra√ß√£o Claude REAL - API Anthropic
Sistema que usa o Claude verdadeiro ao inv√©s de simula√ß√£o
"""

import os
import anthropic
import logging
import re
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta, date
from flask_login import current_user
from sqlalchemy import func, and_, or_, text
from app import db
from .sistema_real_data import get_sistema_real_data
import json

# Configurar logger
logger = logging.getLogger(__name__)

# Importar sistema de cache Redis
try:
    from app.utils.redis_cache import redis_cache, cache_aside, cached_query
    REDIS_DISPONIVEL = redis_cache.disponivel
    logger.info(f"üöÄ Redis Cache: {'Ativo' if REDIS_DISPONIVEL else 'Inativo'}")
except ImportError:
    REDIS_DISPONIVEL = False
    logger.warning("‚ö†Ô∏è Redis Cache n√£o dispon√≠vel - usando cache em mem√≥ria")

# Importar sistema de contexto conversacional
try:
    from .conversation_context import init_conversation_context, get_conversation_context
    # Inicializar contexto conversacional
    if REDIS_DISPONIVEL:
        init_conversation_context(redis_cache)
        logger.info("üß† Sistema de Contexto Conversacional inicializado com Redis")
    else:
        init_conversation_context()
        logger.info("üß† Sistema de Contexto Conversacional inicializado (mem√≥ria)")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Sistema de Contexto Conversacional n√£o dispon√≠vel: {e}")

# üè¢ SISTEMA DE GRUPOS EMPRESARIAIS
from app.utils.grupo_empresarial import GrupoEmpresarialDetector, detectar_grupo_empresarial

# Adicionar import do Claude Development AI
from .claude_development_ai import get_claude_development_ai, init_claude_development_ai

class ClaudeRealIntegration:
    """Integra√ß√£o com Claude REAL da Anthropic"""
    
    def set_enhanced_claude(self, enhanced_claude):
        """Injeta o Enhanced Claude ap√≥s a cria√ß√£o para evitar circular import"""
        self.enhanced_claude = enhanced_claude
        logger.info("‚úÖ Enhanced Claude injetado com sucesso")
    
    def __init__(self):
        """Inicializa integra√ß√£o com Claude real"""
        self.api_key = os.getenv('ANTHROPIC_API_KEY')
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è ANTHROPIC_API_KEY n√£o configurada - usando modo simulado")
            logger.warning("üí° Configure a vari√°vel de ambiente ANTHROPIC_API_KEY")
            self.client = None
            self.modo_real = False
        else:
            try:
                self.client = anthropic.Anthropic(api_key=self.api_key)
                self.modo_real = True
                logger.info("üöÄ Claude REAL conectado com sucesso!")
                
                # Testar conex√£o
                test_response = self.client.messages.create(
                    model="claude-sonnet-4-20250514",  # Claude 4 Sonnet - Modelo mais avan√ßado
                    max_tokens=8192,
                    messages=[{"role": "user", "content": "teste"}]
                )
                logger.info("‚úÖ Conex√£o com Claude API validada!")
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao conectar Claude real: {e}")
                self.client = None
                self.modo_real = False
        
        # Cache para evitar queries repetitivas (REDIS OU MEM√ìRIA)
        if REDIS_DISPONIVEL:
            self._cache = redis_cache
            self._cache_timeout = 300  # 5 minutos
            logger.info("‚úÖ Usando Redis Cache para consultas Claude")
        else:
            self._cache = {}
            self._cache_timeout = 300  # 5 minutos fallback
            logger.info("‚ö†Ô∏è Usando cache em mem√≥ria (fallback)")
        
        # üöÄ SISTEMAS AVAN√áADOS DE IA INDUSTRIAL - INTEGRA√á√ÉO COMPLETA
        try:
            from .multi_agent_system import get_multi_agent_system
            self.multi_agent_system = get_multi_agent_system(self.client)
            logger.info("ü§ñ Sistema Multi-Agente carregado com sucesso!")
            
            # Sistema Avan√ßado Completo (Metacognitivo + Loop Sem√¢ntico + Valida√ß√£o Estrutural)
            from .advanced_integration import get_advanced_ai_integration
            self.advanced_ai_system = get_advanced_ai_integration(self.client)
            logger.info("üöÄ Sistema IA Avan√ßado (Metacognitivo + Loop Sem√¢ntico) carregado!")
            
            # üî¨ NLP AVAN√áADO com SpaCy + NLTK + FuzzyWuzzy (338 linhas)
            from .nlp_enhanced_analyzer import get_nlp_enhanced_analyzer
            self.nlp_analyzer = get_nlp_enhanced_analyzer()
            logger.info("üî¨ Sistema NLP Avan√ßado (SpaCy + NLTK + Fuzzy) carregado!")
            
            # üß† ANALISADOR INTELIGENTE DE CONSULTAS (1.058 linhas!)
            from .intelligent_query_analyzer import get_intelligent_query_analyzer
            self.intelligent_analyzer = get_intelligent_query_analyzer()
            logger.info("üß† Analisador Inteligente (1.058 linhas) carregado!")
            
            # üöÄ ENHANCED CLAUDE INTEGRATION - Claude Otimizado
            # Ser√° injetado posteriormente via set_enhanced_claude() para evitar circular import
            self.enhanced_claude = None
            logger.info("‚ö†Ô∏è Enhanced Claude ser√° injetado posteriormente")
            
            # üí° SUGGESTION ENGINE COMPLETO (534 linhas)
            from .suggestion_engine import get_suggestion_engine
            self.suggestion_engine = get_suggestion_engine()
            logger.info("üí° Suggestion Engine (534 linhas) carregado!")
            
            # ü§ñ MODELOS ML REAIS (379 linhas) - Predi√ß√£o + Anomalia
            from app.utils.ml_models_real import get_ml_models_system
            self.ml_models = get_ml_models_system()
            logger.info("ü§ñ Modelos ML Reais (predi√ß√£o + anomalia) carregados!")
            
            # üßë‚Äçü§ù‚Äçüßë HUMAN-IN-THE-LOOP LEARNING 
            from .human_in_loop_learning import get_human_learning_system
            self.human_learning = get_human_learning_system()
            logger.info("üßë‚Äçü§ù‚Äçüßë Human-in-the-Loop Learning (Sistema √ìrf√£o Cr√≠tico) carregado!")
            
            # üõ°Ô∏è INPUT VALIDATOR (Sistema de Valida√ß√£o)
            from .input_validator import InputValidator
            self.input_validator = InputValidator()
            logger.info("üõ°Ô∏è Input Validator (Valida√ß√£o de Entrada) carregado!")
            
            # ‚öôÔ∏è AI CONFIGURATION (Sistema de Configura√ß√£o AI √ìrf√£o)
            try:
                import config_ai
                if config_ai.AIConfig.validate_config():
                    self.ai_config = config_ai.AIConfig()
                    logger.info("‚öôÔ∏è AI Configuration (Sistema √ìrf√£o) carregado e validado!")
                else:
                    self.ai_config = None
                    logger.warning("‚ö†Ô∏è AI Configuration n√£o passou na valida√ß√£o")
            except ImportError:
                self.ai_config = None
                logger.warning("‚ö†Ô∏è config_ai.py n√£o encontrado")
            
            # üìä DATA ANALYZER 
            from .data_analyzer import get_vendedor_analyzer, get_geral_analyzer
            self.vendedor_analyzer = get_vendedor_analyzer()
            self.geral_analyzer = get_geral_analyzer()
            logger.info("üìä Data Analyzer (VendedorDataAnalyzer + GeralDataAnalyzer) carregado!")
            
            # üö® ALERT ENGINE 
            from .alert_engine import get_alert_engine
            self.alert_engine = get_alert_engine()
            logger.info("üö® Alert Engine (Sistema de Alertas) carregado!")
            
            # üó∫Ô∏è MAPEAMENTO SEM√ÇNTICO 
            from .mapeamento_semantico import get_mapeamento_semantico
            self.mapeamento_semantico = get_mapeamento_semantico()
            logger.info("üó∫Ô∏è Mapeamento Sem√¢ntico (742 linhas) carregado!")
            
            # üîó MCP CONNECTOR 
            from .mcp_connector import MCPSistemaOnline
            self.mcp_connector = MCPSistemaOnline()
            logger.info("üîó MCP Connector (Sistema Online) carregado!")
            
            # üåê API HELPER (√ìRF√ÉO DE UTILS!)
            from app.utils.api_helper import get_system_alerts
            self.system_alerts = get_system_alerts()
            logger.info("üåê API Helper (System Alerts) carregado!")
            
            # üìã AI LOGGER 
            from app.utils.ai_logging import ai_logger, AILogger
            self.ai_logger = ai_logger
            logger.info("üìã AI Logger (Sistema de Logging IA/ML - 543 linhas) carregado!")
            
            # üß† INTELLIGENT CACHE 
            try:
                from app.utils.redis_cache import intelligent_cache
                self.intelligent_cache = intelligent_cache
                logger.info("üß† Intelligent Cache (Cache Categorizado Avan√ßado) carregado!")
            except ImportError:
                logger.warning("‚ö†Ô∏è Intelligent Cache n√£o dispon√≠vel - usando cache b√°sico")
                self.intelligent_cache = None
            
            # üîç Claude Project Scanner (Sistema de Descoberta Din√¢mica)
            try:
                from .claude_project_scanner import ClaudeProjectScanner
                self.project_scanner = ClaudeProjectScanner()
                logger.info("üîç Claude Project Scanner (Descoberta Din√¢mica) carregado!")
            except ImportError:
                logger.warning("‚ö†Ô∏è Claude Project Scanner n√£o dispon√≠vel")
                self.project_scanner = None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Sistemas Avan√ßados n√£o dispon√≠veis: {e}")
            self.multi_agent_system = None
            self.advanced_ai_system = None
            self.nlp_analyzer = None
            self.intelligent_analyzer = None
            self.enhanced_claude = None
            self.suggestion_engine = None
            self.ml_models = None
            self.human_learning = None
            self.input_validator = None
            self.ai_config = None
            self.vendedor_analyzer = None
            self.geral_analyzer = None
            self.alert_engine = None
            self.mapeamento_semantico = None
            self.mcp_connector = None
            self.system_alerts = None
            self.ai_logger = None
            self.intelligent_cache = None

        # System prompt honesto sobre capacidades reais
        sistema_real = get_sistema_real_data()
        self.system_prompt = """Voc√™ √© um assistente AI integrado ao Sistema de Fretes.

IMPORTANTE - Minhas capacidades REAIS:
- Tenho acesso a DADOS do banco (entregas, pedidos, fretes, etc) quando fornecidos
- POSSO LER ARQUIVOS do sistema atrav√©s do Project Scanner
- Posso DESCOBRIR a estrutura completa do projeto dinamicamente
- Posso CRIAR c√≥digo novo quando solicitado
- Posso ANALISAR c√≥digo que voc√™ compartilhar ou que eu ler
- Posso responder sobre os dados que recebo do sistema

Sistema: Flask/Python com PostgreSQL
M√≥dulos: pedidos, fretes, embarques, monitoramento, carteira (gest√£o de pedidos), transportadoras, portaria

Quando solicitado, posso ler arquivos do projeto para entender melhor o c√≥digo."""

    
    def processar_consulta_real(self, consulta: str, user_context: Optional[Dict] = None) -> str:
        """Processa consulta usando Claude REAL com contexto inteligente e MEM√ìRIA CONVERSACIONAL + REFLEX√ÉO AVAN√áADA"""
        
        if not self.modo_real:
            return self._fallback_simulado(consulta)
        
        # üß† SISTEMA DE REFLEX√ÉO AVAN√áADA (SIMILAR AO CURSOR)
        try:
            return self._processar_com_reflexao_avancada(consulta, user_context)
        except Exception as e:
            logger.error(f"‚ùå Erro no sistema de reflex√£o: {e}")
            # Fallback para processamento padr√£o
            return self._processar_consulta_padrao(consulta, user_context)
    
    def _processar_com_reflexao_avancada(self, consulta: str, user_context: Optional[Dict] = None) -> str:
        """üß† SISTEMA DE REFLEX√ÉO AVAN√áADA - SIMILAR AO CURSOR"""
        
        # üöÄ FASE 1: AN√ÅLISE INICIAL
        logger.info("üß† FASE 1: An√°lise inicial da consulta")
        analise_inicial = self._analisar_consulta_profunda(consulta)
        
        # üéØ FASE 2: PRIMEIRA TENTATIVA
        logger.info("üéØ FASE 2: Primeira tentativa de resposta")
        primeira_resposta = self._gerar_resposta_inicial(consulta, analise_inicial, user_context)
        
        # üîç FASE 3: AUTO-AVALIA√á√ÉO
        logger.info("üîç FASE 3: Auto-avalia√ß√£o da resposta")
        qualidade = self._avaliar_qualidade_resposta(consulta, primeira_resposta, analise_inicial)
        
        # üöÄ FASE 4: REFLEX√ÉO E MELHORIA (SE NECESS√ÅRIO)
        if qualidade['score'] < 0.7:  # Se qualidade < 70%
            logger.info(f"üîÑ FASE 4: Reflex√£o ativada (qualidade: {qualidade['score']:.1%})")
            resposta_melhorada = self._melhorar_resposta(consulta, primeira_resposta, qualidade, user_context)
            
            # üéØ FASE 5: VALIDA√á√ÉO FINAL
            logger.info("‚úÖ FASE 5: Valida√ß√£o final")
            return self._validar_resposta_final(resposta_melhorada, analise_inicial)
        else:
            logger.info(f"‚úÖ Resposta aprovada na primeira tentativa (qualidade: {qualidade['score']:.1%})")
            return primeira_resposta
    
    def _analisar_consulta_profunda(self, consulta: str) -> Dict[str, Any]:
        """üß† An√°lise profunda da consulta (similar ao Cursor)"""
        return {
            'tipo': 'dados' if any(palavra in consulta.lower() for palavra in ['entregas', 'fretes', 'pedidos']) else 'desenvolvimento',
            'complexidade': 'alta' if len(consulta.split()) > 10 else 'media',
            'contexto_necessario': True if any(palavra in consulta.lower() for palavra in ['cliente', 'per√≠odo', 'comparar']) else False,
            'ferramentas_necessarias': ['database', 'excel'] if 'excel' in consulta.lower() else ['database'],
            'confianca_interpretacao': 0.9 if len(consulta.split()) > 3 else 0.6
        }
    
    def _gerar_resposta_inicial(self, consulta: str, analise: Dict[str, Any], user_context: Optional[Dict] = None) -> str:
        """üéØ Gera resposta inicial otimizada"""
        # Usar o sistema existente mas com configura√ß√µes otimizadas
        return self._processar_consulta_padrao(consulta, user_context)
    
    def _avaliar_qualidade_resposta(self, consulta: str, resposta: str, analise: Dict[str, Any]) -> Dict[str, Any]:
        """üîç Avalia qualidade da resposta (similar ao Cursor)"""
        score = 0.8  # Base score
        
        # Crit√©rios de avalia√ß√£o
        if len(resposta) < 100:
            score -= 0.2  # Resposta muito curta
        
        if 'erro' in resposta.lower():
            score -= 0.3  # Cont√©m erro
        
        if 'dados' in analise['tipo'] and 'total' not in resposta.lower():
            score -= 0.1  # Falta estat√≠sticas
        
        return {
            'score': max(0.0, min(1.0, score)),
            'criterios': {
                'completude': 0.8,
                'precisao': 0.9,
                'relevancia': 0.8
            }
        }
    
    def _melhorar_resposta(self, consulta: str, resposta_inicial: str, qualidade: Dict[str, Any], user_context: Optional[Dict] = None) -> str:
        """üöÄ Melhora resposta com reflex√£o"""
        try:
            # Gerar uma segunda tentativa com contexto da primeira
            prompt_reflexao = f"""
            Consulta original: {consulta}
            
            Primeira resposta: {resposta_inicial}
            
            Problemas identificados: {qualidade['criterios']}
            
            Melhore a resposta considerando:
            1. Seja mais espec√≠fico e detalhado
            2. Inclua dados quantitativos quando poss√≠vel
            3. Forne√ßa contexto relevante
            4. Certifique-se de responder completamente √† pergunta
            """
            
            response = self.client.messages.create(
                model="claude-sonnet-4-20250514",
                max_tokens=8192,
                temperature=0.6,  # Ligeiramente mais criativo para melhorias
                messages=[{"role": "user", "content": prompt_reflexao}]
            )
            
            return response.content[0].text
            
        except Exception as e:
            logger.error(f"‚ùå Erro na melhoria da resposta: {e}")
            return resposta_inicial
    
    def _validar_resposta_final(self, resposta: str, analise: Dict[str, Any]) -> str:
        """‚úÖ Valida√ß√£o final da resposta"""
        # Adicionar timestamp e fonte
        timestamp = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        
        return f"""{resposta}

---
üß† **Processado com Sistema de Reflex√£o Avan√ßada**
üïí **Timestamp:** {timestamp}
‚ö° **Fonte:** Claude 4 Sonnet + An√°lise Profunda
üéØ **Qualidade:** Otimizada por m√∫ltiplas valida√ß√µes"""

    def _processar_consulta_padrao(self, consulta: str, user_context: Optional[Dict] = None) -> str:
        """üìã Processamento padr√£o (m√©todo original)"""
        
        if not self.modo_real:
            return self._fallback_simulado(consulta)
        
        # üß† AUTONOMIA VERDADEIRA - PRIORIDADE M√ÅXIMA
        try:
            from .true_free_mode import is_truly_autonomous, claude_autonomous_query
            if is_truly_autonomous():
                logger.info("üß† AUTONOMIA VERDADEIRA ATIVA - Claude decide TUDO sozinho")
                # Claude tem controle total das configura√ß√µes
                return claude_autonomous_query(consulta, user_context or {})
        except ImportError:
            logger.debug("üîç true_free_mode n√£o dispon√≠vel")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na autonomia verdadeira: {e}")
        
        # üöÄ MODO ADMINISTRADOR LIVRE ESTRUTURADO - DETEC√á√ÉO AUTOM√ÅTICA
        try:
            from .admin_free_mode import get_admin_free_mode
            
            free_mode = get_admin_free_mode()
            if free_mode.is_admin_user() and free_mode.mode_enabled:
                logger.info("üöÄ MODO ADMINISTRADOR LIVRE ATIVO - Aplicando configura√ß√µes otimizadas")
                
                # Auto-configurar para a consulta espec√≠fica
                optimal_config = free_mode.auto_configure_for_query(consulta, user_context or {})
                
                # Aplicar configura√ß√µes do modo livre
                if user_context:
                    user_context.update({
                        'admin_free_mode': True,
                        'dynamic_config': optimal_config,
                        'unlimited_access': True,
                        'experimental_features': True
                    })
                else:
                    user_context = {
                        'admin_free_mode': True,
                        'dynamic_config': optimal_config,
                        'unlimited_access': True,
                        'experimental_features': True
                    }
                
                # Log da configura√ß√£o aplicada
                logger.info(f"üß† Configura√ß√£o otimizada aplicada: {optimal_config['max_tokens']} tokens, temp: {optimal_config['temperature']}")
                
                # Pular valida√ß√µes restritivas quando em modo livre
                if optimal_config.get('validation_level') == 'minimal':
                    logger.info("üîì Valida√ß√µes m√≠nimas aplicadas - Modo livre ativo")
                    # Continuar processamento sem valida√ß√µes restritivas
                else:
                    # Aplicar valida√ß√µes normais
                    if self.input_validator:
                        valid, error_msg = self.input_validator.validate_query(consulta)
                        if not valid:
                            logger.warning(f"üõ°Ô∏è CONSULTA INV√ÅLIDA: {error_msg}")
                            return f"‚ùå **Erro de Valida√ß√£o**: {error_msg}\n\nPor favor, reformule sua consulta seguindo as diretrizes de seguran√ßa."
            else:
                # Modo padr√£o - aplicar valida√ß√µes normais
                if self.input_validator:
                    valid, error_msg = self.input_validator.validate_query(consulta)
                    if not valid:
                        logger.warning(f"üõ°Ô∏è CONSULTA INV√ÅLIDA: {error_msg}")
                        return f"‚ùå **Erro de Valida√ß√£o**: {error_msg}\n\nPor favor, reformule sua consulta seguindo as diretrizes de seguran√ßa."
        
        except ImportError:
            logger.debug("‚ö†Ô∏è Admin Free Mode n√£o dispon√≠vel - usando modo padr√£o")
            # Aplicar valida√ß√µes normais
            if self.input_validator:
                valid, error_msg = self.input_validator.validate_query(consulta)
                if not valid:
                    logger.warning(f"üõ°Ô∏è CONSULTA INV√ÅLIDA: {error_msg}")
                    return f"‚ùå **Erro de Valida√ß√£o**: {error_msg}\n\nPor favor, reformule sua consulta seguindo as diretrizes de seguran√ßa."
        
        except Exception as e:
            logger.error(f"‚ùå Erro no Admin Free Mode: {e} - usando modo padr√£o")
            # Aplicar valida√ß√µes normais
            if self.input_validator:
                valid, error_msg = self.input_validator.validate_query(consulta)
                if not valid:
                    logger.warning(f"üõ°Ô∏è CONSULTA INV√ÅLIDA: {error_msg}")
                    return f"‚ùå **Erro de Valida√ß√£o**: {error_msg}\n\nPor favor, reformule sua consulta seguindo as diretrizes de seguran√ßa."
        
        # ü§ñ AUTO COMMAND PROCESSOR - DETEC√á√ÉO E EXECU√á√ÉO DE COMANDOS AUTOM√ÅTICOS
        try:
            from .auto_command_processor import get_auto_processor
            auto_processor = get_auto_processor()
            
            if auto_processor:
                # Detectar se √© um comando autom√°tico
                comando_detectado, parametros = auto_processor.detect_command(consulta)
                
                if comando_detectado:
                    logger.info(f"ü§ñ COMANDO AUTOM√ÅTICO DETECTADO: {comando_detectado} - {parametros}")
                    
                    # Executar comando automaticamente
                    sucesso, resultado_comando, dados_comando = auto_processor.execute_command(comando_detectado, parametros)
                    
                    if sucesso:
                        logger.info(f"‚úÖ Comando autom√°tico executado com sucesso: {comando_detectado}")
                        
                        # Formatar resposta do comando para o chat
                        resposta_formatada = f"""ü§ñ **CLAUDE AI - AUTONOMIA TOTAL**

{resultado_comando}

---
ü§ñ **Comando Executado:** {comando_detectado}
üéØ **Par√¢metros:** {parametros}
üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚ö° **Fonte:** Auto Command Processor + Claude AI"""

                        # Adicionar ao contexto conversacional
                        user_id = str(user_context.get('user_id', 'anonymous')) if user_context else 'anonymous'
                        context_manager = get_conversation_context()
                        if context_manager:
                            metadata = {
                                'tipo': 'comando_automatico',
                                'comando': comando_detectado,
                                'parametros': parametros,
                                'dados_comando': dados_comando
                            }
                            context_manager.add_message(user_id, 'user', consulta, metadata)
                            context_manager.add_message(user_id, 'assistant', resposta_formatada, metadata)
                            logger.info(f"üß† Comando autom√°tico adicionado ao contexto para usu√°rio {user_id}")
                        
                        return resposta_formatada
                    else:
                        logger.warning(f"‚ùå Comando autom√°tico falhou: {resultado_comando}")
                        # Em caso de falha, continuar com processamento normal
                        
        except ImportError:
            logger.debug("‚ö†Ô∏è Auto Command Processor n√£o dispon√≠vel")
        except Exception as e:
            logger.error(f"‚ùå Erro no Auto Command Processor: {e}")
            # Em caso de erro, continuar com processamento normal
        
        # üß† SISTEMA DE CONTEXTO CONVERSACIONAL - DEFINIR NO IN√çCIO
        user_id = str(user_context.get('user_id', 'anonymous')) if user_context else 'anonymous'
        context_manager = get_conversation_context()
        
        # üß† DETEC√á√ÉO DE CONSULTAS SOBRE MEM√ìRIA VITAL√çCIA/APRENDIZADO
        consulta_lower = consulta.lower()
        if any(termo in consulta_lower for termo in ['memoria vitalicia', 'mem√≥ria vital√≠cia', 
                                                      'aprendizado', 'conhecimento armazenado',
                                                      'o que aprendeu', 'o que voce aprendeu',
                                                      'o que tem guardado', 'memoria guardada',
                                                      'padr√µes aprendidos', 'historico de aprendizado']):
            logger.info("üß† CONSULTA SOBRE MEM√ìRIA VITAL√çCIA detectada")
            
            # Usar sistema de aprendizado vital√≠cio
            from .lifelong_learning import get_lifelong_learning
            lifelong = get_lifelong_learning()
            
            # Obter estat√≠sticas de aprendizado
            stats = lifelong.obter_estatisticas_aprendizado()
            total_padroes = stats.get('total_padroes', 0)
            total_mapeamentos = stats.get('total_mapeamentos', 0)
            total_grupos = stats.get('total_grupos', 0)
            ultima_atualizacao = stats.get('ultima_atualizacao', 'N/A')
            
            # Obter alguns exemplos de padr√µes aprendidos
            padroes_exemplos = []
            try:
                # Buscar padr√µes diretamente via SQL (n√£o existe classe AILearningPattern)
                padroes = db.session.execute(
                    text("""
                        SELECT consulta_original, interpretacao_inicial, confianca
                        FROM ai_learning_history
                        WHERE interpretacao_inicial IS NOT NULL
                        ORDER BY criado_em DESC
                        LIMIT 5
                    """)
                ).fetchall()
                
                for padrao in padroes:
                    try:
                        interpretacao = json.loads(padrao.interpretacao_inicial) if padrao.interpretacao_inicial else {}
                        padroes_exemplos.append({
                            'consulta': padrao.consulta_original[:200] + '...' if len(padrao.consulta_original) > 50 else padrao.consulta_original,
                            'interpretacao': interpretacao,
                            'confianca': padrao.confianca or 0.8
                        })
                    except:
                        pass
            except Exception as e:
                logger.error(f"Erro ao buscar padr√µes: {e}")
            
            # Buscar grupos empresariais conhecidos
            grupos_conhecidos = []
            try:
                # Buscar grupos diretamente via SQL (n√£o existe classe AIGrupoEmpresarialMapping)
                grupos = db.session.execute(
                    text("""
                        SELECT nome_grupo, tipo_negocio, cnpj_prefixos
                        FROM ai_grupos_empresariais
                        WHERE ativo = TRUE
                        ORDER BY criado_em DESC
                        LIMIT 100
                    """)
                ).fetchall()
                
                for grupo in grupos:
                    try:
                        cnpjs = grupo.cnpj_prefixos if isinstance(grupo.cnpj_prefixos, list) else []
                        grupos_conhecidos.append({
                            'nome': grupo.nome_grupo,
                            'tipo': grupo.tipo_negocio,
                            'cnpjs': cnpjs[:2] if cnpjs else []  # Primeiros 2 CNPJs
                        })
                    except:
                        pass
            except Exception as e:
                logger.error(f"Erro ao buscar grupos: {e}")
            
            # Montar resposta detalhada sobre mem√≥ria vital√≠cia
            resultado_memoria = f"""ü§ñ **CLAUDE 4 SONNET REAL**

üß† **MEM√ìRIA VITAL√çCIA DO SISTEMA**

Aqui est√° o que tenho armazenado no meu sistema de aprendizado cont√≠nuo:

üìä **ESTAT√çSTICAS GERAIS**:
‚Ä¢ **Total de Padr√µes Aprendidos**: {total_padroes}
‚Ä¢ **Mapeamentos Cliente-Empresa**: {total_mapeamentos}
‚Ä¢ **Grupos Empresariais Conhecidos**: {total_grupos}
‚Ä¢ **√öltima Atualiza√ß√£o**: {ultima_atualizacao}

üîç **EXEMPLOS DE PADR√ïES APRENDIDOS** (√∫ltimos 5):
"""
            
            if padroes_exemplos:
                for i, padrao in enumerate(padroes_exemplos, 1):
                    resultado_memoria += f"""
{i}. **Consulta**: "{padrao['consulta']}"
   ‚Ä¢ **Interpreta√ß√£o**: {padrao['interpretacao']}
   ‚Ä¢ **Confian√ßa**: {padrao['confianca']:.1%}"""
            else:
                resultado_memoria += "\n*Nenhum padr√£o espec√≠fico carregado no momento*"
            
            resultado_memoria += "\n\nüè¢ **GRUPOS EMPRESARIAIS CONHECIDOS**:\n"
            
            if grupos_conhecidos:
                for grupo in grupos_conhecidos[:10]:  # Mostrar at√© 10 grupos
                    cnpjs_str = ', '.join(grupo['cnpjs']) if grupo['cnpjs'] else 'N/A'
                    resultado_memoria += f"""
‚Ä¢ **{grupo['nome']}** ({grupo['tipo']})
  CNPJs: {cnpjs_str}"""
            else:
                resultado_memoria += "*Nenhum grupo empresarial mapeado*"
            
            resultado_memoria += f"""

üí° **COMO FUNCIONA MEU APRENDIZADO**:

1. **Padr√µes de Consulta**: Aprendo como interpretar diferentes formas de fazer perguntas
2. **Mapeamento de Clientes**: Associo varia√ß√µes de nomes aos clientes corretos
3. **Grupos Empresariais**: Identifico empresas que pertencem ao mesmo grupo
4. **Corre√ß√µes do Usu√°rio**: Quando voc√™ me corrige, eu registro e aprendo
5. **Contexto Conversacional**: Mantenho hist√≥rico da conversa atual

‚ö° **CAPACIDADES ATIVAS**:
‚Ä¢ ‚úÖ Aprendizado cont√≠nuo com cada intera√ß√£o
‚Ä¢ ‚úÖ Detec√ß√£o autom√°tica de grupos empresariais
‚Ä¢ ‚úÖ Mem√≥ria conversacional na sess√£o atual
‚Ä¢ ‚úÖ Cache inteligente para respostas frequentes
‚Ä¢ ‚úÖ Corre√ß√£o autom√°tica de interpreta√ß√µes

üìà **EVOLU√á√ÉO**:
O sistema melhora continuamente. Cada consulta, corre√ß√£o e feedback contribui para aumentar minha precis√£o e velocidade de resposta.

---
üß† **Powered by:** Claude 4 Sonnet + Sistema de Aprendizado Vital√≠cio
üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚ö° **Fonte:** Banco de Dados PostgreSQL - Tabelas de Aprendizado"""
            
            # Adicionar ao contexto conversacional
            if context_manager:
                metadata = {'tipo': 'consulta_memoria_vitalicia', 'stats': stats}
                context_manager.add_message(user_id, 'user', consulta, metadata)
                context_manager.add_message(user_id, 'assistant', resultado_memoria, metadata)
                logger.info(f"üß† Consulta sobre mem√≥ria vital√≠cia adicionada ao contexto")
            
            return resultado_memoria
        
        # üß† SISTEMA DE ENTENDIMENTO INTELIGENTE (‚úÖ ATIVA POR PADR√ÉO)
        try:
            from .intelligent_query_analyzer import get_intelligent_analyzer
            
            # Usar sistema de entendimento inteligente
            analyzer = get_intelligent_analyzer()
            interpretacao = analyzer.analisar_consulta_inteligente(consulta, user_context or {})
            
            # üö® CORRE√á√ÉO: REMOVIDO LOOP INFINITO
            # PROBLEMA: processar_consulta_com_ia_avancada chama processar_consulta_real
            # que chama processar_consulta_com_ia_avancada novamente!
            # 
            # SOLU√á√ÉO: Usar apenas a interpreta√ß√£o inteligente aqui, sem chamar o enhanced
            if interpretacao.confianca_interpretacao >= 0.7:
                logger.info(f"üß† ENTENDIMENTO INTELIGENTE: Alta confian√ßa ({interpretacao.confianca_interpretacao:.1%})")
                # Continuar com o processamento normal usando a interpreta√ß√£o
                # mas N√ÉO chamar processar_consulta_com_ia_avancada para evitar loop
                
                # Aplicar conhecimento da interpreta√ß√£o diretamente
                if interpretacao.entidades_detectadas.get("clientes"):
                    logger.info(f"‚úÖ Clientes detectados: {interpretacao.entidades_detectadas['clientes']}")
                if interpretacao.escopo_temporal["tipo"] != "padrao":
                    logger.info(f"üìÖ Per√≠odo detectado: {interpretacao.escopo_temporal['descricao']}")
            else:
                logger.info(f"üîÑ CONFIAN√áA BAIXA: Usando sistema padr√£o (confian√ßa: {interpretacao.confianca_interpretacao:.1%})")
        
        except ImportError:
            logger.warning("‚ö†Ô∏è Sistema de entendimento inteligente n√£o dispon√≠vel, usando sistema padr√£o")
        except Exception as e:
            logger.error(f"‚ùå Erro no sistema avan√ßado: {e}, usando sistema padr√£o")
        
        # üß† DETEC√á√ÉO DE CONSULTAS DE DESENVOLVIMENTO (INTEGRA√á√ÉO INTELIGENTE)
        deteccao_dev = _detectar_consulta_desenvolvimento(consulta)
        if deteccao_dev:
            logger.info(f"üß† Consulta de desenvolvimento detectada: {deteccao_dev['acao']}")
            resultado_dev = _processar_consulta_desenvolvimento(deteccao_dev)
            
            # Adicionar ao contexto conversacional
            if context_manager:
                metadata = {'tipo': 'desenvolvimento', 'acao': deteccao_dev['acao']}
                context_manager.add_message(user_id, 'user', consulta, metadata)
                context_manager.add_message(user_id, 'assistant', resultado_dev.get('response', ''), metadata)
                logger.info(f"üß† Consulta de desenvolvimento adicionada ao contexto para usu√°rio {user_id}")
            
            return resultado_dev.get('response', 'Erro no processamento de desenvolvimento')
        
        # üéØ DETECTAR COMANDOS CURSOR MODE
        if self._is_cursor_command(consulta):
            return self._processar_comando_cursor(consulta, user_context)
        
        # üîç DETECTAR COMANDO DE ESTRUTURA DO PROJETO
        if any(termo in consulta_lower for termo in ['estrutura do projeto', 'mostrar estrutura', 'mapear projeto', 'escanear projeto']):
            return self._processar_comando_estrutura_projeto(consulta, user_context)
        
        # üìÅ DETECTAR COMANDOS DE LEITURA DE ARQUIVO
        if self._is_file_command(consulta):
            return self._processar_comando_arquivo(consulta, user_context)
        
        # üíª DETECTAR COMANDOS DE DESENVOLVIMENTO
        if self._is_dev_command(consulta):
            return self._processar_comando_desenvolvimento(consulta, user_context)
        
        # üìä DETECTAR COMANDOS DE EXPORT EXCEL
        if self._is_excel_command(consulta):
            return self._processar_comando_excel(consulta, user_context)
        
        # üîç DETECTAR CONSULTAS DE NFs ESPEC√çFICAS (NOVA FUNCIONALIDADE)
        import re
        nfs_encontradas = re.findall(r'1\d{5}', consulta)
        
        if nfs_encontradas and len(nfs_encontradas) >= 2:  # Pelo menos 2 NFs
            logger.info(f"üîç PROCESSAMENTO: Consulta de NFs espec√≠ficas detectada ({len(nfs_encontradas)} NFs)")
            
            # Processar consulta espec√≠fica de NFs
            resultado_nfs = self.consultar_posicao_nfs_especificas(consulta)
            
            # Adicionar ao contexto conversacional
            if context_manager:
                metadata = {'tipo': 'consulta_nfs', 'total_nfs': len(nfs_encontradas)}
                context_manager.add_message(user_id, 'user', consulta, metadata)
                context_manager.add_message(user_id, 'assistant', resultado_nfs, metadata)
                logger.info(f"üß† Consulta de NFs adicionada ao contexto para usu√°rio {user_id}")
            
            return resultado_nfs
        
                    # üìÖ DETECTAR CONSULTAS SOBRE AGENDAMENTOS PENDENTES
        if any(termo in consulta.lower() for termo in ['agendamento pendente', 'agendamentos pendentes', 
                                                        'precisam de agendamento', 'sem agendamento',
                                                        'aguardando agendamento', 'com agendamento pendente']):
            logger.info("üìÖ PROCESSAMENTO: Consulta sobre agendamentos pendentes detectada")
            
            # Usar Alert Engine integrado (√ìRF√ÉO RECUPERADO!)
            if self.alert_engine:
                alert_engine = self.alert_engine
            else:
                from .alert_engine import get_alert_engine
                alert_engine = get_alert_engine()
            
            # Obter dados de agendamentos pendentes
            agendamentos_info = alert_engine._check_agendamentos_pendentes()
            quantidade = agendamentos_info.get('quantidade', 0)
            entregas_pendentes = agendamentos_info.get('entregas', [])
            
            if quantidade == 0:
                resultado_agendamentos = f"""ü§ñ **CLAUDE 4 SONNET REAL**

‚úÖ **AGENDAMENTOS - SITUA√á√ÉO EXCELENTE**

N√£o h√° entregas pendentes de agendamento no momento!

üìä **STATUS ATUAL**:
‚Ä¢ Total de entregas pendentes de agendamento: **0**
‚Ä¢ Todas as entregas recentes est√£o com agendamento confirmado
‚Ä¢ Sistema monitorado em tempo real

---
üß† **Powered by:** Claude 4 Sonnet (Anthropic) + Sistema de Alertas
üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚ö° **Fonte:** AlertEngine - Dados em tempo real"""
            
            else:
                # Montar resposta com detalhes
                resultado_agendamentos = f"""ü§ñ **CLAUDE 4 SONNET REAL**

üìÖ **ENTREGAS COM AGENDAMENTO PENDENTE**

üö® **ATEN√á√ÉO**: {quantidade} entrega{'s' if quantidade > 1 else ''} {'precisam' if quantidade > 1 else 'precisa'} de agendamento

üìä **DETALHES DAS ENTREGAS PENDENTES**:
"""
                
                # Listar at√© 10 entregas pendentes
                for i, entrega in enumerate(entregas_pendentes[:10], 1):
                    resultado_agendamentos += f"""
{i}. **NF {entrega.get('numero_nf', 'N/A')}**
   ‚Ä¢ Cliente: {entrega.get('cliente', 'N/A')}
   ‚Ä¢ Status: ‚è≥ Aguardando agendamento"""
                
                if quantidade > 10:
                    resultado_agendamentos += f"\n\n... e mais {quantidade - 10} entregas pendentes de agendamento"
                
                resultado_agendamentos += f"""

üéØ **A√á√ÉO NECESS√ÅRIA**:
1. Verificar forma de agendamento de cada cliente
2. Entrar em contato para agendar entregas
3. Registrar protocolos de agendamento no sistema

üí° **CRIT√âRIO USADO**:
‚Ä¢ Entregas embarcadas h√° mais de 3 dias
‚Ä¢ Sem data de entrega prevista definida
‚Ä¢ Status n√£o finalizado

üìã **COMO AGENDAR**:
‚Ä¢ Acesse o m√≥dulo de Monitoramento
‚Ä¢ Localize cada NF listada acima
‚Ä¢ Clique em "Agendar" para registrar o agendamento
‚Ä¢ Informe data, hora e protocolo

---
üß† **Powered by:** Claude 4 Sonnet (Anthropic) + AlertEngine
üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚ö° **Fonte:** Sistema de Alertas em Tempo Real
üìä **Crit√©rio:** Entregas sem data_entrega_prevista embarcadas h√° >3 dias"""
            
            # Adicionar ao contexto conversacional
            if context_manager:
                metadata = {'tipo': 'agendamentos_pendentes', 'quantidade': quantidade}
                context_manager.add_message(user_id, 'user', consulta, metadata)
                context_manager.add_message(user_id, 'assistant', resultado_agendamentos, metadata)
                logger.info(f"üß† Consulta de agendamentos adicionada ao contexto para usu√°rio {user_id}")
            
            return resultado_agendamentos
        
        # Construir prompt com contexto conversacional
        consulta_com_contexto = consulta
        if context_manager:
            consulta_com_contexto = context_manager.build_context_prompt(user_id, consulta)
            logger.info(f"üß† Contexto conversacional aplicado para usu√°rio {user_id}")
        
        # üß† INTELLIGENT CACHE PARA CONSULTAS CLAUDE (√ìRF√ÉO INTEGRADO!)
        if REDIS_DISPONIVEL and self.intelligent_cache:
            # Usar cache inteligente categorizado
            cache_category = 'query_results'
            cache_key = f"claude_consulta_{hash(consulta)}"
            
            resultado_cache = self.intelligent_cache.get(cache_key, cache_category)
            if not resultado_cache:
                # Fallback para cache tradicional
                resultado_cache = redis_cache.cache_consulta_claude(
                    consulta=consulta,  # Usar consulta original para cache
                    cliente=user_context.get('cliente_filter', '') if user_context else '',
                    periodo_dias=30  # padr√£o
                )
            
            if resultado_cache:
                logger.info("üéØ CACHE HIT: Resposta Claude carregada do Redis")
                # Adicionar timestamp atual mas manter resposta cacheada
                resultado_cache = resultado_cache.replace(
                    "üïí **Processado:** ",
                    f"üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')} ‚ö° (Redis Cache) | Original: "
                )
                
                # Adicionar mensagem ao contexto
                if context_manager:
                    metadata = context_manager.extract_metadata(consulta, resultado_cache)
                    context_manager.add_message(user_id, 'user', consulta, metadata)
                    context_manager.add_message(user_id, 'assistant', resultado_cache, metadata)
                
                return resultado_cache
        
        try:
            # üìã LOG AI OPERATION START (√ìRF√ÉO INTEGRADO!)
            start_time = datetime.now()
            if self.ai_logger:
                self.ai_logger.log_user_interaction(
                    user_id=user_context.get('user_id', 'anonymous') if user_context else 'anonymous',
                    action='consulta_claude_ai',
                    query=consulta[:100] + '...' if len(consulta) > 100 else consulta
                )
            
            # üß† APLICAR CONHECIMENTO APRENDIDO
            from app.claude_ai_novo.learners.learning_core import get_lifelong_learning
            lifelong = get_lifelong_learning()
            conhecimento_previo = lifelong.aplicar_conhecimento(consulta)
            
            # Analisar consulta para contexto inteligente (usar consulta original)
            contexto_analisado = self._analisar_consulta(consulta)
            
            # üß† DELAY DE REFLEX√ÉO (ANTI-ATROPELO!)
            # Pequeno delay para interpreta√ß√£o correta antes da resposta
            import time
            time.sleep(0.8)  # 800ms para "pensar" melhor
            logger.info("üß† Delay de reflex√£o aplicado - interpreta√ß√£o otimizada")
            
            # üîç VALIDA√á√ÉO DUPLA DE INTERPRETA√á√ÉO (ANTI-CONFUS√ÉO!)
            # Verificar se a interpreta√ß√£o est√° consistente com a consulta original
            consulta_lower = consulta.lower()
            cliente_detectado = contexto_analisado.get('cliente_filter', '').lower()
            
            if cliente_detectado and cliente_detectado not in consulta_lower:
                logger.warning(f"‚ö†Ô∏è POSS√çVEL CONFUS√ÉO: Cliente '{cliente_detectado}' detectado mas consulta original √© '{consulta}'")
                # Re-analisar com mais cuidado
                logger.info("üîÑ Re-analisando consulta com valida√ß√£o rigorosa...")
                time.sleep(0.3)  # Delay adicional para re-an√°lise
                
                # Limpar interpreta√ß√£o question√°vel
                if 'cliente_filter' in contexto_analisado:
                    contexto_analisado['cliente_filter'] = ''
                    logger.info("üßπ Cliente filter limpo por inconsist√™ncia")
            
            logger.info(f"‚úÖ Valida√ß√£o dupla conclu√≠da - Cliente: {contexto_analisado.get('cliente_filter', 'Nenhum')}")
            
            # üó∫Ô∏è ENRIQUECER COM MAPEAMENTO SEM√ÇNTICO (√ìRF√ÉO RECUPERADO!)
            if self.mapeamento_semantico and hasattr(self.mapeamento_semantico, 'mapear_termos_semanticos'):
                try:
                    logger.info("üó∫Ô∏è Aplicando Mapeamento Sem√¢ntico...")
                    termos_mapeados = self.mapeamento_semantico.mapear_termos_semanticos(consulta)
                    
                    if termos_mapeados and termos_mapeados.get('campos_detectados'):
                        logger.info(f"‚úÖ Campos mapeados semanticamente: {list(termos_mapeados['campos_detectados'].keys())}")
                        # Enriquecer contexto com mapeamento sem√¢ntico
                        contexto_analisado['mapeamento_semantico'] = termos_mapeados
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro no mapeamento sem√¢ntico: {e}")
            
            # Enriquecer com conhecimento pr√©vio
            if conhecimento_previo['confianca_geral'] > 0.4:  # ‚úÖ CORRIGIDO: Confian√ßa mais flex√≠vel
                logger.info(f"üß† Aplicando conhecimento pr√©vio (confian√ßa: {conhecimento_previo['confianca_geral']:.1%})")
                
                # Aplicar padr√µes conhecidos
                for padrao in conhecimento_previo['padroes_aplicaveis']:
                    if padrao['tipo'] == 'cliente' and not contexto_analisado.get('cliente_especifico'):
                        contexto_analisado['cliente_especifico'] = padrao['interpretacao'].get('cliente')
                        logger.info(f"‚úÖ Cliente detectado por padr√£o aprendido: {padrao['interpretacao'].get('cliente')}")
                
                # Aplicar grupos conhecidos
                if conhecimento_previo['grupos_conhecidos'] and not contexto_analisado.get('grupo_empresarial'):
                    grupo = conhecimento_previo['grupos_conhecidos'][0]
                    contexto_analisado['tipo_consulta'] = 'grupo_empresarial'
                    contexto_analisado['grupo_empresarial'] = grupo
                    contexto_analisado['cliente_especifico'] = grupo['nome']
                    contexto_analisado['filtro_sql'] = grupo['filtro']
                    logger.info(f"‚úÖ Grupo empresarial detectado por aprendizado: {grupo['nome']}")
            
            # Carregar dados espec√≠ficos baseados na an√°lise (j√° usa Redis internamente)
            dados_contexto = self._carregar_contexto_inteligente(contexto_analisado)
            
            # üìä ENRIQUECER COM DATA ANALYZER (√ìRF√ÉO RECUPERADO!)
            if user_context and user_context.get('vendedor_codigo') and self.vendedor_analyzer:
                try:
                    logger.info("üìä Aplicando VendedorDataAnalyzer...")
                    vendedor_codigo = user_context.get('vendedor_codigo')
                    analise_vendedor = self.vendedor_analyzer.analisar_vendedor_completo(vendedor_codigo)
                    
                    if analise_vendedor and analise_vendedor.get('total_clientes', 0) > 0:
                        logger.info(f"‚úÖ An√°lise de vendedor: {analise_vendedor['total_clientes']} clientes encontrados")
                        dados_contexto['analise_vendedor'] = analise_vendedor
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro no VendedorDataAnalyzer: {e}")
            
            # üìä APLICAR GERAL DATA ANALYZER quando necess√°rio
            if contexto_analisado.get('tipo_consulta') == 'geral' and self.geral_analyzer:
                try:
                    logger.info("üìä Aplicando GeralDataAnalyzer...")
                    analise_geral = self.geral_analyzer.analisar_sistema_completo()
                    
                    if analise_geral and analise_geral.get('total_entregas', 0) > 0:
                        logger.info(f"‚úÖ An√°lise geral: {analise_geral['total_entregas']} entregas no sistema")
                        dados_contexto['analise_geral'] = analise_geral
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro no GeralDataAnalyzer: {e}")
            
            # üéØ ARMAZENAR CONTEXTO PARA USO NO PROMPT (CR√çTICO!)
            self._ultimo_contexto_carregado = dados_contexto
            
            # Preparar mensagens para Claude real
            tipo_analise = contexto_analisado.get('tipo_consulta', 'geral')
            cliente_contexto = contexto_analisado.get('cliente_especifico')
            periodo_dias = contexto_analisado.get('periodo_dias', 30)
            correcao_usuario = contexto_analisado.get('correcao_usuario', False)
            
            # Construir instru√ß√£o espec√≠fica baseada no tipo de consulta
            if correcao_usuario:
                instrucao_especifica = f"""
üö® IMPORTANTE: O usu√°rio FEZ UMA CORRE√á√ÉO indicando que a interpreta√ß√£o anterior estava INCORRETA.
Trate esta consulta como GERAL (todos os dados) e N√ÉO aplique filtros espec√≠ficos de cliente.
Analise os dados de TODOS os clientes dispon√≠veis no per√≠odo de {periodo_dias} dias."""
            elif tipo_analise == "geral" and not cliente_contexto:
                instrucao_especifica = f"""
üåê CONSULTA GERAL: Analise TODOS os dados dispon√≠veis (todos os clientes) no per√≠odo de {periodo_dias} dias.
N√ÉO filtrar por cliente espec√≠fico - mostrar dados agregados de todos os clientes."""
            elif cliente_contexto:
                instrucao_especifica = f"""
üéØ CONSULTA ESPEC√çFICA: Analise APENAS dados do cliente "{cliente_contexto}" no per√≠odo de {periodo_dias} dias.
N√ÉO misturar com dados de outros clientes."""
            else:
                instrucao_especifica = f"""
üìä AN√ÅLISE PADR√ÉO: Analise os dados dispon√≠veis no per√≠odo de {periodo_dias} dias."""
            
            # Preparar dados de forma segura sem JSON que cause conflitos com {}
            periodo_dias = contexto_analisado.get('periodo_dias', 30)
            cliente_contexto = contexto_analisado.get('cliente_especifico')
            
            messages = [
                {
                    "role": "user", 
                    "content": consulta_com_contexto  # ‚úÖ CORRIGIDO: Usar contexto conversacional
                }
            ]
            
            # üöÄ FASE 1: ENHANCED CLAUDE INTEGRATION (Claude Otimizado)
            enhanced_result = None
            if self.enhanced_claude and hasattr(self.enhanced_claude, 'process_enhanced_query'):
                try:
                    logger.info("üöÄ Testando Enhanced Claude Integration...")
                    enhanced_context = {
                        'dados_carregados': dados_contexto,
                        'tipo_consulta': tipo_analise,
                        'cliente_especifico': cliente_contexto,
                        'periodo_dias': periodo_dias,
                        'user_context': user_context or {}
                    }
                    enhanced_result = self.enhanced_claude.process_enhanced_query(consulta, enhanced_context)
                    
                    if enhanced_result and enhanced_result.get('success'):
                        logger.info("‚úÖ Enhanced Claude forneceu resposta satisfat√≥ria!")
                        resultado = enhanced_result['response']
                    else:
                        logger.info("‚ö†Ô∏è Enhanced Claude insatisfat√≥rio, tentando IA Avan√ßada...")
                        enhanced_result = None
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Enhanced Claude falhou: {e}")
                    enhanced_result = None
            
            # üî¨ FASE 2: NLP AVAN√áADO (An√°lise Lingu√≠stica SpaCy + NLTK)
            if not enhanced_result and self.nlp_analyzer:
                try:
                    logger.info("üî¨ Aplicando an√°lise NLP Avan√ßada...")
                    nlp_result = self.nlp_analyzer.analisar_com_nlp(consulta)
                    
                    # Aplicar corre√ß√µes sugeridas
                    if nlp_result and nlp_result.correcoes_sugeridas:
                        for erro, correcao in nlp_result.correcoes_sugeridas.items():
                            consulta = consulta.replace(erro, correcao)
                        logger.info(f"üìù NLP aplicou {len(nlp_result.correcoes_sugeridas)} corre√ß√µes")
                    
                    # Enriquecer dados_contexto com insights NLP
                    if nlp_result and nlp_result.palavras_chave:
                        logger.info(f"‚úÖ NLP Avan√ßado detectou {len(nlp_result.palavras_chave)} palavras-chave")
                        dados_contexto['nlp_insights'] = {
                            'tokens_limpos': nlp_result.tokens_limpos,
                            'palavras_chave': nlp_result.palavras_chave,
                            'sentimento': nlp_result.sentimento,
                            'tempo_verbal': nlp_result.tempo_verbal,
                            'entidades': nlp_result.entidades_nomeadas
                        }
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è NLP Avan√ßado falhou: {e}")
            
            # ü§ñ FASE 3: MODELOS ML REAIS (Predi√ß√£o + Detec√ß√£o de Anomalias)  
            ml_predictions = None
            if self.ml_models and hasattr(self.ml_models, 'predict_query_insights'):
                try:
                    logger.info("ü§ñ Aplicando Modelos ML para predi√ß√µes...")
                    ml_predictions = self.ml_models.predict_query_insights(consulta, dados_contexto)
                    
                    if ml_predictions and ml_predictions.get('confidence') >= 0.6:
                        logger.info(f"‚úÖ ML detectou padr√µes preditivos (confian√ßa: {ml_predictions['confidence']:.1%})")
                        dados_contexto['ml_insights'] = ml_predictions
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Modelos ML falharam: {e}")
            
            # üèóÔ∏è FASE 4: STRUCTURAL AI VALIDATION (√ìRF√ÉO INTEGRADO!)
            structural_validation = None
            if self.advanced_ai_system and hasattr(self.advanced_ai_system, 'structural_ai'):
                try:
                    logger.info("üèóÔ∏è Aplicando Valida√ß√£o Estrutural...")
                    structural_ai = self.advanced_ai_system.structural_ai
                    
                    if hasattr(structural_ai, 'validate_business_logic'):
                        structural_validation = structural_ai.validate_business_logic(dados_contexto)
                        
                        if not structural_validation.get('structural_consistency', True):
                            logger.warning("üö® Problemas estruturais detectados nos dados!")
                            # Adicionar warnings √† resposta
                            violations = structural_validation.get('business_flow_violations', [])
                            if violations:
                                logger.warning(f"üö® Viola√ß√µes detectadas: {', '.join(violations)}")
                                dados_contexto['structural_warnings'] = violations
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Valida√ß√£o Estrutural falhou: {e}")
            
            # üéØ DETECTAR INTEN√á√ïES COM SCORES
            intencoes = self._detectar_intencao_refinada(consulta)
            
            # üöÄ DECIS√ÉO INTELIGENTE SOBRE SISTEMAS AVAN√áADOS
            use_advanced_systems = self._deve_usar_sistema_avancado(consulta, intencoes)
            
            advanced_result = None
            multi_agent_result = None
            
            if use_advanced_systems:
                # Tentar sistemas avan√ßados apenas se solicitado
                if self.advanced_ai_system and hasattr(self.advanced_ai_system, 'process_advanced_query'):
                    try:
                        logger.info("üöÄ Iniciando processamento IA AVAN√áADA...")
                        
                        # Preparar contexto enriquecido
                        advanced_context = {
                            'dados_carregados': dados_contexto,
                            'tipo_consulta': tipo_analise,
                            'cliente_especifico': cliente_contexto,
                            'periodo_dias': periodo_dias,
                            'user_context': user_context or {},
                            'correcao_usuario': correcao_usuario,
                            'debug': False
                        }
                        
                        # Executar processamento avan√ßado
                        import asyncio
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        try:
                            advanced_result = loop.run_until_complete(
                                self.advanced_ai_system.process_advanced_query(consulta, advanced_context)
                            )
                            logger.info("‚úÖ IA Avan√ßada conclu√≠da")
                        finally:
                            loop.close()
                        
                        # Usar resultado se for satisfat√≥rio
                        if (advanced_result and 
                            advanced_result.get('success') and 
                            advanced_result.get('advanced_metadata', {}).get('metacognitive_score', 0) >= 0.6):
                            
                            score = advanced_result['advanced_metadata']['metacognitive_score']
                            logger.info(f"üéØ IA Avan√ßada forneceu resposta (score: {score:.2f})")
                            resultado = advanced_result['response']
                            
                    except Exception as e:
                        logger.error(f"‚ùå Erro na IA Avan√ßada: {e}")
                        advanced_result = None
            
            # Por padr√£o, usar Claude 4 Sonnet diretamente
            if not advanced_result and not multi_agent_result:
                # Chamar Claude REAL (agora Claude 4 Sonnet!)
                # ü§î DELAY DE INTERPRETA√á√ÉO FINAL (ANTI-ATROPELO!)
                # Pequeno delay antes da gera√ß√£o para garantir interpreta√ß√£o correta
                time.sleep(0.5)  # 500ms adicionais para valida√ß√£o da interpreta√ß√£o
                logger.info("ü§î Valida√ß√£o final da interpreta√ß√£o conclu√≠da")
                
                # Chamar Claude com dados completos
                response = self.client.messages.create(
                    model="claude-sonnet-4-20250514",  # Claude 4 Sonnet - Modelo mais avan√ßado
                    max_tokens=8192,  # Restaurado para an√°lises completas
                    temperature=0.7,  # Equilibrio entre precis√£o e criatividade
                    system=self.system_prompt + "\n\n" + self._build_contexto_por_intencao(intencoes, contexto_analisado),
                    messages=messages  # type: ignore
                )
                
                resultado = response.content[0].text
            
            # Log da intera√ß√£o
            logger.info(f"‚úÖ Claude REAL (4.0) processou: '{consulta[:50]}...'")
            
            # Resposta mais limpa e direta
            resposta_final = f"""{resultado}

---
Claude 4 Sonnet | {datetime.now().strftime('%d/%m/%Y %H:%M')}"""
            
            # üß† ADICIONAR CONVERSA AO CONTEXTO
            if context_manager:
                metadata = context_manager.extract_metadata(consulta, resposta_final)
                context_manager.add_message(user_id, 'user', consulta, metadata)
                context_manager.add_message(user_id, 'assistant', resposta_final, metadata)
                logger.info(f"üß† Conversa adicionada ao contexto para usu√°rio {user_id}")
            
            # Salvar resposta no Redis cache para consultas similares (usar consulta original)
            if REDIS_DISPONIVEL:
                redis_cache.cache_consulta_claude(
                    consulta=consulta,  # Consulta original para cache
                    cliente=user_context.get('cliente_filter', '') if user_context else '',
                    periodo_dias=contexto_analisado.get('periodo_dias', 30),
                    resultado=resposta_final,
                    ttl=300  # 5 minutos para respostas Claude
                )
                logger.info("üíæ Resposta Claude salva no Redis cache")
            
            # üß† REGISTRAR APRENDIZADO VITAL√çCIO
            aprendizados = lifelong.aprender_com_interacao(
                consulta=consulta,
                interpretacao=contexto_analisado,
                resposta=resposta_final,
                usuario_id=user_context.get('user_id') if user_context else None
            )
            
            if aprendizados.get('padroes_detectados'):
                logger.info(f"üß† Novos padr√µes aprendidos: {len(aprendizados['padroes_detectados'])}")
            
            # üßë‚Äçü§ù‚Äçüßë HUMAN-IN-THE-LOOP LEARNING (AGUARDANDO FEEDBACK REAL)
            # Feedback real ser√° capturado pelos bot√µes na interface
            # Removido feedback autom√°tico falso que assumia sempre positivo
            logger.info("üßë‚Äçü§ù‚Äçüßë Aguardando feedback real do usu√°rio via interface")
            
            # üìã LOG AI OPERATION COMPLETE (√ìRF√ÉO INTEGRADO!)
            if self.ai_logger:
                try:
                    operation_duration = (datetime.now() - start_time).total_seconds()
                    self.ai_logger.log_ai_insight(
                        insight_type='consulta_claude_processada',
                        confidence=0.85,
                        impact='medium',
                        description=f'Consulta processada com sucesso em {operation_duration:.2f}s'
                    )
                    
                    # Log de performance da opera√ß√£o completa
                    self.ai_logger.log_performance(
                        component='claude_real_integration',
                        operation='processar_consulta_real',
                        duration=operation_duration
                    )
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro no logging AI: {e}")
            
            return resposta_final
            
        except Exception as e:
            logger.error(f"‚ùå Erro no Claude real: {e}")
            return self._fallback_simulado(consulta)
    
    def _detectar_intencao_refinada(self, consulta: str) -> Dict[str, float]:
        """
        Detecta m√∫ltiplas inten√ß√µes com scores de confian√ßa
        Retorna dict com probabilidades ao inv√©s de categoria √∫nica
        """
        consulta_lower = consulta.lower()
        
        intencoes_scores = {
            "analise_dados": 0.0,
            "desenvolvimento": 0.0,
            "resolucao_problema": 0.0,
            "explicacao_conceitual": 0.0,
            "comando_acao": 0.0
        }
        
        # Palavras-chave com pesos
        padroes = {
            "analise_dados": {
                "palavras": ["quantos", "qual", "status", "relat√≥rio", "dados", "estat√≠stica", 
                           "total", "quantidade", "listar", "mostrar", "ver"],
                "peso": 0.2
            },
            "desenvolvimento": {
                "palavras": ["criar", "desenvolver", "implementar", "c√≥digo", "fun√ß√£o", 
                           "m√≥dulo", "classe", "api", "rota", "template"],
                "peso": 0.25
            },
            "resolucao_problema": {
                "palavras": ["erro", "bug", "problema", "n√£o funciona", "corrigir", 
                           "resolver", "falha", "exception", "debug"],
                "peso": 0.3
            },
            "explicacao_conceitual": {
                "palavras": ["como funciona", "o que √©", "explique", "entender", 
                           "por que", "quando usar", "diferen√ßa entre"],
                "peso": 0.15
            },
            "comando_acao": {
                "palavras": ["gerar", "exportar", "executar", "fazer", "processar",
                           "excel", "relat√≥rio", "planilha", "baixar"],
                "peso": 0.2
            }
        }
        
        # Calcular scores
        for intencao, config in padroes.items():
            for palavra in config["palavras"]:
                if palavra in consulta_lower:
                    intencoes_scores[intencao] += config["peso"]
        
        # Normalizar scores
        total = sum(intencoes_scores.values())
        if total > 0:
            for intencao in intencoes_scores:
                intencoes_scores[intencao] /= total
        
        return intencoes_scores
    
    def _deve_usar_sistema_avancado(self, consulta: str, intencoes: Dict[str, float]) -> bool:
        """
        Decide logicamente se deve usar sistemas avan√ßados
        Baseado em crit√©rios objetivos, n√£o apenas palavras-chave
        """
        # Crit√©rios l√≥gicos
        criterios = {
            "complexidade_alta": len(consulta.split()) > 20,
            "multiplas_intencoes": sum(1 for s in intencoes.values() if s > 0.2) >= 2,
            "solicitacao_explicita": any(termo in consulta.lower() for termo in 
                                       ["an√°lise avan√ßada", "an√°lise profunda", "detalhada"]),
            "consulta_ambigua": max(intencoes.values()) < 0.4 if intencoes else False,
            "historico_contexto": hasattr(self, '_ultimo_contexto_carregado') and 
                                self._ultimo_contexto_carregado.get('registros_carregados', 0) > 1000
        }
        
        # Log para debug
        logger.debug(f"üîç Crit√©rios sistema avan√ßado: {criterios}")
        
        # Decis√£o baseada em m√∫ltiplos fatores
        pontos = sum(1 for criterio, valor in criterios.items() if valor)
        
        # Caso especial: m√∫ltiplas inten√ß√µes sempre usa avan√ßado
        if criterios["multiplas_intencoes"]:
            usar_avancado = True
        else:
            usar_avancado = pontos >= 2  # Precisa de pelo menos 2 crit√©rios verdadeiros
        
        if usar_avancado:
            logger.info(f"üöÄ Sistema avan√ßado ativado: {pontos} crit√©rios atendidos")
        
        return usar_avancado

    def _analisar_consulta(self, consulta: str) -> Dict[str, Any]:
        """An√°lise simplificada da consulta para dar mais liberdade ao Claude"""
        
        analise = {
            "tipo_consulta": "aberta",  # Deixar o Claude decidir
            "consulta_original": consulta,
            "periodo_dias": 30,  # Padr√£o
            "cliente_especifico": None,
            "dominio": "geral",
            "foco_dados": [],
            "metricas_solicitadas": [],
            "requer_dados_completos": False,
            "multi_dominio": False,
            "dominios_solicitados": []
        }
        
        consulta_lower = consulta.lower()
        
        # Detec√ß√£o b√°sica de per√≠odo temporal (manter isso porque √© √∫til)
        import re
        
        # Detectar dias espec√≠ficos
        dias_match = re.search(r'(\d+)\s*dias?', consulta_lower)
        if dias_match:
            analise["periodo_dias"] = int(dias_match.group(1))
        elif "semana" in consulta_lower:
            analise["periodo_dias"] = 7
        elif "m√™s" in consulta_lower or "mes" in consulta_lower:
            analise["periodo_dias"] = 30
        
        # Detec√ß√£o b√°sica de cliente (deixar mais flex√≠vel)
        from app.utils.grupo_empresarial import GrupoEmpresarialDetector
        detector_grupos = GrupoEmpresarialDetector()
        grupo_detectado = detector_grupos.detectar_grupo_na_consulta(consulta)
        
        if grupo_detectado:
            analise["cliente_especifico"] = grupo_detectado['grupo_detectado']
            analise["filtro_sql"] = grupo_detectado.get('filtro_sql')
            analise["grupo_empresarial"] = grupo_detectado
            logger.info(f"üè¢ Cliente detectado: {grupo_detectado['grupo_detectado']}")
        
        # Deixar o Claude interpretar livremente o dom√≠nio e inten√ß√£o
        # Apenas marcar algumas palavras-chave b√°sicas para ajudar
        palavras_encontradas = []
        
        palavras_chave = {
            "entregas": ["entrega", "entregue", "atraso", "prazo", "pendente"],
            "pedidos": ["pedido", "cotar", "cota√ß√£o"],
            "faturamento": ["faturou", "faturamento", "receita", "vendas", "valor total"],
            "embarques": ["embarque", "embarcado", "separa√ß√£o"],
            "fretes": ["frete", "cte", "transportadora"],
            "clientes": ["cliente", "clientes"]
        }
        
        for dominio, palavras in palavras_chave.items():
            for palavra in palavras:
                if palavra in consulta_lower:
                    palavras_encontradas.append(palavra)
                    if dominio not in analise["foco_dados"]:
                        analise["foco_dados"].append(dominio)
        
        # Log simplificado
        logger.info(f"üìä An√°lise simplificada: per√≠odo={analise['periodo_dias']}d, cliente={analise['cliente_especifico'] or 'todos'}")
        if palavras_encontradas:
            logger.info(f"üîç Palavras-chave: {', '.join(palavras_encontradas[:5])}")
        
        return analise
    
    def _carregar_contexto_inteligente(self, analise: Dict[str, Any]) -> Dict[str, Any]:
        """Carrega dados espec√≠ficos baseados na an√°lise da consulta"""
        
        # CACHE-ASIDE PATTERN: Verificar se dados est√£o no Redis
        if REDIS_DISPONIVEL:
            chave_cache = redis_cache._gerar_chave(
                "contexto_inteligente",
                cliente=analise.get("cliente_especifico"),
                periodo_dias=analise.get("periodo_dias", 30),
                foco_dados=analise.get("foco_dados", []),
                filtro_geografico=analise.get("filtro_geografico")
            )
            
            # Tentar buscar do cache primeiro (Cache Hit)
            dados_cache = redis_cache.get(chave_cache)
            if dados_cache:
                logger.info("üéØ CACHE HIT: Contexto inteligente carregado do Redis")
                return dados_cache
        
        # CACHE MISS: Carregar dados do banco de dados
        logger.info("üí® CACHE MISS: Carregando contexto do banco de dados")
        
        try:
            from app import db
            from app.fretes.models import Frete
            from app.embarques.models import Embarque
            from app.transportadoras.models import Transportadora
            from app.pedidos.models import Pedido
            from app.monitoramento.models import EntregaMonitorada, AgendamentoEntrega
            from app.faturamento.models import RelatorioFaturamentoImportado
            
            # Data limite baseada na an√°lise
            data_limite = datetime.now() - timedelta(days=analise.get("periodo_dias", 30))
            
            contexto = {
                "analise_aplicada": analise,
                "timestamp": datetime.now().isoformat(),
                "registros_carregados": 0,
                "dados_especificos": {},
                "_from_cache": False  # Indicador que veio do banco
            }
            
            # FILTROS BASEADOS NO USU√ÅRIO (VENDEDOR)
            filtros_usuario = self._obter_filtros_usuario()
            
            # üéØ CARREGAR DADOS BASEADO NO DOM√çNIO DETECTADO
            dominio = analise.get("dominio", "entregas")
            multi_dominio = analise.get("multi_dominio", False)
            dominios_solicitados = analise.get("dominios_solicitados", [])
            
            if multi_dominio and dominios_solicitados:
                # ‚úÖ MODO AN√ÅLISE COMPLETA - CARREGAR M√öLTIPLOS DOM√çNIOS
                logger.info(f"üåê CARREGANDO M√öLTIPLOS DOM√çNIOS: {', '.join(dominios_solicitados)}")
                
                for dominio_item in dominios_solicitados:
                    try:
                        if dominio_item == "pedidos":
                            dados_pedidos = _carregar_dados_pedidos(analise, filtros_usuario, data_limite)
                            contexto["dados_especificos"]["pedidos"] = dados_pedidos
                            contexto["registros_carregados"] += dados_pedidos.get("registros_carregados", 0)
                            logger.info(f"üìã Pedidos carregados: {dados_pedidos.get('registros_carregados', 0)}")
                            
                        elif dominio_item == "fretes":
                            dados_fretes = _carregar_dados_fretes(analise, filtros_usuario, data_limite)
                            contexto["dados_especificos"]["fretes"] = dados_fretes
                            contexto["registros_carregados"] += dados_fretes.get("registros_carregados", 0)
                            logger.info(f"üöõ Fretes carregados: {dados_fretes.get('registros_carregados', 0)}")
                            
                        elif dominio_item == "transportadoras":
                            dados_transportadoras = _carregar_dados_transportadoras(analise, filtros_usuario, data_limite)
                            contexto["dados_especificos"]["transportadoras"] = dados_transportadoras
                            contexto["registros_carregados"] += dados_transportadoras.get("registros_carregados", 0)
                            logger.info(f"üöö Transportadoras carregadas: {dados_transportadoras.get('registros_carregados', 0)}")
                            
                        elif dominio_item == "embarques":
                            dados_embarques = _carregar_dados_embarques(analise, filtros_usuario, data_limite)
                            contexto["dados_especificos"]["embarques"] = dados_embarques
                            contexto["registros_carregados"] += dados_embarques.get("registros_carregados", 0)
                            logger.info(f"üì¶ Embarques carregados: {dados_embarques.get('registros_carregados', 0)}")
                            
                        elif dominio_item == "faturamento":
                            dados_faturamento = _carregar_dados_faturamento(analise, filtros_usuario, data_limite)
                            contexto["dados_especificos"]["faturamento"] = dados_faturamento
                            contexto["registros_carregados"] += dados_faturamento.get("registros_carregados", 0)
                            logger.info(f"üí∞ Faturamento carregado: {dados_faturamento.get('registros_carregados', 0)}")
                            
                        elif dominio_item == "financeiro":
                            dados_financeiro = _carregar_dados_financeiro(analise, filtros_usuario, data_limite)
                            contexto["dados_especificos"]["financeiro"] = dados_financeiro
                            contexto["registros_carregados"] += dados_financeiro.get("registros_carregados", 0)
                            logger.info(f"üí≥ Financeiro carregado: {dados_financeiro.get('registros_carregados', 0)}")
                            
                        elif dominio_item == "entregas":
                            # Carregar entregas com cache Redis se dispon√≠vel
                            if REDIS_DISPONIVEL:
                                entregas_cache = redis_cache.cache_entregas_cliente(
                                    cliente=analise.get("cliente_especifico", ""),
                                    periodo_dias=analise.get("periodo_dias", 30)
                                )
                                if entregas_cache:
                                    contexto["dados_especificos"]["entregas"] = entregas_cache
                                    contexto["registros_carregados"] += entregas_cache.get("total_registros", 0)
                                    logger.info("üéØ CACHE HIT: Entregas carregadas do Redis")
                                else:
                                    dados_entregas = self._carregar_entregas_banco(analise, filtros_usuario, data_limite)
                                    contexto["dados_especificos"]["entregas"] = dados_entregas
                                    contexto["registros_carregados"] += dados_entregas.get("total_registros", 0)
                                    logger.info(f"üì¶ Entregas carregadas: {dados_entregas.get('total_registros', 0)}")
                            else:
                                dados_entregas = self._carregar_entregas_banco(analise, filtros_usuario, data_limite)
                                contexto["dados_especificos"]["entregas"] = dados_entregas
                                contexto["registros_carregados"] += dados_entregas.get("total_registros", 0)
                                logger.info(f"üì¶ Entregas carregadas: {dados_entregas.get('total_registros', 0)}")
                                
                    except Exception as e:
                        logger.error(f"‚ùå Erro ao carregar dom√≠nio {dominio_item}: {e}")
                        # Continuar carregando outros dom√≠nios mesmo se um falhar
                        continue
                
                logger.info(f"‚úÖ AN√ÅLISE COMPLETA: {len(contexto['dados_especificos'])} dom√≠nios carregados | Total: {contexto['registros_carregados']} registros")
                
            else:
                # üéØ MODO DOM√çNIO √öNICO - COMPORTAMENTO ORIGINAL
                logger.info(f"üéØ Carregando dados do dom√≠nio: {dominio}")
                
                if dominio == "pedidos":
                    # Carregar dados de pedidos
                    dados_pedidos = _carregar_dados_pedidos(analise, filtros_usuario, data_limite)
                    contexto["dados_especificos"]["pedidos"] = dados_pedidos
                    contexto["registros_carregados"] += dados_pedidos.get("registros_carregados", 0)
                    logger.info(f"üìã Pedidos carregados: {dados_pedidos.get('registros_carregados', 0)}")
                    
                elif dominio == "fretes":
                    # Carregar dados de fretes
                    dados_fretes = _carregar_dados_fretes(analise, filtros_usuario, data_limite)
                    contexto["dados_especificos"]["fretes"] = dados_fretes
                    contexto["registros_carregados"] += dados_fretes.get("registros_carregados", 0)
                    logger.info(f"üöõ Fretes carregados: {dados_fretes.get('registros_carregados', 0)}")
                    
                elif dominio == "transportadoras":
                    # Carregar dados de transportadoras
                    dados_transportadoras = _carregar_dados_transportadoras(analise, filtros_usuario, data_limite)
                    contexto["dados_especificos"]["transportadoras"] = dados_transportadoras
                    contexto["registros_carregados"] += dados_transportadoras.get("registros_carregados", 0)
                    
                elif dominio == "embarques":
                    # Carregar dados de embarques
                    dados_embarques = _carregar_dados_embarques(analise, filtros_usuario, data_limite)
                    contexto["dados_especificos"]["embarques"] = dados_embarques
                    contexto["registros_carregados"] += dados_embarques.get("registros_carregados", 0)
                    
                elif dominio == "faturamento":
                    # Carregar dados de faturamento
                    dados_faturamento = _carregar_dados_faturamento(analise, filtros_usuario, data_limite)
                    contexto["dados_especificos"]["faturamento"] = dados_faturamento
                    contexto["registros_carregados"] += dados_faturamento.get("registros_carregados", 0)
                    
                elif dominio == "financeiro":
                    # Carregar dados financeiros
                    dados_financeiro = _carregar_dados_financeiro(analise, filtros_usuario, data_limite)
                    contexto["dados_especificos"]["financeiro"] = dados_financeiro
                    contexto["registros_carregados"] += dados_financeiro.get("registros_carregados", 0)
                    
                else:
                    # Dom√≠nio "entregas" ou padr√£o - usar cache espec√≠fico para entregas se dispon√≠vel
                    if REDIS_DISPONIVEL:
                        entregas_cache = redis_cache.cache_entregas_cliente(
                            cliente=analise.get("cliente_especifico", ""),
                            periodo_dias=analise.get("periodo_dias", 30)
                        )
                        if entregas_cache:
                            contexto["dados_especificos"]["entregas"] = entregas_cache
                            contexto["registros_carregados"] += entregas_cache.get("total_registros", 0)
                            logger.info("üéØ CACHE HIT: Entregas carregadas do Redis")
                        else:
                            # Cache miss - carregar do banco e salvar no cache
                            dados_entregas = self._carregar_entregas_banco(analise, filtros_usuario, data_limite)
                            contexto["dados_especificos"]["entregas"] = dados_entregas
                            contexto["registros_carregados"] += dados_entregas.get("total_registros", 0)
                            
                            # Salvar no cache Redis
                            redis_cache.cache_entregas_cliente(
                                cliente=analise.get("cliente_especifico", ""),
                                periodo_dias=analise.get("periodo_dias", 30),
                                entregas=dados_entregas,
                                ttl=120  # 2 minutos para entregas
                            )
                            logger.info("üíæ Entregas salvas no Redis cache")
                    else:
                        # Redis n√£o dispon√≠vel - carregar diretamente do banco
                        dados_entregas = self._carregar_entregas_banco(analise, filtros_usuario, data_limite)
                        contexto["dados_especificos"]["entregas"] = dados_entregas
                        contexto["registros_carregados"] += dados_entregas.get("total_registros", 0)
            
            # üÜï SE PERGUNTA SOBRE TOTAL, CARREGAR DADOS COMPLETOS
            if analise.get("pergunta_total_clientes"):
                logger.info("üåê CARREGANDO DADOS COMPLETOS DO SISTEMA...")
                dados_completos = self._carregar_todos_clientes_sistema()
                contexto["dados_especificos"]["sistema_completo"] = dados_completos
                contexto["_dados_completos_carregados"] = True
                
                # Adicionar lista de TODOS os grupos ao contexto
                if dados_completos.get('principais_grupos'):
                    contexto["_grupos_existentes"] = dados_completos['principais_grupos']
                    logger.info(f"üìä Grupos no sistema: {', '.join(dados_completos['principais_grupos'])}")
            
            # ESTAT√çSTICAS GERAIS COM REDIS CACHE
            if REDIS_DISPONIVEL:
                estatisticas = redis_cache.cache_estatisticas_cliente(
                    cliente=analise.get("cliente_especifico", "geral"),
                    periodo_dias=analise.get("periodo_dias", 30)
                )
                if not estatisticas:
                    # Cache miss - calcular e salvar
                    estatisticas = self._calcular_estatisticas_especificas(analise, filtros_usuario)
                    redis_cache.cache_estatisticas_cliente(
                        cliente=analise.get("cliente_especifico", "geral"),
                        periodo_dias=analise.get("periodo_dias", 30),
                        dados=estatisticas,
                        ttl=180  # 3 minutos para estat√≠sticas
                    )
                    logger.info("üíæ Estat√≠sticas salvas no Redis cache")
                else:
                    logger.info("üéØ CACHE HIT: Estat√≠sticas carregadas do Redis")
            else:
                # Fallback sem Redis
                stats_key = f"stats_{analise.get('cliente_especifico', 'geral')}_{analise.get('periodo_dias', 30)}"
                
                # Verificar se _cache √© um dict (fallback mode)
                if isinstance(self._cache, dict):
                    if stats_key not in self._cache or (datetime.now().timestamp() - self._cache[stats_key]["timestamp"]) > self._cache_timeout:
                        estatisticas = self._calcular_estatisticas_especificas(analise, filtros_usuario)
                        self._cache[stats_key] = {
                            "data": estatisticas,
                            "timestamp": datetime.now().timestamp()
                        }
                    else:
                        estatisticas = self._cache[stats_key]["data"]
                else:
                    # Se n√£o for dict, calcular sempre (sem cache)
                    estatisticas = self._calcular_estatisticas_especificas(analise, filtros_usuario)
            
            contexto["estatisticas"] = estatisticas
            
            # Salvar contexto completo no Redis para pr√≥ximas consultas similares
            if REDIS_DISPONIVEL:
                redis_cache.set(chave_cache, contexto, ttl=300)  # 5 minutos
                logger.info("üíæ Contexto completo salvo no Redis cache")
            
            return contexto
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar contexto inteligente: {e}")
            return {"erro": str(e), "timestamp": datetime.now().isoformat(), "_from_cache": False}
    
    def _carregar_entregas_banco(self, analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
        """Carrega entregas espec√≠ficas do banco de dados"""
        from app import db
        from app.monitoramento.models import EntregaMonitorada
        
        # ‚úÖ CORRE√á√ÉO CR√çTICA: Incluir registros com data_embarque NULL
        # Problema: data_embarque >= data_limite exclu√≠a NULL values
        # Solu√ß√£o: Incluir entregas com data_embarque NULL ou dentro do per√≠odo
        query_entregas = db.session.query(EntregaMonitorada).filter(
            or_(
                EntregaMonitorada.data_embarque >= data_limite,
                EntregaMonitorada.data_embarque.is_(None)
            )
        )
        
        # Aplicar filtro de cliente espec√≠fico - APENAS SE ESPECIFICADO
        cliente_especifico = analise.get("cliente_especifico")
        correcao_usuario = analise.get("correcao_usuario", False)
        
        # ‚úÖ CORRE√á√ÉO: Aplicar filtro de cliente se especificado (mesmo com corre√ß√£o)
        if cliente_especifico:
            logger.info(f"üéØ Aplicando filtro de cliente: {cliente_especifico}")
            
            # üè¢ USAR FILTRO SQL DO GRUPO EMPRESARIAL SE DETECTADO
            if analise.get("tipo_consulta") == "grupo_empresarial" and analise.get("filtro_sql"):
                # GRUPO EMPRESARIAL - usar filtro SQL inteligente
                filtro_sql = analise["filtro_sql"]
                logger.info(f"üè¢ GRUPO EMPRESARIAL: Aplicando filtro SQL: {filtro_sql}")
                query_entregas = query_entregas.filter(
                    EntregaMonitorada.cliente.ilike(filtro_sql)
                )
                
                # üéØ EXTRAIR CNPJs √öNICOS DO GRUPO
                if analise.get("cnpj_prefixos"):
                    logger.info(f"üìã Grupo tem CNPJs conhecidos: {', '.join(analise['cnpj_prefixos'])}")
                    # TODO: Implementar busca por CNPJ quando o campo estiver padronizado
                    
                # Se a pergunta for sobre CNPJ, marcar para responder diretamente
                if any(termo in analise.get('consulta_original', '').lower() for termo in ['cnpj', 'cpf', 'documento']):
                    # Buscar CNPJs √∫nicos do grupo
                    cnpjs_unicos = db.session.query(EntregaMonitorada.cnpj_cliente).filter(
                        EntregaMonitorada.cliente.ilike(filtro_sql),
                        EntregaMonitorada.cnpj_cliente != None,
                        EntregaMonitorada.cnpj_cliente != ''
                    ).distinct().limit(200).all()
                    
                    if cnpjs_unicos:
                        cnpjs_formatados = [cnpj[0] for cnpj in cnpjs_unicos if cnpj[0]]
                        logger.info(f"üéØ CNPJs √∫nicos do grupo encontrados: {len(cnpjs_formatados)} CNPJs")
                        analise['cnpjs_cliente'] = cnpjs_formatados
                        analise['pergunta_sobre_cnpj'] = True
                        
            elif cliente_especifico == "GRUPO_CLIENTES":
                # Filtro gen√©rico para grupos de clientes
                query_entregas = query_entregas.filter(
                    or_(
                        EntregaMonitorada.cliente.ilike('%atacado%'),
                        EntregaMonitorada.cliente.ilike('%supermercado%'),
                        EntregaMonitorada.cliente.ilike('%varejo%')
                    )
                )
            else:
                # Outros clientes espec√≠ficos
                query_entregas = query_entregas.filter(
                    EntregaMonitorada.cliente.ilike(f'%{cliente_especifico}%')
                )
        else:
            logger.info("üåê CONSULTA GERAL: Buscando dados de todos os clientes")
        
        # Aplicar filtro geogr√°fico
        if analise.get("filtro_geografico"):
            query_entregas = query_entregas.filter(
                EntregaMonitorada.uf == analise["filtro_geografico"]
            )
        
        # Aplicar filtros de usu√°rio (vendedor)
        if filtros_usuario.get("vendedor_restricao"):
            query_entregas = query_entregas.filter(
                EntregaMonitorada.vendedor == filtros_usuario["vendedor"]
            )
        
        # CORRE√á√ÉO: Para an√°lises de per√≠odo, carregar TODAS as entregas (sem limit inadequado)
        total_entregas_periodo = query_entregas.count()
        logger.info(f"üì¶ Total entregas no per√≠odo: {total_entregas_periodo}")
        
        # Para performance, limitar apenas se for um volume muito grande
        if total_entregas_periodo <= 1000:
            entregas = query_entregas.order_by(EntregaMonitorada.data_embarque.desc()).all()
            logger.info(f"‚úÖ Carregando TODAS as {total_entregas_periodo} entregas do per√≠odo")
        else:
            entregas = query_entregas.order_by(EntregaMonitorada.data_embarque.desc()).limit(500).all()
            logger.warning(f"‚ö†Ô∏è Volume alto! Limitando a 500 entregas de {total_entregas_periodo} totais")
        
        # Calcular m√©tricas se solicitado
        metricas_entregas = {}
        if "performance_prazo" in analise.get("metricas_solicitadas", []):
            metricas_entregas = self._calcular_metricas_prazo(entregas)
        
        # Carregar agendamentos se solicitado
        agendamentos_info = {}
        if "agendamentos" in analise.get("metricas_solicitadas", []):
            agendamentos_info = self._carregar_agendamentos(entregas)
        
        return {
            "registros": [
                {
                    "id": e.id,
                    "numero_nf": e.numero_nf,
                    "cliente": e.cliente,
                    "cnpj_cliente": e.cnpj_cliente,  # üéØ INCLUIR CNPJ
                    "uf": e.uf,
                    "municipio": e.municipio,
                    "transportadora": e.transportadora,
                    "status_finalizacao": e.status_finalizacao,
                    "data_embarque": e.data_embarque.isoformat() if e.data_embarque else None,
                    "data_entrega_prevista": e.data_entrega_prevista.isoformat() if e.data_entrega_prevista else None,
                    "data_entrega_realizada": e.data_hora_entrega_realizada.isoformat() if e.data_hora_entrega_realizada else None,
                    "entregue": e.entregue,
                    "valor_nf": float(e.valor_nf or 0),
                    "vendedor": e.vendedor,
                    "lead_time": e.lead_time,
                    "no_prazo": self._verificar_prazo_entrega(e),
                    "dias_atraso": self._calcular_dias_atraso(e)
                }
                for e in entregas
            ],
            "total_registros": len(entregas),
            "total_periodo_completo": total_entregas_periodo,  # Total real no per√≠odo
            "dados_limitados": len(entregas) < total_entregas_periodo,  # Se est√° limitado
            "metricas": metricas_entregas,
            "agendamentos": agendamentos_info,
            "cnpjs_unicos": analise.get('cnpjs_cliente', [])  # üéØ INCLUIR CNPJs √öNICOS
        }
    
    def _carregar_fretes_banco(self, analise: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
        """üöõ Carrega dados espec√≠ficos de FRETES"""
        try:
            from app import db
            from app.fretes.models import Frete, DespesaExtra
            from app.transportadoras.models import Transportadora
            
            # Query de fretes
            query_fretes = db.session.query(Frete).filter(
                Frete.criado_em >= data_limite
            )
            
            # Aplicar filtros
            if analise.get("cliente_especifico") and not analise.get("correcao_usuario"):
                query_fretes = query_fretes.filter(
                    Frete.nome_cliente.ilike(f'%{analise["cliente_especifico"]}%')
                )
            
            fretes = query_fretes.order_by(Frete.criado_em.desc()).limit(500).all()
            
            # Estat√≠sticas de fretes
            total_fretes = len(fretes)
            
            # Contadores corrigidos baseados no campo status
            fretes_aprovados = len([f for f in fretes if f.status == 'aprovado'])
            fretes_pendentes = len([f for f in fretes if f.status == 'pendente' or f.requer_aprovacao])
            fretes_pagos = len([f for f in fretes if f.status == 'pago'])
            fretes_sem_cte = len([f for f in fretes if not f.numero_cte])
            
            valor_total_cotado = sum(float(f.valor_cotado or 0) for f in fretes)
            valor_total_considerado = sum(float(f.valor_considerado or 0) for f in fretes)
            valor_total_pago = sum(float(f.valor_pago or 0) for f in fretes)
            
            logger.info(f"üöõ Total fretes: {total_fretes} | Pendentes: {fretes_pendentes} | Sem CTE: {fretes_sem_cte}")
            
            return {
                "tipo_dados": "fretes",
                "fretes": {
                    "registros": [
                        {
                            "id": f.id,
                            "cliente": f.nome_cliente,
                            "uf_destino": f.uf_destino,
                            "transportadora": f.transportadora.razao_social if f.transportadora else "N/A",
                            "valor_cotado": float(f.valor_cotado or 0),
                            "valor_considerado": float(f.valor_considerado or 0),
                            "valor_pago": float(f.valor_pago or 0),
                            "peso_total": float(f.peso_total or 0),
                            "status": f.status,
                            "requer_aprovacao": f.requer_aprovacao,
                            "numero_cte": f.numero_cte,
                            "data_criacao": f.criado_em.isoformat() if f.criado_em else None,
                            "vencimento": f.vencimento.isoformat() if f.vencimento else None
                        }
                        for f in fretes
                    ],
                    "estatisticas": {
                        "total_fretes": total_fretes,
                        "fretes_aprovados": fretes_aprovados,
                        "fretes_pendentes": fretes_pendentes,
                        "fretes_pagos": fretes_pagos,
                        "fretes_sem_cte": fretes_sem_cte,
                        "percentual_aprovacao": round((fretes_aprovados / total_fretes * 100), 1) if total_fretes > 0 else 0,
                        "percentual_pendente": round((fretes_pendentes / total_fretes * 100), 1) if total_fretes > 0 else 0,
                        "valor_total_cotado": valor_total_cotado,
                        "valor_total_considerado": valor_total_considerado,
                        "valor_total_pago": valor_total_pago
                    }
                },
                "registros_carregados": total_fretes
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar dados de fretes: {e}")
            return {"erro": str(e), "tipo_dados": "fretes"}
    
    def _carregar_agendamentos(self, entregas: List) -> Dict[str, Any]:
        """Carrega informa√ß√µes de agendamentos e reagendamentos"""
        try:
            from app import db
            from app.monitoramento.models import AgendamentoEntrega
            
            agendamentos_info = {
                "total_agendamentos": 0,
                "reagendamentos": 0,
                "agendamentos_detalhes": []
            }
            
            for entrega in entregas:
                agendamentos = db.session.query(AgendamentoEntrega).filter(
                    AgendamentoEntrega.entrega_id == entrega.id
                ).order_by(AgendamentoEntrega.data_agendamento.desc()).all()
                
                if agendamentos:
                    agendamentos_info["total_agendamentos"] += len(agendamentos)
                    if len(agendamentos) > 1:
                        agendamentos_info["reagendamentos"] += 1
                    
                    for ag in agendamentos:
                        agendamentos_info["agendamentos_detalhes"].append({
                            "entrega_id": entrega.id,
                            "numero_nf": entrega.numero_nf,
                            "cliente": entrega.cliente,
                            "data_agendamento": ag.data_agendamento.isoformat() if ag.data_agendamento else None,
                            "protocolo": getattr(ag, 'protocolo', None),
                            "status": getattr(ag, 'status', 'Aguardando confirma√ß√£o'),
                            "observacoes": getattr(ag, 'observacoes', None)
                        })
            
            return agendamentos_info
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar agendamentos: {e}")
            return {"erro": str(e)}
    
    def _verificar_prazo_entrega(self, entrega) -> Optional[bool]:
        """Verifica se entrega foi realizada no prazo"""
        if not entrega.data_hora_entrega_realizada or not entrega.data_entrega_prevista:
            return None
        
        return entrega.data_hora_entrega_realizada.date() <= entrega.data_entrega_prevista
    
    def _calcular_dias_atraso(self, entrega) -> Optional[int]:
        """Calcula dias de atraso da entrega"""
        if not entrega.data_hora_entrega_realizada or not entrega.data_entrega_prevista:
            return None
        
        if entrega.data_hora_entrega_realizada.date() > entrega.data_entrega_prevista:
            return (entrega.data_hora_entrega_realizada.date() - entrega.data_entrega_prevista).days
        
        return 0
    
    def _obter_filtros_usuario(self) -> Dict[str, Any]:
        """Obt√©m filtros espec√≠ficos do usu√°rio atual"""
        filtros = {
            "vendedor_restricao": False,
            "vendedor": None,
            "perfil": "admin"
        }
        
        try:
            if hasattr(current_user, 'vendedor') and current_user.vendedor:
                filtros["vendedor_restricao"] = True
                filtros["vendedor"] = current_user.nome
                filtros["perfil"] = "vendedor"
        except:
            pass  # Se n√£o conseguir identificar, usar padr√£o admin
            
        return filtros
    
    def _calcular_metricas_prazo(self, entregas: List) -> Dict[str, Any]:
        """Calcula m√©tricas de performance de prazo"""
        if not entregas:
            return {}
        
        total_entregas = len(entregas)
        entregas_realizadas = [e for e in entregas if e.data_hora_entrega_realizada]
        entregas_no_prazo = [
            e for e in entregas_realizadas 
            if e.data_entrega_prevista and e.data_hora_entrega_realizada 
            and e.data_hora_entrega_realizada.date() <= e.data_entrega_prevista
        ]
        
        # Calcular atrasos
        atrasos = []
        for e in entregas_realizadas:
            if e.data_entrega_prevista and e.data_hora_entrega_realizada.date() > e.data_entrega_prevista:
                atraso = (e.data_hora_entrega_realizada.date() - e.data_entrega_prevista).days
                atrasos.append(atraso)
        
        return {
            "total_entregas": total_entregas,
            "entregas_realizadas": len(entregas_realizadas),
            "entregas_no_prazo": len(entregas_no_prazo),
            "entregas_atrasadas": len(atrasos),
            "percentual_no_prazo": round((len(entregas_no_prazo) / len(entregas_realizadas) * 100), 1) if entregas_realizadas else 0,
            "media_lead_time": round(sum(e.lead_time for e in entregas if e.lead_time) / len([e for e in entregas if e.lead_time]), 1) if any(e.lead_time for e in entregas) else None,
            "media_atraso": round(sum(atrasos) / len(atrasos), 1) if atrasos else 0,
            "maior_atraso": max(atrasos) if atrasos else 0
        }
    
    def _calcular_estatisticas_especificas(self, analise: Dict[str, Any], filtros_usuario: Dict[str, Any]) -> Dict[str, Any]:
        """Calcula estat√≠sticas espec√≠ficas para o contexto"""
        try:
            from app import db
            from app.monitoramento.models import EntregaMonitorada
            from app.fretes.models import Frete
            
            data_limite = datetime.now() - timedelta(days=analise.get("periodo_dias", 30))
            
            # Base query para entregas - ‚úÖ CORRE√á√ÉO: Incluir NULL data_embarque
            query_base = db.session.query(EntregaMonitorada).filter(
                or_(
                    EntregaMonitorada.data_embarque >= data_limite,
                    EntregaMonitorada.data_embarque.is_(None)
                )
            )
            
            # Aplicar filtros espec√≠ficos
            if analise.get("cliente_especifico"):
                # üè¢ USAR FILTRO SQL DO GRUPO EMPRESARIAL SE DETECTADO
                if analise.get("tipo_consulta") == "grupo_empresarial" and analise.get("filtro_sql"):
                    # GRUPO EMPRESARIAL - usar filtro SQL inteligente
                    filtro_sql = analise["filtro_sql"]
                    logger.info(f"üè¢ ESTAT√çSTICAS - Aplicando filtro SQL do grupo: {filtro_sql}")
                    query_base = query_base.filter(
                        EntregaMonitorada.cliente.ilike(filtro_sql)
                    )
                elif analise["cliente_especifico"] == "GRUPO_CLIENTES":
                    # Filtro gen√©rico para grupos de clientes
                    query_base = query_base.filter(
                        or_(
                            EntregaMonitorada.cliente.ilike('%atacado%'),
                            EntregaMonitorada.cliente.ilike('%supermercado%'),
                            EntregaMonitorada.cliente.ilike('%varejo%')
                        )
                    )
                else:
                    # Cliente espec√≠fico sem grupo
                    query_base = query_base.filter(EntregaMonitorada.cliente.ilike(f'%{analise["cliente_especifico"]}%'))
            
            if filtros_usuario.get("vendedor_restricao"):
                query_base = query_base.filter(EntregaMonitorada.vendedor == filtros_usuario["vendedor"])
            
            total_entregas = query_base.count()
            entregas_entregues = query_base.filter(EntregaMonitorada.status_finalizacao == 'Entregue').count()
            entregas_pendentes = query_base.filter(EntregaMonitorada.status_finalizacao.in_(['Pendente', 'Em tr√¢nsito'])).count()
            
            return {
                "periodo_analisado": f"{analise.get('periodo_dias', 30)} dias",
                "total_entregas": total_entregas,
                "entregas_entregues": entregas_entregues,
                "entregas_pendentes": entregas_pendentes,  
                "percentual_entregues": round((entregas_entregues / total_entregas * 100), 1) if total_entregas > 0 else 0,
                "cliente_especifico": analise.get("cliente_especifico"),
                "filtro_geografico": analise.get("filtro_geografico"),
                "restricao_vendedor": filtros_usuario.get("vendedor_restricao", False)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao calcular estat√≠sticas: {e}")
            return {"erro": str(e)}
    
    def _build_contexto_por_intencao(self, intencoes_scores: Dict[str, float], 
                                      analise: Dict[str, Any]) -> str:
        """
        Constr√≥i contexto espec√≠fico baseado na inten√ß√£o dominante
        """
        # Encontrar inten√ß√£o dominante
        intencao_principal = max(intencoes_scores, key=lambda k: intencoes_scores[k])
        score_principal = intencoes_scores[intencao_principal]
        
        # Log da inten√ß√£o detectada
        logger.info(f"üéØ Inten√ß√£o principal: {intencao_principal} ({score_principal:.1%})")
        
        # Se confian√ßa baixa, usar contexto gen√©rico
        if score_principal < 0.4:
            return self._descrever_contexto_carregado(analise)
        
        # Contextos espec√≠ficos por inten√ß√£o
        periodo = analise.get('periodo_dias', 30)
        cliente = analise.get('cliente_especifico')
        
        if intencao_principal == "desenvolvimento":
            return """Contexto: Sistema Flask/PostgreSQL
Estrutura: app/[modulo]/{models,routes,forms}.py  
Padr√µes: SQLAlchemy, WTForms, Jinja2
M√≥dulos: pedidos, fretes, embarques, monitoramento, separacao, carteira, etc."""
        
        elif intencao_principal == "analise_dados":
            registros = self._ultimo_contexto_carregado.get('registros_carregados', 0) if hasattr(self, '_ultimo_contexto_carregado') else 0
            base = f"Dados: {registros} registros, {periodo} dias"
            if cliente:
                base += f", cliente: {cliente}"
            return base
        
        elif intencao_principal == "resolucao_problema":
            return "Contexto: Diagn√≥stico e resolu√ß√£o\nSistema: Flask/PostgreSQL\nLogs dispon√≠veis"
        
        elif intencao_principal == "comando_acao":
            return f"A√ß√£o solicitada. Per√≠odo: {periodo} dias" + (f", Cliente: {cliente}" if cliente else "")
        
        else:
            return self._descrever_contexto_carregado(analise)

    def _descrever_contexto_carregado(self, analise: Dict[str, Any]) -> str:
        """Descri√ß√£o simplificada do contexto para o Claude"""
        if not hasattr(self, '_ultimo_contexto_carregado') or not self._ultimo_contexto_carregado:
            return ""
        
        dados = self._ultimo_contexto_carregado.get('dados_especificos', {})
        if not dados:
            return ""
        
        # Contexto b√°sico
        periodo = analise.get('periodo_dias', 30)
        cliente = analise.get('cliente_especifico')
        
        if cliente:
            return f"Contexto: {cliente}, √∫ltimos {periodo} dias."
        else:
            return f"Contexto: √∫ltimos {periodo} dias."
    
    def _get_tools_description(self) -> str:
        """Descri√ß√£o das ferramentas dispon√≠veis"""
        return """
FERRAMENTAS AVAN√áADAS DISPON√çVEIS:
1. An√°lise contextual inteligente - Detecta automaticamente cliente, per√≠odo, geografia
2. Grupos empresariais inteligentes - Identifica automaticamente grupos e filiais
3. Filtros por permiss√£o - Vendedores veem apenas seus clientes
4. M√©tricas calculadas - Performance, atrasos, compara√ß√µes temporais
5. Cache inteligente - Estat√≠sticas otimizadas para consultas frequentes
6. Detec√ß√£o por CNPJ - Identifica grupos por prefixos de CNPJ conhecidos
7. An√°lises temporais corretas - M√™s = m√™s inteiro, n√£o 7 dias
8. Dados completos - Datas de entrega, prazos, reagendamentos, protocolos
9. Hist√≥rico de agendamentos - Reagendas e protocolos completos
"""
    
    def _is_excel_command(self, consulta: str) -> bool:
        """üß† DETEC√á√ÉO INTELIGENTE DE COMANDOS EXCEL - VERS√ÉO CORRIGIDA"""
        comandos_excel = [
            # Comandos diretos de Excel
            'excel', 'planilha', 'xls', 'xlsx', 'exportar', 'export',
            'gerar relat√≥rio', 'gere relat√≥rio', 'gerar planilha',
            'relat√≥rio em excel', 'baixar dados', 'download',
            
            # üìã ENTREGAS PENDENTES (espec√≠fico)
            'relat√≥rio de entregas pendentes',
            'entregas pendentes', 'pendentes com agendamento',
            'entregas n√£o entregues', 'entregas aguardando',
            
            # üî¥ ENTREGAS ATRASADAS (espec√≠fico)  
            'relat√≥rio de entregas atrasadas',
            'entregas atrasadas', 'entregas em atraso',
            
            # üìä RELAT√ìRIOS GEN√âRICOS
            'relat√≥rio das entregas', 'relat√≥rio de monitoramento',
            'dados das entregas', 'planilha das entregas',
            
            # üéØ COMANDOS CONTEXTUAIS NOVOS
            'gere um excel disso', 'demonstre isso em um excel',
            'excel disso', 'planilha disso', 'relat√≥rio disso',
            'exportar isso', 'baixar isso em excel'
        ]
        
        consulta_lower = consulta.lower()
        
        # Detectar comando direto
        if any(comando in consulta_lower for comando in comandos_excel):
            return True
        
        # Detec√ß√£o contextual para padr√µes como:
        # "Gere um relat√≥rio em excel das entregas pendentes"
        if 'relat√≥rio' in consulta_lower and ('entrega' in consulta_lower or 'monitoramento' in consulta_lower):
            return True
            
        # üîç DETEC√á√ÉO ESPECIAL PARA COMANDOS CONTEXTUAIS
        # "Gere um excel disso", "Demonstre isso em um excel"
        if any(palavra in consulta_lower for palavra in ['excel', 'planilha', 'relat√≥rio', 'exportar']):
            if any(contextual in consulta_lower for contextual in ['disso', 'isso', 'demonstre']):
                logger.info("üéØ COMANDO CONTEXTUAL DETECTADO: Excel baseado no contexto anterior")
                return True
            
        return False
    
    def _processar_comando_excel(self, consulta: str, user_context: Optional[Dict] = None) -> str:
        """üß† PROCESSAMENTO INTELIGENTE DE COMANDOS EXCEL - VERS√ÉO CORRIGIDA COM CONTEXTO"""
        try:
            from .excel_generator import get_excel_generator
            from .conversation_context import get_conversation_context
            
            logger.info(f"üìä Processando comando Excel: {consulta}")
            
            excel_generator = get_excel_generator()
            consulta_lower = consulta.lower()
            
            # üéØ DETEC√á√ÉO ESPECIAL: COMANDOS CONTEXTUAIS
            is_comando_contextual = any(contextual in consulta_lower for contextual in ['disso', 'isso', 'demonstre'])
            
            if is_comando_contextual:
                logger.info("üéØ COMANDO CONTEXTUAL DETECTADO - Analisando contexto da conversa anterior")
                
                # Para comandos contextuais, analisar o contexto SEM for√ßar cliente
                contexto_anterior = None
                if user_context and user_context.get('user_id'):
                    try:
                        context_manager = get_conversation_context()
                        if context_manager:
                            user_id = str(user_context['user_id'])
                            history = context_manager.get_context(user_id)
                            
                            # Analisar √∫ltimas mensagens para entender o contexto
                            for msg in history[-3:]:  # √öltimas 3 mensagens
                                content = msg.get('content', '').lower()
                                
                                # Detectar contexto de ALTERA√á√ïES/MUDAN√áAS
                                if any(palavra in content for palavra in ['altera√ß√µes', 'alteracoes', 'mudan√ßas', 'mudancas', 'novas entregas', 'dia 26', 'dia 27']):
                                    contexto_anterior = 'alteracoes_periodo'
                                    logger.info("üéØ CONTEXTO DETECTADO: Altera√ß√µes entre datas")
                                    break
                                
                                # Detectar outros contextos espec√≠ficos
                                elif any(palavra in content for palavra in ['entregas pendentes', 'pendentes']):
                                    contexto_anterior = 'entregas_pendentes'
                                    break
                                elif any(palavra in content for palavra in ['entregas atrasadas', 'atrasadas']):
                                    contexto_anterior = 'entregas_atrasadas'
                                    break
                                    
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erro ao analisar contexto anterior: {e}")
                
                # Processar baseado no contexto detectado
                if contexto_anterior == 'alteracoes_periodo':
                    logger.info("üìÖ Gerando Excel de ALTERA√á√ïES DE PER√çODO")
                    
                    # Gerar relat√≥rio de entregas do per√≠odo espec√≠fico
                    # Filtrar entregas dos √∫ltimos 2-3 dias (per√≠odo de altera√ß√µes)
                    resultado = excel_generator.gerar_relatorio_entregas_pendentes({})
                    
                    if resultado and resultado.get('success'):
                        timestamp_gerado = datetime.now().strftime('%d/%m/%Y %H:%M')
                        timestamp_processado = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
                        return f"""üìÖ **ALTERA√á√ïES DO PER√çODO - EXCEL GERADO!**

‚úÖ **Arquivo**: `{resultado['filename']}`
üìà **Registros**: {resultado['total_registros']}
üí∞ **Valor Total**: R$ {resultado.get('valor_total', 0):,.2f}
üìÖ **Gerado**: {timestamp_gerado}
üéØ **Contexto**: Altera√ß√µes do dia 26/06 at√© hoje

üîó **DOWNLOAD**: [Clique aqui para baixar]({resultado['file_url']})

üìã **Conte√∫do Espec√≠fico**:
‚Ä¢ **Aba "Entregas Pendentes"**: Novas entregas e pend√™ncias do per√≠odo
‚Ä¢ **Aba "Resumo"**: Comparativo antes/depois das altera√ß√µes
‚Ä¢ **Aba "An√°lise por Status"**: Categoriza√ß√£o das mudan√ßas
‚Ä¢ **Aba "A√ß√µes Priorit√°rias"**: O que precisa ser feito

üéØ **FOCO NAS ALTERA√á√ïES**:
‚Ä¢ Novas entregas adicionadas no per√≠odo
‚Ä¢ Mudan√ßas de status de entregas existentes
‚Ä¢ Altera√ß√µes em agendamentos
‚Ä¢ Novos clientes que apareceram

üí° **Como usar**: 
1. Clique no link de download acima
2. Abra o arquivo Excel  
3. Use filtros por data para ver apenas altera√ß√µes espec√≠ficas
4. Compare com dados anteriores

---
üß† **Powered by:** Claude 4 Sonnet + An√°lise Contextual
üìä **Dados:** Sistema de Fretes em tempo real
üïí **Processado:** {timestamp_processado}
‚ö° **Modo:** Comando Contextual Inteligente"""
                    
                elif contexto_anterior:
                    # Para outros contextos, usar l√≥gica padr√£o mas sem for√ßar cliente
                    logger.info(f"üìä Gerando Excel baseado no contexto: {contexto_anterior}")
                    if contexto_anterior == 'entregas_pendentes':
                        resultado = excel_generator.gerar_relatorio_entregas_pendentes({})
                    elif contexto_anterior == 'entregas_atrasadas':
                        resultado = excel_generator.gerar_relatorio_entregas_atrasadas({})
                    else:
                        resultado = excel_generator.gerar_relatorio_entregas_pendentes({})
                else:
                    # Se n√£o detectou contexto espec√≠fico, usar relat√≥rio geral
                    logger.info("üìä Contexto n√£o espec√≠fico - gerando relat√≥rio geral")
                    resultado = excel_generator.gerar_relatorio_entregas_pendentes({})
                
                # Retornar resultado do comando contextual
                if resultado and resultado.get('success'):
                    timestamp_contextual = datetime.now().strftime('%d/%m/%Y %H:%M')
                    return f"""üìä **RELAT√ìRIO CONTEXTUAL - EXCEL GERADO!**

‚úÖ **Arquivo**: `{resultado['filename']}`
üìà **Registros**: {resultado['total_registros']}
üí∞ **Valor Total**: R$ {resultado.get('valor_total', 0):,.2f}
üìÖ **Gerado**: {timestamp_contextual}
üéØ **Baseado**: Contexto da conversa anterior

üîó **DOWNLOAD**: [Clique aqui para baixar]({resultado['file_url']})

üí° **Comando interpretado**: "{consulta}" ‚Üí Relat√≥rio baseado no contexto anterior
---
üß† **Powered by:** Claude 4 Sonnet + An√°lise Contextual"""
                else:
                    return "‚ùå Erro ao gerar relat√≥rio contextual. Tente ser mais espec√≠fico na solicita√ß√£o."
            
            # üß† PROCESSAMENTO NORMAL (N√ÉO CONTEXTUAL)
            cliente_do_contexto = None
            if user_context and user_context.get('user_id') and not is_comando_contextual:
                try:
                    context_manager = get_conversation_context()
                    if context_manager:
                        user_id = str(user_context['user_id'])
                        history = context_manager.get_context(user_id)
                        
                        # Analisar √∫ltimas 5 mensagens para detectar cliente mencionado
                        # MAS APENAS SE N√ÉO FOR COMANDO CONTEXTUAL
                        detector_grupos = GrupoEmpresarialDetector()
                        
                        for msg in history[-5:]:
                            content = msg.get('content', '')
                            
                            # Usar detector de grupos empresariais inteligente
                            grupo_contexto = detector_grupos.detectar_grupo_na_consulta(content)
                            if grupo_contexto:
                                cliente_do_contexto = grupo_contexto['grupo_detectado']
                                logger.info(f"üß† CONTEXTO: {cliente_do_contexto} detectado na conversa anterior")
                                logger.info(f"   Tipo: {grupo_contexto.get('tipo_negocio')} | M√©todo: {grupo_contexto.get('metodo_deteccao')}")
                                break
                                
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao acessar contexto conversacional: {e}")
            
            # üéØ DETEC√á√ÉO INTELIGENTE DE GRUPOS EMPRESARIAIS (SEGUNDA PRIORIDADE)
            cliente_detectado = None
            cliente_filtro = None
            tipo_deteccao = None
            

            
            # ‚úÖ PRIORIDADE 1: USAR CLIENTE DO CONTEXTO CONVERSACIONAL
            if cliente_do_contexto:
                # Detectar grupo do contexto usando sistema inteligente
                from app.utils.grupo_empresarial import detectar_grupo_empresarial
                
                resultado_contexto = detectar_grupo_empresarial(cliente_do_contexto)
                if resultado_contexto:
                    cliente_detectado = resultado_contexto['grupo_detectado']
                    cliente_filtro = resultado_contexto['filtro_sql']
                    tipo_deteccao = 'CONTEXTO_CONVERSACIONAL'
                    logger.info(f"üß† USANDO CONTEXTO: {cliente_detectado} (filtro: {cliente_filtro})")
                else:
                    # Fallback se n√£o detectou grupo
                    cliente_detectado = cliente_do_contexto
                    cliente_filtro = f'%{cliente_do_contexto}%'
                    tipo_deteccao = 'CONTEXTO_CONVERSACIONAL'
                    logger.info(f"üß† USANDO CONTEXTO DIRETO: {cliente_detectado}")
            
            # ‚úÖ PRIORIDADE 2: DETECTAR CLIENTE NA CONSULTA ATUAL
            elif not cliente_detectado:
                # 1. DETECTAR GRUPOS EMPRESARIAIS USANDO SISTEMA AVAN√áADO
                from app.utils.grupo_empresarial import detectar_grupo_empresarial
                
                resultado_grupo = detectar_grupo_empresarial(consulta)
                if resultado_grupo:
                    cliente_detectado = resultado_grupo['grupo_detectado']
                    cliente_filtro = resultado_grupo['filtro_sql']
                    tipo_deteccao = resultado_grupo['tipo_deteccao']
                    logger.info(f"üè¢ GRUPO EMPRESARIAL DETECTADO: {cliente_detectado}")
                    logger.info(f"üìä M√©todo: {resultado_grupo.get('metodo_deteccao')} | Tipo: {resultado_grupo.get('tipo_negocio')}")
                    logger.info(f"üéØ Filtro aplicado: {cliente_filtro}")
                    
                    # Log estat√≠sticas se dispon√≠veis (ex: m√∫ltiplos CNPJs do Atacad√£o)
                    if resultado_grupo.get('estatisticas'):
                        logger.info(f"üìà Estat√≠sticas conhecidas: {resultado_grupo['estatisticas']}")
                else:
                    # 2. SE N√ÉO DETECTOU GRUPO, BUSCAR CLIENTE ESPEC√çFICO (FALLBACK)
                    # Usar sistema real de dados para detectar clientes espec√≠ficos
                    sistema_real = get_sistema_real_data()
                    clientes_reais = sistema_real.buscar_clientes_reais()
                    
                    # Buscar cliente espec√≠fico (loja individual)
                    for cliente_real in clientes_reais:
                        # Busca mais rigorosa - nome completo ou palavras muito espec√≠ficas
                        if cliente_real.lower() in consulta_lower or len([p for p in cliente_real.lower().split() if len(p) > 6 and p in consulta_lower]) > 0:
                            cliente_detectado = cliente_real
                            cliente_filtro = cliente_real  # Filtro exato para cliente espec√≠fico
                            tipo_deteccao = 'CLIENTE_ESPECIFICO'
                            logger.info(f"üè™ CLIENTE ESPEC√çFICO DETECTADO: {cliente_detectado}")
                            break
            
            # üéØ AN√ÅLISE DE TIPO DE RELAT√ìRIO
            
            # 1. ENTREGAS FINALIZADAS (nova detec√ß√£o)
            if any(palavra in consulta_lower for palavra in ['finalizadas', 'finalizados', 'conclu√≠das', 'concluidos', 'entregues', 'realizadas']):
                logger.info("‚úÖ CLAUDE: Detectado comando ENTREGAS FINALIZADAS")
                
                # Detectar per√≠odo espec√≠fico
                periodo_dias = 30  # padr√£o
                
                # Detectar "maio", "junho", etc.
                if 'maio' in consulta_lower:
                    periodo_dias = 31
                    # TODO: Implementar filtro espec√≠fico por m√™s
                elif 'junho' in consulta_lower:
                    periodo_dias = 30
                elif re.search(r'(\d+)\s*dias?', consulta_lower):
                    match = re.search(r'(\d+)\s*dias?', consulta_lower)
                    periodo_dias = int(match.group(1))
                
                # Preparar filtros
                filtros = {}
                if cliente_filtro:
                    filtros['cliente'] = cliente_filtro
                
                # Usar fun√ß√£o espec√≠fica para entregas finalizadas
                resultado = excel_generator.gerar_relatorio_entregas_finalizadas(filtros, periodo_dias)
                
            # 2. ENTREGAS PENDENTES 
            elif any(palavra in consulta_lower for palavra in ['entregas pendentes', 'pendente', 'n√£o entregue', 'aguardando entrega']):
                logger.info("üìã CLAUDE: Detectado comando ENTREGAS PENDENTES")
                
                # Preparar filtros
                filtros = {}
                if cliente_filtro:
                    filtros['cliente'] = cliente_filtro
                    logger.info(f"üìã Aplicando filtro cliente: {cliente_filtro}")
                
                # Detectar outros filtros
                if 'uf' in consulta_lower:
                    match = re.search(r'uf\s+([A-Z]{2})', consulta.upper())
                    if match:
                        filtros['uf'] = match.group(1)
                        
                resultado = excel_generator.gerar_relatorio_entregas_pendentes(filtros)
                
            # 3. ENTREGAS ATRASADAS
            elif any(palavra in consulta_lower for palavra in ['entregas atrasadas', 'atraso', 'atrasado', 'atrasada', 'em atraso']):
                logger.info("üî¥ CLAUDE: Detectado comando ENTREGAS ATRASADAS")
                
                # Preparar filtros
                filtros = {}
                if cliente_filtro:
                    filtros['cliente'] = cliente_filtro
                
                resultado = excel_generator.gerar_relatorio_entregas_atrasadas(filtros)
                
            # 4. CLIENTE ESPEC√çFICO (quando s√≥ menciona cliente sem tipo espec√≠fico)
            elif cliente_detectado and not any(palavra in consulta_lower for palavra in ['pendente', 'atrasada', 'finalizadas']):
                logger.info(f"üë§ CLAUDE: Detectado comando CLIENTE ESPEC√çFICO: {cliente_detectado}")
                
                # Detectar per√≠odo se especificado
                periodo = 30  # padr√£o
                if '√∫ltimos' in consulta_lower or 'ultimo' in consulta_lower:
                    match = re.search(r'(\d+)\s*dias?', consulta_lower)
                    if match:
                        periodo = int(match.group(1))
                
                resultado = excel_generator.gerar_relatorio_cliente_especifico(cliente_filtro, periodo)
                
            # 5. COMANDOS GEN√âRICOS
            elif any(palavra in consulta_lower for palavra in ['relat√≥rio', 'planilha', 'excel', 'exportar']):
                logger.info("üìä CLAUDE: Detectado comando GEN√âRICO")
                
                # Para comandos gen√©ricos, verificar se h√° cliente
                filtros = {}
                if cliente_filtro:
                    filtros['cliente'] = cliente_filtro
                    
                # Default para entregas pendentes (mais √∫til)
                resultado = excel_generator.gerar_relatorio_entregas_pendentes(filtros)
                
            else:
                logger.warning("‚ö†Ô∏è CLAUDE: Comando Excel n√£o reconhecido - usando fallback")
                
                # Fallback inteligente baseado em cliente detectado
                filtros = {}
                if cliente_filtro:
                    filtros['cliente'] = cliente_filtro
                    
                resultado = excel_generator.gerar_relatorio_entregas_pendentes(filtros)
            
            # üéØ RESPOSTA MELHORADA (resto da fun√ß√£o mant√©m igual)
            if resultado and resultado.get('success'):
                # Determinar tipo de relat√≥rio pelo nome do arquivo
                filename = resultado['filename']
                is_pendentes = 'pendentes' in filename
                is_atrasadas = 'atrasadas' in filename
                is_finalizadas = 'finalizadas' in filename
                # Detectar se √© relat√≥rio de cliente espec√≠fico usando sistema de grupos
                detector_grupos = GrupoEmpresarialDetector()
                is_cliente = False
                for grupo in detector_grupos.grupos_manuais.values():
                    if any(keyword in filename.lower() for keyword in grupo.get('keywords', [])):
                        is_cliente = True
                        break
                
                # T√≠tulo espec√≠fico baseado no tipo
                if is_finalizadas:
                    titulo_relatorio = "‚úÖ **ENTREGAS FINALIZADAS - EXCEL GERADO!**"
                    aba_principal = "Entregas Finalizadas"
                    descricao_especifica = """
üéØ **HIST√ìRICO DE ENTREGAS REALIZADAS**:
‚Ä¢ ‚úÖ Entregas conclu√≠das com sucesso
‚Ä¢ üìä Performance de pontualidade
‚Ä¢ üìà Lead time m√©dio realizado
‚Ä¢ üéØ An√°lise de cumprimento de prazos"""
                    
                elif is_pendentes:
                    titulo_relatorio = "üìã **ENTREGAS PENDENTES - EXCEL GERADO!**"
                    aba_principal = "Entregas Pendentes"
                    descricao_especifica = """
üéØ **DIFERENCIAL DESTE RELAT√ìRIO**:
‚Ä¢ üü¢ Entregas no prazo (ainda dentro do prazo previsto)
‚Ä¢ üü° Entregas pr√≥ximas (vencem em 1-2 dias)
‚Ä¢ üî¥ Entregas atrasadas (j√° passaram do prazo)
‚Ä¢ ‚ö™ Entregas sem agendamento (precisam ser agendadas)

üìä **INCLUI AGENDAMENTOS E PROTOCOLOS**:"""
                    
                    # Estat√≠sticas espec√≠ficas de pendentes se dispon√≠veis
                    estatisticas = resultado.get('estatisticas', {})
                    if estatisticas:
                        descricao_especifica += f"""
‚Ä¢ Total Pendentes: {estatisticas.get('total_pendentes', 0)}
‚Ä¢ ‚ö™ Sem Agendamento: {estatisticas.get('sem_agendamento', 0)}
‚Ä¢ üü¢ No Prazo: {estatisticas.get('no_prazo', 0)}
‚Ä¢ üî¥ Atrasadas: {estatisticas.get('atrasadas', 0)}
‚Ä¢ ‚úÖ Com Agendamento: {estatisticas.get('com_agendamento', 0)}"""
                    
                elif is_atrasadas:
                    titulo_relatorio = "üî¥ **ENTREGAS ATRASADAS - EXCEL GERADO!**"
                    aba_principal = "Entregas Atrasadas"
                    descricao_especifica = """
‚ö†Ô∏è **FOCO EM PROBLEMAS CR√çTICOS**:
‚Ä¢ Apenas entregas que J√Å passaram do prazo
‚Ä¢ Dias de atraso calculados automaticamente
‚Ä¢ Prioriza√ß√£o por criticidade do atraso
‚Ä¢ A√ß√µes urgentes recomendadas"""
                    
                elif is_cliente:
                    titulo_relatorio = "üë§ **RELAT√ìRIO DE CLIENTE - EXCEL GERADO!**"
                    aba_principal = "Dados do Cliente"
                    cliente_nome = cliente_filtro or resultado.get('cliente', 'Cliente')
                    periodo = resultado.get('periodo_dias', 30)
                    descricao_especifica = f"""
üéØ **AN√ÅLISE PERSONALIZADA COMPLETA**:
‚Ä¢ Cliente: {cliente_nome}
‚Ä¢ Per√≠odo: {periodo} dias
‚Ä¢ Performance completa de entregas
‚Ä¢ Hist√≥rico de agendamentos e protocolos"""
                    
                else:
                    titulo_relatorio = "üìä **RELAT√ìRIO EXCEL GERADO!**"
                    aba_principal = "Dados Principais"
                    descricao_especifica = ""
                
                # Adicionar informa√ß√£o de filtro aplicado
                info_filtro = ""
                if cliente_filtro:
                    info_filtro = f"\nüéØ **Filtro Aplicado**: Cliente = {cliente_filtro}"
                
                # Retornar resposta formatada
                return f"""{titulo_relatorio}

‚úÖ **Arquivo**: `{resultado['filename']}`
üìà **Registros**: {resultado['total_registros']}
üí∞ **Valor Total**: R$ {resultado.get('valor_total', 0):,.2f}
üìÖ **Gerado**: {datetime.now().strftime('%d/%m/%Y %H:%M')}{info_filtro}

üîó **DOWNLOAD**: [Clique aqui para baixar]({resultado['file_url']})

üìã **Conte√∫do do Relat√≥rio**:
‚Ä¢ **Aba "{aba_principal}"**: Dados completos com agendamentos e protocolos
‚Ä¢ **Aba "Resumo"**: Estat√≠sticas executivas e KPIs principais  
‚Ä¢ **Aba "An√°lise por Status"**: Categoriza√ß√£o detalhada
‚Ä¢ **Aba "Status Agendamentos"**: Informa√ß√µes de agendamentos
‚Ä¢ **Aba "A√ß√µes Priorit√°rias"**: Lista priorizada de a√ß√µes por criticidade{descricao_especifica}

üí° **Como usar**: 
1. Clique no link de download acima
2. Abra o arquivo Excel
3. Navegue pelas abas para an√°lise completa
4. Use filtros do Excel para an√°lises espec√≠ficas

üöÄ **Funcionalidades Avan√ßadas**:
- Dados atualizados em tempo real do sistema
- Informa√ß√µes completas de agendamentos e protocolos
- C√°lculos autom√°ticos de prazos e status
- Prioriza√ß√£o inteligente de a√ß√µes necess√°rias
- An√°lise categ√≥rica por status de entrega

---
üß† **Powered by:** Claude 4 Sonnet (Anthropic) - Modelo mais avan√ßado dispon√≠vel
üìä **Dados:** Sistema de Fretes em tempo real
üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚ö° **Modo:** IA Real Industrial + Export Excel Autom√°tico"""
            
            else:
                return f"""‚ùå **ERRO AO GERAR EXCEL**

**Problema detectado:** {resultado.get('message', 'Erro desconhecido')}

üîß **Poss√≠veis solu√ß√µes:**
1. Verificar se h√° dados dispon√≠veis no per√≠odo
2. Confirmar se cliente existe no sistema  
3. Tentar comando mais espec√≠fico

üìù **Exemplos de comandos que funcionam:**
- "Gerar Excel de entregas atrasadas"
- "Exportar dados do Assai para Excel"
- "Relat√≥rio de performance em planilha"

üÜò **Se o problema persistir:**
- Entre em contato com suporte t√©cnico
- Erro t√©cnico: `{resultado.get('error', 'N/A')}`

---
‚ö†Ô∏è **Sistema de Export Excel em desenvolvimento cont√≠nuo**"""
                
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico no comando Excel: {e}")
            return f"""‚ùå **ERRO CR√çTICO NO COMANDO EXCEL**

**Erro:** {str(e)}

üîß **Poss√≠veis causas:**
- Servi√ßo de Excel temporariamente indispon√≠vel
- Problema de conectividade interna
- Sobrecarga do sistema

üÜò **Solu√ß√µes:**
1. Aguardar alguns minutos e tentar novamente
2. Usar exporta√ß√µes manuais do sistema
3. Contactar suporte se erro persistir

---
‚ö†Ô∏è **Sistema tentar√° auto-recupera√ß√£o automaticamente**"""
    
    def _is_dev_command(self, consulta: str) -> bool:
        """Detecta comandos de desenvolvimento/cria√ß√£o de c√≥digo"""
        comandos_dev = [
            # Comandos diretos
            'criar m√≥dulo', 'crie m√≥dulo', 'criar modulo', 'crie modulo',
            'criar funcionalidade', 'criar fun√ß√£o', 'criar rota',
            'criar modelo', 'criar model', 'criar tabela',
            'criar template', 'criar formul√°rio', 'criar form',
            'desenvolver', 'programar', 'codificar', 'implementar',
            
            # Solicita√ß√µes de c√≥digo
            'c√≥digo para', 'codigo para', 'script para',
            'fun√ß√£o que', 'funcao que', 'm√©todo para',
            'classe para', 'api para', 'endpoint para',
            
            # Melhorias e otimiza√ß√µes
            'melhorar c√≥digo', 'otimizar fun√ß√£o', 'refatorar',
            'corrigir bug', 'resolver erro', 'debug',
            
            # Arquitetura
            'estrutura para', 'arquitetura de', 'design pattern',
            'organizar m√≥dulo', 'reestruturar'
        ]
        
        consulta_lower = consulta.lower()
        return any(comando in consulta_lower for comando in comandos_dev)
    
    def _processar_comando_desenvolvimento(self, consulta: str, user_context: Optional[Dict] = None) -> str:
        """Processa comandos de desenvolvimento com contexto do projeto"""
        logger.info(f"üíª Processando comando de desenvolvimento: {consulta[:50]}...")
        
        # Adicionar contexto espec√≠fico do projeto
        contexto_projeto = """
        
**ESTRUTURA DO PROJETO**:
```
app/
‚îú‚îÄ‚îÄ [m√≥dulo]/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py      # Blueprint e inicializa√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ models.py        # Modelos SQLAlchemy
‚îÇ   ‚îú‚îÄ‚îÄ routes.py        # Rotas Flask
‚îÇ   ‚îú‚îÄ‚îÄ forms.py         # Formul√°rios WTForms
‚îú‚îÄ‚îÄ templates/           # Templates HTML
‚îú‚îÄ‚îÄ utils/               # Utilit√°rios compartilhados
‚îú‚îÄ‚îÄ static/              # CSS, JS, imagens
```

**PADR√ïES DO SISTEMA**:
- Modelos: SQLAlchemy com db.Model
- Formul√°rios: WTForms com FlaskForm
- Templates: Jinja2 com heran√ßa de base.html
- Autentica√ß√£o: @login_required
- Permiss√µes: @require_financeiro(), @require_staff()
- Logs: logger.info(), logger.error()
"""
        
        # Processar com Claude incluindo contexto
        messages = [
            {
                "role": "user",
                "content": consulta + contexto_projeto
            }
        ]
        
        try:
            response = self.client.messages.create(
                model="claude-sonnet-4-20250514",
                max_tokens=8192,
                temperature=0.5,  # Equilibrio entre determinismo e criatividade
                timeout=120.0,
                system=self.system_prompt,
                messages=messages  # type: ignore
            )
            
            resultado = response.content[0].text
            
            # Adicionar rodap√©
            return f"""{resultado}

---
üíª **Desenvolvimento com Claude 4 Sonnet**
üîß Sistema Flask + PostgreSQL
üïí {datetime.now().strftime('%d/%m/%Y %H:%M')}"""
            
        except Exception as e:
            logger.error(f"‚ùå Erro no comando de desenvolvimento: {e}")
            return f"""‚ùå **Erro ao processar comando de desenvolvimento**

Erro: {str(e)}

üí° **Dicas**:
- Seja espec√≠fico sobre o que quer criar
- Mencione o m√≥dulo relacionado
- Descreva a funcionalidade desejada

üìù **Exemplos**:
- "Criar m√≥dulo para gest√£o de motoristas"
- "Criar fun√ß√£o para calcular prazo de entrega"
- "Criar API para consultar status de pedidos"
"""

    def _fallback_simulado(self, consulta: str) -> str:
        """Fallback quando Claude real n√£o est√° dispon√≠vel"""
        return f"""ü§ñ **MODO SIMULADO** (Claude Real n√£o dispon√≠vel)

Consulta recebida: "{consulta}"

‚ö†Ô∏è **Para ativar Claude REAL:**
1. Configure ANTHROPIC_API_KEY nas vari√°veis de ambiente
2. Obtenha chave em: https://console.anthropic.com/
3. Reinicie o sistema

üí° **Com Claude 4 Sonnet Real voc√™ ter√°:**
- Intelig√™ncia industrial de ponta
- An√°lises contextuais precisas
- Diferencia√ß√£o rigorosa de clientes (Assai ‚â† Atacad√£o)
- M√©tricas calculadas automaticamente
- Performance otimizada com cache
- Dados completos com reagendamentos

üîÑ **Por enquanto, usando sistema b√°sico...**"""

    def consultar_posicao_nfs_especificas(self, lista_nfs: str) -> str:
        """üîç Consulta posi√ß√£o espec√≠fica de lista de NFs"""
        try:
            import re
            from app import db
            from app.monitoramento.models import EntregaMonitorada, AgendamentoEntrega
            from app.embarques.models import Embarque, EmbarqueItem
            from app.pedidos.models import Pedido
            
            # Extrair n√∫meros de NF da string
            numeros_nf = re.findall(r'1\d{5}', lista_nfs)  # NFs come√ßam com 1 e t√™m 6 d√≠gitos
            
            if not numeros_nf:
                return "‚ùå **NENHUMA NF V√ÅLIDA ENCONTRADA**\n\nFormato esperado: 6 d√≠gitos come√ßando com 1 (ex: 135497, 134451)"
            
            logger.info(f"üîç Consultando posi√ß√£o de {len(numeros_nf)} NFs: {numeros_nf[:5]}...")
            
            resultados = []
            nfs_encontradas = 0
            
            for nf in numeros_nf:
                resultado_nf = {
                    'nf': nf,
                    'encontrada': False,
                    'status': 'N√£o encontrada',
                    'tipo': None,
                    'detalhes': {}
                }
                
                # 1. Buscar em Entregas Monitoradas
                entrega = EntregaMonitorada.query.filter(
                    EntregaMonitorada.numero_nf == nf
                ).first()
                
                if entrega:
                    resultado_nf['encontrada'] = True
                    resultado_nf['tipo'] = 'Entrega Monitorada'
                    resultado_nf['status'] = entrega.status_finalizacao or 'Pendente'
                    
                    # Buscar √∫ltimo agendamento
                    ultimo_agendamento = AgendamentoEntrega.query.filter(
                        AgendamentoEntrega.entrega_id == entrega.id
                    ).order_by(AgendamentoEntrega.criado_em.desc()).first()
                    
                    resultado_nf['detalhes'] = {
                        'cliente': entrega.cliente,
                        'destino': entrega.destino,
                        'uf': entrega.uf,
                        'transportadora': entrega.transportadora,
                        'vendedor': entrega.vendedor,
                        'data_embarque': entrega.data_embarque.strftime('%d/%m/%Y') if entrega.data_embarque else None,
                        'data_prevista': entrega.data_entrega_prevista.strftime('%d/%m/%Y') if entrega.data_entrega_prevista else None,
                        'data_realizada': entrega.data_entrega_realizada.strftime('%d/%m/%Y') if entrega.data_entrega_realizada else None,
                        'valor_nf': float(entrega.valor_nf or 0),
                        'entregue': entrega.entregue,
                        'pendencia_financeira': entrega.pendencia_financeira,
                        'agendamento': {
                            'protocolo': ultimo_agendamento.protocolo_agendamento if ultimo_agendamento else None,
                            'forma': ultimo_agendamento.forma_agendamento if ultimo_agendamento else None,
                            'status': ultimo_agendamento.status if ultimo_agendamento else None,
                            'data_agendada': ultimo_agendamento.data_agendada.strftime('%d/%m/%Y') if ultimo_agendamento and ultimo_agendamento.data_agendada else None
                        } if ultimo_agendamento else None,
                        'observacoes': entrega.observacoes_entrega
                    }
                    nfs_encontradas += 1
                
                # 2. Se n√£o encontrou em entregas, buscar em embarques (CORRIGIDO)
                elif not resultado_nf['encontrada']:
                    try:
                        # CORRE√á√ÉO: usar campo correto para data de cria√ß√£o
                        embarque_item = db.session.query(EmbarqueItem).join(Embarque).filter(
                            EmbarqueItem.numero_nf == nf
                        ).first()
                        
                        if embarque_item and embarque_item.embarque:
                            resultado_nf['encontrada'] = True
                            resultado_nf['tipo'] = 'Embarque'
                            resultado_nf['status'] = 'Embarcado' if embarque_item.embarque.data_embarque else 'Aguardando Embarque'
                            
                            resultado_nf['detalhes'] = {
                                'numero_embarque': embarque_item.embarque.numero,
                                'motorista': embarque_item.embarque.motorista,
                                'placa_veiculo': embarque_item.embarque.placa_veiculo,
                                'data_embarque': embarque_item.embarque.data_embarque.strftime('%d/%m/%Y %H:%M') if embarque_item.embarque.data_embarque else None,
                                'status_embarque': embarque_item.embarque.status,
                                'observacoes': embarque_item.embarque.observacoes,
                                # CORRE√á√ÉO: usar campo que existe
                                'data_criacao': embarque_item.embarque.criado_em.strftime('%d/%m/%Y %H:%M') if hasattr(embarque_item.embarque, 'criado_em') and embarque_item.embarque.criado_em else 'Data n√£o dispon√≠vel'
                            }
                            nfs_encontradas += 1
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erro ao consultar embarque para NF {nf}: {e}")
                
                # 3. Se ainda n√£o encontrou, buscar em pedidos
                if not resultado_nf['encontrada']:
                    pedido = Pedido.query.filter(Pedido.nf == nf).first()
                    
                    if pedido:
                        resultado_nf['encontrada'] = True
                        resultado_nf['tipo'] = 'Pedido'
                        resultado_nf['status'] = pedido.status_calculado or 'Pendente'
                        
                        resultado_nf['detalhes'] = {
                            'num_pedido': pedido.num_pedido,
                            'cliente': pedido.raz_social_red,
                            'cidade': pedido.nome_cidade,
                            'uf': pedido.cod_uf,
                            'valor_total': float(pedido.valor_saldo_total or 0),
                            'peso_total': float(pedido.peso_total or 0),
                            'expedicao': pedido.expedicao.strftime('%d/%m/%Y') if pedido.expedicao else None,
                            'agendamento': pedido.agendamento.strftime('%d/%m/%Y') if pedido.agendamento else None,
                            'protocolo': pedido.protocolo,
                            'transportadora': pedido.transportadora,
                            'cotacao_id': pedido.cotacao_id
                        }
                        nfs_encontradas += 1
                
                resultados.append(resultado_nf)
            
            # Montar resposta formatada
            resposta = f"""üîç **POSI√á√ÉO DE ENTREGAS - {len(numeros_nf)} NFs CONSULTADAS**

üìä **RESUMO**: {nfs_encontradas} de {len(numeros_nf)} NFs encontradas ({nfs_encontradas/len(numeros_nf)*100:.1f}%)

"""
            
            # Agrupar por tipo para melhor organiza√ß√£o
            tipos_grupos = {}
            for resultado in resultados:
                if resultado['encontrada']:
                    tipo = resultado['tipo']
                    if tipo not in tipos_grupos:
                        tipos_grupos[tipo] = []
                    tipos_grupos[tipo].append(resultado)
            
            # Exibir resultados encontrados por tipo
            for tipo, nfs_tipo in tipos_grupos.items():
                icon = {'Entrega Monitorada': 'üì¶', 'Embarque': 'üöõ', 'Pedido': 'üìã'}.get(tipo, 'üìÑ')
                resposta += f"## {icon} **{tipo.upper()}** ({len(nfs_tipo)} NFs)\n\n"
                
                for resultado in nfs_tipo:
                    nf = resultado['nf']
                    status = resultado['status']
                    detalhes = resultado['detalhes']
                    
                    if tipo == 'Entrega Monitorada':
                        status_icon = '‚úÖ' if detalhes.get('entregue') else 'üì¶'
                        pendencia_icon = 'üí∞' if detalhes.get('pendencia_financeira') else ''
                        
                        resposta += f"""**NF {nf}** {status_icon} {pendencia_icon}
‚Ä¢ **Cliente**: {detalhes.get('cliente', 'N/A')}
‚Ä¢ **Status**: {status}
‚Ä¢ **Destino**: {detalhes.get('destino', 'N/A')} - {detalhes.get('uf', 'N/A')}
‚Ä¢ **Transportadora**: {detalhes.get('transportadora', 'N/A')}
‚Ä¢ **Vendedor**: {detalhes.get('vendedor', 'N/A')}
‚Ä¢ **Data Embarque**: {detalhes.get('data_embarque', 'N√£o embarcado')}
‚Ä¢ **Data Prevista**: {detalhes.get('data_prevista', 'Sem agendamento')}
‚Ä¢ **Data Realizada**: {detalhes.get('data_realizada', 'N√£o entregue')}
‚Ä¢ **Valor NF**: R$ {detalhes.get('valor_nf', 0):,.2f}"""
                        
                        if detalhes.get('agendamento'):
                            agend = detalhes['agendamento']
                            resposta += f"""
‚Ä¢ **Agendamento**: {agend.get('status', 'N/A')} - {agend.get('data_agendada', 'N/A')}
‚Ä¢ **Protocolo**: {agend.get('protocolo', 'N/A')}"""
                        
                        if detalhes.get('observacoes'):
                            resposta += f"\n‚Ä¢ **Observa√ß√µes**: {detalhes['observacoes']}"
                            
                    elif tipo == 'Embarque':
                        status_icon = 'üöõ' if detalhes.get('data_embarque') else '‚è≥'
                        
                        resposta += f"""**NF {nf}** {status_icon}
‚Ä¢ **Status**: {status}
‚Ä¢ **Embarque**: #{detalhes.get('numero_embarque', 'N/A')}
‚Ä¢ **Motorista**: {detalhes.get('motorista', 'N/A')}
‚Ä¢ **Placa**: {detalhes.get('placa_veiculo', 'N/A')}
‚Ä¢ **Data Embarque**: {detalhes.get('data_embarque', 'Aguardando')}
‚Ä¢ **Criado em**: {detalhes.get('data_criacao', 'N/A')}"""
                        
                        if detalhes.get('observacoes'):
                            resposta += f"\n‚Ä¢ **Observa√ß√µes**: {detalhes['observacoes']}"
                            
                    elif tipo == 'Pedido':
                        status_icon = {'ABERTO': 'üìã', 'COTADO': 'üí∞', 'FATURADO': 'üìÑ'}.get(status, 'üìã')
                        
                        resposta += f"""**NF {nf}** {status_icon}
‚Ä¢ **Status**: {status}
‚Ä¢ **Pedido**: {detalhes.get('num_pedido', 'N/A')}
‚Ä¢ **Cliente**: {detalhes.get('cliente', 'N/A')}
‚Ä¢ **Destino**: {detalhes.get('cidade', 'N/A')} - {detalhes.get('uf', 'N/A')}
‚Ä¢ **Valor**: R$ {detalhes.get('valor_total', 0):,.2f}
‚Ä¢ **Peso**: {detalhes.get('peso_total', 0):,.1f} kg
‚Ä¢ **Expedi√ß√£o**: {detalhes.get('expedicao', 'N/A')}
‚Ä¢ **Agendamento**: {detalhes.get('agendamento', 'Sem agendamento')}
‚Ä¢ **Transportadora**: {detalhes.get('transportadora', 'N√£o definida')}"""
                        
                        if detalhes.get('protocolo'):
                            resposta += f"\n‚Ä¢ **Protocolo**: {detalhes['protocolo']}"
                    
                    resposta += "\n\n"
            
            # Listar NFs n√£o encontradas
            nfs_nao_encontradas = [r['nf'] for r in resultados if not r['encontrada']]
            if nfs_nao_encontradas:
                resposta += f"""‚ùå **NFs N√ÉO ENCONTRADAS** ({len(nfs_nao_encontradas)}):
{', '.join(nfs_nao_encontradas)}

üí° **Poss√≠veis causas**:
‚Ä¢ NFs muito antigas (fora do per√≠odo de reten√ß√£o)
‚Ä¢ N√∫meros incorretos ou inv√°lidos
‚Ä¢ NFs de outros sistemas/filiais
‚Ä¢ Ainda n√£o processadas pelo sistema

"""
            
            resposta += f"""---
üîç **CONSULTA FINALIZADA**
üìä **Total consultado**: {len(numeros_nf)} NFs
‚úÖ **Encontradas**: {nfs_encontradas} NFs
‚ùå **N√£o encontradas**: {len(nfs_nao_encontradas)} NFs
üìà **Taxa de sucesso**: {nfs_encontradas/len(numeros_nf)*100:.1f}%

---
üß† **Powered by:** Claude 4 Sonnet (Anthropic) - Consulta Espec√≠fica de NFs
üïí **Processado:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
‚ö° **Modo:** Busca Multi-Tabela (Entregas + Embarques + Pedidos)"""
            
            return resposta
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao consultar posi√ß√£o de NFs: {e}")
            return f"""‚ùå **ERRO AO CONSULTAR POSI√á√ÉO DAS NFs**

**Erro t√©cnico**: {str(e)}

üîß **Solu√ß√µes**:
1. Verificar se os n√∫meros das NFs est√£o corretos
2. Tentar consulta com menos NFs por vez
3. Contactar suporte se erro persistir

üí° **Formato correto**: 6 d√≠gitos come√ßando com 1
**Exemplo**: 135497, 134451, 136077"""

    def _carregar_todos_clientes_sistema(self) -> Dict[str, Any]:
        """
        üÜï Carrega TODOS os clientes do sistema, n√£o apenas √∫ltimos 30 dias
        CR√çTICO: Para perguntas sobre "quantos clientes", "todos clientes", etc.
        """
        try:
            from app import db
            from app.faturamento.models import RelatorioFaturamentoImportado
            from app.monitoramento.models import EntregaMonitorada
            from app.pedidos.models import Pedido
            from app.utils.grupo_empresarial import GrupoEmpresarialDetector
            
            logger.info("üåê CARREGANDO TODOS OS CLIENTES DO SISTEMA...")
            
            # 1. Clientes de faturamento (fonte mais completa)
            clientes_faturamento = db.session.query(
                RelatorioFaturamentoImportado.nome_cliente,
                RelatorioFaturamentoImportado.cnpj_cliente
            ).filter(
                RelatorioFaturamentoImportado.nome_cliente != None,
                RelatorioFaturamentoImportado.nome_cliente != ''
            ).distinct().all()
            
            # 2. Clientes de entregas monitoradas (todas, sem filtro de data)
            clientes_entregas = db.session.query(
                EntregaMonitorada.cliente
            ).filter(
                EntregaMonitorada.cliente != None,
                EntregaMonitorada.cliente != ''
            ).distinct().all()
            
            # 3. Clientes de pedidos
            clientes_pedidos = db.session.query(
                Pedido.nome_cliente
            ).filter(
                Pedido.nome_cliente != None,
                Pedido.nome_cliente != ''
            ).distinct().all()
            
            # Unificar todos os clientes
            todos_clientes = set()
            
            # Adicionar de faturamento (com CNPJ)
            clientes_com_cnpj = {}
            for nome, cnpj in clientes_faturamento:
                if nome:
                    todos_clientes.add(nome)
                    if cnpj:
                        clientes_com_cnpj[nome] = cnpj
            
            # Adicionar de entregas
            for (cliente,) in clientes_entregas:
                if cliente:
                    todos_clientes.add(cliente)
            
            # Adicionar de pedidos
            for (cliente,) in clientes_pedidos:
                if cliente:
                    todos_clientes.add(cliente)
            
            # Detectar grupos empresariais
            detector = GrupoEmpresarialDetector()
            grupos_detectados = {}
            clientes_por_grupo = {}
            
            for cliente in todos_clientes:
                # Verificar se √© parte de um grupo
                resultado_grupo = detector.detectar_grupo_na_consulta(cliente)
                if resultado_grupo:
                    grupo_nome = resultado_grupo['grupo_detectado']
                    if grupo_nome not in grupos_detectados:
                        grupos_detectados[grupo_nome] = {
                            'total_filiais': 0,
                            'filiais_exemplo': [],
                            'cnpj_prefixos': resultado_grupo.get('cnpj_prefixos', [])
                        }
                    grupos_detectados[grupo_nome]['total_filiais'] += 1
                    if len(grupos_detectados[grupo_nome]['filiais_exemplo']) < 5:
                        grupos_detectados[grupo_nome]['filiais_exemplo'].append(cliente)
                    
                    # Mapear cliente para grupo
                    clientes_por_grupo[cliente] = grupo_nome
            
            # Contar clientes com entregas nos √∫ltimos 30 dias
            data_limite = datetime.now() - timedelta(days=30)
            clientes_ativos_30d = db.session.query(
                EntregaMonitorada.cliente
            ).filter(
                EntregaMonitorada.data_embarque >= data_limite,
                EntregaMonitorada.cliente != None
            ).distinct().count()
            
            logger.info(f"‚úÖ TOTAL DE CLIENTES NO SISTEMA: {len(todos_clientes)}")
            logger.info(f"üìä Grupos empresariais detectados: {len(grupos_detectados)}")
            logger.info(f"üïê Clientes ativos (30 dias): {clientes_ativos_30d}")
            
            return {
                'total_clientes_sistema': len(todos_clientes),
                'clientes_ativos_30_dias': clientes_ativos_30d,
                'grupos_empresariais': grupos_detectados,
                'total_grupos': len(grupos_detectados),
                'clientes_com_cnpj': len(clientes_com_cnpj),
                'fontes_dados': {
                    'faturamento': len(clientes_faturamento),
                    'entregas': len(clientes_entregas),
                    'pedidos': len(clientes_pedidos)
                },
                'principais_grupos': list(grupos_detectados.keys())[:10],
                '_metodo_completo': True
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar todos os clientes: {e}")
            return {'erro': str(e), '_metodo_completo': False}

    def _processar_comando_estrutura_projeto(self, consulta: str, user_context: Optional[Dict] = None) -> str:
        """Processa comando para mostrar estrutura completa do projeto"""
        logger.info("üîç Processando comando de estrutura do projeto...")
        
        if not self.project_scanner:
            return "‚ùå Sistema de descoberta de projeto n√£o est√° dispon√≠vel."
        
        try:
            # Escanear projeto completo
            estrutura = self.project_scanner.scan_complete_project()
            
            resposta = "üîç **ESTRUTURA COMPLETA DO PROJETO**\n\n"
            
            # Resumo geral
            summary = estrutura.get('scan_summary', {})
            resposta += "üìä **RESUMO GERAL**:\n"
            resposta += f"‚Ä¢ Total de m√≥dulos: {summary.get('total_modules', 0)}\n"
            resposta += f"‚Ä¢ Total de modelos: {summary.get('total_models', 0)}\n"
            resposta += f"‚Ä¢ Total de formul√°rios: {summary.get('total_forms', 0)}\n"
            resposta += f"‚Ä¢ Total de rotas: {summary.get('total_routes', 0)}\n"
            resposta += f"‚Ä¢ Total de templates: {summary.get('total_templates', 0)}\n"
            resposta += f"‚Ä¢ Total de tabelas no banco: {summary.get('total_database_tables', 0)}\n\n"
            
            # M√≥dulos principais
            resposta += "üìÅ **M√ìDULOS PRINCIPAIS**:\n"
            project_structure = estrutura.get('project_structure', {})
            modulos_principais = [k for k in project_structure.keys() 
                                if k != 'app_root' and 
                                project_structure[k].get('python_files') and
                                not k.startswith('app_root\\\\')]
            
            for modulo in sorted(modulos_principais)[:15]:  # Top 15 m√≥dulos
                info = project_structure[modulo]
                num_files = len(info.get('python_files', []))
                resposta += f"‚Ä¢ **{modulo}**: {num_files} arquivos Python\n"
            
            if len(modulos_principais) > 15:
                resposta += f"... e mais {len(modulos_principais) - 15} m√≥dulos\n"
            
            # Modelos principais
            resposta += "\nüóÉÔ∏è **MODELOS PRINCIPAIS** (tabelas do banco):\n"
            models = estrutura.get('models', {})
            for i, (table_name, model_info) in enumerate(list(models.items())[:10], 1):
                num_columns = len(model_info.get('columns', []))
                resposta += f"{i}. **{table_name}**: {num_columns} colunas\n"
            
            if len(models) > 10:
                resposta += f"... e mais {len(models) - 10} tabelas\n"
            
            # Rotas por m√≥dulo
            resposta += "\nüåê **ROTAS POR M√ìDULO**:\n"
            routes = estrutura.get('routes', {})
            for modulo, route_info in list(routes.items())[:10]:
                total_routes = route_info.get('total_routes', 0)
                resposta += f"‚Ä¢ **{modulo}**: {total_routes} rotas\n"
            
            # Informa√ß√µes do banco
            db_info = estrutura.get('database_schema', {}).get('database_info', {})
            if db_info:
                resposta += f"\nüóÑÔ∏è **BANCO DE DADOS**:\n"
                resposta += f"‚Ä¢ Dialeto: {db_info.get('dialect', 'N/A')}\n"
                resposta += f"‚Ä¢ Driver: {db_info.get('driver', 'N/A')}\n"
                resposta += f"‚Ä¢ Vers√£o: {db_info.get('server_version', 'N/A')[:50]}...\n"
            
            resposta += f"\nüïí **Escaneamento realizado em**: {summary.get('scan_timestamp', 'N/A')}"
            resposta += "\n\nüí° **Dica**: Use comandos espec√≠ficos para explorar cada parte:\n"
            resposta += "‚Ä¢ `listar arquivos em app/carteira` - Ver arquivos de um m√≥dulo\n"
            resposta += "‚Ä¢ `verificar app/carteira/routes.py` - Ler um arquivo espec√≠fico\n"
            resposta += "‚Ä¢ `buscar def gerar_separacao` - Buscar fun√ß√£o no c√≥digo"
            
            return resposta
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao escanear projeto: {e}")
            return f"‚ùå Erro ao escanear estrutura do projeto: {str(e)}"
    
    def _is_file_command(self, consulta: str) -> bool:
        """Detecta comandos de leitura de arquivo"""
        comandos_arquivo = [
            # Comandos diretos
            'verificar', 'ver arquivo', 'ler arquivo', 'mostrar arquivo',
            'abrir arquivo', 'conteudo de', 'conte√∫do de', 'c√≥digo de',
            'listar arquivos', 'listar diretorio', 'listar diret√≥rio',
            
            # Refer√™ncias a arquivos
            'routes.py', 'models.py', 'forms.py', '.html',
            'app/', 'app/carteira/', 'app/pedidos/', 'app/fretes/',
            
            # Perguntas sobre c√≥digo
            'onde est√°', 'onde fica', 'qual arquivo', 'em que arquivo',
            'procurar fun√ß√£o', 'buscar fun√ß√£o', 'encontrar fun√ß√£o'
        ]
        
        consulta_lower = consulta.lower()
        return any(cmd in consulta_lower for cmd in comandos_arquivo)
    
    def _processar_comando_arquivo(self, consulta: str, user_context: Optional[Dict] = None) -> str:
        """Processa comandos relacionados a arquivos"""
        logger.info("üìÅ Processando comando de arquivo...")
        
        if not self.project_scanner:
            return "‚ùå Sistema de descoberta de projeto n√£o est√° dispon√≠vel."
        
        consulta_lower = consulta.lower()
        
        # Detectar tipo de comando
        if any(term in consulta_lower for term in ['listar arquivo', 'listar diretorio', 'listar diret√≥rio']):
            # Comando de listagem
            import re
            # Tentar extrair caminho
            match = re.search(r'app/[\w/]+', consulta)
            if match:
                dir_path = match.group()
                # Remover 'app/' do in√≠cio se presente
                if dir_path.startswith('app/'):
                    dir_path = dir_path[4:]
                result = self.project_scanner.list_directory_contents(dir_path)
            else:
                # Listar app/ por padr√£o
                result = self.project_scanner.list_directory_contents('')
            
            if 'error' not in result:
                resposta = f"üìÅ **Conte√∫do de {result.get('path', 'app')}**\n\n"
                
                if result.get('directories'):
                    resposta += "üìÇ **Diret√≥rios:**\n"
                    for dir in result['directories']:
                        resposta += f"  ‚Ä¢ {dir}/\n"
                
                if result.get('files'):
                    resposta += "\nüìÑ **Arquivos:**\n"
                    for file in result['files']:
                        resposta += f"  ‚Ä¢ {file['name']} ({file['size_kb']} KB)\n"
                
                resposta += f"\nüìä Total: {len(result.get('files', []))} arquivos, {len(result.get('directories', []))} diret√≥rios"
                return resposta
            else:
                return f"‚ùå Erro ao listar diret√≥rio: {result['error']}"
        
        elif any(term in consulta_lower for term in ['buscar', 'procurar', 'encontrar']):
            # Comando de busca
            import re
            # Tentar extrair padr√£o de busca
            match = re.search(r'(buscar|procurar|encontrar)\s+["\']?([^"\']+)["\']?', consulta_lower)
            if match:
                pattern = match.group(2).strip()
                result = self.project_scanner.search_in_files(pattern)
                
                if result.get('success'):
                    if result['results']:
                        resposta = f"üîç **Busca por '{pattern}'**\n\n"
                        resposta += f"Encontradas {result['total_matches']} ocorr√™ncias em {result['files_searched']} arquivos:\n\n"
                        
                        for i, match in enumerate(result['results'][:10], 1):
                            resposta += f"{i}. **{match['file']}** (linha {match['line_number']})\n"
                            resposta += f"   ```python\n   {match['line_content']}\n   ```\n"
                        
                        if result.get('truncated') or len(result['results']) > 10:
                            resposta += f"\n... e mais {result['total_matches'] - 10} resultados"
                        
                        return resposta
                    else:
                        return f"‚ùå Nenhuma ocorr√™ncia de '{pattern}' encontrada nos arquivos."
                else:
                    return f"‚ùå Erro na busca: {result.get('error', 'Erro desconhecido')}"
            else:
                return "‚ùå N√£o consegui identificar o que voc√™ quer buscar. Use: 'buscar nome_da_funcao' ou 'procurar texto_espec√≠fico'"
        
        else:
            # Comando de leitura de arquivo
            import re
            # Tentar extrair caminho do arquivo
            # Padr√µes: app/carteira/routes.py, carteira/routes.py, routes.py
            patterns = [
                r'app/[\w/]+\.py',
                r'app/[\w/]+\.html',
                r'[\w/]+/[\w]+\.py',
                r'[\w]+\.py'
            ]
            
            file_path = None
            for pattern in patterns:
                match = re.search(pattern, consulta)
                if match:
                    file_path = match.group()
                    break
            
            if not file_path:
                # Tentar detectar m√≥dulo mencionado
                modulos = ['carteira', 'pedidos', 'fretes', 'embarques', 'monitoramento', 'transportadoras']
                for modulo in modulos:
                    if modulo in consulta_lower:
                        # Tentar adivinhar arquivo
                        if 'routes' in consulta_lower:
                            file_path = f'{modulo}/routes.py'
                        elif 'models' in consulta_lower:
                            file_path = f'{modulo}/models.py'
                        elif 'forms' in consulta_lower:
                            file_path = f'{modulo}/forms.py'
                        break
            
            if file_path:
                # Remover 'app/' do in√≠cio se presente (project_scanner j√° assume app/)
                if file_path.startswith('app/'):
                    file_path = file_path[4:]
                
                # Ler arquivo completo (project_scanner n√£o tem suporte a linhas espec√≠ficas)
                content = self.project_scanner.read_file_content(file_path)
                
                if not content.startswith("‚ùå"):
                    # Detectar linhas espec√≠ficas solicitadas
                    line_match = re.search(r'linhas?\s+(\d+)(?:\s*[-a]\s*(\d+))?', consulta_lower)
                    
                    resposta = f"üìÑ **app/{file_path}**\n\n"
                    
                    if line_match:
                        # Mostrar apenas linhas espec√≠ficas
                        start_line = int(line_match.group(1))
                        end_line = int(line_match.group(2)) if line_match.group(2) else start_line + 50
                        
                        lines = content.split('\n')
                        total_lines = len(lines)
                        
                        # Ajustar √≠ndices (converter de 1-based para 0-based)
                        start_idx = max(0, start_line - 1)
                        end_idx = min(total_lines, end_line)
                        
                        resposta += f"üìç Mostrando linhas {start_line}-{end_line} de {total_lines} totais\n\n"
                        resposta += "```python\n"
                        
                        # Adicionar linhas com n√∫meros
                        for i in range(start_idx, end_idx):
                            if i < len(lines):
                                resposta += f"{i+1:4d}: {lines[i]}\n"
                        
                        resposta += "\n```\n"
                    else:
                        # Mostrar arquivo completo (limitado)
                        lines = content.split('\n')
                        total_lines = len(lines)
                        
                        if total_lines > 100:
                            # Mostrar apenas primeiras 100 linhas
                            resposta += f"üìç Arquivo grande ({total_lines} linhas). Mostrando primeiras 100 linhas.\n\n"
                            resposta += "```python\n"
                            for i in range(min(100, total_lines)):
                                resposta += f"{i+1:4d}: {lines[i]}\n"
                            resposta += "\n```\n"
                            resposta += f"\nüí° Use 'linhas X-Y' para ver trechos espec√≠ficos."
                        else:
                            resposta += "```python\n"
                            resposta += content
                            resposta += "\n```\n"
                    
                    return resposta
                else:
                    return content  # Retornar mensagem de erro
            else:
                return """‚ùì N√£o consegui identificar o arquivo solicitado.

Por favor, seja mais espec√≠fico. Exemplos:
‚Ä¢ "Verificar app/carteira/routes.py"
‚Ä¢ "Mostrar fun√ß√£o gerar_separacao em carteira/routes.py"
‚Ä¢ "Listar arquivos em app/carteira"
‚Ä¢ "Buscar 'def processar' nos arquivos"

M√≥dulos dispon√≠veis: carteira, pedidos, fretes, embarques, monitoramento, transportadoras"""

    def _is_cursor_command(self, consulta: str) -> bool:
        """üéØ Detecta comandos do Cursor Mode"""
        comandos_cursor = [
            'ativar cursor', 'cursor mode', 'modo cursor', 'ativa cursor',
            'analisar c√≥digo', 'gerar c√≥digo', 'modificar c√≥digo', 'buscar c√≥digo',
            'corrigir bugs', 'refatorar', 'documentar c√≥digo', 'validar c√≥digo',
            'cursor chat', 'chat c√≥digo', 'ajuda c√≥digo'
        ]
        
        consulta_lower = consulta.lower()
        return any(comando in consulta_lower for comando in comandos_cursor)
    
    def _processar_comando_cursor(self, consulta: str, user_context: Optional[Dict] = None) -> str:
        """üéØ Processa comandos do Cursor Mode"""
        try:
            from .cursor_mode import get_cursor_mode
            
            logger.info(f"üéØ Processando comando Cursor Mode: {consulta}")
            
            cursor = get_cursor_mode()
            consulta_lower = consulta.lower()
            
            # Comando de ativa√ß√£o
            if any(termo in consulta_lower for termo in ['ativar cursor', 'cursor mode', 'modo cursor', 'ativa cursor']):
                unlimited = 'ilimitado' in consulta_lower or 'unlimited' in consulta_lower
                resultado = cursor.activate_cursor_mode(unlimited)
                
                if resultado['status'] == 'success':
                    return f"""üéØ **CURSOR MODE ATIVADO COM SUCESSO!**

üìä **STATUS DA ATIVA√á√ÉO:**
‚Ä¢ **Modo:** {resultado['mode']}
‚Ä¢ **Ativado em:** {resultado['activated_at']}
‚Ä¢ **Modo Ilimitado:** {'‚úÖ Sim' if unlimited else '‚ùå N√£o'}

üîß **FERRAMENTAS DISPON√çVEIS:**
{chr(10).join(f"‚Ä¢ {cap}" for cap in resultado['capabilities'])}

üìà **AN√ÅLISE INICIAL DO PROJETO:**
‚Ä¢ **Total de M√≥dulos:** {resultado['initial_project_analysis']['total_modules']}
‚Ä¢ **Total de Arquivos:** {resultado['initial_project_analysis']['total_files']}
‚Ä¢ **Problemas Detectados:** {resultado['initial_project_analysis']['issues_detected']}

üí° **COMANDOS DISPON√çVEIS:**
‚Ä¢ `analisar c√≥digo` - An√°lise completa do projeto
‚Ä¢ `gerar c√≥digo [descri√ß√£o]` - Gera√ß√£o autom√°tica
‚Ä¢ `modificar c√≥digo [arquivo]` - Modifica√ß√£o inteligente
‚Ä¢ `buscar c√≥digo [termo]` - Busca sem√¢ntica
‚Ä¢ `corrigir bugs` - Detec√ß√£o e corre√ß√£o autom√°tica
‚Ä¢ `cursor chat [mensagem]` - Chat com c√≥digo

---
üéØ **Cursor Mode ativo! Agora tenho capacidades similares ao Cursor!**
‚ö° **Fonte:** Claude 4 Sonnet + Development AI + Project Scanner"""
                else:
                    return f"‚ùå **Erro ao ativar Cursor Mode:** {resultado.get('error', 'Erro desconhecido')}"
            
            # Verificar se Cursor Mode est√° ativo
            if not cursor.activated:
                return """‚ö†Ô∏è **Cursor Mode n√£o est√° ativo!**

Para usar funcionalidades similares ao Cursor, primeiro ative com:
`ativar cursor mode`

Ou para modo ilimitado:
`ativar cursor mode ilimitado`"""
            
            # Comandos espec√≠ficos
            if 'analisar c√≥digo' in consulta_lower:
                if 'arquivo' in consulta_lower:
                    # Extrair nome do arquivo da consulta
                    arquivo = self._extrair_arquivo_da_consulta(consulta)
                    resultado = cursor.analyze_code('arquivo')
                else:
                    resultado = cursor.analyze_code('project')
                
                return self._formatar_resultado_cursor(resultado, 'An√°lise de C√≥digo')
            
            elif 'gerar c√≥digo' in consulta_lower:
                descricao = consulta.replace('gerar c√≥digo', '').strip()
                if not descricao:
                    descricao = "M√≥dulo gen√©rico"
                
                resultado = cursor.generate_code(descricao)
                return self._formatar_resultado_cursor(resultado, 'Gera√ß√£o de C√≥digo')
            
            elif 'modificar c√≥digo' in consulta_lower:
                arquivo = self._extrair_arquivo_da_consulta(consulta)
                if not arquivo:
                    return "‚ùå Especifique o arquivo a ser modificado. Ex: `modificar c√≥digo app/models.py`"
                
                # Por ora, usar modifica√ß√£o gen√©rica
                resultado = cursor.modify_code(arquivo, 'refactor', {'description': consulta})
                return self._formatar_resultado_cursor(resultado, 'Modifica√ß√£o de C√≥digo')
            
            elif 'buscar c√≥digo' in consulta_lower:
                termo = consulta.replace('buscar c√≥digo', '').strip()
                if not termo:
                    return "‚ùå Especifique o termo a buscar. Ex: `buscar c√≥digo fun√ß√£o de login`"
                
                resultado = cursor.search_code(termo)
                return self._formatar_resultado_cursor(resultado, 'Busca no C√≥digo')
            
            elif 'corrigir bugs' in consulta_lower:
                resultado = cursor.fix_issues()
                return self._formatar_resultado_cursor(resultado, 'Corre√ß√£o de Bugs')
            
            elif 'cursor chat' in consulta_lower or 'chat c√≥digo' in consulta_lower:
                mensagem = consulta.replace('cursor chat', '').replace('chat c√≥digo', '').strip()
                if not mensagem:
                    return "‚ùå Especifique sua mensagem. Ex: `cursor chat como otimizar esta fun√ß√£o?`"
                
                resultado = cursor.chat_with_code(mensagem)
                return self._formatar_resultado_cursor(resultado, 'Chat com C√≥digo')
            
            elif 'status cursor' in consulta_lower:
                status = cursor.get_status()
                return self._formatar_status_cursor(status)
            
            else:
                return """üéØ **Cursor Mode Ativo - Comandos Dispon√≠veis:**

üîç **AN√ÅLISE:**
‚Ä¢ `analisar c√≥digo` - An√°lise completa do projeto
‚Ä¢ `analisar c√≥digo [arquivo.py]` - An√°lise de arquivo espec√≠fico

üöÄ **GERA√á√ÉO:**
‚Ä¢ `gerar c√≥digo [descri√ß√£o]` - Gerar novo m√≥dulo
‚Ä¢ `gerar c√≥digo sistema de vendas` - Exemplo espec√≠fico

‚úèÔ∏è **MODIFICA√á√ÉO:**
‚Ä¢ `modificar c√≥digo [arquivo.py]` - Modificar arquivo
‚Ä¢ `refatorar [arquivo.py]` - Refatora√ß√£o autom√°tica

üîç **BUSCA:**
‚Ä¢ `buscar c√≥digo [termo]` - Busca sem√¢ntica
‚Ä¢ `buscar c√≥digo fun√ß√£o login` - Exemplo

üîß **CORRE√á√ÉO:**
‚Ä¢ `corrigir bugs` - Detectar e corrigir problemas
‚Ä¢ `validar c√≥digo` - Valida√ß√£o autom√°tica

üí¨ **CHAT:**
‚Ä¢ `cursor chat [pergunta]` - Chat inteligente com c√≥digo
‚Ä¢ `chat c√≥digo como melhorar performance?` - Exemplo

üìä **STATUS:**
‚Ä¢ `status cursor` - Ver status atual

---
üéØ **Modo Cursor ativo! Todas as funcionalidades dispon√≠veis!**"""
            
        except ImportError:
            return "‚ùå **Cursor Mode n√£o dispon√≠vel:** M√≥dulo n√£o encontrado"
        except Exception as e:
            logger.error(f"‚ùå Erro no comando Cursor: {e}")
            return f"‚ùå **Erro no Cursor Mode:** {str(e)}"
    
    def _extrair_arquivo_da_consulta(self, consulta: str) -> Optional[str]:
        """Extrai nome do arquivo da consulta"""
        import re
        
        # Procurar por padr√µes de arquivo
        patterns = [
            r'app/[\w/]+\.py',
            r'[\w/]+\.py',
            r'[\w]+\.py'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, consulta)
            if match:
                return match.group(0)
        
        return None
    
    def _formatar_resultado_cursor(self, resultado: Dict[str, Any], titulo: str) -> str:
        """Formata resultado do Cursor Mode"""
        if 'error' in resultado:
            return f"‚ùå **Erro em {titulo}:** {resultado['error']}"
        
        timestamp = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        
        if titulo == 'An√°lise de C√≥digo':
            return f"""üîç **{titulo} Completa**

üìä **Vis√£o Geral:**
{self._formatar_analise_projeto(resultado)}

---
üéØ **Processado:** {timestamp}
‚ö° **Fonte:** Cursor Mode + Claude Development AI"""
        
        elif titulo == 'Gera√ß√£o de C√≥digo':
            if resultado.get('status') == 'success':
                return f"""üöÄ **{titulo} - Sucesso!**

üì¶ **M√≥dulo:** {resultado.get('module_name', 'N/A')}
üìÅ **Arquivos Criados:** {resultado.get('total_files', 0)} arquivos
üìã **Lista de Arquivos:**
{chr(10).join(f"‚Ä¢ {arquivo}" for arquivo in resultado.get('files_created', []))}

üìö **Documenta√ß√£o Gerada:**
{resultado.get('documentation', 'Documenta√ß√£o autom√°tica criada')}

---
üéØ **Processado:** {timestamp}
‚ö° **Fonte:** Cursor Mode + Code Generator"""
            else:
                return f"‚ùå **Erro na {titulo}:** {resultado.get('error', 'Erro desconhecido')}"
        
        else:
            # Formato gen√©rico
            return f"""‚úÖ **{titulo} Conclu√≠do**

üìã **Resultado:** {str(resultado)[:500]}...

---
üéØ **Processado:** {timestamp}
‚ö° **Fonte:** Cursor Mode"""
    
    def _formatar_analise_projeto(self, analise: Dict[str, Any]) -> str:
        """Formata an√°lise do projeto"""
        overview = analise.get('project_overview', {})
        issues = analise.get('potential_issues', [])
        
        return f"""‚Ä¢ **M√≥dulos:** {overview.get('total_modules', 0)}
‚Ä¢ **Modelos:** {overview.get('total_models', 0)}
‚Ä¢ **Rotas:** {overview.get('total_routes', 0)}
‚Ä¢ **Templates:** {overview.get('total_templates', 0)}
‚Ä¢ **Problemas Detectados:** {len(issues)}
‚Ä¢ **Arquitetura:** {overview.get('architecture_pattern', 'Flask MVC')}"""
    
    def _formatar_status_cursor(self, status: Dict[str, Any]) -> str:
        """Formata status do Cursor Mode"""
        return f"""üìä **Status do Cursor Mode**

üîß **Estado:** {'‚úÖ Ativo' if status['activated'] else '‚ùå Inativo'}

‚öôÔ∏è **Funcionalidades:**
{chr(10).join(f"‚Ä¢ {feature}: {'‚úÖ' if enabled else '‚ùå'}" for feature, enabled in status['features'].items())}

üõ†Ô∏è **Ferramentas:**
{chr(10).join(f"‚Ä¢ {tool}: {'‚úÖ' if available else '‚ùå'}" for tool, available in status['tools_available'].items())}

üìã **Capacidades Ativas:**
{chr(10).join(f"‚Ä¢ {cap}" for cap in status.get('capabilities', []))}

---
üéØ **Cursor Mode - Sistema similar ao Cursor integrado!**"""

# Fun√ß√µes auxiliares para formata√ß√£o de respostas
def _gerar_resposta_erro(mensagem: str) -> Dict[str, Any]:
    """Gera resposta de erro formatada"""
    return {
        'success': False,
        'error': mensagem,
        'response': f"‚ùå **Erro:** {mensagem}",
        'status': 'error'
    }

def _gerar_resposta_sucesso(resposta: str) -> Dict[str, Any]:
    """Gera resposta de sucesso formatada"""
    return {
        'success': True,
        'response': resposta,
        'status': 'success'
    }

# Adicionar nova fun√ß√£o de detec√ß√£o de consultas de desenvolvimento
def _detectar_consulta_desenvolvimento(consulta_limpa: str) -> Optional[Dict[str, Any]]:
    """
    üß† DETEC√á√ÉO DE CONSULTAS DE DESENVOLVIMENTO
    Detecta quando o usu√°rio est√° perguntando sobre c√≥digo, an√°lise, gera√ß√£o, etc.
    """
    try:
        consulta_lower = consulta_limpa.lower()
        
        # Padr√µes para an√°lise de projeto
        if any(palavra in consulta_lower for palavra in [
            'analisar projeto', 'an√°lise do projeto', 'estrutura do projeto',
            'vis√£o geral do projeto', 'mapa do projeto', 'arquitetura'
        ]):
            return {
                'tipo': 'analyze_project',
                'acao': 'an√°lise completa do projeto',
                'parametros': {}
            }
        
        # Padr√µes para an√°lise de arquivo espec√≠fico
        arquivo_match = re.search(r'analis[ea] (?:o )?arquivo ([^\s]+)', consulta_lower)
        if arquivo_match:
            return {
                'tipo': 'analyze_file',
                'acao': 'an√°lise de arquivo espec√≠fico',
                'parametros': {'file_path': arquivo_match.group(1)}
            }
        
        # Padr√µes para gera√ß√£o de m√≥dulo
        modulo_match = re.search(r'cri[ea] (?:um )?m√≥dulo (\w+)', consulta_lower)
        if modulo_match or any(palavra in consulta_lower for palavra in [
            'gerar m√≥dulo', 'criar m√≥dulo', 'novo m√≥dulo', 'module'
        ]):
            modulo_nome = modulo_match.group(1) if modulo_match else None
            return {
                'tipo': 'generate_module',
                'acao': 'gera√ß√£o de m√≥dulo',
                'parametros': {
                    'module_name': modulo_nome,
                    'description': consulta_limpa
                }
            }
        
        # Padr√µes para modifica√ß√£o de arquivo
        if any(palavra in consulta_lower for palavra in [
            'modificar arquivo', 'editar arquivo', 'alterar arquivo',
            'adicionar campo', 'criar rota', 'adicionar m√©todo'
        ]):
            return {
                'tipo': 'modify_file',
                'acao': 'modifica√ß√£o de arquivo',
                'parametros': {'description': consulta_limpa}
            }
        
        # Padr√µes para detec√ß√£o de problemas
        if any(palavra in consulta_lower for palavra in [
            'detectar problemas', 'verificar bugs', 'encontrar erros',
            'corrigir problemas', 'analisar qualidade', 'code review'
        ]):
            return {
                'tipo': 'detect_issues',
                'acao': 'detec√ß√£o e corre√ß√£o de problemas',
                'parametros': {}
            }
        
        # Padr√µes para documenta√ß√£o
        if any(palavra in consulta_lower for palavra in [
            'gerar documenta√ß√£o', 'criar documenta√ß√£o', 'documentar',
            'readme', 'docs'
        ]):
            return {
                'tipo': 'generate_docs',
                'acao': 'gera√ß√£o de documenta√ß√£o',
                'parametros': {}
            }
        
        # Padr√µes para capacidades
        if any(palavra in consulta_lower for palavra in [
            'capacidades', 'o que voc√™ pode fazer', 'funcionalidades',
            'comandos dispon√≠veis', 'ajuda desenvolvimento'
        ]):
            return {
                'tipo': 'show_capabilities',
                'acao': 'mostrar capacidades',
                'parametros': {}
            }
        
        return None
        
    except Exception as e:
        logger.error(f"Erro na detec√ß√£o de consulta de desenvolvimento: {e}")
        return None

# Adicionar fun√ß√£o para processar consultas de desenvolvimento
def _processar_consulta_desenvolvimento(deteccao: Dict[str, Any]) -> Dict[str, Any]:
    """
    üß† PROCESSAMENTO DE CONSULTAS DE DESENVOLVIMENTO
    Usa o Claude Development AI para processar consultas avan√ßadas
    """
    try:
        tipo = deteccao['tipo']
        parametros = deteccao['parametros']
        
        # Inicializar Claude Development AI
        dev_ai = get_claude_development_ai() or init_claude_development_ai()
        
        if tipo == 'analyze_project':
            result = dev_ai.analyze_project_complete()
            
            # Formatar resposta para o usu√°rio
            if 'error' in result:
                return _gerar_resposta_erro(f"Erro na an√°lise do projeto: {result['error']}")
            
            overview = result.get('project_overview', {})
            architecture = result.get('architecture_analysis', {})
            
            resposta = f"""
üß† **An√°lise Completa do Projeto**

üìä **Vis√£o Geral:**
- **M√≥dulos:** {overview.get('total_modules', 0)}
- **Modelos:** {overview.get('total_models', 0)}
- **Rotas:** {overview.get('total_routes', 0)}
- **Templates:** {overview.get('total_templates', 0)}
- **Tabelas do Banco:** {overview.get('database_tables', 0)}

üèóÔ∏è **Arquitetura:**
- **Padr√µes Detectados:** {', '.join(architecture.get('patterns_detected', []))}
- **Framework:** {overview.get('framework_version', 'Flask 2.x')}

üìà **Qualidade do C√≥digo:**
- **Documenta√ß√£o:** {result.get('code_quality', {}).get('documentation_coverage', 'A analisar')}
- **Conven√ß√µes:** {result.get('code_quality', {}).get('naming_conventions', 'A analisar')}
- **Complexidade:** {result.get('code_quality', {}).get('code_complexity', 'A analisar')}

üîí **Seguran√ßa:**
- **Prote√ß√£o CSRF:** {result.get('security_analysis', {}).get('csrf_protection', 'A verificar')}
- **Autentica√ß√£o:** {result.get('security_analysis', {}).get('authentication', 'A verificar')}

‚ö° **Performance:**
- **Cache:** {result.get('performance_insights', {}).get('caching_strategy', 'A otimizar')}
- **Queries:** {result.get('performance_insights', {}).get('database_queries', 'A analisar')}

üí° **Pr√≥ximos Passos:**
1. Implementar testes automatizados
2. Otimizar consultas do banco
3. Melhorar documenta√ß√£o
4. Implementar cache avan√ßado
"""
            
            return _gerar_resposta_sucesso(resposta)
        
        elif tipo == 'analyze_file':
            file_path = parametros.get('file_path')
            if not file_path:
                return _gerar_resposta_erro("Caminho do arquivo n√£o especificado")
            
            result = dev_ai.analyze_specific_file(file_path)
            
            if 'error' in result:
                return _gerar_resposta_erro(f"Erro na an√°lise do arquivo: {result['error']}")
            
            file_info = result.get('file_info', {})
            structure = result.get('code_structure', {})
            
            resposta = f"""
üìÑ **An√°lise do Arquivo: {file_path}**

üìä **Informa√ß√µes B√°sicas:**
- **Tamanho:** {file_info.get('size_kb', 0):.1f} KB
- **Linhas:** {file_info.get('lines', 0)}
- **Tipo:** {file_info.get('extension', 'N/A')}

üèóÔ∏è **Estrutura do C√≥digo:**
- **Classes:** {len(structure.get('classes', []))}
- **Fun√ß√µes:** {len(structure.get('functions', []))}
- **Imports:** {len(structure.get('imports', []))}
- **Complexidade:** {structure.get('complexity', 0)}

‚ö†Ô∏è **Problemas Detectados:**
{len(result.get('potential_bugs', []))} problemas encontrados

üí° **Sugest√µes de Melhoria:**
{len(result.get('suggestions', []))} sugest√µes dispon√≠veis
"""
            
            return _gerar_resposta_sucesso(resposta)
        
        elif tipo == 'generate_module':
            module_name = parametros.get('module_name')
            description = parametros.get('description', '')
            
            if not module_name:
                return _gerar_resposta_erro("Nome do m√≥dulo n√£o especificado. Use: 'criar m√≥dulo nome_do_modulo'")
            
            result = dev_ai.generate_new_module(module_name, description)
            
            if result.get('status') == 'error':
                return _gerar_resposta_erro(f"Erro na gera√ß√£o do m√≥dulo: {result.get('error')}")
            
            files_created = result.get('files_created', [])
            
            resposta = f"""
üöÄ **M√≥dulo '{module_name}' Criado com Sucesso!**

üìÅ **Arquivos Criados ({len(files_created)}):**
"""
            for file_path in files_created:
                resposta += f"\n‚úÖ {file_path}"
            
            resposta += f"""

üìö **Documenta√ß√£o:**
{result.get('documentation', 'Documenta√ß√£o gerada automaticamente')}

üîó **Pr√≥ximos Passos:**
"""
            for step in result.get('next_steps', []):
                resposta += f"\n‚Ä¢ {step}"
            
            return _gerar_resposta_sucesso(resposta)
        
        elif tipo == 'detect_issues':
            result = dev_ai.detect_and_fix_issues()
            
            if 'error' in result:
                return _gerar_resposta_erro(f"Erro na detec√ß√£o de problemas: {result['error']}")
            
            total_issues = result.get('total_issues', 0)
            fixes_applied = result.get('fixes_applied', 0)
            
            resposta = f"""
üîß **An√°lise de Problemas Conclu√≠da**

üìä **Resumo:**
- **Problemas Detectados:** {total_issues}
- **Corre√ß√µes Aplicadas:** {fixes_applied}

‚ö†Ô∏è **Tipos de Problemas:**
"""
            for issue in result.get('issues', [])[:5]:  # Mostrar apenas os primeiros 5
                resposta += f"\n‚Ä¢ {issue.get('type', 'N/A')}: {issue.get('description', 'N/A')}"
            
            if total_issues > 5:
                resposta += f"\n... e mais {total_issues - 5} problemas"
            
            resposta += f"""

üí° **Recomenda√ß√µes:**
"""
            for rec in result.get('recommendations', [])[:3]:  # Mostrar apenas 3 recomenda√ß√µes
                resposta += f"\n‚Ä¢ {rec}"
            
            return _gerar_resposta_sucesso(resposta)
        
        elif tipo == 'show_capabilities':
            capabilities = dev_ai.get_capabilities_summary()
            
            resposta = """
üß† **Capacidades do Claude Development AI**

üîç **An√°lise:**
"""
            for cap in capabilities.get('analysis_capabilities', []):
                resposta += f"\n‚Ä¢ {cap}"
            
            resposta += """

üöÄ **Gera√ß√£o:**
"""
            for cap in capabilities.get('generation_capabilities', []):
                resposta += f"\n‚Ä¢ {cap}"
            
            resposta += """

‚úèÔ∏è **Modifica√ß√£o:**
"""
            for cap in capabilities.get('modification_capabilities', []):
                resposta += f"\n‚Ä¢ {cap}"
            
            resposta += """

üí° **Exemplos de Comandos:**
‚Ä¢ "Analisar projeto completo"
‚Ä¢ "Criar m√≥dulo vendas"
‚Ä¢ "Analisar arquivo app/models.py"
‚Ä¢ "Detectar problemas no c√≥digo"
‚Ä¢ "Gerar documenta√ß√£o"
"""
            
            return _gerar_resposta_sucesso(resposta)
        
        else:
            return _gerar_resposta_erro(f"Tipo de consulta n√£o suportado: {tipo}")
        
    except Exception as e:
        logger.error(f"Erro no processamento de consulta de desenvolvimento: {e}")
        return _gerar_resposta_erro(f"Erro interno: {str(e)}")

# A integra√ß√£o da detec√ß√£o de desenvolvimento ser√° feita na fun√ß√£o existente processar_consulta_real
# Ao inv√©s de modificar a fun√ß√£o inteira, vou adicionar um hook dentro da fun√ß√£o existente

# Inst√¢ncia global
claude_integration = ClaudeRealIntegration()

def processar_com_claude_real(consulta: str, user_context: Optional[Dict] = None) -> str:
    """Fun√ß√£o p√∫blica para processar com Claude real"""
    return claude_integration.processar_consulta_real(consulta, user_context)

# üéØ NOVAS FUN√á√ïES MODULARES POR DOM√çNIO

def _carregar_dados_entregas(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üì¶ Carrega dados espec√≠ficos de ENTREGAS (padr√£o)"""
    # Usar a inst√¢ncia global para acessar o m√©todo
    dados_entregas = claude_integration._carregar_entregas_banco(analise, filtros_usuario, data_limite)
    return {
        "tipo_dados": "entregas",
        "entregas": dados_entregas,
        "registros_carregados": dados_entregas.get("total_registros", 0)
    }

def _carregar_dados_fretes(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üöõ Carrega dados espec√≠ficos de FRETES"""
    try:
        from app import db
        from app.fretes.models import Frete, DespesaExtra
        from app.transportadoras.models import Transportadora
        
        # Query de fretes
        query_fretes = db.session.query(Frete).filter(
            Frete.criado_em >= data_limite
        )
        
        # Aplicar filtros
        if analise.get("cliente_especifico") and not analise.get("correcao_usuario"):
            query_fretes = query_fretes.filter(
                Frete.nome_cliente.ilike(f'%{analise["cliente_especifico"]}%')
            )
        
        fretes = query_fretes.order_by(Frete.criado_em.desc()).limit(500).all()
        
        # Estat√≠sticas de fretes
        total_fretes = len(fretes)
        
        # Contadores corrigidos baseados no campo status
        fretes_aprovados = len([f for f in fretes if f.status == 'aprovado'])
        fretes_pendentes = len([f for f in fretes if f.status == 'pendente' or f.requer_aprovacao])
        fretes_pagos = len([f for f in fretes if f.status == 'pago'])
        fretes_sem_cte = len([f for f in fretes if not f.numero_cte])
        
        valor_total_cotado = sum(float(f.valor_cotado or 0) for f in fretes)
        valor_total_considerado = sum(float(f.valor_considerado or 0) for f in fretes)
        valor_total_pago = sum(float(f.valor_pago or 0) for f in fretes)
        
        logger.info(f"üöõ Total fretes: {total_fretes} | Pendentes: {fretes_pendentes} | Sem CTE: {fretes_sem_cte}")
        
        return {
            "tipo_dados": "fretes",
            "fretes": {
                "registros": [
                    {
                        "id": f.id,
                        "cliente": f.nome_cliente,
                        "uf_destino": f.uf_destino,
                        "transportadora": f.transportadora.razao_social if f.transportadora else "N/A",
                        "valor_cotado": float(f.valor_cotado or 0),
                        "valor_considerado": float(f.valor_considerado or 0),
                        "valor_pago": float(f.valor_pago or 0),
                        "peso_total": float(f.peso_total or 0),
                        "status": f.status,
                        "requer_aprovacao": f.requer_aprovacao,
                        "numero_cte": f.numero_cte,
                        "data_criacao": f.criado_em.isoformat() if f.criado_em else None,
                        "vencimento": f.vencimento.isoformat() if f.vencimento else None
                    }
                    for f in fretes
                ],
                "estatisticas": {
                    "total_fretes": total_fretes,
                    "fretes_aprovados": fretes_aprovados,
                    "fretes_pendentes": fretes_pendentes,
                    "fretes_pagos": fretes_pagos,
                    "fretes_sem_cte": fretes_sem_cte,
                    "percentual_aprovacao": round((fretes_aprovados / total_fretes * 100), 1) if total_fretes > 0 else 0,
                    "percentual_pendente": round((fretes_pendentes / total_fretes * 100), 1) if total_fretes > 0 else 0,
                    "valor_total_cotado": valor_total_cotado,
                    "valor_total_considerado": valor_total_considerado,
                    "valor_total_pago": valor_total_pago
                }
            },
            "registros_carregados": total_fretes
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados de fretes: {e}")
        return {"erro": str(e), "tipo_dados": "fretes"}

def _carregar_dados_transportadoras(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üöö Carrega dados espec√≠ficos de TRANSPORTADORAS"""
    try:
        from app import db
        from app.transportadoras.models import Transportadora
        from app.fretes.models import Frete
        
        # Transportadoras ativas
        transportadoras = db.session.query(Transportadora).filter(
            Transportadora.ativo == True
        ).all()
        
        # Fretes por transportadora
        fretes_por_transportadora = {}
        for transportadora in transportadoras:
            fretes_query = db.session.query(Frete).filter(
                Frete.transportadora == transportadora.razao_social,
                Frete.criado_em >= data_limite
            )
            
            fretes_count = fretes_query.count()
            valor_total = sum(float(f.valor_cotado or 0) for f in fretes_query.all())
            
            fretes_por_transportadora[transportadora.razao_social] = {
                "total_fretes": fretes_count,
                "valor_total": valor_total,
                "media_valor": round(valor_total / fretes_count, 2) if fretes_count > 0 else 0
            }
        
        return {
            "tipo_dados": "transportadoras",
            "transportadoras": {
                "registros": [
                    {
                        "id": t.id,
                        "razao_social": t.razao_social,
                        "cnpj": t.cnpj,
                        "cidade": t.cidade,
                        "uf": t.uf,
                        "tipo": "Freteiro" if getattr(t, 'freteiro', False) else "Empresa",
                        "fretes_periodo": fretes_por_transportadora.get(t.razao_social, {})
                    }
                    for t in transportadoras
                ],
                "estatisticas": {
                    "total_transportadoras": len(transportadoras),
                    "freteiros": len([t for t in transportadoras if getattr(t, 'freteiro', False)]),
                    "empresas": len([t for t in transportadoras if not getattr(t, 'freteiro', False)])
                }
            },
            "registros_carregados": len(transportadoras)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados de transportadoras: {e}")
        return {"erro": str(e), "tipo_dados": "transportadoras"}

def _carregar_dados_pedidos(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üìã Carrega dados espec√≠ficos de PEDIDOS"""
    try:
        from app import db
        from app.pedidos.models import Pedido
        
        # Log da consulta para debug
        cliente_filtro = analise.get("cliente_especifico")
        logger.info(f"üîç CONSULTA PEDIDOS: Cliente={cliente_filtro}, Per√≠odo={analise.get('periodo_dias', 30)} dias")
        
        # Query de pedidos - expandir per√≠odo para capturar mais dados
        query_pedidos = db.session.query(Pedido).filter(
            Pedido.expedicao >= data_limite.date()
        )
        
        # Aplicar filtros de cliente
        if cliente_filtro and not analise.get("correcao_usuario"):
            # Filtro mais abrangente para capturar varia√ß√µes do nome
            filtro_cliente = f'%{cliente_filtro}%'
            query_pedidos = query_pedidos.filter(
                Pedido.raz_social_red.ilike(filtro_cliente)
            )
            logger.info(f"üéØ Filtro aplicado: raz_social_red ILIKE '{filtro_cliente}'")
        
        # Buscar pedidos (aumentar limite para capturar mais registros)
        pedidos = query_pedidos.order_by(Pedido.expedicao.desc()).limit(500).all()
        
        logger.info(f"üìä Total pedidos encontrados: {len(pedidos)}")
        
        # Classificar pedidos por status usando property do modelo
        pedidos_abertos = []
        pedidos_cotados = []  
        pedidos_faturados = []
        
        for p in pedidos:
            status_calc = p.status_calculado
            if status_calc == 'ABERTO':
                pedidos_abertos.append(p)
            elif status_calc == 'COTADO':
                pedidos_cotados.append(p)
            elif status_calc == 'FATURADO':
                pedidos_faturados.append(p)
        
        logger.info(f"üìà ABERTOS: {len(pedidos_abertos)}, COTADOS: {len(pedidos_cotados)}, FATURADOS: {len(pedidos_faturados)}")
        
        # Calcular estat√≠sticas
        total_pedidos = len(pedidos)
        valor_total = sum(float(p.valor_saldo_total or 0) for p in pedidos)
        valor_total_abertos = sum(float(p.valor_saldo_total or 0) for p in pedidos_abertos)
        
        return {
            "tipo_dados": "pedidos",
            "pedidos": {
                "registros": [
                    {
                        "id": p.id,
                        "num_pedido": p.num_pedido,
                        "cliente": p.raz_social_red,
                        "cnpj_cpf": p.cnpj_cpf,
                        "cidade": p.nome_cidade,
                        "uf": p.cod_uf,
                        "valor_total": float(p.valor_saldo_total or 0),
                        "peso_total": float(p.peso_total or 0),
                        "rota": p.rota,
                        "expedicao": p.expedicao.isoformat() if p.expedicao else None,
                        "agendamento": p.agendamento.isoformat() if p.agendamento else None,
                        "protocolo": p.protocolo,
                        "nf": p.nf,
                        "cotacao_id": p.cotacao_id,
                        "status_calculado": p.status_calculado,
                        "pendente_cotacao": p.pendente_cotacao
                    }
                    for p in pedidos
                ],
                "pedidos_abertos_detalhado": [
                    {
                        "num_pedido": p.num_pedido,
                        "cliente": p.raz_social_red,
                        "valor_total": float(p.valor_saldo_total or 0),
                        "peso_total": float(p.peso_total or 0),
                        "expedicao": p.expedicao.isoformat() if p.expedicao else None,
                        "cidade": p.nome_cidade,
                        "uf": p.cod_uf
                    }
                    for p in pedidos_abertos
                ],
                "estatisticas": {
                    "total_pedidos": total_pedidos,
                    "pedidos_abertos": len(pedidos_abertos),
                    "pedidos_cotados": len(pedidos_cotados),
                    "pedidos_faturados": len(pedidos_faturados),
                    "valor_total": valor_total,
                    "valor_total_abertos": valor_total_abertos,
                    "percentual_faturamento": round((len(pedidos_faturados) / total_pedidos * 100), 1) if total_pedidos > 0 else 0,
                    "percentual_pendentes": round((len(pedidos_abertos) / total_pedidos * 100), 1) if total_pedidos > 0 else 0
                }
            },
            "registros_carregados": total_pedidos
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados de pedidos: {e}")
        return {"erro": str(e), "tipo_dados": "pedidos"}

def _carregar_dados_embarques(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üì¶ Carrega dados espec√≠ficos de EMBARQUES com intelig√™ncia para consultas espec√≠ficas"""
    try:
        from app import db
        from app.embarques.models import Embarque, EmbarqueItem
        from datetime import date
        
        consulta_original = analise.get("consulta_original", "").lower()
        
        # üß† DETEC√á√ÉO INTELIGENTE: Embarques pendentes para hoje
        eh_consulta_pendentes_hoje = any(palavra in consulta_original for palavra in [
            "pendente hoje", "pendentes hoje", "pendente pra hoje", "pendentes pra hoje",
            "aguardando hoje", "faltam sair hoje", "ainda tem hoje", "hoje pendente"
        ])
        
        # üß† DETEC√á√ÉO INTELIGENTE: Embarques pendentes (geral)
        eh_consulta_pendentes_geral = any(palavra in consulta_original for palavra in [
            "pendente", "aguardando", "faltam sair", "ainda n√£o saiu", "sem data embarque"
        ]) and not eh_consulta_pendentes_hoje
        
        logger.info(f"üîç CONSULTA EMBARQUES: Original='{consulta_original}' | Pendentes hoje={eh_consulta_pendentes_hoje} | Pendentes geral={eh_consulta_pendentes_geral}")
        
        # Query base de embarques
        query_embarques = db.session.query(Embarque).filter(
            Embarque.status == 'ativo'
        )
        
        # üéØ FILTROS INTELIGENTES baseados na inten√ß√£o detectada
        if eh_consulta_pendentes_hoje:
            # FILTRO ESPEC√çFICO: Data prevista = HOJE + Ainda n√£o saiu (data_embarque = null)
            hoje = date.today()
            query_embarques = query_embarques.filter(
                Embarque.data_prevista_embarque == hoje,
                Embarque.data_embarque.is_(None)
            )
            logger.info(f"üéØ Filtro aplicado: data_prevista_embarque = {hoje} AND data_embarque IS NULL")
            
        elif eh_consulta_pendentes_geral:
            # FILTRO GERAL: Todos que ainda n√£o sa√≠ram (data_embarque = null)
            query_embarques = query_embarques.filter(
                Embarque.data_embarque.is_(None)
            )
            logger.info(f"üéØ Filtro aplicado: data_embarque IS NULL (embarques aguardando)")
            
        else:
            # FILTRO PADR√ÉO: Embarques do per√≠odo
            query_embarques = query_embarques.filter(
                Embarque.criado_em >= data_limite
            )
            logger.info(f"üéØ Filtro aplicado: criado_em >= {data_limite} (embarques do per√≠odo)")
        
        # Aplicar filtro de cliente se especificado
        cliente_filtro = analise.get("cliente_especifico")
        if cliente_filtro and not analise.get("correcao_usuario"):
            # Buscar em embarque_itens pelo cliente
            query_embarques = query_embarques.join(EmbarqueItem).filter(
                EmbarqueItem.cliente.ilike(f'%{cliente_filtro}%')
            ).distinct()
            logger.info(f"üéØ Filtro de cliente aplicado: '{cliente_filtro}'")
        
        # Executar query
        embarques = query_embarques.order_by(Embarque.numero.desc()).all()
        
        logger.info(f"üì¶ Total embarques encontrados: {len(embarques)}")
        
        # Estat√≠sticas baseadas nos dados encontrados
        total_embarques = len(embarques)
        embarques_sem_data = len([e for e in embarques if not e.data_embarque])
        embarques_despachados = len([e for e in embarques if e.data_embarque])
        embarques_hoje = len([e for e in embarques if e.data_prevista_embarque == date.today()])
        embarques_pendentes_hoje = len([e for e in embarques if e.data_prevista_embarque == date.today() and not e.data_embarque])
        
        # Informa√ß√µes sobre itens dos embarques
        total_itens = 0
        clientes_envolvidos = set()
        for embarque in embarques:
            total_itens += len(embarque.itens_ativos)
            for item in embarque.itens_ativos:
                clientes_envolvidos.add(item.cliente)
        
        return {
            "tipo_dados": "embarques",
            "tipo_consulta": "pendentes_hoje" if eh_consulta_pendentes_hoje else ("pendentes_geral" if eh_consulta_pendentes_geral else "periodo"),
            "embarques": {
                "registros": [
                    {
                        "id": e.id,
                        "numero": e.numero,
                        "transportadora": e.transportadora.razao_social if e.transportadora else "N/A",
                        "motorista": e.nome_motorista or "N/A",
                        "placa_veiculo": e.placa_veiculo or "N/A",
                        "data_criacao": e.criado_em.isoformat() if e.criado_em else None,
                        "data_prevista": e.data_prevista_embarque.isoformat() if e.data_prevista_embarque else None,
                        "data_embarque": e.data_embarque.isoformat() if e.data_embarque else None,
                        "status": "Despachado" if e.data_embarque else "Aguardando Sa√≠da",
                        "eh_hoje": e.data_prevista_embarque == date.today() if e.data_prevista_embarque else False,
                        "total_nfs": len(e.itens_ativos),
                        "observacoes": e.observacoes[:100] + "..." if e.observacoes and len(e.observacoes) > 100 else e.observacoes
                    }
                    for e in embarques
                ],
                "estatisticas": {
                    "total_embarques": total_embarques,
                    "embarques_despachados": embarques_despachados,
                    "embarques_aguardando": embarques_sem_data,
                    "embarques_previstos_hoje": embarques_hoje,
                    "embarques_pendentes_hoje": embarques_pendentes_hoje,
                    "total_nfs": total_itens,
                    "clientes_envolvidos": len(clientes_envolvidos),
                    "percentual_despachado": round((embarques_despachados / total_embarques * 100), 1) if total_embarques > 0 else 0,
                    "filtro_aplicado": "data_prevista_embarque = HOJE AND data_embarque IS NULL" if eh_consulta_pendentes_hoje else "data_embarque IS NULL" if eh_consulta_pendentes_geral else "embarques do per√≠odo"
                }
            },
            "registros_carregados": total_embarques
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados de embarques: {e}")
        return {"erro": str(e), "tipo_dados": "embarques"}

def _carregar_dados_faturamento(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üí∞ Carrega dados espec√≠ficos de FATURAMENTO"""
    try:
        from app import db
        from app.faturamento.models import RelatorioFaturamentoImportado as RelatorioImportado
        
        # Log da consulta para debug
        cliente_filtro = analise.get("cliente_especifico")
        logger.info(f"üîç CONSULTA FATURAMENTO: Cliente={cliente_filtro}, Per√≠odo={analise.get('periodo_dias', 30)} dias")
        
        # Query de faturamento
        query_faturamento = db.session.query(RelatorioImportado).filter(
            RelatorioImportado.data_fatura >= data_limite.date()
        )
        
        # Aplicar filtros
        if cliente_filtro and not analise.get("correcao_usuario"):
            query_faturamento = query_faturamento.filter(
                RelatorioImportado.nome_cliente.ilike(f'%{cliente_filtro}%')
            )
            logger.info(f"üéØ Filtro aplicado: nome_cliente ILIKE '%{cliente_filtro}%'")
        
        # CORRE√á√ÉO: Remover limita√ß√£o inadequada para consultas de per√≠odo completo
        # Carregar TODOS os dados do per√≠odo (sem limit) 
        faturas = query_faturamento.order_by(RelatorioImportado.data_fatura.desc()).all()
        
        logger.info(f"üìä Total faturas encontradas: {len(faturas)}")
        
        # Estat√≠sticas CORRETAS baseadas em TODOS os dados
        total_faturas = len(faturas)
        valor_total_faturado = sum(float(f.valor_total or 0) for f in faturas)
        
        # Log de valida√ß√£o do total
        logger.info(f"üí∞ Valor total calculado: R$ {valor_total_faturado:,.2f}")
        
        # Valida√ß√£o de consist√™ncia (alertar se muitas faturas)
        if total_faturas > 1000:
            logger.warning(f"‚ö†Ô∏è Alto volume de faturas: {total_faturas} registros. Considere filtros espec√≠ficos.")
        
        # Para resposta JSON, limitar apenas os registros individuais (n√£o as estat√≠sticas)
        faturas_para_json = faturas[:200]  # Mostrar at√© 200 faturas individuais na resposta
        
        return {
            "tipo_dados": "faturamento",
            "faturamento": {
                "registros": [
                    {
                        "id": f.id,
                        "numero_nf": f.numero_nf,
                        "cliente": f.nome_cliente,
                        "origem": f.origem,
                        "valor_total": float(f.valor_total or 0),
                        "data_fatura": f.data_fatura.isoformat() if f.data_fatura else None,
                        "incoterm": f.incoterm
                    }
                    for f in faturas_para_json  # Usar lista limitada apenas para registros individuais
                ],
                "estatisticas": {
                    "total_faturas": total_faturas,  # Baseado em TODOS os dados
                    "valor_total_faturado": valor_total_faturado,  # Baseado em TODOS os dados
                    "ticket_medio": round(valor_total_faturado / total_faturas, 2) if total_faturas > 0 else 0,
                    "registros_na_resposta": len(faturas_para_json),  # Quantos est√£o sendo mostrados
                    "dados_completos": len(faturas_para_json) == total_faturas  # Se mostra todos ou √© limitado
                }
            },
            "registros_carregados": total_faturas  # Total real carregado
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados de faturamento: {e}")
        return {"erro": str(e), "tipo_dados": "faturamento"}

def _carregar_dados_financeiro(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], data_limite: datetime) -> Dict[str, Any]:
    """üí≥ Carrega dados espec√≠ficos de FINANCEIRO"""
    try:
        from app import db
        from app.fretes.models import DespesaExtra
        from app.monitoramento.models import PendenciaFinanceira
        
        # Despesas extras
        query_despesas = db.session.query(DespesaExtra).filter(
            DespesaExtra.data_vencimento >= data_limite.date()
                  )
          
        despesas = query_despesas.order_by(DespesaExtra.data_vencimento.desc()).limit(200).all()
        
        # Pend√™ncias financeiras
        try:
            pendencias = db.session.query(PendenciaFinanceira).filter(
                PendenciaFinanceira.criado_em >= data_limite
            ).limit(50).all()
        except:
            pendencias = []  # Fallback se tabela n√£o existir
        
        # Estat√≠sticas
        total_despesas = len(despesas)
        valor_total_despesas = sum(float(d.valor_despesa or 0) for d in despesas)
        
        return {
            "tipo_dados": "financeiro",
            "financeiro": {
                "despesas_extras": [
                    {
                        "id": d.id,
                        "tipo_despesa": d.tipo_despesa,
                        "valor": float(d.valor_despesa or 0),
                        "vencimento": d.data_vencimento.isoformat() if d.data_vencimento else None,
                        "numero_documento": d.numero_documento,
                        "observacoes": d.observacoes
                    }
                    for d in despesas
                ],
                "pendencias_financeiras": [
                    {
                        "id": p.id,
                        "observacao": p.observacao,
                        "criado_em": p.criado_em.isoformat() if p.criado_em else None
                    }
                    for p in pendencias
                ],
                "estatisticas": {
                    "total_despesas": total_despesas,
                    "valor_total_despesas": valor_total_despesas,
                    "total_pendencias": len(pendencias)
                }
            },
            "registros_carregados": total_despesas + len(pendencias)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar dados financeiros: {e}")
        return {"erro": str(e), "tipo_dados": "financeiro"}

def _calcular_estatisticas_por_dominio(analise: Dict[str, Any], filtros_usuario: Dict[str, Any], dominio: str) -> Dict[str, Any]:
    """üìä Calcula estat√≠sticas espec√≠ficas baseadas no dom√≠nio"""
    try:
        # Para entregas, usar a fun√ß√£o existente
        if dominio == "entregas":
            # Usar a inst√¢ncia global para acessar o m√©todo
            return claude_integration._calcular_estatisticas_especificas(analise, filtros_usuario)
        
        # Para outros dom√≠nios, estat√≠sticas j√° est√£o inclu√≠das nos dados carregados
        return {
            "dominio": dominio,
            "periodo_analisado": f"{analise.get('periodo_dias', 30)} dias",
            "cliente_especifico": analise.get("cliente_especifico"),
            "nota": f"Estat√≠sticas espec√≠ficas inclu√≠das nos dados de {dominio}"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao calcular estat√≠sticas do dom√≠nio {dominio}: {e}")
        return {"erro": str(e), "dominio": dominio}

# Inst√¢ncia global
claude_real_integration = ClaudeRealIntegration()