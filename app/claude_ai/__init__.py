from flask import Blueprint

claude_ai_bp = Blueprint('claude_ai', __name__, url_prefix='/claude-ai')

# Import routes to register them with the blueprint
from . import routes 

# Import ClaudeRealIntegration
try:
    from .claude_real_integration import ClaudeRealIntegration
except ImportError:
    ClaudeRealIntegration = None

# üöÄ SISTEMA AVAN√áADO DE IA v2.0 - ROTAS AVAN√áADAS ATIVADAS
# Vers√£o: 25/06/2025 - Sistema Multi-Agent + Human Learning + PostgreSQL JSONB

# ü§ñ SISTEMA DE AUTONOMIA TOTAL v1.0 - ADICIONADO
# Sistema completo de autonomia com seguran√ßa absoluta

# ‚úÖ CORRE√á√ÉO: Inicializa√ß√£o movida para fun√ß√£o expl√≠cita
# Evita problemas de inicializa√ß√£o circular

def setup_claude_ai(app, redis_cache=None):
    """
    Configura o sistema Claude AI com a aplica√ß√£o Flask
    
    Args:
        app: Aplica√ß√£o Flask
        redis_cache: Inst√¢ncia do cache Redis (opcional)
        
    Returns:
        bool: True se inicializado com sucesso
    """
    success = True
    
    # üîí NOVO: Inicializar Sistema de Seguran√ßa
    try:
        from .security_guard import init_security_guard
        
        security_guard = init_security_guard(app.instance_path)
        if security_guard:
            app.logger.info("üîí Sistema de Seguran√ßa Claude AI inicializado")
        else:
            app.logger.warning("‚ö†Ô∏è Sistema de Seguran√ßa com problemas")
            success = False
                
    except ImportError as e:
        app.logger.warning(f"‚ö†Ô∏è Sistema de Seguran√ßa n√£o dispon√≠vel: {e}")
        success = False
    except Exception as e:
        app.logger.error(f"‚ùå Erro ao inicializar seguran√ßa: {e}")
        success = False
    
    # ü§ñ NOVO: Inicializar Processador Autom√°tico de Comandos
    try:
        from .auto_command_processor import init_auto_processor
        
        auto_processor = init_auto_processor()
        if auto_processor:
            app.logger.info("ü§ñ Processador Autom√°tico de Comandos inicializado")
        else:
            app.logger.warning("‚ö†Ô∏è Processador Autom√°tico com problemas")
            success = False
                
    except ImportError as e:
        app.logger.warning(f"‚ö†Ô∏è Processador Autom√°tico n√£o dispon√≠vel: {e}")
        success = False
    except Exception as e:
        app.logger.error(f"‚ùå Erro ao inicializar processador autom√°tico: {e}")
        success = False
    
    # üöÄ NOVO: Inicializar Gerador de C√≥digo
    try:
        from .claude_code_generator import init_code_generator
        
        code_generator = init_code_generator(app.instance_path)
        if code_generator:
            app.logger.info("üöÄ Gerador de C√≥digo Claude AI inicializado")
        else:
            app.logger.warning("‚ö†Ô∏è Gerador de C√≥digo com problemas")
            success = False
                
    except ImportError as e:
        app.logger.warning(f"‚ö†Ô∏è Gerador de C√≥digo n√£o dispon√≠vel: {e}")
        success = False
    except Exception as e:
        app.logger.error(f"‚ùå Erro ao inicializar gerador de c√≥digo: {e}")
        success = False
    
    # üß† Inicializar Sistema de Sugest√µes Inteligentes
    try:
        from .suggestion_engine import init_suggestion_engine
        
        suggestion_engine = init_suggestion_engine(redis_cache)
        if suggestion_engine:
            app.logger.info("üß† Sistema de Sugest√µes Inteligentes inicializado" + 
                          (" com Redis" if redis_cache else " (sem Redis)"))
        else:
            app.logger.warning("‚ö†Ô∏è Sistema de Sugest√µes sem Redis (fallback)")
                
    except ImportError as e:
        app.logger.warning(f"‚ö†Ô∏è Sistema de Sugest√µes Inteligentes n√£o dispon√≠vel: {e}")
    except Exception as e:
        app.logger.error(f"‚ùå Erro ao inicializar sugest√µes: {e}")
    
    # üìä Configurar analisador de dados
    try:
        from .data_analyzer import init_data_analyzers
        app.logger.info("üìä Analisador de Dados configurado")
    except ImportError as e:
        app.logger.warning(f"‚ö†Ô∏è Analisador de dados n√£o dispon√≠vel: {e}")
        
    return success

# üéØ FUN√á√ïES DE ACESSO R√ÅPIDO PARA OS SISTEMAS DE AUTONOMIA
def get_security_guard():
    """Retorna inst√¢ncia do sistema de seguran√ßa"""
    try:
        from .security_guard import get_security_guard
        return get_security_guard()
    except ImportError:
        return None

def get_auto_processor():
    """Retorna inst√¢ncia do processador autom√°tico"""
    try:
        from .auto_command_processor import get_auto_processor
        return get_auto_processor()
    except ImportError:
        return None

def get_code_generator():
    """Retorna inst√¢ncia do gerador de c√≥digo"""
    try:
        from .claude_code_generator import get_code_generator
        return get_code_generator()
    except ImportError:
        return None

# ‚ùå REMOVIDO: Inicializa√ß√£o autom√°tica que causava problemas
# init_intelligent_suggestions() 