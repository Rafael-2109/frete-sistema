"""
ü§ñ AUTO COMMAND PROCESSOR - Processamento Autom√°tico de Comandos
Permite ao Claude AI usar automaticamente as APIs de autonomia durante conversas
"""

import re
import json
import logging
from typing import Dict, List, Any, Optional, Tuple
from .claude_code_generator import get_code_generator
from .security_guard import get_security_guard
import requests
from flask import current_app, url_for

logger = logging.getLogger(__name__)

class AutoCommandProcessor:
    """Processador autom√°tico de comandos para Claude AI"""
    
    def __init__(self):
        """Inicializa processador de comandos"""
        self.command_patterns = {
            'criar_modulo': [
                r'cri[ae] (?:um )?m√≥dulo (.+)',
                r'gera(?:r)? (?:um )?m√≥dulo (.+)',
                r'novo m√≥dulo (.+)',
                r'implementa(?:r)? m√≥dulo (.+)'
            ],
            'ler_arquivo': [
                r'l[e√™] (?:o )?arquivo (.+)',
                r'mostra(?:r)? (?:o )?arquivo (.+)',
                r'ver (?:o )?arquivo (.+)',
                r'exibi(?:r)? (?:o )?arquivo (.+)'
            ],
            'descobrir_projeto': [
                r'descobr[ie]r? (?:o )?projeto',
                r'descobr[ie]r? projeto',
                r'descubra (?:o )?projeto',
                r'analisa(?:r)? (?:a )?estrutura',
                r'mape[ae]r? (?:o )?sistema',
                r'quais m√≥dulos (?:existem|tem)',
                r'projeto completo',
                r'estrutura do projeto'
            ],
            'inspecionar_banco': [
                r'inspeciona(?:r)? (?:o )?banco',
                r'verifica(?:r)? (?:o )?schema',
                r'mostra(?:r)? (?:as )?tabelas',
                r'esquema do banco'
            ],
            'listar_diretorio': [
                r'lista(?:r)? (?:o )?diret√≥rio (.+)',
                r'ver (?:a )?pasta (.+)',
                r'conte√∫do (?:da pasta|do diret√≥rio) (.+)'
            ]
        }
        
        logger.info("ü§ñ Auto Command Processor inicializado")
    
    def detect_command(self, user_input: str) -> Tuple[Optional[str], Dict[str, Any]]:
        """
        Detecta comando automatiz√°vel na entrada do usu√°rio
        Returns: (comando_detectado, parametros)
        """
        try:
            user_input_lower = user_input.lower().strip()
            
            for command, patterns in self.command_patterns.items():
                for pattern in patterns:
                    match = re.search(pattern, user_input_lower)
                    if match:
                        # Extrair par√¢metros baseado no comando
                        params = self._extract_parameters(command, match, user_input)
                        logger.info(f"üéØ Comando detectado: {command} - {params}")
                        return command, params
            
            return None, {}
            
        except Exception as e:
            logger.error(f"‚ùå Erro na detec√ß√£o de comando: {e}")
            return None, {}
    
    def _extract_parameters(self, command: str, match: re.Match, original_input: str) -> Dict[str, Any]:
        """Extrai par√¢metros espec√≠ficos do comando"""
        try:
            if command == 'criar_modulo':
                module_info = match.group(1).strip()
                
                # Tentar extrair campos se mencionados
                fields = []
                
                # Padr√µes para detectar campos
                field_patterns = [
                    r'com campos? (.+)',
                    r'tendo (.+)',
                    r'campos?: (.+)'
                ]
                
                for pattern in field_patterns:
                    field_match = re.search(pattern, original_input.lower())
                    if field_match:
                        field_text = field_match.group(1)
                        fields = self._parse_fields_from_text(field_text)
                        break
                
                # Se n√£o encontrou campos, usar padr√£o b√°sico
                if not fields:
                    fields = [
                        {'name': 'nome', 'type': 'string', 'nullable': False},
                        {'name': 'descricao', 'type': 'text', 'nullable': True},
                        {'name': 'ativo', 'type': 'boolean', 'nullable': False}
                    ]
                
                return {
                    'nome_modulo': module_info.replace(' ', '_').lower(),
                    'campos': fields
                }
            
            elif command == 'ler_arquivo':
                arquivo = match.group(1).strip()
                return {'arquivo': arquivo}
            
            elif command == 'listar_diretorio':
                diretorio = match.group(1).strip()
                return {'diretorio': diretorio}
            
            else:
                return {}
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair par√¢metros: {e}")
            return {}
    
    def _parse_fields_from_text(self, field_text: str) -> List[Dict[str, Any]]:
        """Parse de campos a partir de texto natural"""
        try:
            fields = []
            
            # Padr√µes comuns de campos
            field_patterns = [
                (r'(\w+)\s*\((\w+)\)', lambda m: {'name': m.group(1), 'type': m.group(2), 'nullable': True}),
                (r'(\w+)\s*string', lambda m: {'name': m.group(1), 'type': 'string', 'nullable': True}),
                (r'(\w+)\s*text', lambda m: {'name': m.group(1), 'type': 'text', 'nullable': True}),
                (r'(\w+)\s*int', lambda m: {'name': m.group(1), 'type': 'integer', 'nullable': True}),
                (r'(\w+)\s*bool', lambda m: {'name': m.group(1), 'type': 'boolean', 'nullable': True}),
            ]
            
            for pattern, field_builder in field_patterns:
                matches = re.finditer(pattern, field_text.lower())
                for match in matches:
                    field = field_builder(match)
                    if field not in fields:
                        fields.append(field)
            
            # Se n√£o encontrou nada, extrair palavras como campos string
            if not fields:
                words = re.findall(r'\b\w+\b', field_text)
                for word in words[:5]:  # M√°ximo 5 campos
                    if len(word) > 2:
                        fields.append({
                            'name': word.lower(),
                            'type': 'string',
                            'nullable': True
                        })
            
            return fields or [
                {'name': 'nome', 'type': 'string', 'nullable': False}
            ]
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao parsear campos: {e}")
            return [{'name': 'nome', 'type': 'string', 'nullable': False}]
    
    def execute_command(self, command: str, params: Dict[str, Any]) -> Tuple[bool, str, Dict[str, Any]]:
        """
        Executa comando automaticamente
        Returns: (sucesso, mensagem, dados)
        """
        try:
            # Verificar seguran√ßa primeiro
            security_guard = get_security_guard()
            
            # Mapear comando para fun√ß√£o
            command_map = {
                'descobrir_projeto': self._execute_descobrir_projeto,
                'ler_arquivo': self._execute_ler_arquivo,
                'listar_diretorio': self._execute_listar_diretorio,
                'inspecionar_banco': self._execute_inspecionar_banco,
                'criar_modulo': self._execute_criar_modulo
            }
            
            if command not in command_map:
                return False, f"‚ùå Comando n√£o suportado: {command}", {}
            
            # Executar comando
            return command_map[command](params)
            
        except Exception as e:
            logger.error(f"‚ùå Erro na execu√ß√£o do comando {command}: {e}")
            return False, f"‚ùå Erro interno: {e}", {}
    
    def _execute_descobrir_projeto(self, params: Dict[str, Any]) -> Tuple[bool, str, Dict[str, Any]]:
        """Executa descoberta do projeto"""
        try:
            # Fazer requisi√ß√£o interna para API de descoberta
            from flask import current_app
            
            with current_app.test_request_context():
                from .routes import descobrir_projeto
                response = descobrir_projeto()
                
                # Verificar se response √© dict diretamente ou tem atributo json
                if isinstance(response, dict):
                    data = response
                elif hasattr(response, 'json') and response.json:
                    data = response.json
                else:
                    data = {}
                
                if data.get('status') == 'success' and 'projeto' in data:
                    projeto = data['projeto']
                    resumo = f"""
üîç **PROJETO DESCOBERTO**

üìä **Resumo:**
- **{projeto['total_modulos']} m√≥dulos** encontrados
- **{projeto['total_tabelas']} tabelas** no banco
- **{projeto['total_templates']} templates** dispon√≠veis

üóÇÔ∏è **M√≥dulos Principais:**
{self._format_modules_summary(projeto['estrutura_modulos'])}

üóÑÔ∏è **Tabelas do Banco:**
{', '.join(projeto['tabelas_banco'][:10])}{"..." if len(projeto['tabelas_banco']) > 10 else ""}
"""
                    return True, resumo, projeto
                else:
                    return False, f"‚ùå Erro: {data.get('message', 'Falha na descoberta')}", {}
            
        except Exception as e:
            logger.error(f"‚ùå Erro na descoberta do projeto: {e}")
            return False, f"‚ùå Erro interno: {e}", {}
    
    def _format_modules_summary(self, modules: Dict[str, Any]) -> str:
        """Formata resumo dos m√≥dulos"""
        summary_lines = []
        for name, info in list(modules.items())[:8]:  # Primeiros 8 m√≥dulos
            status_icons = []
            if info.get('tem_models'): status_icons.append('üìã')
            if info.get('tem_forms'): status_icons.append('üìù')
            if info.get('tem_routes'): status_icons.append('üåê')
            if info.get('tem_templates'): status_icons.append('üé®')
            
            summary_lines.append(f"- **{name}**: {' '.join(status_icons)}")
        
        return '\n'.join(summary_lines)
    
    def _execute_ler_arquivo(self, params: Dict[str, Any]) -> Tuple[bool, str, Dict[str, Any]]:
        """Executa leitura de arquivo"""
        try:
            code_gen = get_code_generator()
            if not code_gen:
                return False, "‚ùå Gerador de c√≥digo n√£o dispon√≠vel", {}
            
            arquivo = params.get('arquivo', '')
            conteudo = code_gen.read_file(arquivo)
            
            if conteudo.startswith('‚ùå'):
                return False, conteudo, {}
            
            # Limitar conte√∫do para apresenta√ß√£o
            preview = conteudo[:1000] + '\n...' if len(conteudo) > 1000 else conteudo
            
            resultado = f"""
üìñ **ARQUIVO: {arquivo}**

```python
{preview}
```

üìä **Informa√ß√µes:**
- **Tamanho**: {len(conteudo):,} caracteres
- **Linhas**: {len(conteudo.split(chr(10))):,}
"""
            
            return True, resultado, {
                'arquivo': arquivo,
                'conteudo': conteudo,
                'tamanho': len(conteudo),
                'linhas': len(conteudo.split('\n'))
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na leitura do arquivo: {e}")
            return False, f"‚ùå Erro interno: {e}", {}
    
    def _execute_listar_diretorio(self, params: Dict[str, Any]) -> Tuple[bool, str, Dict[str, Any]]:
        """Executa listagem de diret√≥rio"""
        try:
            code_gen = get_code_generator()
            if not code_gen:
                return False, "‚ùå Gerador de c√≥digo n√£o dispon√≠vel", {}
            
            diretorio = params.get('diretorio', '')
            conteudo = code_gen.list_directory_contents(diretorio)
            
            if 'error' in conteudo:
                return False, f"‚ùå {conteudo['error']}", {}
            
            resultado = f"""
üìÅ **DIRET√ìRIO: {conteudo.get('path', diretorio)}**

üìÇ **Subdiret√≥rios ({len(conteudo['directories'])}):**
{', '.join(conteudo['directories']) if conteudo['directories'] else 'Nenhum'}

üìÑ **Arquivos ({len(conteudo['files'])}):**
"""
            
            for arquivo in conteudo['files'][:10]:  # Mostrar primeiros 10
                resultado += f"\n- **{arquivo['name']}** ({arquivo['tamanho_kb']:.1f}KB)"
            
            if len(conteudo['files']) > 10:
                resultado += f"\n... e mais {len(conteudo['files']) - 10} arquivos"
            
            return True, resultado, conteudo
            
        except Exception as e:
            logger.error(f"‚ùå Erro na listagem do diret√≥rio: {e}")
            return False, f"‚ùå Erro interno: {e}", {}
    
    def _execute_inspecionar_banco(self, params: Dict[str, Any]) -> Tuple[bool, str, Dict[str, Any]]:
        """Executa inspe√ß√£o do banco"""
        try:
            from flask import current_app
            
            with current_app.test_request_context():
                from .routes import inspecionar_banco
                response = inspecionar_banco()
                
                # Verificar se response √© dict diretamente ou tem atributo json
                if isinstance(response, dict):
                    data = response
                elif hasattr(response, 'json') and response.json:
                    data = response.json
                else:
                    data = {}
                
                if data.get('status') == 'success' and 'esquema' in data:
                    esquema = data['esquema']
                    
                    resultado = f"""
üóÑÔ∏è **BANCO DE DADOS INSPECIONADO**

üìä **Informa√ß√µes Gerais:**
- **Tipo**: {esquema['info_banco']['dialeto']}
- **Driver**: {esquema['info_banco']['driver']}
- **Tabelas**: {len(esquema['tabelas'])}

üóÇÔ∏è **Tabelas Principais:**
"""
                    
                    for nome_tabela, info_tabela in list(esquema['tabelas'].items())[:8]:
                        if isinstance(info_tabela, dict) and 'colunas' in info_tabela:
                            num_colunas = len(info_tabela['colunas'])
                            num_fks = len(info_tabela.get('foreign_keys', []))
                            resultado += f"\n- **{nome_tabela}**: {num_colunas} colunas"
                            if num_fks > 0:
                                resultado += f", {num_fks} FK"
                    
                    return True, resultado, esquema
                else:
                    return False, f"‚ùå Erro: {data.get('message', 'Falha na inspe√ß√£o')}", {}
            
        except Exception as e:
            logger.error(f"‚ùå Erro na inspe√ß√£o do banco: {e}")
            return False, f"‚ùå Erro interno: {e}", {}
    
    def _execute_criar_modulo(self, params: Dict[str, Any]) -> Tuple[bool, str, Dict[str, Any]]:
        """Executa cria√ß√£o de m√≥dulo"""
        try:
            # Verificar seguran√ßa
            security_guard = get_security_guard()
            nome_modulo = params.get('nome_modulo', '')
            
            if security_guard:
                # Validar cada arquivo que ser√° criado
                arquivos_para_criar = [
                    f"app/{nome_modulo}/models.py",
                    f"app/{nome_modulo}/forms.py", 
                    f"app/{nome_modulo}/routes.py",
                    f"app/{nome_modulo}/__init__.py",
                    f"app/templates/{nome_modulo}/form.html",
                    f"app/templates/{nome_modulo}/list.html"
                ]
                
                blocked_files = []
                pending_actions = []
                
                for arquivo in arquivos_para_criar:
                    allowed, reason, action_id = security_guard.validate_file_operation(
                        arquivo, 'CREATE_MODULE', 'C√≥digo gerado automaticamente'
                    )
                    
                    if not allowed:
                        if 'AGUARDANDO APROVA√á√ÉO' in reason:
                            pending_actions.append(action_id)
                        else:
                            blocked_files.append(f"{arquivo}: {reason}")
                
                if blocked_files:
                    return False, f"‚ùå Arquivos bloqueados pela seguran√ßa:\n" + '\n'.join(blocked_files), {}
                
                if pending_actions:
                    return False, f"‚ö†Ô∏è Cria√ß√£o de m√≥dulo pendente de aprova√ß√£o.\n**A√ß√µes criadas**: {', '.join(pending_actions)}\n\nAguarde aprova√ß√£o de um administrador.", {
                        'pending_actions': pending_actions,
                        'status': 'PENDING_APPROVAL'
                    }
            
            # Se chegou aqui, pode criar
            code_gen = get_code_generator()
            if not code_gen:
                return False, "‚ùå Gerador de c√≥digo n√£o dispon√≠vel", {}
            
            arquivos_gerados = code_gen.generate_flask_module(
                params['nome_modulo'],
                params['campos']
            )
            
            arquivos_salvos = []
            for caminho_arquivo, conteudo in arquivos_gerados.items():
                if code_gen.write_file(caminho_arquivo, conteudo):
                    arquivos_salvos.append(caminho_arquivo)
            
            resultado = f"""
üöÄ **M√ìDULO CRIADO COM SUCESSO!**

üì¶ **M√≥dulo**: {params['nome_modulo']}
üìÅ **Arquivos Criados**: {len(arquivos_salvos)}

‚úÖ **Arquivos:**
{chr(10).join(f'- {arquivo}' for arquivo in arquivos_salvos)}

üéØ **Pr√≥ximos Passos:**
1. Registrar blueprint no `__init__.py` principal
2. Executar migra√ß√£o do banco: `flask db migrate -m "Add {params['nome_modulo']}"`
3. Aplicar migra√ß√£o: `flask db upgrade`
"""
            
            return True, resultado, {
                'modulo': params['nome_modulo'],
                'arquivos_criados': arquivos_salvos,
                'campos': params['campos']
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na cria√ß√£o do m√≥dulo: {e}")
            return False, f"‚ùå Erro interno: {e}", {}

# Inst√¢ncia global
auto_processor = None

def init_auto_processor() -> AutoCommandProcessor:
    """Inicializa o processador autom√°tico"""
    global auto_processor
    auto_processor = AutoCommandProcessor()
    return auto_processor

def get_auto_processor() -> Optional[AutoCommandProcessor]:
    """Retorna inst√¢ncia do processador autom√°tico"""
    return auto_processor 