{% extends 'base.html' %}
{% block content %}
<div class="container mt-4">
    <h2 class="mb-4">Simulação de Frete</h2>

    <div class="card p-4 shadow-sm">
        <form method="POST">
            {{ form.hidden_tag() }}

            <div class="row mb-3">
                <div class="col-md-3">{{ form.uf_origem.label }}{{ form.uf_origem(class="form-select") }}</div>
                <div class="col-md-5">{{ form.cidade_origem.label }}{{ form.cidade_origem(class="form-select") }}</div>
                <div class="col-md-4 d-flex align-items-end">
                    <div class="form-check">
                        {{ form.origem_nacom_goya(class="form-check-input") }}
                        {{ form.origem_nacom_goya.label(class="form-check-label") }}
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-3">{{ form.uf_destino.label }}{{ form.uf_destino(class="form-select") }}</div>
                <div class="col-md-9">{{ form.cidade_destino.label }}{{ form.cidade_destino(class="form-select") }}</div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">{{ form.valor_carga.label }}{{ form.valor_carga(class="form-control") }}</div>
                <div class="col-md-6">{{ form.peso_kg.label }}{{ form.peso_kg(class="form-control") }}</div>
            </div>

            <h5 class="mt-3">Dimensões da Carga (cm)</h5>
            <div class="row mb-3">
                <div class="col-md-4">{{ form.comprimento_cm.label }}{{ form.comprimento_cm(class="form-control") }}</div>
                <div class="col-md-4">{{ form.largura_cm.label }}{{ form.largura_cm(class="form-control") }}</div>
                <div class="col-md-4">{{ form.altura_cm.label }}{{ form.altura_cm(class="form-control") }}</div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6 d-flex align-items-center">
                    {{ form.sem_cubagem(class="form-check-input me-2") }}
                    {{ form.sem_cubagem.label(class="form-check-label") }}
                </div>
                <div class="col-md-6">{{ form.fator_cubagem.label }}{{ form.fator_cubagem(class="form-control") }}</div>
            </div>

            <div class="text-end">
                {{ form.submit(class="btn btn-primary") }}
            </div>
        </form>
    </div>

    {% if resultado %}
    <div class="card mt-5 p-4 border-success bg-white shadow-sm">
        <h4 class="mb-3 text-success">Resultado da Simulação</h4>

        <div class="row mb-2">
            <div class="col-md-4">
                <div class="alert alert-secondary">
                    <strong>Peso Real:</strong><br>
                    {{ '%.2f'|format(resultado.peso_real) }} kg
                </div>
            </div>
            <div class="col-md-4">
                <div class="alert alert-info">
                    <strong>Cubagem:</strong><br>
                    {{ '%.3f'|format(resultado.cubagem) }} m³
                </div>
            </div>
            <div class="col-md-4">
                <div class="alert alert-warning">
                    <strong>Peso Cubado:</strong><br>
                    {{ '%.2f'|format(resultado.peso_cubado) }} kg
                </div>
            </div>
        </div>

        <div class="alert alert-primary">
            <strong>Peso Considerado para o Cálculo:</strong> {{ '%.2f'|format(resultado.peso_utilizado) }} kg
        </div>

        <div class="alert alert-light border">
            <strong>Valor da Carga:</strong> R$ {{ '%.2f'|format(resultado.valor_carga) }}
        </div>
    </div>
    {% endif %}

    {% if fretes %}
    <div class="card mt-4 p-4 border border-info bg-light shadow-sm">
        <h5 class="mb-3 text-info">Fretes Calculados por Transportadora</h5>
        <div class="table-responsive">
            <table class="table table-bordered table-striped table-hover">
                <thead class="table-dark">
                    <tr class="text-center">
                        <th>Transportadora</th>
                        <th>Tabela</th>
                        <th>Modalidade</th>
                        <th>Tipo</th>
                        <th>Frete Total (R$)</th>
                        <th>R$/kg</th>
                        <th>% s/ Valor</th>
                    </tr>
                </thead>
                <tbody>
                    {% for f in fretes|sort(attribute='valor_total') %}
                    <tr class="text-center">
                        <td>{{ f.transportadora }}</td>
                        <td>{{ f.nome_tabela }}</td>
                        <td>{{ f.modalidade }}</td>
                        <td>
                            {% if f.tipo == 'FRACIONADA' %}
                            <span class="badge bg-primary">{{ f.tipo }}</span>
                            {% else %}
                            <span class="badge bg-success">{{ f.tipo }}</span>
                            {% endif %}
                        </td>
                        <td class="fw-bold">R$ {{ '%.2f'|format(f.valor_total) }}</td>
                        <td>R$ {{ '%.2f'|format(f.valor_total / resultado.peso_utilizado) }}</td>
                        <td>{{ '%.1f'|format(f.valor_total / resultado.valor_carga * 100) }}%</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    {% endif %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Atualiza cidades quando UF origem muda
    document.getElementById('uf_origem').addEventListener('change', function() {
        var uf = this.value;
        var cidadeSelect = document.getElementById('cidade_origem');
        cidadeSelect.innerHTML = '';
        
        // Filtra apenas cidades da UF selecionada
        var cidades = Array.from(cidadeSelect.options)
            .filter(opt => opt.text.includes('(' + uf + ')'));
            
        cidades.forEach(cidade => {
            cidadeSelect.add(cidade.cloneNode(true));
        });
    });

    // Atualiza cidades quando UF destino muda
    document.getElementById('uf_destino').addEventListener('change', function() {
        var uf = this.value;
        var cidadeSelect = document.getElementById('cidade_destino');
        cidadeSelect.innerHTML = '';
        
        // Filtra apenas cidades da UF selecionada
        var cidades = Array.from(cidadeSelect.options)
            .filter(opt => opt.text.includes('(' + uf + ')'));
            
        cidades.forEach(cidade => {
            cidadeSelect.add(cidade.cloneNode(true));
        });
    });

    // Quando marca origem Nacom, seleciona Santana de Parnaíba/SP
    document.getElementById('origem_nacom_goya').addEventListener('change', function() {
        if (this.checked) {
            document.getElementById('uf_origem').value = 'SP';
            var cidadeSelect = document.getElementById('cidade_origem');
            for (var i = 0; i < cidadeSelect.options.length; i++) {
                if (cidadeSelect.options[i].text.includes('SANTANA DE PARNAIBA (SP)')) {
                    cidadeSelect.value = cidadeSelect.options[i].value;
                    break;
                }
            }
        }
    });
});
</script>
{% endblock %}
