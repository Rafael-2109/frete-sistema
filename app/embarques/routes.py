from flask import request, flash, url_for, redirect, render_template, Blueprint, jsonify, session
from sqlalchemy import or_, cast, String
from flask_login import login_required, current_user
from app import db
from app.utils.auth_decorators import require_embarques
from app.embarques.forms import EmbarqueForm, EmbarqueItemForm
from app.transportadoras.models import Transportadora
from app.embarques.models import Embarque, EmbarqueItem
from app.utils.sincronizar_entregas import sincronizar_entrega_por_nf, sincronizar_nova_entrega_por_nf
from app.monitoramento.models import EntregaMonitorada
from app.localidades.models import Cidade
from datetime import datetime
from app.pedidos.models import Pedido
from app.separacao.models import Separacao
from app.cotacao.models import Cotacao
from app.utils.embarque_numero import obter_proximo_numero_embarque


embarques_bp = Blueprint('embarques', __name__,url_prefix='/embarques')

# Importa a fun√ß√£o centralizada

def apagar_fretes_sem_cte_embarque(embarque_id):
    """
    üîß NOVA FUN√á√ÉO: Apaga fretes existentes do embarque que n√£o possuem CTe preenchido
    
    Esta fun√ß√£o resolve o problema de sincroniza√ß√£o entre embarques e fretes:
    - Busca todos os fretes do embarque
    - Remove apenas os fretes que N√ÉO t√™m CTe preenchido
    - Preserva fretes que j√° t√™m CTe (para n√£o perder dados j√° processados)
    - Retorna informa√ß√µes sobre a opera√ß√£o
    """
    try:
        from app.fretes.models import Frete
        
        # Busca fretes do embarque sem CTe preenchido
        fretes_sem_cte = Frete.query.filter(
            Frete.embarque_id == embarque_id,
            Frete.status != 'CANCELADO',
            db.or_(
                Frete.numero_cte.is_(None),
                Frete.numero_cte == '',
                Frete.valor_cte.is_(None)
            )
        ).all()
        
        if not fretes_sem_cte:
            return True, "Nenhum frete sem CTe encontrado"
        
        # Remove os fretes sem CTe
        fretes_removidos = []
        for frete in fretes_sem_cte:
            fretes_removidos.append(f"Frete #{frete.id} (CNPJ: {frete.cnpj_cliente})")
            db.session.delete(frete)
        
        # N√£o faz commit aqui - ser√° feito junto com o salvamento do embarque
        
        return True, f"‚úÖ {len(fretes_removidos)} frete(s) sem CTe removido(s) antes do salvamento"
        
    except Exception as e:
        return False, f"Erro ao apagar fretes sem CTe: {str(e)}"

@embarques_bp.route('/<int:id>', methods=['GET', 'POST'])
@login_required
@require_embarques()  # üîí VENDEDORES: Apenas com dados pr√≥prios
def visualizar_embarque(id):
    embarque = Embarque.query.get_or_404(id)
    
    # üîí VERIFICA√á√ÉO ESPEC√çFICA PARA VENDEDORES
    if current_user.perfil == 'vendedor':
        # Verifica se o vendedor tem permiss√£o para ver este embarque
        tem_permissao = False
        from app.utils.auth_decorators import check_vendedor_permission
        for item in embarque.itens:
            if check_vendedor_permission(numero_nf=item.nota_fiscal):
                tem_permissao = True
                break
        
        if not tem_permissao:
            flash('Acesso negado. Voc√™ s√≥ pode visualizar embarques dos seus clientes.', 'danger')
            return redirect(url_for('embarques.listar_embarques'))

    if request.method == 'POST':
        form = EmbarqueForm(request.form)
        # Preenche transportadora.choices
        transportadoras = [(t.id, t.razao_social) for t in Transportadora.query.all()]
        form.transportadora.choices = transportadoras

        # Para cada item do FieldList, montar uf/cidade
        for item_form in form.itens:
            uf_sel = item_form.uf_destino.data
            if uf_sel:
                # Carregar cidades da UF do DB
                cidades_uf = Cidade.query.filter_by(uf=uf_sel).order_by(Cidade.nome).all()
                city_choices = [(c.nome, c.nome) for c in cidades_uf]
                item_form.cidade_destino.choices = [('', '--Selecione--')] + city_choices
            else:
                item_form.cidade_destino.choices = [('', '--Selecione--')]

        action = request.form.get('action')
        
        if action == 'add_item':
            # C√≥digo para adicionar item
            dados_portaria = obter_dados_portaria_embarque(embarque.id)
            
            # Buscar dados de impress√£o
            from app.pedidos.models import Pedido
            pedidos_impressos = {}
            for item in embarque.itens:
                if item.separacao_lote_id:
                    pedido = Pedido.query.filter_by(separacao_lote_id=item.separacao_lote_id).first()
                    if pedido:
                        pedidos_impressos[item.separacao_lote_id] = {
                            'impresso': pedido.separacao_impressa,
                            'impresso_em': pedido.separacao_impressa_em,
                            'impresso_por': pedido.separacao_impressa_por
                        }
            
            return render_template('embarques/visualizar_embarque.html', 
                                 form=form, 
                                 embarque=embarque, 
                                 dados_portaria=dados_portaria,
                                 pedidos_impressos=pedidos_impressos)

        elif action == 'save':
            # üîß NOVA L√ìGICA: Antes de salvar, remove fretes sem CTe
            try:
                sucesso_limpeza, resultado_limpeza = apagar_fretes_sem_cte_embarque(embarque.id)
                if sucesso_limpeza:
                    flash(f"üîÑ {resultado_limpeza}", "info")
                else:
                    flash(f"‚ö†Ô∏è {resultado_limpeza}", "warning")
            except Exception as e:
                flash(f"‚ö†Ô∏è Erro na limpeza de fretes: {str(e)}", "warning")
            
            # Agora sim, validar
            if form.validate_on_submit():
                # Salvar cabe√ßalho no DB
                if form.data_embarque.data:
                    embarque.data_embarque = datetime.strptime(form.data_embarque.data, '%d/%m/%Y').date()
                else:
                    embarque.data_embarque = None

                # Adicionar campo data_prevista_embarque
                if form.data_prevista_embarque.data:
                    embarque.data_prevista_embarque = datetime.strptime(form.data_prevista_embarque.data, '%d/%m/%Y').date()
                else:
                    embarque.data_prevista_embarque = None

                # ‚úÖ READONLY: Transportadora n√£o √© mais edit√°vel - mant√©m valor existente
                embarque.observacoes = form.observacoes.data
                embarque.paletizado = form.paletizado.data
                embarque.laudo_anexado = form.laudo_anexado.data
                embarque.embalagem_aprovada = form.embalagem_aprovada.data
                embarque.transporte_aprovado = form.transporte_aprovado.data
                embarque.horario_carregamento = form.horario_carregamento.data
                embarque.responsavel_carregamento = form.responsavel_carregamento.data
                embarque.nome_motorista = form.nome_motorista.data
                embarque.cpf_motorista = form.cpf_motorista.data
                form.qtd_pallets.data = int(form.qtd_pallets.data or 0)

                # ‚úÖ CORRE√á√ÉO FINAL: Dados da tabela N√ÉO precisam ser alterados - j√° est√£o corretos da cota√ß√£o!
                # Atualizar APENAS campos b√°sicos edit√°veis pelo usu√°rio:

                # ‚úÖ NOVA ESTRAT√âGIA: Mapear por POSI√á√ÉO ao inv√©s de ID (WTForms gera IDs autom√°ticos)
                # Mapear itens do formul√°rio com itens do banco por POSI√á√ÉO
                for i, item_form in enumerate(form.itens):
                    # ‚úÖ PROTE√á√ÉO: Verificar se existe item correspondente no banco
                    if i < len(embarque.itens):
                        item_existente = embarque.itens[i]
                        
                        # ‚úÖ ATUALIZA apenas campos edit√°veis pelo usu√°rio
                        item_existente.nota_fiscal = item_form.nota_fiscal.data.strip() if item_form.nota_fiscal.data else None
                        item_existente.volumes = int(item_form.volumes.data or 0)
                        item_existente.protocolo_agendamento = item_form.protocolo_agendamento.data.strip() if item_form.protocolo_agendamento.data else None
                        item_existente.data_agenda = item_form.data_agenda.data.strip() if item_form.data_agenda.data else None
                        
                        # ‚úÖ PRESERVA todos os dados importantes: CNPJ, peso, valor, tabelas, separa√ß√£o
                        # Estes dados S√ì v√™m da cota√ß√£o e NUNCA devem ser alterados manualmente
                        
                        # Validar NF do cliente
                        try:
                            sucesso, erro = validar_nf_cliente(item_existente)
                            if not sucesso:
                                flash(f"‚ö†Ô∏è {erro}", "warning")
                        except Exception as e:
                            pass
                
                # ‚úÖ NOVA L√ìGICA: Remove apenas itens que foram realmente removidos do formul√°rio
                # (n√£o implementado por enquanto - manter todos os itens existentes)
                
                # ‚úÖ CORRE√á√ÉO CR√çTICA: ANTES do commit, execute todas as opera√ß√µes em uma √∫nica transa√ß√£o
                messages_sync = []
                messages_validacao = []
                messages_fretes = []
                messages_entregas = []

                # ‚úÖ SINCRONIZA√á√ÉO SEMPRE: Executa toda vez que salvar o embarque
                try:
                    sucesso_sync, resultado_sync = sincronizar_nf_embarque_pedido_completa(embarque.id)
                    if sucesso_sync:
                        messages_sync.append(f"üîÑ {resultado_sync}")
                    else:
                        messages_sync.append(f"‚ö†Ô∏è Erro na sincroniza√ß√£o: {resultado_sync}")
                except Exception as e:
                    print(f"Erro na sincroniza√ß√£o de NFs: {e}")
                    messages_sync.append(f"‚ö†Ô∏è Erro na sincroniza√ß√£o de NFs: {e}")

                # Valida√ß√£o de CNPJ sempre executa
                try:
                    from app.fretes.routes import validar_cnpj_embarque_faturamento
                    sucesso_validacao, resultado_validacao = validar_cnpj_embarque_faturamento(embarque.id)
                    if not sucesso_validacao:
                        messages_validacao.append(f"‚ö†Ô∏è {resultado_validacao}")
                except Exception as e:
                    print(f"Erro na valida√ß√£o de CNPJ: {e}")
                    messages_validacao.append(f"‚ö†Ô∏è Erro na valida√ß√£o de CNPJ: {e}")

                # Lan√ßamento autom√°tico de fretes sempre executa
                try:
                    from app.fretes.routes import processar_lancamento_automatico_fretes
                    sucesso, resultado = processar_lancamento_automatico_fretes(
                        embarque_id=embarque.id,
                        usuario=current_user.nome if current_user.is_authenticated else 'Sistema'
                    )
                    if sucesso and "lan√ßado(s) automaticamente" in resultado:
                        messages_fretes.append(f"‚úÖ {resultado}")
                except Exception as e:
                    print(f"Erro no lan√ßamento autom√°tico de fretes: {e}")
                    messages_fretes.append(f"‚ö†Ô∏è Erro no lan√ßamento de fretes: {e}")

                # Sincroniza√ß√£o de entregas sempre executa
                for item in embarque.itens:
                    if not item.nota_fiscal:
                        continue

                    try:
                        # Recupera a entrega pra verificar se est√° com nf_cd=True
                        entrega = EntregaMonitorada.query.filter_by(numero_nf=item.nota_fiscal).first()

                        if entrega and entrega.nf_cd:
                            # ‚úÖ IMPLEMENTA√á√ÉO DO ITEM 2-d: NF no CD
                            # Atualiza status do pedido quando NF volta para CD
                            # ‚úÖ CORRE√á√ÉO: Passa separacao_lote_id para maior precis√£o
                            sucesso_cd, resultado_cd = atualizar_status_pedido_nf_cd(
                                numero_pedido=item.pedido,
                                separacao_lote_id=item.separacao_lote_id
                            )
                            if sucesso_cd:
                                messages_entregas.append(f"üì¶ {resultado_cd}")
                            
                            # Se nf_cd=True, chamamos o script especial
                            sincronizar_nova_entrega_por_nf(
                                numero_nf=item.nota_fiscal,
                                embarque=embarque,
                                item_embarque=item
                            )
                        else:
                            # Caso contr√°rio, script normal
                            sincronizar_entrega_por_nf(item.nota_fiscal)
                    except Exception as e:
                        print(f"Erro na sincroniza√ß√£o de entrega {item.nota_fiscal}: {e}")
                        messages_entregas.append(f"‚ö†Ô∏è Erro na entrega {item.nota_fiscal}: {e}")

                # ‚úÖ CORRE√á√ÉO: Commit √öNICO ap√≥s TODAS as opera√ß√µes
                db.session.commit()

                # Exibir todas as mensagens acumuladas
                for msg in messages_sync + messages_validacao + messages_fretes + messages_entregas:
                    if "‚ö†Ô∏è" in msg or "‚ùå" in msg:
                        flash(msg, "warning")
                    else:
                        flash(msg, "info" if "üîÑ" in msg or "üì¶" in msg else "success")

                flash("‚úÖ Embarque atualizado com sucesso!", "success")
                return redirect(url_for('embarques.visualizar_embarque', id=embarque.id))
            else:
                flash("Erros na valida√ß√£o do formul√°rio.", "danger")
                # Log form.errors se quiser
            dados_portaria = obter_dados_portaria_embarque(embarque.id)
            return render_template('embarques/visualizar_embarque.html', form=form, embarque=embarque, dados_portaria=dados_portaria)

        # Se chegou aqui e nao match action => exibe a p√°gina
        dados_portaria = obter_dados_portaria_embarque(embarque.id)
        return render_template('embarques/visualizar_embarque.html', form=form, embarque=embarque, dados_portaria=dados_portaria)

    else:
        # GET
        form = EmbarqueForm()

        # Popular cabe√ßalho - ‚úÖ READONLY: string com nome ao inv√©s de ID
        # Tratamento seguro para datas que podem vir como string ou date
        if embarque.data_embarque:
            if hasattr(embarque.data_embarque, 'strftime'):
                form.data_embarque.data = embarque.data_embarque.strftime('%d/%m/%Y')
            else:
                # Se j√° √© string, usa como est√°
                form.data_embarque.data = str(embarque.data_embarque)
        else:
            form.data_embarque.data = ''
            
        if embarque.data_prevista_embarque:
            if hasattr(embarque.data_prevista_embarque, 'strftime'):
                form.data_prevista_embarque.data = embarque.data_prevista_embarque.strftime('%d/%m/%Y')
            else:
                # Se j√° √© string, usa como est√°
                form.data_prevista_embarque.data = str(embarque.data_prevista_embarque)
        else:
            form.data_prevista_embarque.data = ''
        form.transportadora.data = (
            embarque.transportadora.razao_social if embarque.transportadora else ''
        )
        form.observacoes.data = embarque.observacoes
        form.placa_veiculo.data = embarque.placa_veiculo
        form.paletizado.data = embarque.paletizado
        form.laudo_anexado.data = embarque.laudo_anexado
        form.embalagem_aprovada.data = embarque.embalagem_aprovada
        form.transporte_aprovado.data = embarque.transporte_aprovado
        form.horario_carregamento.data = embarque.horario_carregamento
        form.responsavel_carregamento.data = embarque.responsavel_carregamento
        form.nome_motorista.data = embarque.nome_motorista
        form.cpf_motorista.data = embarque.cpf_motorista
        form.qtd_pallets.data = embarque.qtd_pallets
        
        # ‚úÖ SIMPLIFICA√á√ÉO: Campos ocultos removidos - dados preservados automaticamente no banco

        # ‚úÖ CORRE√á√ÉO DEFINITIVA: Limpar form.itens e adicionar APENAS os existentes
        form.itens.entries = []  # ‚ö° Limpa tudo primeiro
        
        if embarque.itens:
            for i, it in enumerate(embarque.itens):
                entry_data = {
                    'id': str(it.id),
                    'cliente': it.cliente,
                    'pedido': it.pedido,
                    'protocolo_agendamento': it.protocolo_agendamento or '',
                    'data_agenda': it.data_agenda or '',
                    'nota_fiscal': it.nota_fiscal or '',
                    'volumes': str(it.volumes) if it.volumes is not None else '',
                    'uf_destino': it.uf_destino,
                    'cidade_destino': it.cidade_destino,
                }
                form.itens.append_entry(entry_data)
        else:
            # Se n√£o h√° itens, adicionar um vazio
            form.itens.append_entry()
        
        # ‚úÖ TENTATIVA: For√ßar IDs ap√≥s append_entry usando process() 
        try:
            # Processa os dados do request para popular os campos corretamente
            for i, it in enumerate(embarque.itens):
                if i < len(form.itens.entries):
                    entry = form.itens.entries[i]
                    if hasattr(entry, 'id') and hasattr(entry.id, 'process'):
                        entry.id.process(formdata=None, data=str(it.id))
        except Exception as e:
            pass

        # ‚úÖ READONLY: UF e cidade s√£o StringField readonly, n√£o precisam mais de choices

        # Buscar dados da portaria para este embarque
        dados_portaria = obter_dados_portaria_embarque(embarque.id)
        
        # Buscar dados de impress√£o dos pedidos
        from app.pedidos.models import Pedido
        pedidos_impressos = {}
        for item in embarque.itens:
            if item.separacao_lote_id:
                pedido = Pedido.query.filter_by(separacao_lote_id=item.separacao_lote_id).first()
                if pedido:
                    pedidos_impressos[item.separacao_lote_id] = {
                        'impresso': pedido.separacao_impressa,
                        'impresso_em': pedido.separacao_impressa_em,
                        'impresso_por': pedido.separacao_impressa_por
                    }
        
        return render_template('embarques/visualizar_embarque.html', 
                             form=form, 
                             embarque=embarque, 
                             dados_portaria=dados_portaria,
                             pedidos_impressos=pedidos_impressos)
  
@embarques_bp.route('/listar_embarques')
@require_embarques()  # üîí VENDEDORES: Apenas com dados pr√≥prios
def listar_embarques():
    from app.embarques.forms import FiltrosEmbarqueExpandidoForm
    
    # Apagar os rascunhos sem uso
    rascunhos = Embarque.query.filter_by(status='draft').all()
    for r in rascunhos:
        if len(r.itens) == 0:
            db.session.delete(r)
    db.session.commit()

    # Criar formul√°rio de filtros expandido
    form_filtros = FiltrosEmbarqueExpandidoForm()
    
    # Popular choices de transportadoras
    transportadoras = Transportadora.query.all()
    form_filtros.transportadora_id.choices = [('', 'Todas as transportadoras')] + [(t.id, t.razao_social) for t in transportadoras]

    # ‚úÖ NOVO: Pr√©-filtro - Mostra apenas embarques ativos sem data de embarque (por padr√£o)
    mostrar_todos = request.args.get('mostrar_todos', '').lower() == 'true'
    
    # Query base
    query = Embarque.query.options(db.joinedload(Embarque.transportadora))
    query = query.outerjoin(EmbarqueItem).outerjoin(Transportadora)
    
    # ‚úÖ APLICAR PR√â-FILTRO (apenas se n√£o foi solicitado "mostrar todos")
    if not mostrar_todos:
        query = query.filter(
            Embarque.status == 'ativo',
            Embarque.data_embarque.is_(None)
        )

    # Aplicar filtros
    filtros_aplicados = not mostrar_todos  # Se n√£o est√° mostrando todos, filtro est√° aplicado
    
    # Filtro por data de in√≠cio
    data_inicio = request.args.get('data_inicio', '').strip()
    if data_inicio:
        try:
            data_inicio_obj = datetime.strptime(data_inicio, '%d/%m/%Y').date()
            query = query.filter(Embarque.data_embarque >= data_inicio_obj)
            form_filtros.data_inicio.data = data_inicio
            filtros_aplicados = True
        except ValueError:
            flash('Data de in√≠cio inv√°lida. Use o formato DD/MM/AAAA', 'warning')

    # Filtro por data fim
    data_fim = request.args.get('data_fim', '').strip()
    if data_fim:
        try:
            data_fim_obj = datetime.strptime(data_fim, '%d/%m/%Y').date()
            query = query.filter(Embarque.data_embarque <= data_fim_obj)
            form_filtros.data_fim.data = data_fim
            filtros_aplicados = True
        except ValueError:
            flash('Data de fim inv√°lida. Use o formato DD/MM/AAAA', 'warning')

    # Filtro por data prevista in√≠cio
    data_prevista_inicio = request.args.get('data_prevista_inicio', '').strip()
    if data_prevista_inicio:
        try:
            data_prevista_inicio_obj = datetime.strptime(data_prevista_inicio, '%d/%m/%Y').date()
            query = query.filter(Embarque.data_prevista_embarque >= data_prevista_inicio_obj)
            form_filtros.data_prevista_inicio.data = data_prevista_inicio
            filtros_aplicados = True
        except ValueError:
            flash('Data prevista de in√≠cio inv√°lida. Use o formato DD/MM/AAAA', 'warning')

    # Filtro por data prevista fim
    data_prevista_fim = request.args.get('data_prevista_fim', '').strip()
    if data_prevista_fim:
        try:
            data_prevista_fim_obj = datetime.strptime(data_prevista_fim, '%d/%m/%Y').date()
            query = query.filter(Embarque.data_prevista_embarque <= data_prevista_fim_obj)
            form_filtros.data_prevista_fim.data = data_prevista_fim
            filtros_aplicados = True
        except ValueError:
            flash('Data prevista de fim inv√°lida. Use o formato DD/MM/AAAA', 'warning')

    # Filtro por nota fiscal
    nota_fiscal = request.args.get('nota_fiscal', '').strip()
    if nota_fiscal:
        query = query.filter(EmbarqueItem.nota_fiscal.ilike(f'%{nota_fiscal}%'))
        form_filtros.nota_fiscal.data = nota_fiscal
        filtros_aplicados = True

    # Filtro por pedido
    pedido = request.args.get('pedido', '').strip()
    if pedido:
        query = query.filter(EmbarqueItem.pedido.ilike(f'%{pedido}%'))
        form_filtros.pedido.data = pedido
        filtros_aplicados = True

    # Filtro por transportadora
    transportadora_id = request.args.get('transportadora_id', '').strip()
    if transportadora_id and transportadora_id != '':
        try:
            transportadora_id = int(transportadora_id)
            query = query.filter(Embarque.transportadora_id == transportadora_id)
            form_filtros.transportadora_id.data = transportadora_id
            filtros_aplicados = True
        except ValueError:
            pass

    # Filtro por status do embarque
    status = request.args.get('status', '').strip()
    if status and status != '':
        query = query.filter(Embarque.status == status)
        form_filtros.status.data = status
        filtros_aplicados = True

    # Filtro por status da portaria
    status_portaria = request.args.get('status_portaria', '').strip()
    if status_portaria and status_portaria != '':
        from app.portaria.models import ControlePortaria
        
        if status_portaria == 'Sem Registro':
            # Embarques que N√ÉO t√™m registro na portaria
            embarques_com_registro = db.session.query(ControlePortaria.embarque_id).filter(
                ControlePortaria.embarque_id.isnot(None)
            ).distinct()
            query = query.filter(~Embarque.id.in_(embarques_com_registro))
        else:
            # Embarques que t√™m registro com status espec√≠fico
            # Busca o √∫ltimo registro de cada embarque e filtra pelo status
            from sqlalchemy import and_, func
            
            # Subquery para pegar o √∫ltimo registro de cada embarque (apenas com embarque_id v√°lido)
            ultimo_registro_subquery = db.session.query(
                ControlePortaria.embarque_id,
                func.max(ControlePortaria.id).label('ultimo_id')
            ).filter(
                ControlePortaria.embarque_id.isnot(None)
            ).group_by(ControlePortaria.embarque_id).subquery()
            
            # Join para pegar os dados do √∫ltimo registro
            query = query.join(
                ultimo_registro_subquery,
                Embarque.id == ultimo_registro_subquery.c.embarque_id
            ).join(
                ControlePortaria,
                ControlePortaria.id == ultimo_registro_subquery.c.ultimo_id
            )
            
            # Filtra pelo status calculado dinamicamente
            if status_portaria == 'SAIU':
                query = query.filter(
                    and_(
                        ControlePortaria.data_saida.isnot(None),
                        ControlePortaria.hora_saida.isnot(None)
                    )
                )
            elif status_portaria == 'DENTRO':
                query = query.filter(
                    and_(
                        ControlePortaria.data_entrada.isnot(None),
                        ControlePortaria.hora_entrada.isnot(None),
                        ControlePortaria.data_saida.is_(None)
                    )
                )
            elif status_portaria == 'AGUARDANDO':
                query = query.filter(
                    and_(
                        ControlePortaria.data_chegada.isnot(None),
                        ControlePortaria.hora_chegada.isnot(None),
                        ControlePortaria.data_entrada.is_(None)
                    )
                )
            elif status_portaria == 'PENDENTE':
                query = query.filter(
                    ControlePortaria.data_chegada.is_(None)
                )
        
        form_filtros.status_portaria.data = status_portaria
        filtros_aplicados = True

    # Filtro por status das NFs
    status_nfs = request.args.get('status_nfs', '').strip()
    if status_nfs and status_nfs != '':
        # Como status_nfs √© uma propriedade calculada, precisamos filtrar ap√≥s a query
        # Vamos manter a refer√™ncia para filtrar depois
        form_filtros.status_nfs.data = status_nfs
        filtros_aplicados = True
    
    # Filtro por status dos fretes
    status_fretes = request.args.get('status_fretes', '').strip()
    if status_fretes and status_fretes != '':
        # Como status_fretes √© uma propriedade calculada, precisamos filtrar ap√≥s a query
        # Vamos manter a refer√™ncia para filtrar depois
        form_filtros.status_fretes.data = status_fretes
        filtros_aplicados = True

    # Busca geral (mant√©m funcionalidade original)
    buscar_texto = request.args.get('buscar_texto', '').strip()
    if buscar_texto:
        busca = f"%{buscar_texto}%"
        query = query.filter(
            or_(
                cast(Embarque.numero, String).ilike(busca),
                EmbarqueItem.cliente.ilike(busca),
                EmbarqueItem.pedido.ilike(busca),
                EmbarqueItem.nota_fiscal.ilike(busca),
                Transportadora.razao_social.ilike(busca),
            )
        )
        form_filtros.buscar_texto.data = buscar_texto
        filtros_aplicados = True

    # Ordena√ß√£o padr√£o (mais recente primeiro)
    query = query.order_by(Embarque.numero.desc())

    # Remover duplicados caso o embarque tenha v√°rios itens que casam com a busca
    query = query.distinct()

    # Executa a query
    embarques = query.all()
    
    # Aplica filtros baseados nas propriedades calculadas (status_nfs e status_fretes)
    if status_nfs and status_nfs != '':
        embarques = [e for e in embarques if e.status_nfs == status_nfs]
    
    if status_fretes and status_fretes != '':
        embarques = [e for e in embarques if e.status_fretes == status_fretes]

    return render_template(
        'embarques/listar_embarques.html', 
        embarques=embarques, 
        form_filtros=form_filtros,
        filtros_aplicados=filtros_aplicados,
        mostrar_todos=mostrar_todos
    )

@embarques_bp.route('/<int:id>/editar', methods=['GET', 'POST'])
@login_required
def editar_embarque(id):
    embarque = Embarque.query.get_or_404(id)

    # Define n√∫mero de itens no formul√°rio (somando +1 ao existente)
    if request.method == 'GET':
        qtd_itens = int(request.args.get('itens', len(embarque.itens) + 1))
        form = EmbarqueForm()

        # ‚úÖ READONLY: Preencher campos como string
        form.data_embarque.data = embarque.data_embarque.strftime('%d/%m/%Y') if embarque.data_embarque else ''
        form.data_prevista_embarque.data = (
            embarque.data_prevista_embarque.strftime('%d/%m/%Y') if embarque.data_prevista_embarque else ''
        )
        form.transportadora.data = embarque.transportadora.razao_social if embarque.transportadora else ''
        form.observacoes.data = embarque.observacoes
        form.placa_veiculo.data = embarque.placa_veiculo
        form.paletizado.data = embarque.paletizado
        form.laudo_anexado.data = embarque.laudo_anexado
        form.embalagem_aprovada.data = embarque.embalagem_aprovada
        form.transporte_aprovado.data = embarque.transporte_aprovado
        form.horario_carregamento.data = embarque.horario_carregamento
        form.responsavel_carregamento.data = embarque.responsavel_carregamento
        form.nome_motorista.data = embarque.nome_motorista
        form.cpf_motorista.data = embarque.cpf_motorista
        form.qtd_pallets.data = embarque.qtd_pallets

        # ‚úÖ CORRE√á√ÉO DEFINITIVA: Limpar form.itens e adicionar itens conforme necess√°rio
        form.itens.entries = []  # ‚ö° Limpa tudo primeiro
        
        # Adicionar itens existentes
        for i, it in enumerate(embarque.itens):
            entry_data = {
                'id': str(it.id),
                'cliente': it.cliente,
                'pedido': it.pedido,
                'protocolo_agendamento': it.protocolo_agendamento or '',
                'data_agenda': it.data_agenda or '',
                'nota_fiscal': it.nota_fiscal or '',
                'volumes': str(it.volumes) if it.volumes is not None else '',
                'uf_destino': it.uf_destino,
                'cidade_destino': it.cidade_destino,
            }
            form.itens.append_entry(entry_data)
            
        # Adicionar itens vazios extras conforme solicitado via qtd_itens
        for i in range(len(embarque.itens), qtd_itens):
            form.itens.append_entry()
        
        # ‚úÖ TENTATIVA: For√ßar IDs ap√≥s append_entry usando process() 
        try:
            for i, it in enumerate(embarque.itens):
                if i < len(form.itens.entries):
                    entry = form.itens.entries[i]
                    if hasattr(entry, 'id') and hasattr(entry.id, 'process'):
                        entry.id.process(formdata=None, data=str(it.id))
        except Exception as e:
            pass



        return render_template('embarques/visualizar_embarque.html', embarque=embarque, form=form)

    flash("Erro inesperado", "danger")
    return redirect(url_for("embarques.visualizar_embarque", id=embarque.id))


@embarques_bp.route('/<int:id>/cancelar', methods=['GET', 'POST'])
@login_required
def cancelar_embarque(id):
    from app.embarques.forms import CancelamentoEmbarqueForm
    
    embarque = Embarque.query.get_or_404(id)
    
    # Verifica se j√° est√° cancelado
    if embarque.status == 'cancelado':
        flash("Este embarque j√° est√° cancelado.", "warning")
        return redirect(url_for('embarques.visualizar_embarque', id=id))
    
    form = CancelamentoEmbarqueForm()
    
    if form.validate_on_submit():
        # Marca como cancelado em vez de excluir
        embarque.status = 'cancelado'
        embarque.motivo_cancelamento = form.motivo_cancelamento.data
        embarque.cancelado_em = datetime.now()
        embarque.cancelado_por = current_user.nome if current_user.is_authenticated else 'Sistema'
        
        # ‚úÖ ATUALIZADO: Remover NFs dos itens e sincronizar com pedidos
        try:
            # 1. Remove as NFs de todos os itens do embarque que tinham NF
            nfs_removidas = 0
            for item in embarque.itens:
                if item.nota_fiscal and item.nota_fiscal.strip():
                    print(f"[CANCEL] Removendo NF {item.nota_fiscal} do item {item.pedido}")
                    item.nota_fiscal = None  # Remove a NF
                    nfs_removidas += 1
            
            # 2. Cancela todos os itens do embarque
            for item in embarque.itens:
                item.status = 'cancelado'
            
            # 3. ‚úÖ USAR SINCRONIZA√á√ÉO COMPLETA: Sincroniza as mudan√ßas com os pedidos
            print(f"[CANCEL] üîÑ Iniciando sincroniza√ß√£o para embarque #{embarque.numero}")
            sucesso_sync, resultado_sync = sincronizar_nf_embarque_pedido_completa(embarque.id)
            print(f"[CANCEL] üìä Resultado da sincroniza√ß√£o: {sucesso_sync} - {resultado_sync}")
            
            if nfs_removidas > 0:
                flash(f"‚úÖ {nfs_removidas} NF(s) removida(s) dos itens do embarque", "info")
            
            if sucesso_sync:
                flash(f"‚úÖ Sincroniza√ß√£o com pedidos: {resultado_sync}", "info")
            else:
                flash(f"‚ö†Ô∏è Erro na sincroniza√ß√£o com pedidos: {resultado_sync}", "warning")
                
        except Exception as e:
            flash(f"‚ö†Ô∏è Erro ao remover NFs e sincronizar: {str(e)}", "warning")
        
        # ‚úÖ NOVO: Cancelar fretes vinculados ao embarque
        try:
            from app.fretes.routes import cancelar_frete_por_embarque
            
            sucesso, mensagem = cancelar_frete_por_embarque(
                embarque_id=embarque.id,
                usuario=current_user.nome if current_user.is_authenticated else 'Sistema'
            )
            
            if sucesso:
                flash(f"‚úÖ Fretes cancelados: {mensagem}", "info")
            else:
                flash(f"‚ö†Ô∏è Erro ao cancelar fretes: {mensagem}", "warning")
                
        except Exception as e:
            flash(f"‚ö†Ô∏è Erro ao cancelar fretes: {str(e)}", "warning")
        
        db.session.commit()
        
        flash(f"Embarque #{embarque.numero} cancelado com sucesso!", "success")
        return redirect(url_for('embarques.listar_embarques'))
    
    return render_template('embarques/cancelar_embarque.html', 
                         embarque=embarque, 
                         form=form)

@embarques_bp.route('/<int:id>/motivo_cancelamento')
@login_required
def motivo_cancelamento(id):
    embarque = Embarque.query.get_or_404(id)
    
    if embarque.status != 'cancelado':
        flash("Este embarque n√£o est√° cancelado.", "warning")
        return redirect(url_for('embarques.visualizar_embarque', id=id))
    
    return render_template('embarques/motivo_cancelamento.html', embarque=embarque)




@embarques_bp.route('/excluir_item/<int:item_id>', methods=['POST'])
@login_required
def excluir_item_embarque(item_id):
    item = EmbarqueItem.query.get_or_404(item_id)
    db.session.delete(item)
    db.session.commit()
    return "", 204


@embarques_bp.route('/<int:embarque_id>/novo_item', methods=['GET', 'POST'])
@login_required
def novo_item(embarque_id):
    embarque = Embarque.query.get_or_404(embarque_id)
    form = EmbarqueItemForm()  # <-- seu form para UM item

    if request.method == 'POST':
        if form.validate_on_submit():
            novo_item = EmbarqueItem(
                embarque_id=embarque.id,
                cliente=form.cliente.data,
                pedido=form.pedido.data,
                nota_fiscal=form.nota_fiscal.data,
                volumes=int(form.volumes.data) if form.volumes.data else 0,
                uf_destino=form.uf_destino.data,
                cidade_destino=form.cidade_destino.data,
                protocolo_agendamento=form.protocolo_agendamento.data,
                data_agenda=form.data_agenda.data
            )
            db.session.add(novo_item)
            db.session.commit()
            flash("Item adicionado com sucesso!", "success")
            return redirect(url_for('embarques.visualizar_embarque', id=embarque.id))

    return render_template("embarques/novo_item.html", form=form, embarque=embarque)

@embarques_bp.route('/novo', methods=['GET'])
@login_required
def novo_rascunho():
    # Cria um embarque rascunho
    novo = Embarque(status='draft')
    db.session.add(novo)
    db.session.flush()

    # Gera n√∫mero sequencial para o embarque
    novo.numero = obter_proximo_numero_embarque()

    db.session.commit()

    # Redireciona para a p√°gina "interativa" com HTMX
    return redirect(url_for('embarques.novo_interativo', embarque_id=novo.id))


@embarques_bp.route('/<int:id>/dados_tabela')
@login_required
def dados_tabela_embarque(id):
    """
    Exibe os dados da tabela de frete do embarque
    """
    embarque = Embarque.query.get_or_404(id)
    
    # Carrega apenas os itens ativos do embarque
    itens = EmbarqueItem.query.filter_by(embarque_id=embarque.id, status='ativo').all()
    
    return render_template('embarques/dados_tabela.html', embarque=embarque, itens=itens)

def obter_dados_portaria_embarque(embarque_id):
    """
    Busca informa√ß√µes da portaria vinculadas ao embarque
    """
    from app.portaria.models import ControlePortaria
    
    # Busca registros da portaria vinculados a este embarque
    registros = ControlePortaria.query.filter_by(embarque_id=embarque_id).all()
    
    if not registros:
        return None
    
    # Retorna informa√ß√µes do primeiro/√∫ltimo registro (pode ter v√°rios)
    registro = registros[-1]  # Pega o mais recente
    
    return {
        'motorista_nome': registro.motorista_obj.nome_completo if registro.motorista_obj else 'N/A',
        'placa': registro.placa,
        'tipo_veiculo': registro.tipo_veiculo.nome if registro.tipo_veiculo else 'N/A',
        'data_chegada': registro.data_chegada,
        'hora_chegada': registro.hora_chegada,
        'data_entrada': registro.data_entrada,
        'hora_entrada': registro.hora_entrada,
        'data_saida': registro.data_saida,
        'hora_saida': registro.hora_saida,
        'status': registro.status,
        'registro_id': registro.id
    }

@embarques_bp.route('/<int:embarque_id>/separacao/<separacao_lote_id>')
@login_required
def acessar_separacao(embarque_id, separacao_lote_id):
    """
    Exibe os dados detalhados da separa√ß√£o vinculada ao embarque
    """    
    from app.separacao.models import Separacao
    embarque = Embarque.query.get_or_404(embarque_id)
    
    # Busca todos os itens da separa√ß√£o com este lote_id
    itens_separacao = Separacao.query.filter_by(separacao_lote_id=separacao_lote_id).all()
    
    if not itens_separacao:
        flash('Dados de separa√ß√£o n√£o encontrados para este embarque.', 'warning')
        return redirect(url_for('embarques.visualizar_embarque', id=embarque_id))
    
    # Agrupa informa√ß√µes da separa√ß√£o
    resumo_separacao = {
        'lote_id': separacao_lote_id,
        'num_pedido': itens_separacao[0].num_pedido,
        'data_pedido': itens_separacao[0].data_pedido,
        'cliente': itens_separacao[0].raz_social_red,
        'cnpj_cpf': itens_separacao[0].cnpj_cpf,
        'cidade_destino': itens_separacao[0].nome_cidade,
        'uf_destino': itens_separacao[0].cod_uf,
        'total_produtos': len(itens_separacao),
        'peso_total': sum(item.peso or 0 for item in itens_separacao),
        'valor_total': sum(item.valor_saldo or 0 for item in itens_separacao),
        'pallet_total': sum(item.pallet or 0 for item in itens_separacao),
        'qtd_total': sum(item.qtd_saldo or 0 for item in itens_separacao),
    }
    
    return render_template(
        'embarques/acessar_separacao.html', 
        embarque=embarque,
        itens_separacao=itens_separacao,
        resumo_separacao=resumo_separacao
    )

@embarques_bp.route('/<int:embarque_id>/separacao/<separacao_lote_id>/imprimir')
@login_required 
def imprimir_separacao(embarque_id, separacao_lote_id):
    """
    Gera relat√≥rio de impress√£o da separa√ß√£o
    """
    from app.separacao.models import Separacao
    from app.pedidos.models import Pedido
    from flask import make_response
    
    embarque = Embarque.query.get_or_404(embarque_id)
    
    # Marcar separa√ß√£o como impressa diretamente em Separacao
    pedido = Pedido.query.filter_by(separacao_lote_id=separacao_lote_id).first()
    if pedido and not pedido.separacao_impressa:
        Separacao.query.filter_by(
            separacao_lote_id=separacao_lote_id
        ).update({
            'separacao_impressa': True,
            'separacao_impressa_em': datetime.now(),
            'separacao_impressa_por': current_user.nome if hasattr(current_user, 'nome') else current_user.email
        })
        db.session.commit()
    
    # Busca todos os itens da separa√ß√£o com este lote_id
    itens_separacao = Separacao.query.filter_by(separacao_lote_id=separacao_lote_id).all()
    
    if not itens_separacao:
        flash('Dados de separa√ß√£o n√£o encontrados para este embarque.', 'warning')
        return redirect(url_for('embarques.visualizar_embarque', id=embarque_id))
    
    # Agrupa informa√ß√µes da separa√ß√£o para impress√£o
    resumo_separacao = {
        'lote_id': separacao_lote_id,
        'num_pedido': itens_separacao[0].num_pedido,
        'data_pedido': itens_separacao[0].data_pedido,
        'cliente': itens_separacao[0].raz_social_red,
        'cnpj_cpf': itens_separacao[0].cnpj_cpf,
        'cidade_destino': itens_separacao[0].nome_cidade,
        'uf_destino': itens_separacao[0].cod_uf,
        'total_produtos': len(itens_separacao),
        'peso_total': sum(item.peso or 0 for item in itens_separacao),
        'valor_total': sum(item.valor_saldo or 0 for item in itens_separacao),
        'pallet_total': sum(item.pallet or 0 for item in itens_separacao),
        'qtd_total': sum(item.qtd_saldo or 0 for item in itens_separacao),
    }
    
    # Renderiza template espec√≠fico para impress√£o
    html = render_template(
        'embarques/imprimir_separacao.html',
        embarque=embarque,
        itens_separacao=itens_separacao,
        resumo_separacao=resumo_separacao,
        data_impressao=datetime.now(),
        current_user=current_user
    )
    
    response = make_response(html)
    response.headers['Content-Type'] = 'text/html; charset=utf-8'
    return response

@embarques_bp.route('/<int:embarque_id>/imprimir_embarque')
@login_required 
def imprimir_embarque(embarque_id):
    """
    Gera relat√≥rio de impress√£o apenas do embarque individual (sem separa√ß√µes)
    """
    from flask import make_response
    
    embarque = Embarque.query.get_or_404(embarque_id)
    
    # Renderiza template espec√≠fico para impress√£o do embarque
    html = render_template(
        'embarques/imprimir_embarque.html',
        embarque=embarque,
        data_impressao=datetime.now(),
        current_user=current_user
    )
    
    response = make_response(html)
    response.headers['Content-Type'] = 'text/html; charset=utf-8'
    return response

@embarques_bp.route('/<int:embarque_id>/imprimir_completo')
@login_required 
def imprimir_embarque_completo(embarque_id):
    """
    Gera relat√≥rio completo: embarque + todas as separa√ß√µes individuais
    """
    from app.separacao.models import Separacao
    from app.pedidos.models import Pedido
    from flask import make_response
    
    embarque = Embarque.query.get_or_404(embarque_id)
    
    # Verificar se a data prevista de embarque est√° preenchida
    if not embarque.data_prevista_embarque:
        flash('‚ö†Ô∏è A Data Prevista de Embarque deve ser preenchida antes de imprimir o relat√≥rio completo.', 'warning')
        return redirect(url_for('embarques.visualizar_embarque', id=embarque_id))
    
    # Marcar todos os pedidos dos itens ativos como impressos
    for item in embarque.itens:
        if item.status == 'ativo' and item.separacao_lote_id:
            pedido = Pedido.query.filter_by(separacao_lote_id=item.separacao_lote_id).first()
            if pedido and not pedido.separacao_impressa:
                Separacao.query.filter_by(
                    separacao_lote_id=item.separacao_lote_id
                ).update({
                    'separacao_impressa': True,
                    'separacao_impressa_em': datetime.now(),
                    'separacao_impressa_por': current_user.nome if hasattr(current_user, 'nome') else current_user.email
                })
    db.session.commit()
    
    # Busca todos os lotes √∫nicos de separa√ß√£o vinculados a este embarque
    lotes_separacao = db.session.query(EmbarqueItem.separacao_lote_id).filter(
        EmbarqueItem.embarque_id == embarque_id,
        EmbarqueItem.separacao_lote_id.isnot(None)
    ).distinct().all()
    
    # Prepara dados de cada separa√ß√£o
    separacoes_data = []
    for (lote_id,) in lotes_separacao:
        # Busca itens da separa√ß√£o
        itens_separacao = Separacao.query.filter_by(separacao_lote_id=lote_id).all()
        
        if itens_separacao:
            # Agrupa informa√ß√µes da separa√ß√£o
            resumo_separacao = {
                'lote_id': lote_id,
                'num_pedido': itens_separacao[0].num_pedido,
                'data_pedido': itens_separacao[0].data_pedido,
                'cliente': itens_separacao[0].raz_social_red,
                'cnpj_cpf': itens_separacao[0].cnpj_cpf,
                'cidade_destino': itens_separacao[0].nome_cidade,
                'uf_destino': itens_separacao[0].cod_uf,
                'total_produtos': len(itens_separacao),
                'data_agendamento': itens_separacao[0].agendamento,
                'peso_total': sum(item.peso or 0 for item in itens_separacao),
                'valor_total': sum(item.valor_saldo or 0 for item in itens_separacao),
                'pallet_total': sum(item.pallet or 0 for item in itens_separacao),
                'qtd_total': sum(item.qtd_saldo or 0 for item in itens_separacao),
            }
            
            separacoes_data.append({
                'resumo': resumo_separacao,
                'itens': itens_separacao
            })
    
    # Renderiza template espec√≠fico para impress√£o completa
    html = render_template(
        'embarques/imprimir_completo.html',
        embarque=embarque,
        separacoes_data=separacoes_data,
        data_impressao=datetime.now(),
        current_user=current_user
    )
    
    response = make_response(html)
    response.headers['Content-Type'] = 'text/html; charset=utf-8'
    return response

@embarques_bp.route('/<int:embarque_id>/registrar_impressao', methods=['POST'])
@login_required
def registrar_impressao(embarque_id):
    """
    Registra que o embarque foi impresso
    """

    embarque = Embarque.query.get_or_404(embarque_id)
    
    # Verificar se a data prevista de embarque est√° preenchida
    if not embarque.data_prevista_embarque:
        return jsonify({'success': False, 'message': 'A Data Prevista de Embarque deve ser preenchida antes de imprimir.'})
    
    # Registrar a impress√£o (voc√™ pode criar uma tabela espec√≠fica para isso ou usar um campo no embarque)
    # Por enquanto, vamos apenas retornar os dados para exibir
    usuario_nome = current_user.nome if current_user.is_authenticated and hasattr(current_user, 'nome') and current_user.nome else (current_user.email if current_user.is_authenticated else 'Sistema')
    data_impressao = datetime.now()
    
    return jsonify({
        'success': True, 
        'usuario': usuario_nome,
        'data_impressao': data_impressao.strftime('%d/%m/%Y √†s %H:%M:%S')
    })

@embarques_bp.route('/<int:embarque_id>/corrigir_cnpj', methods=['POST'])
@login_required
def corrigir_cnpj_embarque(embarque_id):
    """
    Permite ao usu√°rio corrigir manualmente os CNPJs divergentes
    """
    try:
        embarque = Embarque.query.get_or_404(embarque_id)
        
        # Busca itens com erro de CNPJ
        itens_com_erro = [item for item in embarque.itens if item.erro_validacao and 'CNPJ_DIFERENTE' in item.erro_validacao]
        
        if not itens_com_erro:
            flash('N√£o h√° erros de CNPJ para corrigir neste embarque.', 'info')
            return redirect(url_for('embarques.visualizar_embarque', id=embarque_id))
        
        # Para cada item com erro, atualiza com o CNPJ do faturamento
        from app.faturamento.models import RelatorioFaturamentoImportado
        itens_corrigidos = 0
        
        for item in itens_com_erro:
            if item.nota_fiscal:
                nf_faturamento = RelatorioFaturamentoImportado.query.filter_by(
                    numero_nf=item.nota_fiscal
                ).first()
                
                if nf_faturamento:
                    item.cnpj_cliente = nf_faturamento.cnpj_cliente
                    item.erro_validacao = None
                    itens_corrigidos += 1
        
        db.session.commit()
        
        if itens_corrigidos > 0:
            flash(f'‚úÖ {itens_corrigidos} item(ns) corrigido(s) com sucesso! CNPJs atualizados conforme faturamento.', 'success')
            
            # Tenta lan√ßar fretes automaticamente ap√≥s corre√ß√£o
            try:
                from app.fretes.routes import processar_lancamento_automatico_fretes
                sucesso, resultado = processar_lancamento_automatico_fretes(
                    embarque_id=embarque.id,
                    usuario=current_user.nome if current_user.is_authenticated else 'Sistema'
                )
                if sucesso and "lan√ßado(s) automaticamente" in resultado:
                    flash(f"‚úÖ {resultado}", "success")
            except Exception as e:
                print(f"Erro no lan√ßamento autom√°tico ap√≥s corre√ß√£o: {e}")
        else:
            flash('Nenhum item foi corrigido.', 'warning')
            
    except Exception as e:
        flash(f'Erro ao corrigir CNPJs: {str(e)}', 'error')
    
    return redirect(url_for('embarques.visualizar_embarque', id=embarque_id))

def validar_nf_cliente(item_embarque):
    """
    Valida se a NF do item pertence ao cliente correto.
    
    REGRA RIGOROSA: N√ÉO atualiza dados do embarque, apenas valida!
    
    ‚úÖ PERMITE:
    - NF n√£o preenchida (opcional)
    - NF n√£o encontrada no faturamento (pode ser preenchida antes da importa√ß√£o)
    - NF pertence ao cliente correto
    
    ‚ùå BLOQUEIA:
    - NF pertence a outro cliente (CNPJ divergente)
    
    Retorna (sucesso, mensagem_erro)
    """
    from app.faturamento.models import RelatorioFaturamentoImportado
    from app.utils.cnpj_utils import normalizar_cnpj
    
    if not item_embarque.nota_fiscal:
        return True, None
        
    # Busca a NF no faturamento
    nf_faturamento = RelatorioFaturamentoImportado.query.filter_by(
        numero_nf=item_embarque.nota_fiscal
    ).first()
    
    if not nf_faturamento:
        # NF n√£o encontrada - PERMITE (pode ser preenchida antes da importa√ß√£o)
        item_embarque.erro_validacao = "NF_PENDENTE_FATURAMENTO"
        return True, f"NF {item_embarque.nota_fiscal} ainda n√£o importada no faturamento (ser√° validada ap√≥s importa√ß√£o)"
    
    # ‚úÖ CORRE√á√ÉO PRINCIPAL: Se o item TEM cliente definido, verifica se a NF pertence a esse cliente
    if item_embarque.cnpj_cliente:
        # üîß NORMALIZAR CNPJs para compara√ß√£o (remove formata√ß√£o)
        cnpj_embarque_normalizado = normalizar_cnpj(item_embarque.cnpj_cliente)
        cnpj_faturamento_normalizado = normalizar_cnpj(nf_faturamento.cnpj_cliente)
        
        if cnpj_embarque_normalizado != cnpj_faturamento_normalizado:
            # üîß FALLBACK INTELIGENTE: Verifica se o CNPJ da NF come√ßa com 0
            # Se sim, tenta adicionar 0 no in√≠cio do CNPJ do embarque
            if cnpj_faturamento_normalizado and cnpj_faturamento_normalizado[0] == '0':
                # O CNPJ da NF come√ßa com 0, vamos tentar adicionar 0 no CNPJ do embarque
                cnpj_embarque_com_zero = '0' + cnpj_embarque_normalizado
                
                # Verifica se agora os CNPJs batem
                if cnpj_embarque_com_zero == cnpj_faturamento_normalizado:
                    # ‚úÖ SUCESSO! O problema era o zero faltando
                    print(f"[INFO] ‚úÖ CNPJ corrigido: {cnpj_embarque_normalizado} -> {cnpj_embarque_com_zero}")
                    
                    # Atualiza o CNPJ do item_embarque com o zero na frente
                    item_embarque.cnpj_cliente = cnpj_embarque_com_zero
                    
                    # Atualiza peso e valor da NF
                    item_embarque.peso = float(nf_faturamento.peso_bruto or 0)
                    item_embarque.valor = float(nf_faturamento.valor_total or 0)
                    item_embarque.erro_validacao = None
                    
                    # Log da corre√ß√£o
                    print(f"[INFO] ‚úÖ NF {item_embarque.nota_fiscal} validada ap√≥s corre√ß√£o do CNPJ")
                    
                    return True, None
            
            # Se n√£o conseguiu corrigir com o fallback, mant√©m o erro original
            # ‚úÖ CORRE√á√ÉO: NF n√£o pertence ao cliente - APAGA APENAS a NF, mant√©m todos os outros dados
            nf_original = item_embarque.nota_fiscal
            item_embarque.erro_validacao = f"NF_DIVERGENTE: NF {nf_original} pertence ao CNPJ {nf_faturamento.cnpj_cliente}, n√£o a {item_embarque.cnpj_cliente}"
            item_embarque.nota_fiscal = None  # ‚úÖ APAGA APENAS a NF divergente
            
            # ‚úÖ MANT√âM todos os outros dados: CNPJ, peso, valor, tabelas, separa√ß√£o, etc.
            # N√ÉO toca em nada al√©m da NF e do erro_validacao
            
            return False, f"‚ùå BLOQUEADO: NF {nf_original} n√£o pertence ao cliente {item_embarque.cnpj_cliente} (pertence a {nf_faturamento.cnpj_cliente})"
        else:
            # ‚úÖ NF pertence ao cliente correto - Atualiza peso e valor da NF
            item_embarque.peso = float(nf_faturamento.peso_bruto or 0)
            item_embarque.valor = float(nf_faturamento.valor_total or 0)
            item_embarque.erro_validacao = None
            return True, None
    
    # ‚úÖ CORRE√á√ÉO FINAL: Se n√£o h√° CNPJ, √© erro de dados - n√£o deveria acontecer
    # Todo pedido tem CNPJ obrigat√≥rio, ent√£o se chegou aqui sem CNPJ √© bug do sistema
    if not item_embarque.cnpj_cliente:
        print(f"[DEBUG] ‚ö†Ô∏è AVISO: Item sem CNPJ detectado - isso n√£o deveria acontecer!")
        print(f"[DEBUG]   Item: {item_embarque.pedido} - Cliente: {item_embarque.cliente}")
        # N√ÉO bloqueia nem marca erro - apenas permite continuar
        return True, None
    
    # Limpa erro se havia (caso padr√£o de sucesso)
    item_embarque.erro_validacao = None
    return True, None

def sincronizar_nf_embarque_pedido_completa(embarque_id):
    """
    ‚úÖ FUN√á√ÉO OTIMIZADA: Sincroniza√ß√£o bidirecional entre embarque e pedidos
    
    1. ADICIONA NF no pedido quando preenchida no embarque
    2. REMOVE NF do pedido quando apagada no embarque  
    3. ATUALIZA status do pedido conforme situa√ß√£o
    4. TRATAMENTO ESPECIAL para embarques FOB
    
    Vers√£o otimizada com menos logs e melhor performance.
    """
    
    try:
        embarque = Embarque.query.get(embarque_id)
        if not embarque:
            return False, "Embarque n√£o encontrado"
        
        # Detectar se √© embarque FOB
        is_embarque_fob = (
            embarque.tipo_carga == 'FOB' or 
            (embarque.transportadora and embarque.transportadora.razao_social == "FOB - COLETA")
        )
        
        # Buscar transportadora e cota√ß√£o FOB se necess√°rio
        transportadora_fob = None
        cotacao_fob = None
        
        if is_embarque_fob:
            transportadora_fob = Transportadora.query.filter_by(razao_social="FOB - COLETA").first()
            
            if transportadora_fob:
                # Busca ou cria cota√ß√£o FOB global
                cotacao_fob = Cotacao.query.filter_by(
                    transportadora_id=transportadora_fob.id,
                    tipo_carga='FOB'
                ).first()
                
                if not cotacao_fob:
                    cotacao_fob = Cotacao(
                        usuario_id=1,
                        transportadora_id=transportadora_fob.id,
                        status='Fechado',
                        data_criacao=datetime.now(),
                        data_fechamento=datetime.now(),
                        tipo_carga='FOB',
                        valor_total=0,
                        peso_total=0,
                        pallet_total=0,
                        modalidade='FOB',
                        nome_tabela='FOB - COLETA',
                        frete_minimo_valor=0,
                        valor_kg=0,
                        percentual_valor=0,
                        frete_minimo_peso=0,
                        icms=0,
                        percentual_gris=0,
                        pedagio_por_100kg=0,
                        valor_tas=0,
                        percentual_adv=0,
                        percentual_rca=0,
                        valor_despacho=0,
                        valor_cte=0,
                        icms_incluso=False,
                        icms_destino=0
                    )
                    db.session.add(cotacao_fob)
                    db.session.flush()
                    print(f"[SYNC] Cota√ß√£o FOB criada com ID {cotacao_fob.id}")
        
        # Contadores de opera√ß√µes
        itens_sincronizados = 0
        itens_removidos = 0
        itens_cancelados = 0
        erros = []
        
        # Processar cada item do embarque
        for item in embarque.itens:
            # Buscar pedido (otimizado) - usando VIEW para leitura
            pedido = None
            
            if item.separacao_lote_id:
                pedido = Pedido.query.filter_by(separacao_lote_id=item.separacao_lote_id).first()
                # Atualiza flag nf_cd diretamente em Separacao
                if pedido and pedido.nf_cd == True:
                    Separacao.query.filter_by(
                        separacao_lote_id=item.separacao_lote_id
                    ).update({'nf_cd': False})                   
            
            if not pedido and item.pedido:
                pedido = Pedido.query.filter_by(num_pedido=item.pedido).first()
            
            if not pedido:
                erros.append(f"Pedido {item.pedido} n√£o encontrado")
                continue
            
            # PROCESSAMENTO POR TIPO DE OPERA√á√ÉO
            
            if item.status == 'cancelado':
                # ‚úÖ ITEM CANCELADO: Aplicar l√≥gica consolidada
                print(f"[SYNC] üîÑ Item cancelado - Pedido {pedido.num_pedido} (Lote: {item.separacao_lote_id})")
                
                # ‚úÖ VERIFICAR OUTROS EMBARQUES ATIVOS
                outros_embarques_ativos = EmbarqueItem.query.join(Embarque).filter(
                    EmbarqueItem.separacao_lote_id == item.separacao_lote_id,
                    EmbarqueItem.status == 'ativo',
                    Embarque.status == 'ativo',
                ).first()
                
                # ‚úÖ VERIFICAR ENTREGAS MONITORADAS VINCULADAS
                entregas_vinculadas = EntregaMonitorada.query.filter_by(
                    separacao_lote_id=item.separacao_lote_id
                ).all()
                
                # üîß CORRE√á√ÉO: Se n√£o encontrou por lote, buscar por NF (95% dos casos!)
                if not entregas_vinculadas and item.nota_fiscal:
                    entregas_vinculadas = EntregaMonitorada.query.filter_by(
                        numero_nf=item.nota_fiscal
                    ).all()
                    if entregas_vinculadas:
                        print(f"[SYNC] üîç Encontrada entrega pela NF {item.nota_fiscal} (fallback)")
                
                tem_entrega_no_cd = any(e.nf_cd for e in entregas_vinculadas)
                
                # ‚úÖ LOGS DETALHADOS PARA AUDITORIA
                print(f"[SYNC] üìä An√°lise cancelamento:")
                print(f"[SYNC]    Separa√ß√£o: {item.separacao_lote_id}")
                print(f"[SYNC]    Outros embarques ativos: {bool(outros_embarques_ativos)}")
                print(f"[SYNC]    Entregas vinculadas: {len(entregas_vinculadas)}")
                print(f"[SYNC]    Alguma entrega no CD: {tem_entrega_no_cd}")
                
                # ‚úÖ L√ìGICA CONSOLIDADA
                if not outros_embarques_ativos:
                    # N√ÉO H√Å OUTROS EMBARQUES ATIVOS
                    
                    if entregas_vinculadas:
                        # ‚úÖ H√Å ENTREGAS VINCULADAS ‚Üí NF voltou para CD
                        Separacao.query.filter_by(
                            separacao_lote_id=item.separacao_lote_id
                        ).update({'nf_cd': True})
                        # MANT√âM numero_nf (n√£o apaga)
                        print(f"[SYNC] üì¶ NF {pedido.nf} voltou para o CD (nf_cd=True)")
                        
                    else:
                        # ‚úÖ N√ÉO H√Å ENTREGAS VINCULADAS ‚Üí Reset completo
                        Separacao.query.filter_by(
                            separacao_lote_id=item.separacao_lote_id
                        ).update({
                            'numero_nf': None,
                            'data_embarque': None,
                            'cotacao_id': None,
                            'nf_cd': False
                        })
                        # transportadora ignorado conforme orienta√ß√£o
                        print(f"[SYNC] üîÑ Pedido {pedido.num_pedido} resetado para 'Aberto'")
                        
                else:
                    # H√Å OUTROS EMBARQUES ATIVOS
                    
                    if entregas_vinculadas:
                        # ‚úÖ SINCRONIZAR ESTADO COM ENTREGAS MONITORADAS
                        Separacao.query.filter_by(
                            separacao_lote_id=item.separacao_lote_id
                        ).update({'nf_cd': tem_entrega_no_cd})
                        print(f"[SYNC] üîó Estado sincronizado: nf_cd={tem_entrega_no_cd}")
                        
                    else:
                        # ‚úÖ N√ÉO MEXE NO PEDIDO
                        print(f"[SYNC] ü§∑ Outros embarques ativos - mantendo status do pedido")
                
                itens_cancelados += 1
                
            elif item.nota_fiscal and item.nota_fiscal.strip():
                # ‚úÖ ITEM COM NF: Sincronizar NF em Separacao
                Separacao.query.filter_by(
                    separacao_lote_id=item.separacao_lote_id
                ).update({'numero_nf': item.nota_fiscal})
                
                # Configura√ß√£o especial FOB
                if is_embarque_fob and transportadora_fob and cotacao_fob:
                    # Transportadora ignorado conforme orienta√ß√£o
                    if not pedido.cotacao_id:
                        Separacao.query.filter_by(
                            separacao_lote_id=item.separacao_lote_id
                        ).update({'cotacao_id': cotacao_fob.id})
                
                itens_sincronizados += 1
                
            else:
                # ‚úÖ ITEM SEM NF: Remover NF de Separacao se existir
                if pedido.nf:
                    Separacao.query.filter_by(
                        separacao_lote_id=item.separacao_lote_id
                    ).update({'numero_nf': None})
                    itens_removidos += 1
        
        # Salvar todas as altera√ß√µes
        db.session.commit()
        
        # ‚úÖ VERIFICA√á√ÉO P√ìS-COMMIT: Confirma se as altera√ß√µes foram persistidas
        if itens_cancelados > 0:
            print(f"[SYNC] üîç Verifica√ß√£o p√≥s-commit - Confirmando altera√ß√µes nos pedidos:")
            for item in embarque.itens:
                if item.status == 'cancelado':
                    # Recarrega o pedido do banco ap√≥s commit
                    pedido_verificacao = None
                    if item.separacao_lote_id:
                        pedido_verificacao = Pedido.query.filter_by(separacao_lote_id=item.separacao_lote_id).first()
                    elif item.pedido:
                        pedido_verificacao = Pedido.query.filter_by(num_pedido=item.pedido).first()
                    
                    if pedido_verificacao:
                        print(f"[SYNC] üìä Pedido {pedido_verificacao.num_pedido}:")
                        print(f"[SYNC]    NF: '{pedido_verificacao.nf}'")
                        print(f"[SYNC]    Status: '{pedido_verificacao.status_calculado}'")
                        print(f"[SYNC]    Cota√ß√£o ID: {pedido_verificacao.cotacao_id}")
        
        # Montar mensagem de resultado
        resultado_parts = []
        if itens_sincronizados > 0:
            resultado_parts.append(f"{itens_sincronizados} NF(s) sincronizada(s)")
        if itens_removidos > 0:
            resultado_parts.append(f"{itens_removidos} NF(s) removida(s)")
        if itens_cancelados > 0:
            resultado_parts.append(f"{itens_cancelados} item(ns) processado(s)")
        
        if is_embarque_fob and itens_sincronizados > 0:
            resultado_parts.append("embarque FOB configurado")
        
        resultado_msg = "‚úÖ " + ", ".join(resultado_parts) if resultado_parts else "Nenhuma altera√ß√£o necess√°ria"
        
        if erros:
            resultado_msg += f" | ‚ö†Ô∏è {len(erros)} erro(s)"
        
        # Log resumido apenas se houve altera√ß√µes significativas
        if itens_sincronizados > 0 or itens_removidos > 0 or itens_cancelados > 0:
            print(f"[SYNC] Embarque #{embarque.numero}: {resultado_msg}")
        
        return True, resultado_msg
            
    except Exception as e:
        db.session.rollback()
        error_msg = f"Erro na sincroniza√ß√£o: {str(e)}"
        print(f"[SYNC] ‚ùå {error_msg}")
        return False, error_msg

def atualizar_status_pedido_nf_cd(numero_pedido, separacao_lote_id=None):
    """
    ‚úÖ FUN√á√ÉO CORRIGIDA: Atualiza status dos itens de separa√ß√£o para "NF no CD"
    
    Implementa o item 2-d do processo_completo.md:
    - Quando uma NF volta para o CD, altera o status dos itens de separa√ß√£o
    - Remove data de embarque e marca nf_cd=True para permitir nova cota√ß√£o
    - Atualiza diretamente na tabela Separacao (n√£o na VIEW Pedido)
    """
    try:
        # Atualiza diretamente na tabela Separacao
        update_data = {
            'nf_cd': True,
            'data_embarque': None,
            'status': 'NF no CD'
        }
        
        # Constr√≥i a query baseada nos par√¢metros dispon√≠veis
        if separacao_lote_id:
            # Atualiza√ß√£o por lote completo
            result = Separacao.query.filter_by(
                separacao_lote_id=separacao_lote_id
            ).update(update_data)
            
            identificador = f"Lote: {separacao_lote_id}"
                        
        else:
            return False, "Nenhum par√¢metro de busca fornecido"
        
        # Confirma as altera√ß√µes
        db.session.commit()
        
        # Verifica quantas linhas foram afetadas
        if result > 0:
            msg = f"Status atualizado para 'NF no CD': {result} item(ns) de separa√ß√£o ({identificador})"
            print(f"[DEBUG] üì¶ {msg}")
            return True, msg
        else:
            return False, f"Nenhum item de separa√ß√£o encontrado ({identificador})"
            
    except Exception as e:
        db.session.rollback()
        return False, f"Erro ao atualizar pedido: {str(e)}"

@embarques_bp.route('/item/<int:item_id>/cancelar', methods=['POST'])
@login_required
def cancelar_item_embarque(item_id):
    """
    Cancela um item do embarque (exclus√£o l√≥gica)
    """
    
    item = EmbarqueItem.query.get_or_404(item_id)
    embarque = item.embarque
    
    # Verificar se o embarque n√£o est√° cancelado
    if embarque.status == 'cancelado':
        flash('‚ùå N√£o √© poss√≠vel remover itens de um embarque cancelado.', 'danger')
        return redirect(url_for('embarques.visualizar_embarque', id=embarque.id))
    
    try:
        # Cancelar o item (exclus√£o l√≥gica)
        item.status = 'cancelado'
        db.session.commit()
        
        # ‚úÖ USAR NOVA SINCRONIZA√á√ÉO COMPLETA
        sucesso, resultado = sincronizar_nf_embarque_pedido_completa(embarque.id)
        if sucesso:
            flash(f'‚úÖ Pedido {item.pedido} removido do embarque com sucesso! {resultado}', 'success')
        else:
            flash(f'‚úÖ Pedido {item.pedido} removido do embarque, mas houve erro na sincroniza√ß√£o: {resultado}', 'warning')
        
    except Exception as e:
        db.session.rollback()
        flash(f'‚ùå Erro ao remover pedido do embarque: {str(e)}', 'danger')
    
    return redirect(url_for('embarques.visualizar_embarque', id=embarque.id))

@embarques_bp.route('/<int:embarque_id>/alterar_cotacao')
@login_required
@require_embarques()
def alterar_cotacao(embarque_id):
    """
    Permite alterar a cota√ß√£o de um embarque existente.
    
    S√≥ permite se a data do embarque n√£o estiver preenchida.
    Extrai os pedidos do embarque e redireciona para a tela de cota√ß√£o.
    """
    try:
        embarque = Embarque.query.get_or_404(embarque_id)
        
        # üîí VERIFICA√á√ÉO ESPEC√çFICA PARA VENDEDORES
        if current_user.perfil == 'vendedor':
            # Verifica se o vendedor tem permiss√£o para ver este embarque
            tem_permissao = False
            from app.utils.auth_decorators import check_vendedor_permission
            for item in embarque.itens:
                if check_vendedor_permission(numero_nf=item.nota_fiscal):
                    tem_permissao = True
                    break
            
            if not tem_permissao:
                flash('Acesso negado. Voc√™ s√≥ pode alterar cota√ß√£o de embarques dos seus clientes.', 'danger')
                return redirect(url_for('embarques.listar_embarques'))
        
        # Verificar se a data do embarque n√£o est√° preenchida
        if embarque.data_embarque:
            flash('‚ùå N√£o √© poss√≠vel alterar a cota√ß√£o de um embarque que j√° foi embarcado (data de embarque preenchida).', 'danger')
            return redirect(url_for('embarques.visualizar_embarque', id=embarque_id))
        
        # Verificar se h√° itens ativos no embarque
        itens_ativos = [item for item in embarque.itens if item.status == 'ativo']
        if not itens_ativos:
            flash('‚ùå Este embarque n√£o possui itens ativos para cotar.', 'warning')
            return redirect(url_for('embarques.visualizar_embarque', id=embarque_id))
        
        # Extrair os lotes √∫nicos dos itens do embarque agregando por separacao_lote_id
        from app.separacao.models import Separacao
        from sqlalchemy import func
        
        # Coletar lotes √∫nicos dos itens ativos
        lotes_unicos = set()
        for item in itens_ativos:
            if item.separacao_lote_id:
                lotes_unicos.add(item.separacao_lote_id)
        
        if not lotes_unicos:
            flash('‚ùå Nenhum lote de separa√ß√£o encontrado nos itens do embarque.', 'danger')
            return redirect(url_for('embarques.visualizar_embarque', id=embarque_id))
        
        # Buscar dados agregados de Separacao por lote
        # Criar estrutura similar √† VIEW pedidos mas buscando direto de Separacao
        pedidos_data = []
        
        for lote_id in lotes_unicos:
            # Buscar dados agregados do lote na tabela Separacao
            agregacao = db.session.query(
                Separacao.separacao_lote_id,
                func.min(Separacao.num_pedido).label('num_pedido'),
                func.min(Separacao.data_pedido).label('data_pedido'),
                func.min(Separacao.cnpj_cpf).label('cnpj_cpf'),
                func.min(Separacao.raz_social_red).label('raz_social_red'),
                func.min(Separacao.nome_cidade).label('nome_cidade'),
                func.min(Separacao.cod_uf).label('cod_uf'),
                func.coalesce(func.sum(Separacao.valor_saldo), 0).label('valor_saldo_total'),
                func.coalesce(func.sum(Separacao.pallet), 0).label('pallet_total'),
                func.coalesce(func.sum(Separacao.peso), 0).label('peso_total'),
                func.min(Separacao.rota).label('rota'),
                func.min(Separacao.cidade_normalizada).label('cidade_normalizada'),
                func.min(Separacao.uf_normalizada).label('uf_normalizada'),
                func.min(Separacao.codigo_ibge).label('codigo_ibge'),
                func.min(Separacao.sub_rota).label('sub_rota'),
                func.min(Separacao.expedicao).label('expedicao'),
                func.min(Separacao.agendamento).label('agendamento'),
                func.min(Separacao.protocolo).label('protocolo')
            ).filter(
                Separacao.separacao_lote_id == lote_id
            ).group_by(
                Separacao.separacao_lote_id
            ).first()
            
            if agregacao:
                # Criar um objeto similar ao Pedido para compatibilidade
                pedido_obj = type('PedidoTemp', (), {
                    'id': hash(lote_id) % 1000000,  # ID tempor√°rio √∫nico baseado no lote
                    'separacao_lote_id': agregacao.separacao_lote_id,
                    'num_pedido': agregacao.num_pedido,
                    'data_pedido': agregacao.data_pedido,
                    'cnpj_cpf': agregacao.cnpj_cpf,
                    'raz_social_red': agregacao.raz_social_red,
                    'nome_cidade': agregacao.nome_cidade,
                    'cod_uf': agregacao.cod_uf,
                    'cidade_normalizada': agregacao.cidade_normalizada,
                    'uf_normalizada': agregacao.uf_normalizada,
                    'codigo_ibge': agregacao.codigo_ibge,
                    'valor_saldo_total': float(agregacao.valor_saldo_total or 0),
                    'pallet_total': float(agregacao.pallet_total or 0),
                    'peso_total': float(agregacao.peso_total or 0),
                    'rota': agregacao.rota,
                    'sub_rota': agregacao.sub_rota,
                    'expedicao': agregacao.expedicao,
                    'agendamento': agregacao.agendamento,
                    'protocolo': agregacao.protocolo
                })()
                pedidos_data.append(pedido_obj)
            else:
                flash(f'‚ö†Ô∏è Lote {lote_id} n√£o encontrado na base de dados.', 'warning')
        
        if not pedidos_data:
            flash('‚ùå Nenhum dado v√°lido encontrado para alterar a cota√ß√£o.', 'danger')
            return redirect(url_for('embarques.visualizar_embarque', id=embarque_id))
        
        # Armazenar os dados completos dos pedidos na sess√£o para uso na cota√ß√£o
        # Em vez de apenas IDs, vamos armazenar os dados completos serializados
        pedidos_serializados = []
        for p in pedidos_data:
            pedidos_serializados.append({
                'id': p.separacao_lote_id,
                'separacao_lote_id': p.separacao_lote_id,
                'num_pedido': p.num_pedido,
                'data_pedido': p.data_pedido.isoformat() if p.data_pedido else None,
                'cnpj_cpf': p.cnpj_cpf,
                'raz_social_red': p.raz_social_red,
                'nome_cidade': p.nome_cidade,
                'cod_uf': p.cod_uf,
                'cidade_normalizada': p.cidade_normalizada,
                'uf_normalizada': p.uf_normalizada,
                'codigo_ibge': p.codigo_ibge,
                'valor_saldo_total': p.valor_saldo_total,
                'pallet_total': p.pallet_total,
                'peso_total': p.peso_total,
                'rota': p.rota,
                'sub_rota': p.sub_rota,
                'expedicao': p.expedicao.isoformat() if p.expedicao else None,
                'agendamento': p.agendamento.isoformat() if p.agendamento else None,
                'protocolo': p.protocolo
            })
        
        # Armazenar informa√ß√µes na sess√£o
        session['cotacao_pedidos_data'] = pedidos_serializados  # Dados completos
        session['cotacao_pedidos'] = [p['id'] for p in pedidos_serializados]  # IDs para compatibilidade
        session['alterando_embarque'] = {
            'embarque_id': embarque_id,
            'numero_embarque': embarque.numero,
            'transportadora_anterior': embarque.transportadora.razao_social if embarque.transportadora else None,
            'tipo_carga_anterior': embarque.tipo_carga
        }
        
        flash(f'üîÑ Iniciando altera√ß√£o da cota√ß√£o do embarque #{embarque.numero}. {len(pedidos_serializados)} pedido(s) selecionado(s).', 'info')
        
        # Redirecionar para a tela de cota√ß√£o com par√¢metro indicando altera√ß√£o
        return redirect(url_for('cotacao.tela_cotacao', alterando_embarque=embarque_id))
        
    except Exception as e:
        flash(f'‚ùå Erro ao iniciar altera√ß√£o de cota√ß√£o: {str(e)}', 'danger')
        return redirect(url_for('embarques.listar_embarques'))
