"""
Service para gera√ß√£o de modelos de importa√ß√£o Excel - MotoChefe
Centraliza a l√≥gica de cria√ß√£o de arquivos modelo com instru√ß√µes detalhadas
"""
import pandas as pd
from io import BytesIO
from datetime import datetime
from openpyxl import load_workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter


def _formatar_cabecalho(ws):
    """Aplica formata√ß√£o ao cabe√ßalho (primeira linha)"""
    header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
    header_font = Font(color="FFFFFF", bold=True, size=11)
    header_alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)

    thin_border = Border(
        left=Side(style='thin'),
        right=Side(style='thin'),
        top=Side(style='thin'),
        bottom=Side(style='thin')
    )

    for cell in ws[1]:
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = header_alignment
        cell.border = thin_border


def _formatar_exemplos(ws, num_linhas_exemplo=2):
    """Aplica formata√ß√£o √†s linhas de exemplo"""
    example_fill = PatternFill(start_color="E7E6E6", end_color="E7E6E6", fill_type="solid")
    example_alignment = Alignment(horizontal="left", vertical="center")

    thin_border = Border(
        left=Side(style='thin'),
        right=Side(style='thin'),
        top=Side(style='thin'),
        bottom=Side(style='thin')
    )

    for row_idx in range(2, 2 + num_linhas_exemplo):
        for cell in ws[row_idx]:
            cell.fill = example_fill
            cell.alignment = example_alignment
            cell.border = thin_border


def _ajustar_larguras_colunas(ws):
    """Ajusta largura das colunas baseado no conte√∫do"""
    for column in ws.columns:
        max_length = 0
        column_letter = get_column_letter(column[0].column)

        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass

        adjusted_width = min(max_length + 2, 50)  # Limite de 50
        ws.column_dimensions[column_letter].width = adjusted_width


def _criar_aba_instrucoes(workbook, titulo, instrucoes_linhas):
    """Cria aba de instru√ß√µes formatada"""
    ws_instrucoes = workbook.create_sheet("INSTRU√á√ïES")

    # T√≠tulo
    ws_instrucoes['A1'] = titulo
    ws_instrucoes['A1'].font = Font(bold=True, size=14, color="4472C4")
    ws_instrucoes['A1'].alignment = Alignment(horizontal="left", vertical="center")
    ws_instrucoes.merge_cells('A1:D1')

    # Linha em branco
    linha_atual = 3

    # Instru√ß√µes
    for instrucao in instrucoes_linhas:
        ws_instrucoes[f'A{linha_atual}'] = instrucao
        ws_instrucoes[f'A{linha_atual}'].alignment = Alignment(horizontal="left", vertical="top", wrap_text=True)

        # Negrito para t√≠tulos (linhas que terminam com :)
        if instrucao.strip().endswith(':'):
            ws_instrucoes[f'A{linha_atual}'].font = Font(bold=True, size=11)

        linha_atual += 1

    # Ajustar largura da coluna A
    ws_instrucoes.column_dimensions['A'].width = 100
    ws_instrucoes.row_dimensions[1].height = 20


# ====================================================================
# MODELOS ESPEC√çFICOS POR ENTIDADE
# ====================================================================

def gerar_modelo_equipes():
    """Gera modelo de importa√ß√£o para Equipes de Vendas"""
    # Dados de exemplo
    data = {
        'Equipe': ['Equipe Sul', 'Equipe Norte']
    }

    df = pd.DataFrame(data)
    output = BytesIO()

    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Modelo')

        workbook = writer.book
        ws_modelo = writer.sheets['Modelo']

        # Formata√ß√£o
        _formatar_cabecalho(ws_modelo)
        _formatar_exemplos(ws_modelo, num_linhas_exemplo=2)
        _ajustar_larguras_colunas(ws_modelo)

        # Instru√ß√µes
        instrucoes = [
            "üìã INSTRU√á√ïES PARA IMPORTA√á√ÉO DE EQUIPES DE VENDAS",
            "",
            "‚úÖ COLUNAS OBRIGAT√ìRIAS:",
            "  ‚Ä¢ Equipe - Nome da equipe de vendas (texto)",
            "",
            "üìå REGRAS DE VALIDA√á√ÉO:",
            "  ‚Ä¢ Nome da equipe n√£o pode estar vazio",
            "  ‚Ä¢ Equipes duplicadas (mesmo nome) ser√£o ignoradas",
            "  ‚Ä¢ Linhas vazias ser√£o ignoradas automaticamente",
            "",
            "üí° EXEMPLO DE PREENCHIMENTO:",
            "  Equipe Sul",
            "  Equipe Norte",
            "  Equipe Centro-Oeste",
            "",
            "‚ö†Ô∏è ERROS COMUNS A EVITAR:",
            "  ‚Ä¢ N√£o altere o nome da coluna 'Equipe'",
            "  ‚Ä¢ N√£o deixe c√©lulas em branco se houver equipe",
            "  ‚Ä¢ Evite caracteres especiais no in√≠cio do nome",
            "",
            "üîÑ PROCESSO DE IMPORTA√á√ÉO:",
            "  1. Preencha a planilha com os dados das equipes",
            "  2. Salve o arquivo no formato .xlsx",
            "  3. Na tela de Equipes, clique em 'Importar'",
            "  4. Selecione o arquivo e clique em 'Importar'",
            "  5. O sistema mostrar√° quantas equipes foram importadas",
        ]

        _criar_aba_instrucoes(workbook, "INSTRU√á√ïES - IMPORTA√á√ÉO DE EQUIPES", instrucoes)

    output.seek(0)
    return output


def gerar_modelo_vendedores():
    """Gera modelo de importa√ß√£o para Vendedores"""
    data = {
        'Vendedor': ['Jo√£o Silva', 'Maria Santos'],
        'Equipe': ['Equipe Sul', 'Equipe Norte']
    }

    df = pd.DataFrame(data)
    output = BytesIO()

    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Modelo')

        workbook = writer.book
        ws_modelo = writer.sheets['Modelo']

        _formatar_cabecalho(ws_modelo)
        _formatar_exemplos(ws_modelo, num_linhas_exemplo=2)
        _ajustar_larguras_colunas(ws_modelo)

        instrucoes = [
            "üìã INSTRU√á√ïES PARA IMPORTA√á√ÉO DE VENDEDORES",
            "",
            "‚úÖ COLUNAS OBRIGAT√ìRIAS:",
            "  ‚Ä¢ Vendedor - Nome completo do vendedor (texto)",
            "",
            "üìå COLUNAS OPCIONAIS:",
            "  ‚Ä¢ Equipe - Nome da equipe de vendas (texto)",
            "    ‚ö†Ô∏è Se informada, a equipe DEVE existir previamente no sistema",
            "    ‚ö†Ô∏è Se n√£o informada, vendedor ser√° cadastrado sem equipe",
            "",
            "üìå REGRAS DE VALIDA√á√ÉO:",
            "  ‚Ä¢ Nome do vendedor n√£o pode estar vazio",
            "  ‚Ä¢ Vendedores duplicados (mesmo nome) ser√£o criados normalmente",
            "  ‚Ä¢ Se a equipe informada n√£o existir, o vendedor ser√° criado sem equipe",
            "  ‚Ä¢ Linhas vazias ser√£o ignoradas automaticamente",
            "",
            "üí° EXEMPLO DE PREENCHIMENTO:",
            "  Vendedor: Jo√£o Silva | Equipe: Equipe Sul",
            "  Vendedor: Maria Santos | Equipe: Equipe Norte",
            "  Vendedor: Pedro Oliveira | Equipe: (vazio - sem equipe)",
            "",
            "‚ö†Ô∏è ERROS COMUNS A EVITAR:",
            "  ‚Ä¢ N√£o altere os nomes das colunas",
            "  ‚Ä¢ N√£o deixe a coluna 'Vendedor' vazia",
            "  ‚Ä¢ Certifique-se que a equipe existe antes de importar",
            "  ‚Ä¢ Evite caracteres especiais no in√≠cio do nome",
            "",
            "üîÑ PROCESSO DE IMPORTA√á√ÉO:",
            "  1. Certifique-se que as equipes existem no sistema",
            "  2. Preencha a planilha com os dados dos vendedores",
            "  3. Salve o arquivo no formato .xlsx",
            "  4. Na tela de Vendedores, clique em 'Importar'",
            "  5. Selecione o arquivo e clique em 'Importar'",
            "  6. O sistema mostrar√° quantos vendedores foram importados",
        ]

        _criar_aba_instrucoes(workbook, "INSTRU√á√ïES - IMPORTA√á√ÉO DE VENDEDORES", instrucoes)

    output.seek(0)
    return output


def gerar_modelo_transportadoras():
    """Gera modelo de importa√ß√£o para Transportadoras"""
    data = {
        'Transportadora': ['Transportadora R√°pida Ltda', 'Log√≠stica Express S.A.'],
        'CNPJ': ['12.345.678/0001-99', '98.765.432/0001-11'],
        'Telefone': ['(11) 3333-4444', '(21) 5555-6666']
    }

    df = pd.DataFrame(data)
    output = BytesIO()

    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Modelo')

        workbook = writer.book
        ws_modelo = writer.sheets['Modelo']

        _formatar_cabecalho(ws_modelo)
        _formatar_exemplos(ws_modelo, num_linhas_exemplo=2)
        _ajustar_larguras_colunas(ws_modelo)

        instrucoes = [
            "üìã INSTRU√á√ïES PARA IMPORTA√á√ÉO DE TRANSPORTADORAS",
            "",
            "‚úÖ COLUNAS OBRIGAT√ìRIAS:",
            "  ‚Ä¢ Transportadora - Raz√£o social ou nome fantasia (texto)",
            "",
            "üìå COLUNAS OPCIONAIS:",
            "  ‚Ä¢ CNPJ - CNPJ da transportadora (texto com ou sem formata√ß√£o)",
            "  ‚Ä¢ Telefone - Telefone de contato (texto com ou sem formata√ß√£o)",
            "",
            "üìå REGRAS DE VALIDA√á√ÉO:",
            "  ‚Ä¢ Nome da transportadora n√£o pode estar vazio",
            "  ‚Ä¢ Transportadoras duplicadas (mesmo nome) ser√£o ignoradas",
            "  ‚Ä¢ CNPJ pode ser informado com ou sem pontua√ß√£o (XX.XXX.XXX/XXXX-XX ou XXXXXXXXXXXXXX)",
            "  ‚Ä¢ Telefone pode ser informado com ou sem formata√ß√£o ((XX) XXXX-XXXX ou XXXXXXXXXX)",
            "  ‚Ä¢ Linhas vazias ser√£o ignoradas automaticamente",
            "",
            "üí° EXEMPLO DE PREENCHIMENTO:",
            "  Transportadora: Transportadora R√°pida Ltda | CNPJ: 12.345.678/0001-99 | Telefone: (11) 3333-4444",
            "  Transportadora: Log√≠stica Express S.A. | CNPJ: 98765432000111 | Telefone: 2155556666",
            "  Transportadora: Frete F√°cil ME | CNPJ: (vazio) | Telefone: (vazio)",
            "",
            "‚ö†Ô∏è ERROS COMUNS A EVITAR:",
            "  ‚Ä¢ N√£o altere os nomes das colunas",
            "  ‚Ä¢ N√£o deixe a coluna 'Transportadora' vazia",
            "  ‚Ä¢ Evite caracteres especiais no in√≠cio do nome",
            "  ‚Ä¢ CNPJ e Telefone s√£o opcionais, mas recomenda-se preencher",
            "",
            "üîÑ PROCESSO DE IMPORTA√á√ÉO:",
            "  1. Preencha a planilha com os dados das transportadoras",
            "  2. Salve o arquivo no formato .xlsx",
            "  3. Na tela de Transportadoras, clique em 'Importar'",
            "  4. Selecione o arquivo e clique em 'Importar'",
            "  5. O sistema mostrar√° quantas transportadoras foram importadas",
        ]

        _criar_aba_instrucoes(workbook, "INSTRU√á√ïES - IMPORTA√á√ÉO DE TRANSPORTADORAS", instrucoes)

    output.seek(0)
    return output


def gerar_modelo_clientes():
    """Gera modelo de importa√ß√£o para Clientes"""
    data = {
        'Cliente': ['Mercado Central Ltda', 'Distribuidora Norte S.A.'],
        'CNPJ': ['11.222.333/0001-44', '55.666.777/0001-88'],
        'Endere√ßo': ['Rua das Flores', 'Av. Principal'],
        'N√∫mero': ['123', '456'],
        'Complemento': ['Loja 1', 'Galp√£o B'],
        'Bairro': ['Centro', 'Industrial'],
        'Cidade': ['S√£o Paulo', 'Rio de Janeiro'],
        'Estado': ['SP', 'RJ'],
        'CEP': ['01234-567', '20000-000'],
        'Telefone': ['(11) 2222-3333', '(21) 4444-5555'],
        'Email': ['contato@mercado.com.br', 'vendas@distribuidora.com.br']
    }

    df = pd.DataFrame(data)
    output = BytesIO()

    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Modelo')

        workbook = writer.book
        ws_modelo = writer.sheets['Modelo']

        _formatar_cabecalho(ws_modelo)
        _formatar_exemplos(ws_modelo, num_linhas_exemplo=2)
        _ajustar_larguras_colunas(ws_modelo)

        instrucoes = [
            "üìã INSTRU√á√ïES PARA IMPORTA√á√ÉO DE CLIENTES",
            "",
            "‚úÖ COLUNAS OBRIGAT√ìRIAS:",
            "  ‚Ä¢ Cliente - Raz√£o social ou nome fantasia (texto)",
            "  ‚Ä¢ CNPJ - CNPJ do cliente (texto com ou sem formata√ß√£o)",
            "",
            "üìå COLUNAS OPCIONAIS:",
            "  ‚Ä¢ Endere√ßo - Logradouro (rua, avenida, etc)",
            "  ‚Ä¢ N√∫mero - N√∫mero do endere√ßo",
            "  ‚Ä¢ Complemento - Complemento (apto, sala, loja, etc)",
            "  ‚Ä¢ Bairro - Nome do bairro",
            "  ‚Ä¢ Cidade - Nome da cidade",
            "  ‚Ä¢ Estado - Sigla do estado (2 letras: SP, RJ, MG, etc)",
            "  ‚Ä¢ CEP - CEP com ou sem formata√ß√£o (XXXXX-XXX ou XXXXXXXX)",
            "  ‚Ä¢ Telefone - Telefone de contato",
            "  ‚Ä¢ Email - Email de contato",
            "",
            "üìå REGRAS DE VALIDA√á√ÉO:",
            "  ‚Ä¢ Nome do cliente e CNPJ s√£o obrigat√≥rios",
            "  ‚Ä¢ CNPJ deve ser √∫nico - CNPJs duplicados ser√£o ignorados",
            "  ‚Ä¢ CNPJ pode ser informado com ou sem pontua√ß√£o",
            "  ‚Ä¢ Estado deve ter exatamente 2 letras (SP, RJ, MG, etc)",
            "  ‚Ä¢ CEP pode ser informado com ou sem tra√ßo",
            "  ‚Ä¢ Todos os campos opcionais podem ficar em branco",
            "  ‚Ä¢ Linhas vazias ser√£o ignoradas automaticamente",
            "",
            "üí° EXEMPLO DE PREENCHIMENTO:",
            "  Cliente: Mercado Central Ltda | CNPJ: 11.222.333/0001-44 | Cidade: S√£o Paulo | Estado: SP",
            "  Cliente: Distribuidora Norte S.A. | CNPJ: 55666777000188 | CEP: 20000000",
            "",
            "‚ö†Ô∏è ERROS COMUNS A EVITAR:",
            "  ‚Ä¢ N√£o altere os nomes das colunas",
            "  ‚Ä¢ N√£o deixe 'Cliente' ou 'CNPJ' vazios",
            "  ‚Ä¢ N√£o use Estado com mais de 2 letras (use SP, n√£o S√£o Paulo)",
            "  ‚Ä¢ Certifique-se que o CNPJ est√° correto e n√£o duplicado",
            "  ‚Ä¢ Evite caracteres especiais no in√≠cio do nome",
            "",
            "üîÑ PROCESSO DE IMPORTA√á√ÉO:",
            "  1. Preencha a planilha com os dados dos clientes",
            "  2. Salve o arquivo no formato .xlsx",
            "  3. Na tela de Clientes, clique em 'Importar'",
            "  4. Selecione o arquivo e clique em 'Importar'",
            "  5. O sistema mostrar√° quantos clientes foram importados",
            "  6. Clientes com CNPJ duplicado ser√£o automaticamente ignorados",
        ]

        _criar_aba_instrucoes(workbook, "INSTRU√á√ïES - IMPORTA√á√ÉO DE CLIENTES", instrucoes)

    output.seek(0)
    return output


def gerar_modelo_despesas():
    """Gera modelo de importa√ß√£o para Despesas Mensais"""
    data = {
        'Tipo': ['Aluguel', 'Energia El√©trica'],
        'Descri√ß√£o': ['Aluguel sede Outubro/2025', 'Conta de luz Outubro/2025'],
        'Valor': ['5.000,00', '850,50'],  # Formato brasileiro
        'M√™s': [10, 10],
        'Ano': [2025, 2025],
        'Status': ['PENDENTE', 'PENDENTE']
    }

    df = pd.DataFrame(data)
    output = BytesIO()

    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Modelo')

        workbook = writer.book
        ws_modelo = writer.sheets['Modelo']

        _formatar_cabecalho(ws_modelo)
        _formatar_exemplos(ws_modelo, num_linhas_exemplo=2)
        _ajustar_larguras_colunas(ws_modelo)

        instrucoes = [
            "üìã INSTRU√á√ïES PARA IMPORTA√á√ÉO DE DESPESAS MENSAIS",
            "",
            "‚úÖ COLUNAS OBRIGAT√ìRIAS:",
            "  ‚Ä¢ Tipo - Tipo da despesa (texto): Aluguel, Energia, Telefone, etc",
            "  ‚Ä¢ Valor - Valor da despesa (formato brasileiro): 1.500,00",
            "  ‚Ä¢ M√™s - M√™s de compet√™ncia (n√∫mero de 1 a 12)",
            "  ‚Ä¢ Ano - Ano de compet√™ncia (n√∫mero com 4 d√≠gitos): 2025",
            "",
            "üìå COLUNAS OPCIONAIS:",
            "  ‚Ä¢ Descri√ß√£o - Descri√ß√£o detalhada da despesa (texto)",
            "  ‚Ä¢ Status - Status da despesa (texto): PENDENTE, PAGO",
            "    ‚ö†Ô∏è Se n√£o informado, ser√° definido como 'PENDENTE'",
            "",
            "üìå REGRAS DE VALIDA√á√ÉO:",
            "  ‚Ä¢ Tipo, Valor, M√™s e Ano s√£o obrigat√≥rios",
            "  ‚Ä¢ Valor deve usar v√≠rgula como decimal e ponto como milhar: 1.500,00",
            "  ‚Ä¢ M√™s deve ser n√∫mero de 1 a 12",
            "  ‚Ä¢ Ano deve ser n√∫mero com 4 d√≠gitos (2025, 2026, etc)",
            "  ‚Ä¢ Status aceita: PENDENTE ou PAGO (padr√£o: PENDENTE)",
            "  ‚Ä¢ Linhas vazias ser√£o ignoradas automaticamente",
            "",
            "üí° EXEMPLO DE PREENCHIMENTO:",
            "  Tipo: Aluguel | Valor: 5.000,00 | M√™s: 10 | Ano: 2025 | Status: PENDENTE",
            "  Tipo: Energia El√©trica | Valor: 850,50 | M√™s: 10 | Ano: 2025",
            "  Tipo: Telefone | Valor: 250,00 | M√™s: 11 | Ano: 2025 | Descri√ß√£o: Linha fixa + celular",
            "",
            "‚ö†Ô∏è ERROS COMUNS A EVITAR:",
            "  ‚Ä¢ N√£o altere os nomes das colunas",
            "  ‚Ä¢ Use V√çRGULA (,) como separador decimal e PONTO (.) como separador de milhar",
            "  ‚Ä¢ M√™s deve ser N√öMERO (10), n√£o texto (Outubro)",
            "  ‚Ä¢ N√£o deixe Tipo, Valor, M√™s ou Ano vazios",
            "  ‚Ä¢ Status deve ser exatamente PENDENTE ou PAGO (mai√∫sculas)",
            "",
            "üîÑ PROCESSO DE IMPORTA√á√ÉO:",
            "  1. Preencha a planilha com os dados das despesas",
            "  2. Salve o arquivo no formato .xlsx",
            "  3. Na tela de Despesas, clique em 'Importar'",
            "  4. Selecione o arquivo e clique em 'Importar'",
            "  5. O sistema mostrar√° quantas despesas foram importadas",
        ]

        _criar_aba_instrucoes(workbook, "INSTRU√á√ïES - IMPORTA√á√ÉO DE DESPESAS MENSAIS", instrucoes)

    output.seek(0)
    return output


def gerar_modelo_modelos():
    """Gera modelo de importa√ß√£o para Modelos de Motos"""
    data = {
        'Modelo': ['X12', 'X11'],
        'Descri√ß√£o': ['X12 autopropelida 1000W', 'X11 2000W Roda aro 10"'],
        'Pot√™ncia': ['1000W', '2000W'],
        'Autopropelido': ['Sim', 'N√£o'],
        'Pre√ßo Tabela': ['12.500,00', '18.900,00']  # Formato brasileiro
    }

    df = pd.DataFrame(data)
    output = BytesIO()

    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Modelo')

        workbook = writer.book
        ws_modelo = writer.sheets['Modelo']

        _formatar_cabecalho(ws_modelo)
        _formatar_exemplos(ws_modelo, num_linhas_exemplo=2)
        _ajustar_larguras_colunas(ws_modelo)

        instrucoes = [
            "üìã INSTRU√á√ïES PARA IMPORTA√á√ÉO DE MODELOS DE MOTOS",
            "",
            "‚úÖ COLUNAS OBRIGAT√ìRIAS:",
            "  ‚Ä¢ Modelo - Nome do modelo da moto (texto)",
            "  ‚Ä¢ Pot√™ncia - Pot√™ncia do motor (texto): 160cc, 250cc, etc",
            "  ‚Ä¢ Pre√ßo Tabela - Pre√ßo de tabela (formato brasileiro): 12.500,00",
            "",
            "üìå COLUNAS OPCIONAIS:",
            "  ‚Ä¢ Descri√ß√£o - Descri√ß√£o do modelo (texto)",
            "  ‚Ä¢ Autopropelido - Se a moto √© autopropelida (Sim/N√£o)",
            "    ‚ö†Ô∏è Aceita: Sim, Yes, True, 1 para SIM",
            "    ‚ö†Ô∏è Qualquer outro valor ser√° considerado N√ÉO",
            "",
            "üìå REGRAS DE VALIDA√á√ÉO:",
            "  ‚Ä¢ Modelo, Pot√™ncia e Pre√ßo Tabela s√£o obrigat√≥rios",
            "  ‚Ä¢ Modelos duplicados (mesmo nome) ser√£o ignorados",
            "  ‚Ä¢ Pre√ßo deve usar v√≠rgula como decimal e ponto como milhar: 12.500,00",
            "  ‚Ä¢ Autopropelido √© opcional, padr√£o √© N√ÉO",
            "  ‚Ä¢ Linhas vazias ser√£o ignoradas automaticamente",
            "",
            "üí° EXEMPLO DE PREENCHIMENTO:",
            "  Modelo: X12 | Pot√™ncia: 1000W | Pre√ßo: 12.500,00 | Autopropelido: Sim",
            "  Modelo: X11 | Pot√™ncia: 2000W | Pre√ßo: 18.900,00 | Autopropelido: N√£o",
            "",
            "‚ö†Ô∏è ERROS COMUNS A EVITAR:",
            "  ‚Ä¢ N√£o altere os nomes das colunas",
            "  ‚Ä¢ Use V√çRGULA (,) como separador decimal e PONTO (.) como separador de milhar",
            "  ‚Ä¢ N√£o deixe Modelo, Pot√™ncia ou Pre√ßo Tabela vazios",
            "  ‚Ä¢ Evite cadastrar modelos duplicados",
            "  ‚Ä¢ Pot√™ncia √© campo de texto livre (pode usar cc, cv, HP, etc)",
            "",
            "üîÑ PROCESSO DE IMPORTA√á√ÉO:",
            "  1. Preencha a planilha com os dados dos modelos",
            "  2. Salve o arquivo no formato .xlsx",
            "  3. Na tela de Modelos, clique em 'Importar'",
            "  4. Selecione o arquivo e clique em 'Importar'",
            "  5. O sistema mostrar√° quantos modelos foram importados",
            "  6. Modelos com nome duplicado ser√£o automaticamente ignorados",
        ]

        _criar_aba_instrucoes(workbook, "INSTRU√á√ïES - IMPORTA√á√ÉO DE MODELOS DE MOTOS", instrucoes)

    output.seek(0)
    return output


def gerar_modelo_motos():
    """Gera modelo de importa√ß√£o para Motos (Chassi)"""
    data = {
        'Chassi': ['9BD123456789ABC01', '9BD987654321XYZ02'],
        'Motor': ['MOT123456', 'MOT987654'],
        'Modelo': ['HONDA CG 160', 'YAMAHA FAZER 250'],
        'Cor': ['Preta', 'Vermelha'],
        'Ano': [2024, 2025],
        'NF Entrada': ['12345', '67890'],
        'Data NF': ['01/10/2025', '15/10/2025'],
        'Data Entrada': ['05/10/2025', '20/10/2025'],
        'Fornecedor': ['Honda Motos Ltda', 'Yamaha Brasil S.A.'],
        'Custo': ['11.000,00', '16.500,00'],  # Formato brasileiro
        'Pallet': ['P001', 'P002']
    }

    df = pd.DataFrame(data)
    output = BytesIO()

    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Modelo')

        workbook = writer.book
        ws_modelo = writer.sheets['Modelo']

        _formatar_cabecalho(ws_modelo)
        _formatar_exemplos(ws_modelo, num_linhas_exemplo=2)
        _ajustar_larguras_colunas(ws_modelo)

        instrucoes = [
            "üìã INSTRU√á√ïES PARA IMPORTA√á√ÉO DE MOTOS (CHASSI)",
            "",
            "‚úÖ COLUNAS OBRIGAT√ìRIAS:",
            "  ‚Ä¢ Chassi - N√∫mero do chassi √∫nico (texto): 9BD123456789ABC01",
            "  ‚Ä¢ Motor - N√∫mero do motor √∫nico (texto): MOT123456",
            "  ‚Ä¢ Modelo - Nome do modelo (texto) - DEVE EXISTIR NO SISTEMA",
            "  ‚Ä¢ Cor - Cor da moto (texto): Preta, Vermelha, Azul, etc",
            "  ‚Ä¢ NF Entrada - N√∫mero da nota fiscal de entrada",
            "  ‚Ä¢ Fornecedor - Nome do fornecedor",
            "  ‚Ä¢ Custo - Custo de aquisi√ß√£o (formato brasileiro): 11.000,00",
            "",
            "üìå COLUNAS OPCIONAIS:",
            "  ‚Ä¢ Ano - Ano de fabrica√ß√£o (n√∫mero): 2024, 2025",
            "  ‚Ä¢ Data NF - Data da nota fiscal (formato: DD/MM/AAAA)",
            "  ‚Ä¢ Data Entrada - Data de entrada no estoque (formato: DD/MM/AAAA)",
            "  ‚Ä¢ Pallet - Identifica√ß√£o do pallet (texto)",
            "",
            "üìå REGRAS DE VALIDA√á√ÉO:",
            "  ‚Ä¢ Chassi e Motor devem ser √öNICOS - duplicados ser√£o rejeitados",
            "  ‚Ä¢ Modelo informado DEVE EXISTIR previamente no sistema",
            "  ‚Ä¢ Custo deve usar v√≠rgula como decimal e ponto como milhar: 11.000,00",
            "  ‚Ä¢ Data NF e Data Entrada devem estar no formato DD/MM/AAAA",
            "  ‚Ä¢ Se Data Entrada n√£o for informada, ser√° usada a data atual",
            "  ‚Ä¢ Linhas vazias ser√£o ignoradas automaticamente",
            "",
            "üí° EXEMPLO DE PREENCHIMENTO:",
            "  Chassi: 9BD123456789ABC01 | Motor: MOT123456 | Modelo: HONDA CG 160",
            "  Cor: Preta | Ano: 2024 | NF: 12345 | Custo: 11.000,00",
            "",
            "‚ö†Ô∏è ERROS COMUNS A EVITAR:",
            "  ‚Ä¢ N√£o altere os nomes das colunas",
            "  ‚Ä¢ Certifique-se que o Modelo existe no sistema ANTES de importar",
            "  ‚Ä¢ Chassi e Motor devem ser √∫nicos (n√£o podem repetir)",
            "  ‚Ä¢ Use PONTO (.) como separador decimal no Custo",
            "  ‚Ä¢ Datas devem estar no formato DD/MM/AAAA (ex: 15/10/2025)",
            "  ‚Ä¢ N√£o deixe Chassi, Motor, Modelo, Cor, NF, Fornecedor ou Custo vazios",
            "",
            "üîÑ PROCESSO DE IMPORTA√á√ÉO:",
            "  1. Certifique-se que os Modelos existem no sistema",
            "  2. Preencha a planilha com os dados das motos",
            "  3. Salve o arquivo no formato .xlsx",
            "  4. Na tela de Motos, clique em 'Importar'",
            "  5. Selecione o arquivo e clique em 'Importar'",
            "  6. O sistema mostrar√° quantas motos foram importadas e os erros (se houver)",
            "  7. Motos com Chassi ou Motor duplicado ser√£o automaticamente rejeitadas",
            "  8. Motos com Modelo inexistente ser√£o automaticamente rejeitadas",
        ]

        _criar_aba_instrucoes(workbook, "INSTRU√á√ïES - IMPORTA√á√ÉO DE MOTOS (CHASSI)", instrucoes)

    output.seek(0)
    return output
