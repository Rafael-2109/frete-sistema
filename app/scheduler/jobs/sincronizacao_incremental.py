"""
Scheduler para Sincroniza√ß√£o Incremental da Carteira com Odoo
==============================================================

Este job executa a cada 30 minutos, buscando altera√ß√µes dos √∫ltimos 40 minutos.

ESTRAT√âGIA DE SOBREPOSI√á√ÉO:
- Execu√ß√£o: a cada 30 minutos
- Janela de busca: 40 minutos
- Sobreposi√ß√£o: 10 minutos

Isso garante que mesmo durante deploys ou falhas tempor√°rias,
nenhum dado seja perdido.

Autor: Sistema de Fretes
Data: 2025-01-19
"""

import logging
import os
from datetime import datetime
from threading import Lock
import traceback
import redis
from app import create_app, db
from app.odoo.services.carteira_service import CarteiraService
from app.utils.timezone import agora_brasil

logger = logging.getLogger(__name__)

# Lock global para evitar execu√ß√µes concorrentes
_sync_lock = Lock()

# Redis para controle distribu√≠do (se houver m√∫ltiplas inst√¢ncias)
try:
    redis_client = redis.StrictRedis(
        host=os.environ.get('REDIS_HOST', 'localhost'),
        port=int(os.environ.get('REDIS_PORT', 6379)),
        db=int(os.environ.get('REDIS_DB', 0)),
        decode_responses=True
    )
    REDIS_AVAILABLE = True
except:
    REDIS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Redis n√£o dispon√≠vel - usando lock local apenas")


class SincronizacaoIncrementalJob:
    """Job de sincroniza√ß√£o incremental com prote√ß√£o contra execu√ß√µes concorrentes"""

    # Configura√ß√µes do job
    INTERVALO_EXECUCAO = 30  # minutos
    JANELA_BUSCA = 40  # minutos
    LOCK_TIMEOUT = 25 * 60  # 25 minutos (menor que intervalo)
    REDIS_LOCK_KEY = "carteira:sync:incremental:lock"
    REDIS_LAST_RUN_KEY = "carteira:sync:incremental:last_run"

    @classmethod
    def executar(cls):
        """
        Executa a sincroniza√ß√£o incremental com prote√ß√£o contra concorr√™ncia

        Returns:
            dict: Resultado da sincroniza√ß√£o
        """
        inicio = datetime.now()
        logger.info("="*80)
        logger.info("üîÑ INICIANDO JOB DE SINCRONIZA√á√ÉO INCREMENTAL")
        logger.info(f"üìÖ Hor√°rio: {agora_brasil().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("="*80)

        # Verificar e adquirir lock
        if not cls._adquirir_lock():
            logger.warning("‚ö†Ô∏è Sincroniza√ß√£o j√° em execu√ß√£o - pulando esta vez")
            return {
                'sucesso': False,
                'motivo': 'J√° existe uma sincroniza√ß√£o em execu√ß√£o',
                'tempo_execucao': 0
            }

        try:
            # Criar contexto da aplica√ß√£o
            app = create_app()
            with app.app_context():

                # Verificar √∫ltima execu√ß√£o
                ultima_execucao = cls._obter_ultima_execucao()
                if ultima_execucao:
                    minutos_desde_ultima = (inicio - ultima_execucao).total_seconds() / 60
                    logger.info(f"üìä √öltima execu√ß√£o: {minutos_desde_ultima:.1f} minutos atr√°s")

                    # Se executou muito recentemente, pular
                    if minutos_desde_ultima < 5:
                        logger.warning("‚ö†Ô∏è Execu√ß√£o muito recente - aguardando intervalo m√≠nimo")
                        return {
                            'sucesso': False,
                            'motivo': 'Intervalo m√≠nimo n√£o atingido',
                            'tempo_execucao': 0
                        }

                # Executar sincroniza√ß√£o
                logger.info(f"üîç Buscando altera√ß√µes dos √∫ltimos {cls.JANELA_BUSCA} minutos...")

                service = CarteiraService()
                resultado = service.sincronizar_incremental(
                    minutos_janela=cls.JANELA_BUSCA,
                    primeira_execucao=False
                )

                tempo_total = (datetime.now() - inicio).total_seconds()

                if resultado.get('sucesso'):
                    logger.info("‚úÖ SINCRONIZA√á√ÉO INCREMENTAL CONCLU√çDA COM SUCESSO")
                    logger.info(f"üìä Estat√≠sticas:")
                    logger.info(f"   - Pedidos processados: {resultado.get('pedidos_processados', 0)}")
                    logger.info(f"   - Itens atualizados: {resultado.get('itens_atualizados', 0)}")
                    logger.info(f"   - Itens inseridos: {resultado.get('itens_inseridos', 0)}")
                    logger.info(f"   - Tempo total: {tempo_total:.2f} segundos")

                    # Salvar timestamp da √∫ltima execu√ß√£o bem-sucedida
                    cls._salvar_ultima_execucao(inicio)

                else:
                    logger.error(f"‚ùå Erro na sincroniza√ß√£o: {resultado.get('erro')}")

                # Adicionar timestamp ao resultado
                resultado['timestamp'] = inicio.isoformat()
                resultado['tempo_execucao'] = tempo_total

                return resultado

        except Exception as e:
            logger.error(f"‚ùå ERRO FATAL no job de sincroniza√ß√£o: {e}")
            logger.error(traceback.format_exc())

            return {
                'sucesso': False,
                'erro': str(e),
                'timestamp': inicio.isoformat(),
                'tempo_execucao': (datetime.now() - inicio).total_seconds()
            }

        finally:
            # Sempre liberar o lock
            cls._liberar_lock()
            logger.info("="*80)

    @classmethod
    def _adquirir_lock(cls) -> bool:
        """
        Adquire lock para evitar execu√ß√µes concorrentes

        Returns:
            bool: True se conseguiu adquirir o lock
        """
        # Tentar lock distribu√≠do primeiro (Redis)
        if REDIS_AVAILABLE:
            try:
                # SET com NX (only if not exists) e EX (expire)
                acquired = redis_client.set(
                    cls.REDIS_LOCK_KEY,
                    datetime.now().isoformat(),
                    nx=True,
                    ex=cls.LOCK_TIMEOUT
                )
                if acquired:
                    logger.info("üîí Lock distribu√≠do adquirido (Redis)")
                    return True
                else:
                    return False
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao adquirir lock Redis: {e}")

        # Fallback para lock local
        acquired = _sync_lock.acquire(blocking=False)
        if acquired:
            logger.info("üîí Lock local adquirido")
        return acquired

    @classmethod
    def _liberar_lock(cls):
        """Libera o lock ap√≥s execu√ß√£o"""
        # Liberar lock distribu√≠do
        if REDIS_AVAILABLE:
            try:
                redis_client.delete(cls.REDIS_LOCK_KEY)
                logger.info("üîì Lock distribu√≠do liberado (Redis)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao liberar lock Redis: {e}")

        # Liberar lock local se estiver sendo usado
        try:
            _sync_lock.release()
            logger.info("üîì Lock local liberado")
        except:
            pass  # Pode n√£o estar locked

    @classmethod
    def _obter_ultima_execucao(cls) -> datetime:
        """
        Obt√©m timestamp da √∫ltima execu√ß√£o bem-sucedida

        Returns:
            datetime: Timestamp ou None
        """
        if REDIS_AVAILABLE:
            try:
                timestamp_str = redis_client.get(cls.REDIS_LAST_RUN_KEY)
                if timestamp_str:
                    return datetime.fromisoformat(timestamp_str)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao obter √∫ltima execu√ß√£o do Redis: {e}")

        return None

    @classmethod
    def _salvar_ultima_execucao(cls, timestamp: datetime):
        """
        Salva timestamp da √∫ltima execu√ß√£o bem-sucedida

        Args:
            timestamp: Momento da execu√ß√£o
        """
        if REDIS_AVAILABLE:
            try:
                redis_client.set(
                    cls.REDIS_LAST_RUN_KEY,
                    timestamp.isoformat(),
                    ex=86400  # Expira em 24 horas
                )
                logger.info("üíæ Timestamp salvo no Redis")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao salvar √∫ltima execu√ß√£o no Redis: {e}")

    @classmethod
    def executar_manualmente(cls, janela_minutos: int = None):
        """
        Permite execu√ß√£o manual com janela customizada

        Args:
            janela_minutos: Janela de busca em minutos (opcional)

        Returns:
            dict: Resultado da sincroniza√ß√£o
        """
        if janela_minutos:
            original = cls.JANELA_BUSCA
            cls.JANELA_BUSCA = janela_minutos
            logger.info(f"üîß Execu√ß√£o manual com janela de {janela_minutos} minutos")

        try:
            return cls.executar()
        finally:
            if janela_minutos:
                cls.JANELA_BUSCA = original


# Fun√ß√£o para registrar no scheduler
def registrar_job(scheduler):
    """
    Registra o job no APScheduler

    Args:
        scheduler: Inst√¢ncia do APScheduler
    """
    from apscheduler.triggers.interval import IntervalTrigger

    # Remover job existente se houver
    job_id = 'sincronizacao_incremental_carteira'

    existing_job = scheduler.get_job(job_id)
    if existing_job:
        scheduler.remove_job(job_id)
        logger.info(f"‚ôªÔ∏è Job existente '{job_id}' removido")

    # Adicionar novo job
    scheduler.add_job(
        func=SincronizacaoIncrementalJob.executar,
        trigger=IntervalTrigger(
            minutes=SincronizacaoIncrementalJob.INTERVALO_EXECUCAO
        ),
        id=job_id,
        name='Sincroniza√ß√£o Incremental Carteira-Odoo',
        replace_existing=True,
        max_instances=1,  # Apenas uma inst√¢ncia por vez
        misfire_grace_time=300  # 5 minutos de toler√¢ncia
    )

    logger.info(f"‚úÖ Job '{job_id}' registrado - execu√ß√£o a cada {SincronizacaoIncrementalJob.INTERVALO_EXECUCAO} minutos")

    # Executar primeira vez em 1 minuto
    from datetime import datetime, timedelta
    run_date = datetime.now() + timedelta(minutes=1)

    scheduler.add_job(
        func=SincronizacaoIncrementalJob.executar,
        trigger='date',
        run_date=run_date,
        id=f'{job_id}_inicial',
        name='Sincroniza√ß√£o Incremental (Primeira Execu√ß√£o)',
        replace_existing=True
    )

    logger.info(f"‚è∞ Primeira execu√ß√£o agendada para {run_date.strftime('%H:%M:%S')}")


if __name__ == "__main__":
    # Teste manual
    print("Executando sincroniza√ß√£o incremental manualmente...")
    resultado = SincronizacaoIncrementalJob.executar_manualmente()
    print(f"Resultado: {resultado}")