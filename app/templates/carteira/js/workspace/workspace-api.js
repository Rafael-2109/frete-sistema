/**
 * üåê WORKSPACE API MODULE
 * Centraliza todas as chamadas de API do workspace
 * Facilita manuten√ß√£o e adiciona tratamento de erro consistente
 */

class WorkspaceAPI {
    constructor() {
        this.baseUrl = '/carteira/api';
        this.abortControllers = new Map();
    }

    /**
     * üéØ BUSCAR DADOS DO WORKSPACE
     * Retorna produtos e informa√ß√µes do pedido
     */
    async buscarWorkspace(numPedido) {
        const response = await this.fetchWithAbort(
            `workspace_${numPedido}`,
            `${this.baseUrl}/pedido/${numPedido}/workspace`
        );
        
        const data = await response.json();
        
        if (!response.ok || !data.success) {
            throw new Error(data.error || 'Erro ao carregar workspace');
        }
        
        return data;
    }

    /**
     * üéØ BUSCAR PR√â-SEPARA√á√ïES
     * Retorna lotes de pr√©-separa√ß√£o existentes
     */
    async buscarPreSeparacoes(numPedido) {
        const response = await this.fetchWithAbort(
            `pre_separacoes_${numPedido}`,
            `${this.baseUrl}/pedido/${numPedido}/pre-separacoes`
        );
        
        const data = await response.json();
        return data;
    }

    /**
     * üéØ BUSCAR SEPARA√á√ïES CONFIRMADAS
     * Retorna separa√ß√µes j√° confirmadas do pedido
     */
    async buscarSeparacoes(numPedido) {
        const response = await this.fetchWithAbort(
            `separacoes_${numPedido}`,
            `${this.baseUrl}/pedido/${numPedido}/separacoes-completas`
        );
        
        const data = await response.json();
        return data;
    }

    /**
     * üéØ BUSCAR DADOS DE ESTOQUE (ASS√çNCRONO)
     * Carrega dados detalhados de estoque ap√≥s renderiza√ß√£o inicial
     * Implementa retry logic e timeout maior para evitar falhas
     */
    async buscarEstoqueAssincrono(numPedido, tentativa = 1, maxTentativas = 3) {
        try {
            const response = await this.fetchWithAbort(
                `estoque_${numPedido}`,
                `${this.baseUrl}/pedido/${numPedido}/workspace-estoque`,
                {
                    // Aumentar timeout para 30 segundos
                    timeout: 30000
                }
            );
            
            const data = await response.json();
            
            if (!response.ok || !data.success) {
                throw new Error(data.error || 'Erro ao carregar estoque');
            }
            
            return data;
        } catch (error) {
            console.warn(`‚ö†Ô∏è Tentativa ${tentativa} de ${maxTentativas} falhou para estoque do pedido ${numPedido}: ${error.message}`);
            
            // Se n√£o for a √∫ltima tentativa e n√£o for abort, tentar novamente
            if (tentativa < maxTentativas && error.name !== 'AbortError') {
                // Aguardar progressivamente antes de tentar novamente
                const delay = tentativa * 1000; // 1s, 2s, 3s
                console.log(`‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                
                return this.buscarEstoqueAssincrono(numPedido, tentativa + 1, maxTentativas);
            }
            
            // Se todas as tentativas falharam, lan√ßar o erro
            throw error;
        }
    }

    /**
     * üéØ ATUALIZAR DATAS DE SEPARA√á√ÉO
     * Atualiza expedi√ß√£o, agendamento e protocolo
     */
    async atualizarDatas(tipo, loteId, dados) {
        const endpoint = tipo === 'pre-separacao'
            ? `${this.baseUrl}/pre-separacao/${loteId}/atualizar-datas`
            : `${this.baseUrl}/separacao/${loteId}/atualizar-datas`;

        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(dados)
        });

        const data = await response.json();
        
        if (!response.ok || !data.success) {
            throw new Error(data.error || 'Erro ao atualizar datas');
        }
        
        return data;
    }

    /**
     * üéØ ADICIONAR PRODUTO AO LOTE
     * Adiciona ou atualiza produto em um lote de pr√©-separa√ß√£o
     */
    async adicionarProdutoLote(loteId, produto) {
        const response = await fetch(`${this.baseUrl}/pre-separacao/${loteId}/adicionar-produto`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(produto)
        });

        const data = await response.json();
        
        if (!response.ok || !data.success) {
            throw new Error(data.error || 'Erro ao adicionar produto');
        }
        
        return data;
    }

    /**
     * üéØ REMOVER PRODUTO DO LOTE
     * Remove produto de um lote de pr√©-separa√ß√£o
     */
    async removerProdutoLote(loteId, codProduto) {
        const response = await fetch(`${this.baseUrl}/pre-separacao/${loteId}/remover-produto`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ cod_produto: codProduto })
        });

        const data = await response.json();
        
        if (!response.ok || !data.success) {
            throw new Error(data.error || 'Erro ao remover produto');
        }
        
        return data;
    }

    /**
     * üéØ CONFIRMAR PR√â-SEPARA√á√ÉO
     * Transforma pr√©-separa√ß√£o em separa√ß√£o confirmada
     */
    async confirmarPreSeparacao(loteId) {
        const response = await fetch(`${this.baseUrl}/pre-separacao/${loteId}/confirmar`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        const data = await response.json();
        
        if (!response.ok || !data.success) {
            throw new Error(data.error || 'Erro ao confirmar pr√©-separa√ß√£o');
        }
        
        return data;
    }

    /**
     * üéØ EXCLUIR LOTE
     * Remove lote de pr√©-separa√ß√£o
     */
    async excluirLote(loteId) {
        const response = await fetch(`${this.baseUrl}/pre-separacao/${loteId}/excluir`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        const data = await response.json();
        
        if (!response.ok || !data.success) {
            throw new Error(data.error || 'Erro ao excluir lote');
        }
        
        return data;
    }

    /**
     * üõ†Ô∏è FETCH COM ABORT CONTROLLER E TIMEOUT
     * Permite cancelar requisi√ß√µes em andamento e configurar timeout
     */
    async fetchWithAbort(key, url, options = {}) {
        // REMOVIDO: N√£o cancelar requisi√ß√£o anterior para permitir m√∫ltiplos pedidos expandidos
        // Cada pedido deve carregar independentemente
        
        // Criar novo AbortController √∫nico para esta requisi√ß√£o
        const controller = new AbortController();
        const uniqueKey = `${key}_${Date.now()}_${Math.random()}`; // Chave √∫nica para cada requisi√ß√£o
        this.abortControllers.set(uniqueKey, controller);
        
        // Configurar timeout (padr√£o: 10 segundos, pode ser sobrescrito)
        const timeout = options.timeout || 10000;
        const timeoutId = setTimeout(() => {
            console.warn(`‚è±Ô∏è Timeout ap√≥s ${timeout}ms para ${url}`);
            controller.abort();
        }, timeout);

        try {
            console.log(`üì° WorkspaceAPI: Fazendo requisi√ß√£o para ${url} (timeout: ${timeout}ms)`);
            
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });

            // Verificar se a resposta √© HTML (erro 404 ou similar)
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('text/html')) {
                console.error(`‚ùå WorkspaceAPI: Recebeu HTML em vez de JSON de ${url}`);
                throw new Error(`Endpoint n√£o encontrado: ${url} retornou HTML em vez de JSON`);
            }

            // Limpar timeout e controller ap√≥s sucesso
            clearTimeout(timeoutId);
            this.abortControllers.delete(uniqueKey);
            
            return response;
        } catch (error) {
            clearTimeout(timeoutId);
            
            if (error.name === 'AbortError') {
                console.log(`Requisi√ß√£o ${uniqueKey} cancelada ou timeout`);
                // Melhorar mensagem de erro para timeout
                error.message = `Timeout na requisi√ß√£o para ${url}`;
            }
            // Limpar controller em caso de erro tamb√©m
            this.abortControllers.delete(uniqueKey);
            throw error;
        }
    }

    /**
     * üõë CANCELAR TODAS AS REQUISI√á√ïES
     * √ötil ao trocar de pedido ou limpar workspace
     */
    cancelarTodasRequisicoes() {
        this.abortControllers.forEach(controller => {
            controller.abort();
        });
        this.abortControllers.clear();
    }
}

// Disponibilizar globalmente
window.WorkspaceAPI = WorkspaceAPI;