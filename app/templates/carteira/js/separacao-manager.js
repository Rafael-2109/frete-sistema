/**
 * üéØ SEPARA√á√ÉO MANAGER
 * Gerencia cria√ß√£o e transforma√ß√£o de separa√ß√µes DEFINITIVAS
 * Para pr√©-separa√ß√µes, usar pre-separacao-manager.js
 */

class SeparacaoManager {
    constructor() {
        this.init();
    }

    init() {
        console.log('‚úÖ Separa√ß√£o Manager inicializado');
    }

    /**
     * üéØ CRIAR NOVA SEPARA√á√ÉO COMPLETA
     * CASO 1: Usado pelos bot√µes principais na carteira agrupada
     * Verifica se tem 1 pr√©-separa√ß√£o com tipo_envio completo, se tiver transforma em separa√ß√£o
     * Se n√£o tiver pr√©-separa√ß√£o, solicita a data de expedi√ß√£o e cria uma separa√ß√£o direto
     * Se tiver pr√©-separa√ß√£o parcial n√£o deixa criar por esse bot√£o
     */
    async criarSeparacaoCompleta(numPedido) {
        console.log(`üì¶ CASO 1: Criar separa√ß√£o completa para pedido ${numPedido}`);
        
        try {
            // Verificar se j√° existe lote completo com expedi√ß√£o
            const verificacaoResponse = await fetch(`/carteira/api/pedido/${numPedido}/verificar-lote`);
            
            if (!verificacaoResponse.ok) {
                // Se n√£o existe API de verifica√ß√£o, solicitar data de expedi√ß√£o diretamente
                await this.solicitarDataExpedicaoParaSeparacao(numPedido);
                return;
            }
            
            const verificacaoData = await verificacaoResponse.json();
            
            if (verificacaoData.lote_completo_com_expedicao) {
                // CASO 1a: Lote completo existe, confirmar transforma√ß√£o
                if (confirm(`Existe uma pr√©-separa√ß√£o completa para este pedido. Deseja transform√°-la em separa√ß√£o definitiva?`)) {
                    await this.transformarLoteEmSeparacao(numPedido, verificacaoData.lote_id);
                }
            } else if (verificacaoData.lote_parcial_existe) {
                // CASO 1b: Lote parcial existe, n√£o permitir
                alert('‚ùå Este pedido possui pr√©-separa√ß√£o parcial. N√£o √© poss√≠vel criar separa√ß√£o completa por este bot√£o.');
                return;
            } else {
                // CASO 1c: N√£o existe lote, solicitar data de expedi√ß√£o
                await this.solicitarDataExpedicaoParaSeparacao(numPedido);
            }
            
        } catch (error) {
            console.error('Erro ao verificar lote:', error);
            // Fallback: solicitar data de expedi√ß√£o diretamente
            await this.solicitarDataExpedicaoParaSeparacao(numPedido);
        }
    }

    /**
     * üéØ SOLICITAR DATA DE EXPEDI√á√ÉO E CRIAR SEPARA√á√ÉO
     */
    async solicitarDataExpedicaoParaSeparacao(numPedido) {
        const dataExpedicao = prompt('Digite a data de expedi√ß√£o (YYYY-MM-DD):');
        
        if (!dataExpedicao) {
            return; // Usu√°rio cancelou
        }
        
        // Validar formato da data
        if (!/^\d{4}-\d{2}-\d{2}$/.test(dataExpedicao)) {
            alert('Formato de data inv√°lido. Use YYYY-MM-DD');
            return;
        }
        
        try {
            const response = await fetch(`/carteira/api/pedido/${numPedido}/gerar-separacao-completa`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    expedicao: dataExpedicao
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                alert(`Separa√ß√£o criada com sucesso! ${data.separacoes_criadas} produtos separados.`);
                // Recarregar p√°gina para atualizar contadores
                location.reload();
            } else {
                alert(`Erro ao criar separa√ß√£o: ${data.error}`);
            }
            
        } catch (error) {
            console.error('Erro ao criar separa√ß√£o:', error);
            alert('Erro interno ao criar separa√ß√£o');
        }
    }

    /**
     * üéØ TRANSFORMAR LOTE EM SEPARA√á√ÉO
     * CASO 2: Usado dentro do workspace nos lotes existentes
     * Transforma uma pr√©-separa√ß√£o em separa√ß√£o atrav√©s de um bot√£o na pr√©-separa√ß√£o
     */
    async transformarLoteEmSeparacao(numPedido, loteId) {
        console.log(`üîÑ CASO 2: Transformar lote ${loteId} em separa√ß√£o`);
        
        try {
            const response = await fetch(`/carteira/api/lote/${loteId}/transformar-separacao`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                alert(`‚úÖ Lote transformado em separa√ß√£o com sucesso!\n${data.separacoes_criadas} produtos processados.`);
                // Recarregar p√°gina para atualizar contadores
                location.reload();
            } else {
                alert(`‚ùå Erro ao transformar lote: ${data.error}`);
            }
            
        } catch (error) {
            console.error('Erro ao transformar lote:', error);
            alert('‚ùå Erro interno ao transformar lote em separa√ß√£o');
        }
    }

    /**
     * üéØ CONFIRMAR TRANSFORMA√á√ÉO DE LOTE
     * Modal de confirma√ß√£o para transformar lote espec√≠fico
     */
    async confirmarTransformacaoLote(loteId) {
        if (confirm(`Deseja transformar o lote ${loteId} em separa√ß√£o?`)) {
            await this.transformarLoteEmSeparacao(null, loteId);
        }
    }

    /**
     * üéØ REMOVER SEPARA√á√ïES INV√ÅLIDAS
     * Remove qualquer separa√ß√£o que n√£o fa√ßa parte dos 3 casos v√°lidos
     */
    async removerSeparacoesInvalidas() {
        console.log('üßπ Verificando separa√ß√µes inv√°lidas...');
        
        // Esta fun√ß√£o seria implementada para limpar separa√ß√µes que n√£o seguem os 3 casos
        // Por enquanto, apenas log para n√£o afetar o sistema em produ√ß√£o
        console.log('‚ö†Ô∏è Fun√ß√£o de limpeza n√£o implementada - usar com cuidado em produ√ß√£o');
    }
}

// üéØ FUN√á√ïES GLOBAIS PARA ONCLICK
function criarSeparacao(numPedido) {
    if (window.separacaoManager) {
        window.separacaoManager.criarSeparacaoCompleta(numPedido);
    } else {
        console.error('‚ùå Separa√ß√£o Manager n√£o inicializado');
    }
}

function transformarLote(loteId) {
    if (window.separacaoManager) {
        window.separacaoManager.confirmarTransformacaoLote(loteId);
    } else {
        console.error('‚ùå Separa√ß√£o Manager n√£o inicializado');
    }
}


// Disponibilizar globalmente
window.SeparacaoManager = SeparacaoManager;

// Inicializar inst√¢ncia global
document.addEventListener('DOMContentLoaded', function() {
    if (!window.separacaoManager) {
        window.separacaoManager = new SeparacaoManager();
        console.log('‚úÖ Separa√ß√£o Manager Global inicializado');
    }
});