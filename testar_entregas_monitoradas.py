#!/usr/bin/env python3
"""
Teste para verificar problemas na p√°gina de Entregas Monitoradas

Este script testa:
1. Acesso aos dados de EntregaMonitorada
2. Poss√≠veis problemas de sess√£o SQLAlchemy
3. Queries que podem estar causando erro 500

Uso: python testar_entregas_monitoradas.py
"""

import sys
import os

project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

from app import create_app, db
from app.monitoramento.models import EntregaMonitorada, AgendamentoEntrega
from app.cadastros_agendamento.models import ContatoAgendamento
from sqlalchemy import func
from datetime import date

def testar_entregas_monitoradas():
    """Testa o acesso √† p√°gina de entregas monitoradas"""
    
    app = create_app()
    
    with app.app_context():
        print("üß™ TESTE: P√ÅGINA ENTREGAS MONITORADAS")
        print("=" * 60)
        
        try:
            # 1. Teste b√°sico de query
            print("\n1Ô∏è‚É£ TESTE: Query b√°sica de entregas")
            entregas = EntregaMonitorada.query.limit(5).all()
            print(f"   ‚úÖ Encontradas {len(entregas)} entregas")
            
            for entrega in entregas:
                try:
                    # Testa acesso aos atributos b√°sicos
                    nf = entrega.numero_nf
                    cliente = entrega.cliente
                    cnpj = entrega.cnpj_cliente
                    print(f"   ‚úÖ NF {nf} - {cliente}")
                except Exception as e:
                    print(f"   ‚ùå Erro ao acessar entrega {getattr(entrega, 'id', 'N/A')}: {e}")
        
        except Exception as e:
            print(f"   ‚ùå ERRO na query b√°sica: {e}")
            return False
        
        try:
            # 2. Teste de filtros comuns
            print("\n2Ô∏è‚É£ TESTE: Filtros da p√°gina")
            
            # Teste filtro pendentes
            pendentes = EntregaMonitorada.query.filter(EntregaMonitorada.entregue == False).count()
            print(f"   ‚úÖ Entregas pendentes: {pendentes}")
            
            # Teste filtro entregues
            entregues = EntregaMonitorada.query.filter(EntregaMonitorada.entregue == True).count()
            print(f"   ‚úÖ Entregas entregues: {entregues}")
            
            # Teste filtro atrasadas
            atrasadas = EntregaMonitorada.query.filter(
                EntregaMonitorada.entregue == False,
                EntregaMonitorada.data_entrega_prevista != None,
                EntregaMonitorada.data_entrega_prevista < date.today()
            ).count()
            print(f"   ‚úÖ Entregas atrasadas: {atrasadas}")
            
        except Exception as e:
            print(f"   ‚ùå ERRO nos filtros: {e}")
            return False
        
        try:
            # 3. Teste de relacionamentos
            print("\n3Ô∏è‚É£ TESTE: Relacionamentos e joins")
            
            # Teste join com agendamentos
            with_agendamentos = db.session.query(EntregaMonitorada).join(AgendamentoEntrega).count()
            print(f"   ‚úÖ Entregas com agendamentos: {with_agendamentos}")
            
            # Teste subquery de agendamentos
            subquery = db.session.query(AgendamentoEntrega.entrega_id).distinct()
            cnpjs_agendamento = db.session.query(ContatoAgendamento.cnpj).all()
            print(f"   ‚úÖ CNPJs com contato de agendamento: {len(cnpjs_agendamento)}")
            
        except Exception as e:
            print(f"   ‚ùå ERRO nos relacionamentos: {e}")
            return False
        
        try:
            # 4. Teste de agrupamento (similar ao da p√°gina)
            print("\n4Ô∏è‚É£ TESTE: Agrupamento por status")
            
            # Testa a l√≥gica de agrupamento da p√°gina
            cnpjs_com_agendamento = {c.cnpj for c in ContatoAgendamento.query.all()}
            
            entregas_teste = EntregaMonitorada.query.limit(10).all()
            
            grupos = {
                'atrasadas': [],
                'sem_agendamento': [],
                'sem_previsao': [],
                'pendentes': [],
                'entregues': []
            }
            
            for e in entregas_teste:
                try:
                    if e.entregue:
                        grupos['entregues'].append(e)
                    elif e.cnpj_cliente in cnpjs_com_agendamento and len(e.agendamentos) == 0:
                        grupos['sem_agendamento'].append(e)
                    elif e.data_entrega_prevista and e.data_entrega_prevista < date.today():
                        grupos['atrasadas'].append(e)
                    elif not e.data_entrega_prevista:
                        grupos['sem_previsao'].append(e)
                    else:
                        grupos['pendentes'].append(e)
                except Exception as e_inner:
                    print(f"   ‚ùå Erro ao agrupar entrega {getattr(e, 'id', 'N/A')}: {e_inner}")
            
            for grupo, lista in grupos.items():
                print(f"   ‚úÖ {grupo}: {len(lista)} entregas")
                
        except Exception as e:
            print(f"   ‚ùå ERRO no agrupamento: {e}")
            return False
        
        try:
            # 5. Teste de ordena√ß√£o
            print("\n5Ô∏è‚É£ TESTE: Ordena√ß√£o")
            
            # Teste ordena√ß√£o por diferentes campos
            campos_ordenacao = [
                EntregaMonitorada.numero_nf,
                EntregaMonitorada.cliente,
                EntregaMonitorada.data_faturamento,
                EntregaMonitorada.criado_em
            ]
            
            for campo in campos_ordenacao:
                try:
                    query_test = EntregaMonitorada.query.order_by(campo.desc()).limit(1)
                    resultado = query_test.first()
                    print(f"   ‚úÖ Ordena√ß√£o por {campo.name}: OK")
                except Exception as e_order:
                    print(f"   ‚ùå Erro na ordena√ß√£o por {campo.name}: {e_order}")
                    
        except Exception as e:
            print(f"   ‚ùå ERRO na ordena√ß√£o: {e}")
            return False
        
        try:
            # 6. Teste de pagina√ß√£o
            print("\n6Ô∏è‚É£ TESTE: Pagina√ß√£o")
            
            paginacao = EntregaMonitorada.query.paginate(page=1, per_page=20, error_out=False)
            print(f"   ‚úÖ P√°gina 1: {len(paginacao.items)} itens")
            print(f"   ‚úÖ Total de p√°ginas: {paginacao.pages}")
            print(f"   ‚úÖ Total de itens: {paginacao.total}")
            
        except Exception as e:
            print(f"   ‚ùå ERRO na pagina√ß√£o: {e}")
            return False
        
        print("\nüìà RESULTADO FINAL:")
        print("‚úÖ Todos os testes passaram! A p√°gina de Entregas Monitoradas deve funcionar.")
        print("\nüí° Se ainda h√° erro 500, pode ser:")
        print("   1. Problema no template HTML")
        print("   2. Erro em algum filtro espec√≠fico aplicado pelo usu√°rio")
        print("   3. Problema de permiss√£o ou autentica√ß√£o")
        print("   4. Erro no JavaScript da p√°gina")
        
        return True

if __name__ == "__main__":
    testar_entregas_monitoradas() 