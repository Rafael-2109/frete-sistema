#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para Normalizar Nomes de Tabelas nas Tabelas de Frete
============================================================

Este script converte todos os nomes de tabelas na tabela 'tabelas_frete' 
para MAI√öSCULA, garantindo compatibilidade com os v√≠nculos.
"""

import sys
from app import create_app, db
from app.tabelas.models import TabelaFrete
from app.vinculos.models import CidadeAtendida

def normalizar_nomes_tabelas_frete():
    """Normaliza todos os nomes de tabelas para mai√∫scula na tabela tabelas_frete"""
    
    app = create_app()
    
    with app.app_context():
        print("üîß === NORMALIZA√á√ÉO DE NOMES DE TABELAS (TABELAS_FRETE) ===")
        
        # 1. Buscar todas as tabelas de frete
        tabelas = TabelaFrete.query.all()
        total_tabelas = len(tabelas)
        
        print(f"üìä Total de tabelas de frete encontradas: {total_tabelas}")
        
        if total_tabelas == 0:
            print("‚ö†Ô∏è Nenhuma tabela de frete encontrada.")
            return
        
        # 2. Analisar estado atual
        tabelas_minuscula = 0
        tabelas_maiuscula = 0
        
        for tabela in tabelas:
            if tabela.nome_tabela != tabela.nome_tabela.upper():
                tabelas_minuscula += 1
            else:
                tabelas_maiuscula += 1
        
        print(f"üìà Tabelas em mai√∫scula: {tabelas_maiuscula}")
        print(f"üìâ Tabelas em min√∫scula/misto: {tabelas_minuscula}")
        
        if tabelas_minuscula == 0:
            print("‚úÖ Todas as tabelas j√° est√£o em mai√∫scula!")
            return
        
        # 3. Confirmar execu√ß√£o
        print(f"\nüîÑ Ser√° feita a convers√£o de {tabelas_minuscula} tabelas para MAI√öSCULA.")
        print("‚ö†Ô∏è Esta opera√ß√£o √© irrevers√≠vel!")
        
        confirmacao = input("Deseja continuar? (digite 'SIM' para confirmar): ").strip().upper()
        
        if confirmacao != 'SIM':
            print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
            return
        
        # 4. Executar normaliza√ß√£o
        print("\nüîß Iniciando normaliza√ß√£o...")
        
        contador_alterados = 0
        contador_erros = 0
        
        for tabela in tabelas:
            try:
                nome_original = tabela.nome_tabela
                nome_normalizado = nome_original.upper().strip()
                
                if nome_original != nome_normalizado:
                    tabela.nome_tabela = nome_normalizado
                    contador_alterados += 1
                    
                    if contador_alterados % 100 == 0:
                        print(f"üíæ {contador_alterados} tabelas processadas...")
                        
            except Exception as e:
                print(f"‚ùå Erro na tabela ID {tabela.id}: {e}")
                contador_erros += 1
        
        # 5. Salvar altera√ß√µes
        try:
            db.session.commit()
            print("‚úÖ Altera√ß√µes salvas no banco de dados!")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao salvar: {e}")
            return
        
        # 6. Relat√≥rio final
        print("\nüìä === RELAT√ìRIO FINAL ===")
        print(f"‚úÖ Tabelas alteradas: {contador_alterados}")
        print(f"‚ö†Ô∏è Erros encontrados: {contador_erros}")
        print(f"üìà Total processado: {total_tabelas}")
        
        # 7. Verifica√ß√£o p√≥s-normaliza√ß√£o - compatibilidade com v√≠nculos
        print("\nüîç Verificando compatibilidade com v√≠nculos...")
        
        # Conta tabelas que agora T√äM v√≠nculos compat√≠veis
        tabelas_com_vinculo = db.session.query(TabelaFrete.transportadora_id, TabelaFrete.nome_tabela).join(
            CidadeAtendida,
            db.and_(
                CidadeAtendida.transportadora_id == TabelaFrete.transportadora_id,
                CidadeAtendida.nome_tabela == TabelaFrete.nome_tabela
            )
        ).distinct().count()
        
        # Conta total de combina√ß√µes √∫nicas de tabelas
        total_combinacoes = db.session.query(TabelaFrete.transportadora_id, TabelaFrete.nome_tabela).distinct().count()
        
        tabelas_orfas = total_combinacoes - tabelas_com_vinculo
        
        print(f"üìä Combina√ß√µes de tabelas com v√≠nculos: {tabelas_com_vinculo}")
        print(f"üìä Combina√ß√µes de tabelas √≥rf√£s: {tabelas_orfas}")
        print(f"üìä Percentual com v√≠nculos: {(tabelas_com_vinculo/total_combinacoes*100):.1f}%")
        
        # 8. Sugest√£o baseada no resultado
        if tabelas_orfas > 0:
            print(f"\nüí° PR√ìXIMOS PASSOS:")
            print(f"   1. Execute tamb√©m: python normalizar_nomes_tabelas.py (para v√≠nculos)")
            print(f"   2. Verifique se os v√≠nculos est√£o importados corretamente")
            print(f"   3. {tabelas_orfas} tabelas ainda est√£o √≥rf√£s - pode ser necess√°rio importar v√≠nculos")
        
        print("\nüéâ Normaliza√ß√£o de tabelas de frete conclu√≠da com sucesso!")

def verificar_compatibilidade():
    """Verifica compatibilidade entre nomes de tabelas e v√≠nculos"""
    
    app = create_app()
    
    with app.app_context():
        print("üîç === VERIFICA√á√ÉO DE COMPATIBILIDADE ===")
        
        # Busca diferen√ßas de case entre tabelas e v√≠nculos
        print("\nüìã Analisando diferen√ßas de case...")
        
        # Tabelas de frete com case misturado
        tabelas_case_problema = db.session.query(TabelaFrete).filter(
            TabelaFrete.nome_tabela != db.func.upper(TabelaFrete.nome_tabela)
        ).distinct(TabelaFrete.nome_tabela).all()
        
        if tabelas_case_problema:
            print(f"üìâ Tabelas de frete com case n√£o-mai√∫scula:")
            for t in tabelas_case_problema[:10]:  # Mostra apenas 10 exemplos
                print(f"   ‚Ä¢ '{t.nome_tabela}' -> '{t.nome_tabela.upper()}'")
            if len(tabelas_case_problema) > 10:
                print(f"   ... e mais {len(tabelas_case_problema) - 10} tabelas")
        
        # V√≠nculos com case misturado
        vinculos_case_problema = db.session.query(CidadeAtendida).filter(
            CidadeAtendida.nome_tabela != db.func.upper(CidadeAtendida.nome_tabela)
        ).distinct(CidadeAtendida.nome_tabela).all()
        
        if vinculos_case_problema:
            print(f"üìâ V√≠nculos com case n√£o-mai√∫scula:")
            for v in vinculos_case_problema[:10]:  # Mostra apenas 10 exemplos
                print(f"   ‚Ä¢ '{v.nome_tabela}' -> '{v.nome_tabela.upper()}'")
            if len(vinculos_case_problema) > 10:
                print(f"   ... e mais {len(vinculos_case_problema) - 10} v√≠nculos")
        
        # Estat√≠sticas finais
        total_problemas = len(tabelas_case_problema) + len(vinculos_case_problema)
        
        print(f"\nüìä RESUMO:")
        print(f"   ‚Ä¢ Tabelas de frete com problema de case: {len(tabelas_case_problema)}")
        print(f"   ‚Ä¢ V√≠nculos com problema de case: {len(vinculos_case_problema)}")
        print(f"   ‚Ä¢ Total de problemas: {total_problemas}")
        
        if total_problemas > 0:
            print(f"\nüí° RECOMENDA√á√ÉO:")
            if len(tabelas_case_problema) > 0:
                print(f"   1. Execute: python normalizar_nomes_tabelas_frete.py")
            if len(vinculos_case_problema) > 0:
                print(f"   2. Execute: python normalizar_nomes_tabelas.py")
        else:
            print(f"\n‚úÖ Todos os nomes est√£o em mai√∫scula! Sistema consistente.")

if __name__ == "__main__":
    print("üîß Normalizador de Nomes de Tabelas de Frete")
    print("Este script converter√° todos os nomes de tabelas nas TABELAS DE FRETE para MAI√öSCULA")
    print("-" * 80)
    
    if len(sys.argv) > 1 and sys.argv[1] == "--verificar":
        verificar_compatibilidade()
    else:
        print("1. Verificando compatibilidade atual...")
        verificar_compatibilidade()
        
        print("\n2. Executando normaliza√ß√£o...")
        normalizar_nomes_tabelas_frete() 