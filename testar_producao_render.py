#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
üåê TESTE DO SISTEMA EM PRODU√á√ÉO - RENDER
Testa funcionalidades do Claude AI em produ√ß√£o
"""

import requests
import json
from datetime import datetime
from colorama import init, Fore, Style

# Inicializar colorama
init()

# URL de produ√ß√£o
PROD_URL = "https://sistema-fretes.onrender.com"

class TestadorProducao:
    """Testa sistema em produ√ß√£o no Render"""
    
    def __init__(self):
        self.session = requests.Session()
        self.resultados = []
        
    def testar_disponibilidade(self):
        """Testa se o sistema est√° online"""
        print(f"\n{Fore.CYAN}üåê TESTE 1: Disponibilidade do Sistema{Style.RESET_ALL}")
        
        try:
            response = self.session.get(PROD_URL, timeout=10)
            if response.status_code == 200:
                print(f"{Fore.GREEN}‚úÖ Sistema online em produ√ß√£o!{Style.RESET_ALL}")
                print(f"   URL: {PROD_URL}")
                return True
            else:
                print(f"{Fore.RED}‚ùå Sistema retornou status: {response.status_code}{Style.RESET_ALL}")
                return False
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erro ao acessar sistema: {e}{Style.RESET_ALL}")
            return False
    
    def testar_rotas_claude(self):
        """Testa rotas do Claude AI"""
        print(f"\n{Fore.CYAN}ü§ñ TESTE 2: Rotas Claude AI{Style.RESET_ALL}")
        
        rotas = [
            ("/claude-ai/", "Claude AI Principal"),
            ("/claude-ai/dashboard-executivo", "Dashboard Executivo"),
            ("/claude-ai/dashboard", "Dashboard MCP"),
            ("/claude-ai/advanced-dashboard", "Dashboard Avan√ßado"),
            ("/claude-ai/advanced-feedback-interface", "Interface Feedback")
        ]
        
        sucesso = 0
        for rota, nome in rotas:
            try:
                response = self.session.get(f"{PROD_URL}{rota}", timeout=10)
                # 302 = redirect para login (normal para rotas protegidas)
                if response.status_code in [200, 302]:
                    print(f"{Fore.GREEN}‚úÖ {nome}: OK (Status: {response.status_code}){Style.RESET_ALL}")
                    sucesso += 1
                else:
                    print(f"{Fore.RED}‚ùå {nome}: Erro {response.status_code}{Style.RESET_ALL}")
            except Exception as e:
                print(f"{Fore.RED}‚ùå {nome}: Timeout/Erro{Style.RESET_ALL}")
        
        print(f"\nüìä Rotas funcionais: {sucesso}/{len(rotas)}")
        return sucesso == len(rotas)
    
    def testar_api_endpoints(self):
        """Testa endpoints da API"""
        print(f"\n{Fore.CYAN}üîå TESTE 3: API Endpoints{Style.RESET_ALL}")
        
        # Nota: Alguns endpoints podem requerer autentica√ß√£o
        endpoints = [
            ("/claude-ai/api/health", "Health Check"),
            ("/claude-ai/api/suggestions", "Sugest√µes"),
            ("/claude-ai/api/advanced-analytics", "Analytics")
        ]
        
        for endpoint, nome in endpoints:
            try:
                response = self.session.get(f"{PROD_URL}{endpoint}", timeout=10)
                if response.status_code in [200, 401, 302]:  # 401/302 = precisa login
                    print(f"{Fore.GREEN}‚úÖ {nome}: Endpoint existe (Status: {response.status_code}){Style.RESET_ALL}")
                else:
                    print(f"{Fore.YELLOW}‚ö†Ô∏è {nome}: Status {response.status_code}{Style.RESET_ALL}")
            except Exception as e:
                print(f"{Fore.RED}‚ùå {nome}: Erro de conex√£o{Style.RESET_ALL}")
    
    def info_producao(self):
        """Mostra informa√ß√µes sobre o ambiente de produ√ß√£o"""
        print(f"\n{Fore.CYAN}üìã INFORMA√á√ïES DE PRODU√á√ÉO{Style.RESET_ALL}")
        print(f"{Fore.CYAN}{'='*50}{Style.RESET_ALL}")
        
        print(f"\nüåê URL Base: {Fore.BLUE}{PROD_URL}{Style.RESET_ALL}")
        print(f"\nüìç URLs Importantes:")
        print(f"   ‚Ä¢ Login: {PROD_URL}/login")
        print(f"   ‚Ä¢ Claude AI: {PROD_URL}/claude-ai/real")
        print(f"   ‚Ä¢ Dashboard: {PROD_URL}/claude-ai/dashboard-executivo")
        print(f"   ‚Ä¢ Feedback: {PROD_URL}/claude-ai/advanced-feedback-interface")
        
        print(f"\n‚öôÔ∏è Configura√ß√µes Esperadas:")
        print(f"   ‚Ä¢ ANTHROPIC_API_KEY: Configurada no Render")
        print(f"   ‚Ä¢ PostgreSQL: Banco de produ√ß√£o")
        print(f"   ‚Ä¢ Redis: Se dispon√≠vel")
        print(f"   ‚Ä¢ SSL: HTTPS ativo")
        
        print(f"\nüîê Autentica√ß√£o:")
        print(f"   ‚Ä¢ Sistema requer login")
        print(f"   ‚Ä¢ CSRF tokens ativos")
        print(f"   ‚Ä¢ Sess√µes persistentes")

def main():
    """Fun√ß√£o principal"""
    print(f"{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üåê TESTE EM PRODU√á√ÉO - SISTEMA CLAUDE AI{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
    print(f"\nüîó Testando: {Fore.YELLOW}{PROD_URL}{Style.RESET_ALL}")
    
    testador = TestadorProducao()
    
    # Executar testes
    online = testador.testar_disponibilidade()
    
    if online:
        testador.testar_rotas_claude()
        testador.testar_api_endpoints()
    
    # Informa√ß√µes
    testador.info_producao()
    
    # Instru√ß√µes finais
    print(f"\n{Fore.CYAN}üß™ PR√ìXIMOS PASSOS:{Style.RESET_ALL}")
    print(f"\n1. Fa√ßa login no sistema:")
    print(f"   {Fore.BLUE}{PROD_URL}/login{Style.RESET_ALL}")
    
    print(f"\n2. Teste o Claude AI:")
    print(f"   {Fore.BLUE}{PROD_URL}/claude-ai/real{Style.RESET_ALL}")
    
    print(f"\n3. Execute testes manuais:")
    print(f"   ‚Ä¢ Fa√ßa consultas variadas")
    print(f"   ‚Ä¢ Teste grupos empresariais (Assai, Atacad√£o)")
    print(f"   ‚Ä¢ Gere relat√≥rios Excel")
    print(f"   ‚Ä¢ Envie feedback (positivo/negativo)")
    
    print(f"\n4. Para testes automatizados com login:")
    print(f"   {Fore.YELLOW}python testar_claude_ai_completo.py --prod{Style.RESET_ALL}")
    print(f"   {Fore.YELLOW}python testar_human_in_loop_web.py --prod{Style.RESET_ALL}")
    
    print(f"\n{Fore.GREEN}‚úÖ Teste de produ√ß√£o conclu√≠do!{Style.RESET_ALL}")

if __name__ == "__main__":
    main() 