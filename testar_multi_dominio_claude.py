#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste da Nova Funcionalidade Multi-Dom√≠nio do Claude AI
Valida se o sistema consegue acessar m√∫ltiplas tabelas simultaneamente
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.claude_ai.claude_real_integration import ClaudeRealIntegration
import json

def testar_deteccao_multi_dominio():
    """Testa a detec√ß√£o de consultas multi-dom√≠nio"""
    print("üß™ TESTE 1: Detec√ß√£o de Consultas Multi-Dom√≠nio")
    print("=" * 60)
    
    claude = ClaudeRealIntegration()
    
    # Consultas que devem ativar multi-dom√≠nio
    consultas_multi = [
        "status geral do sistema",
        "an√°lise completa dos dados",
        "resumo completo de todas as informa√ß√µes", 
        "relat√≥rio geral de entregas e fretes",
        "como est√° tudo no sistema",
        "dados completos dos clientes",
        "vis√£o 360 do sistema"
    ]
    
    # Consultas que devem ser dom√≠nio √∫nico
    consultas_single = [
        "entregas do Assai",
        "fretes pendentes de aprova√ß√£o",
        "pedidos abertos para cota√ß√£o",
        "embarques aguardando sa√≠da"
    ]
    
    print("\n‚úÖ CONSULTAS MULTI-DOM√çNIO:")
    for consulta in consultas_multi:
        analise = claude._analisar_consulta(consulta)
        multi_dominio = analise.get("multi_dominio", False)
        dominios = analise.get("dominios_solicitados", [])
        status = "‚úÖ MULTI" if multi_dominio else "‚ùå SINGLE"
        print(f"   {status} | '{consulta}' ‚Üí {len(dominios)} dom√≠nios: {dominios}")
    
    print("\nüéØ CONSULTAS DOM√çNIO √öNICO:")
    for consulta in consultas_single:
        analise = claude._analisar_consulta(consulta)
        multi_dominio = analise.get("multi_dominio", False)
        dominio = analise.get("dominio", "")
        status = "‚úÖ SINGLE" if not multi_dominio else "‚ùå MULTI"
        print(f"   {status} | '{consulta}' ‚Üí Dom√≠nio: {dominio}")

def testar_carregamento_dados():
    """Testa o carregamento de dados multi-dom√≠nio"""
    print("\n\nüß™ TESTE 2: Carregamento de Dados Multi-Dom√≠nio")
    print("=" * 60)
    
    claude = ClaudeRealIntegration()
    
    # Simular an√°lise multi-dom√≠nio
    analise_multi = {
        "tipo_consulta": "analise_completa",
        "multi_dominio": True,
        "dominios_solicitados": ["entregas", "pedidos", "fretes"],
        "periodo_dias": 30,
        "cliente_especifico": None
    }
    
    print("üìä Carregando dados de m√∫ltiplos dom√≠nios...")
    try:
        contexto = claude._carregar_contexto_inteligente(analise_multi)
        
        dados_especificos = contexto.get("dados_especificos", {})
        total_registros = contexto.get("registros_carregados", 0)
        
        print(f"\n‚úÖ RESULTADO:")
        print(f"   Total de registros carregados: {total_registros}")
        print(f"   Dom√≠nios carregados: {len(dados_especificos)}")
        
        for dominio, dados in dados_especificos.items():
            count = dados.get("registros_carregados") or dados.get("total_registros", 0)
            print(f"   ‚Ä¢ {dominio.title()}: {count} registros")
            
        if len(dados_especificos) >= 2:
            print("\nüéâ SUCESSO: Sistema conseguiu carregar m√∫ltiplas tabelas!")
        else:
            print("\n‚ùå FALHA: Sistema carregou apenas 1 dom√≠nio")
            
    except Exception as e:
        print(f"\n‚ùå ERRO no carregamento: {e}")

def testar_analise_dominio():
    """Testa a detec√ß√£o autom√°tica de m√∫ltiplos dom√≠nios"""
    print("\n\nüß™ TESTE 3: Detec√ß√£o Autom√°tica de M√∫ltiplos Dom√≠nios")
    print("=" * 60)
    
    claude = ClaudeRealIntegration()
    
    # Consulta que menciona m√∫ltiplos dom√≠nios
    consulta_mixed = "Como est√£o os fretes e entregas do Assai? E os pedidos pendentes?"
    
    print(f"üìù Consulta: '{consulta_mixed}'")
    
    analise = claude._analisar_consulta(consulta_mixed)
    
    print(f"\nüìä AN√ÅLISE:")
    print(f"   Tipo: {analise.get('tipo_consulta')}")
    print(f"   Multi-dom√≠nio: {analise.get('multi_dominio')}")
    print(f"   Dom√≠nio principal: {analise.get('dominio')}")
    print(f"   Dom√≠nios solicitados: {analise.get('dominios_solicitados', [])}")
    print(f"   Cliente detectado: {analise.get('cliente_especifico')}")
    
    if analise.get("multi_dominio"):
        print("\nüéâ SUCESSO: Detectou consulta multi-dom√≠nio automaticamente!")
    else:
        print("\n‚ö†Ô∏è INFO: Consulta classificada como dom√≠nio √∫nico")

def testar_descricao_contexto():
    """Testa a descri√ß√£o do contexto multi-dom√≠nio"""
    print("\n\nüß™ TESTE 4: Descri√ß√£o do Contexto Multi-Dom√≠nio")
    print("=" * 60)
    
    claude = ClaudeRealIntegration()
    
    # Simular dados carregados
    claude._ultimo_contexto_carregado = {
        "dados_especificos": {
            "entregas": {
                "total_registros": 150,
                "registros_carregados": 150
            },
            "pedidos": {
                "registros_carregados": 75,
                "pedidos": {
                    "estatisticas": {
                        "pedidos_abertos": 25,
                        "pedidos_cotados": 30,
                        "pedidos_faturados": 20,
                        "valor_total": 250000.50
                    }
                }
            },
            "fretes": {
                "registros_carregados": 90,
                "fretes": {
                    "estatisticas": {
                        "fretes_aprovados": 60,
                        "fretes_pendentes": 20,
                        "fretes_pagos": 10,
                        "valor_total_cotado": 180000.75,
                        "valor_total_pago": 120000.25
                    }
                }
            }
        },
        "registros_carregados": 315
    }
    
    analise_multi = {
        "multi_dominio": True,
        "dominios_solicitados": ["entregas", "pedidos", "fretes"],
        "periodo_dias": 30
    }
    
    descricao = claude._descrever_contexto_carregado(analise_multi)
    
    print("üìù DESCRI√á√ÉO GERADA:")
    print("-" * 40)
    print(descricao)
    print("-" * 40)
    
    # Verificar se cont√©m informa√ß√µes de m√∫ltiplos dom√≠nios
    if all(dominio in descricao for dominio in ["ENTREGAS", "PEDIDOS", "FRETES"]):
        print("\nüéâ SUCESSO: Descri√ß√£o inclui informa√ß√µes de m√∫ltiplos dom√≠nios!")
    else:
        print("\n‚ùå FALHA: Descri√ß√£o n√£o inclui todos os dom√≠nios esperados")

def main():
    """Executa todos os testes"""
    print("üöÄ TESTE DA FUNCIONALIDADE MULTI-DOM√çNIO DO CLAUDE AI")
    print("=" * 70)
    print("Objetivo: Validar se o Claude consegue acessar m√∫ltiplas tabelas")
    print("=" * 70)
    
    try:
        # Executar todos os testes
        testar_deteccao_multi_dominio()
        testar_carregamento_dados()
        testar_analise_dominio()
        testar_descricao_contexto()
        
        print("\n\n" + "=" * 70)
        print("‚úÖ TESTES CONCLU√çDOS!")
        print("=" * 70)
        print("\nüí° COMO TESTAR NO SISTEMA:")
        print("   1. Acesse o Claude AI no sistema")
        print("   2. Digite: 'status geral do sistema'")
        print("   3. Verifique se a resposta inclui dados de m√∫ltiplas tabelas")
        print("   4. Digite: 'an√°lise completa dos dados'")
        print("   5. Confirme se consegue ver entregas + pedidos + fretes")
        
        print("\nüéØ COMANDOS PARA TESTAR:")
        print("   ‚Ä¢ 'resumo completo de todas as informa√ß√µes'")
        print("   ‚Ä¢ 'como est√° tudo no sistema'")
        print("   ‚Ä¢ 'dados completos dos clientes'")
        print("   ‚Ä¢ 'vis√£o 360 do sistema'")
        
        
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE OS TESTES: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 