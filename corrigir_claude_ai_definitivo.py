#!/usr/bin/env python3
"""
üîß SCRIPT DEFINITIVO PARA CORRIGIR PROBLEMAS DO CLAUDE AI
Resolve TODOS os problemas identificados nos logs de erro
"""

import os
import sys
import traceback
from pathlib import Path
import subprocess
import json

def main():
    """Fun√ß√£o principal que executa todas as corre√ß√µes"""
    print("üöÄ INICIANDO CORRE√á√ïES DEFINITIVAS DO CLAUDE AI")
    print("=" * 80)
    
    problemas_resolvidos = 0
    
    try:
        # 1. Corrigir problema de encoding UTF-8
        print("\nüîß 1. CORRIGINDO ENCODING UTF-8...")
        if corrigir_encoding_utf8():
            print("‚úÖ Encoding UTF-8 corrigido!")
            problemas_resolvidos += 1
        else:
            print("‚ùå Falha ao corrigir encoding UTF-8")
        
        # 2. Corrigir imports SQLAlchemy
        print("\nüîß 2. CORRIGINDO IMPORTS SQLALCHEMY...")
        if corrigir_imports_sqlalchemy():
            print("‚úÖ Imports SQLAlchemy corrigidos!")
            problemas_resolvidos += 1
        else:
            print("‚ùå Falha ao corrigir imports SQLAlchemy")
        
        # 3. Criar arquivos de configura√ß√£o necess√°rios
        print("\nüîß 3. CRIANDO ARQUIVOS DE CONFIGURA√á√ÉO...")
        if criar_arquivos_configuracao():
            print("‚úÖ Arquivos de configura√ß√£o criados!")
            problemas_resolvidos += 1
        else:
            print("‚ùå Falha ao criar arquivos de configura√ß√£o")
        
        # 4. Corrigir problema do multi-agent system
        print("\nüîß 4. VERIFICANDO MULTI-AGENT SYSTEM...")
        if verificar_multi_agent_system():
            print("‚úÖ Multi-Agent System verificado!")
            problemas_resolvidos += 1
        else:
            print("‚ùå Multi-Agent System precisa de corre√ß√£o")
        
        # 5. Aplicar migra√ß√£o das tabelas de IA
        print("\nüîß 5. APLICANDO MIGRA√á√ÉO DAS TABELAS DE IA...")
        if aplicar_migracao_tabelas_ia():
            print("‚úÖ Migra√ß√£o das tabelas de IA aplicada!")
            problemas_resolvidos += 1
        else:
            print("‚ùå Falha ao aplicar migra√ß√£o das tabelas de IA")
        
        print(f"\nüéâ CORRE√á√ïES CONCLU√çDAS!")
        print(f"‚úÖ Problemas resolvidos: {problemas_resolvidos}/5")
        
        if problemas_resolvidos >= 4:
            print("\nüöÄ SISTEMA CLAUDE AI DEVE ESTAR FUNCIONANDO!")
            print("üîÑ Reinicie o sistema para aplicar as corre√ß√µes")
        else:
            print("\n‚ö†Ô∏è ALGUNS PROBLEMAS AINDA PRECISAM SER RESOLVIDOS")
            print("üìã Verifique os logs acima para mais detalhes")
            
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO: {e}")
        traceback.print_exc()

def corrigir_encoding_utf8():
    """Corrige problemas de encoding UTF-8"""
    try:
        # Verificar se o arquivo config.py existe
        config_file = Path('config.py')
        if not config_file.exists():
            print("‚ùå Arquivo config.py n√£o encontrado")
            return False
        
        # Ler conte√∫do atual com encoding correto
        try:
            content = config_file.read_text(encoding='utf-8')
        except UnicodeDecodeError:
            # Tentar com encoding latin-1 se UTF-8 falhar
            content = config_file.read_text(encoding='latin-1')
        
        # Verificar se j√° tem as corre√ß√µes
        if 'client_encoding=UTF8' in content:
            print("‚úÖ Corre√ß√µes de encoding j√° aplicadas")
            return True
        
        # Aplicar corre√ß√µes de encoding
        corrections = [
            ('postgresql://user:password@host:port/database', 
             'postgresql://user:password@host:port/database?client_encoding=UTF8'),
            ("'client_encoding': 'utf8'", 
             "'client_encoding': 'utf8',\n                'options': '-c client_encoding=UTF8'")
        ]
        
        for old, new in corrections:
            if old in content:
                content = content.replace(old, new)
        
        # Salvar com encoding UTF-8
        config_file.write_text(content, encoding='utf-8')
        print("‚úÖ Encoding UTF-8 configurado no PostgreSQL")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao corrigir encoding: {e}")
        return False

def corrigir_imports_sqlalchemy():
    """Corrige problemas de imports SQLAlchemy"""
    try:
        arquivos_para_corrigir = [
            'app/claude_ai/lifelong_learning.py',
            'app/claude_ai/advanced_integration.py',
            'app/claude_ai/human_in_loop_learning.py'
        ]
        
        correcoes_aplicadas = 0
        
        for arquivo in arquivos_para_corrigir:
            arquivo_path = Path(arquivo)
            if not arquivo_path.exists():
                continue
                
            try:
                content = arquivo_path.read_text(encoding='utf-8')
            except UnicodeDecodeError:
                content = arquivo_path.read_text(encoding='latin-1')
            
            # Verificar se precisa de corre√ß√£o
            if 'from app import db' not in content and 'from app.models' not in content:
                # Adicionar imports corretos no topo
                lines = content.split('\n')
                import_index = 0
                
                # Encontrar onde inserir os imports
                for i, line in enumerate(lines):
                    if line.startswith('from ') or line.startswith('import '):
                        import_index = i + 1
                    elif line.strip() == '' and import_index > 0:
                        break
                
                # Inserir imports necess√°rios
                new_imports = [
                    'from flask import current_app',
                    'from app import db',
                    ''
                ]
                
                lines[import_index:import_index] = new_imports
                
                # Salvar arquivo corrigido
                arquivo_path.write_text('\n'.join(lines), encoding='utf-8')
                correcoes_aplicadas += 1
                print(f"‚úÖ Imports corrigidos em {arquivo}")
        
        return correcoes_aplicadas > 0
        
    except Exception as e:
        print(f"‚ùå Erro ao corrigir imports: {e}")
        return False

def criar_arquivos_configuracao():
    """Cria arquivos de configura√ß√£o necess√°rios"""
    try:
        # 1. Criar diret√≥rio instance/claude_ai se n√£o existir
        instance_dir = Path('instance/claude_ai')
        instance_dir.mkdir(parents=True, exist_ok=True)
        
        # 2. Criar arquivo security_config.json
        security_config = {
            "security_level": "high",
            "allowed_operations": [
                "read_data",
                "analyze_data", 
                "generate_reports"
            ],
            "blocked_operations": [
                "delete_data",
                "modify_critical_data"
            ],
            "rate_limits": {
                "queries_per_minute": 60,
                "max_concurrent_requests": 10
            }
        }
        
        security_file = instance_dir / 'security_config.json'
        if not security_file.exists():
            security_file.write_text(json.dumps(security_config, indent=2), encoding='utf-8')
            print("‚úÖ Arquivo security_config.json criado")
        
        # 3. Criar diret√≥rio backups
        backups_dir = instance_dir / 'backups'
        backups_dir.mkdir(exist_ok=True)
        
        # Criar subdiret√≥rios
        (backups_dir / 'generated').mkdir(exist_ok=True)
        (backups_dir / 'projects').mkdir(exist_ok=True)
        
        # Criar arquivos .gitkeep
        (backups_dir / 'generated' / '.gitkeep').touch()
        (backups_dir / 'projects' / '.gitkeep').touch()
        
        print("‚úÖ Diret√≥rios de backup criados")
        
        # 4. Criar arquivo pending_actions.json se n√£o existir
        pending_actions_file = Path('app/claude_ai/pending_actions.json')
        if not pending_actions_file.exists():
            pending_actions = {
                "version": "1.0",
                "last_update": "2025-07-04",
                "pending_actions": [],
                "completed_actions": []
            }
            pending_actions_file.write_text(json.dumps(pending_actions, indent=2), encoding='utf-8')
            print("‚úÖ Arquivo pending_actions.json criado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar arquivos de configura√ß√£o: {e}")
        return False

def verificar_multi_agent_system():
    """Verifica se o multi-agent system est√° corrigido"""
    try:
        multi_agent_file = Path('app/claude_ai/multi_agent_system.py')
        if not multi_agent_file.exists():
            print("‚ùå Arquivo multi_agent_system.py n√£o encontrado")
            return False
        
        content = multi_agent_file.read_text(encoding='utf-8')
        
        # Verificar se a corre√ß√£o da linha 595 est√° aplicada
        if 'str(main_response) + str(convergence_note) + str(validation_note)' in content:
            print("‚úÖ Corre√ß√£o da concatena√ß√£o j√° aplicada")
            return True
        elif '(main_response or "Resposta n√£o dispon√≠vel")' in content:
            print("‚úÖ Corre√ß√£o alternativa da concatena√ß√£o j√° aplicada")
            return True
        else:
            print("‚ö†Ô∏è Corre√ß√£o da concatena√ß√£o n√£o encontrada")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar multi-agent system: {e}")
        return False

def aplicar_migracao_tabelas_ia():
    """Aplica migra√ß√£o das tabelas de IA"""
    try:
        # Verificar se o arquivo de migra√ß√£o existe
        migracao_file = Path('migrations/versions/criar_tabelas_ai_claude.py')
        if not migracao_file.exists():
            print("‚ùå Arquivo de migra√ß√£o n√£o encontrado")
            return False
        
        # Executar migra√ß√£o
        print("üîÑ Executando flask db upgrade...")
        result = subprocess.run(['flask', 'db', 'upgrade'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Migra√ß√£o executada com sucesso!")
            return True
        else:
            print(f"‚ùå Erro na migra√ß√£o: {result.stderr}")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro ao aplicar migra√ß√£o: {e}")
        return False

if __name__ == "__main__":
    main() 