#!/usr/bin/env python3
"""
üìä COMPARA√á√ÉO ESTRUTURAS CLAUDE AI
Script para comparar estrutura original vs nova
"""

import os
from pathlib import Path
from typing import List, Dict, Tuple

def listar_arquivos_python(diretorio: str) -> List[Tuple[str, int, int]]:
    """Lista todos os arquivos Python com tamanho e linhas"""
    arquivos = []
    
    if not os.path.exists(diretorio):
        return arquivos
    
    for root, dirs, files in os.walk(diretorio):
        for file in files:
            if file.endswith('.py'):
                caminho_completo = os.path.join(root, file)
                try:
                    # Tamanho em bytes
                    tamanho = os.path.getsize(caminho_completo)
                    
                    # N√∫mero de linhas
                    with open(caminho_completo, 'r', encoding='utf-8', errors='ignore') as f:
                        linhas = len(f.readlines())
                    
                    # Caminho relativo
                    caminho_relativo = os.path.relpath(caminho_completo, diretorio)
                    
                    arquivos.append((caminho_relativo, tamanho, linhas))
                except Exception as e:
                    print(f"Erro ao processar {caminho_completo}: {e}")
    
    return sorted(arquivos)

def formatar_tamanho(bytes_size: int) -> str:
    """Formata tamanho em bytes para formato leg√≠vel"""
    if bytes_size >= 1024*1024:
        return f"{bytes_size/(1024*1024):.1f}MB"
    elif bytes_size >= 1024:
        return f"{bytes_size/1024:.1f}KB"
    else:
        return f"{bytes_size}B"

def comparar_estruturas():
    """Compara as estruturas original e nova"""
    print("üìä COMPARA√á√ÉO DETALHADA - ESTRUTURAS CLAUDE AI")
    print("=" * 80)
    
    # Diret√≥rios a comparar
    dir_original = "app/claude_ai"
    dir_novo = "app/claude_ai_novo"
    dir_backup = "app/claude_ai_backup_20250706_221126"
    
    # Listar arquivos de cada estrutura
    print("üîç LISTANDO ARQUIVOS...")
    arquivos_original = listar_arquivos_python(dir_original)
    arquivos_novo = listar_arquivos_python(dir_novo)
    arquivos_backup = listar_arquivos_python(dir_backup)
    
    print(f"\nüìÅ ESTRUTURA ORIGINAL ({dir_original}):")
    print("-" * 50)
    total_linhas_original = 0
    total_tamanho_original = 0
    
    for arquivo, tamanho, linhas in arquivos_original:
        print(f"  {arquivo:<40} {formatar_tamanho(tamanho):>8} {linhas:>6} linhas")
        total_linhas_original += linhas
        total_tamanho_original += tamanho
    
    print(f"\nüìä RESUMO ORIGINAL:")
    print(f"  Total de arquivos: {len(arquivos_original)}")
    print(f"  Total de linhas: {total_linhas_original:,}")
    print(f"  Tamanho total: {formatar_tamanho(total_tamanho_original)}")
    
    print(f"\nüìÅ NOVA ESTRUTURA ({dir_novo}):")
    print("-" * 50)
    total_linhas_novo = 0
    total_tamanho_novo = 0
    
    for arquivo, tamanho, linhas in arquivos_novo:
        print(f"  {arquivo:<40} {formatar_tamanho(tamanho):>8} {linhas:>6} linhas")
        total_linhas_novo += linhas
        total_tamanho_novo += tamanho
    
    print(f"\nüìä RESUMO NOVA ESTRUTURA:")
    print(f"  Total de arquivos: {len(arquivos_novo)}")
    print(f"  Total de linhas: {total_linhas_novo:,}")
    print(f"  Tamanho total: {formatar_tamanho(total_tamanho_novo)}")
    
    # Verificar integridade do backup
    print(f"\nüíæ VERIFICA√á√ÉO DO BACKUP:")
    print("-" * 50)
    if len(arquivos_backup) == len(arquivos_original):
        print("‚úÖ Backup cont√©m o mesmo n√∫mero de arquivos que o original")
    else:
        print(f"‚ö†Ô∏è Backup tem {len(arquivos_backup)} arquivos, original tem {len(arquivos_original)}")
    
    # An√°lise de migra√ß√£o
    print(f"\nüîÑ AN√ÅLISE DE MIGRA√á√ÉO:")
    print("-" * 50)
    
    # Criar sets com nomes de arquivos para compara√ß√£o
    nomes_original = {os.path.basename(arq[0]) for arq in arquivos_original}
    nomes_novo = {os.path.basename(arq[0]) for arq in arquivos_novo}
    
    # Arquivos migrados (com mesmo nome)
    migrados = nomes_original.intersection(nomes_novo)
    
    # Arquivos n√£o migrados
    nao_migrados = nomes_original - nomes_novo
    
    # Arquivos novos
    novos = nomes_novo - nomes_original
    
    print(f"üìã ARQUIVOS MIGRADOS ({len(migrados)}):")
    for nome in sorted(migrados):
        print(f"  ‚úÖ {nome}")
    
    print(f"\n‚ùå ARQUIVOS N√ÉO MIGRADOS ({len(nao_migrados)}):")
    for nome in sorted(nao_migrados):
        # Encontrar arquivo original para mostrar tamanho
        for arq, tam, lin in arquivos_original:
            if os.path.basename(arq) == nome:
                print(f"  üìÑ {nome:<40} {formatar_tamanho(tam):>8} {lin:>6} linhas")
                break
    
    print(f"\nüÜï ARQUIVOS NOVOS CRIADOS ({len(novos)}):")
    for nome in sorted(novos):
        # Encontrar arquivo novo para mostrar tamanho
        for arq, tam, lin in arquivos_novo:
            if os.path.basename(arq) == nome:
                print(f"  ‚ú® {nome:<40} {formatar_tamanho(tam):>8} {lin:>6} linhas")
                break
    
    # An√°lise dos maiores arquivos n√£o migrados
    print(f"\nüö® MAIORES ARQUIVOS N√ÉO MIGRADOS:")
    print("-" * 50)
    
    nao_migrados_detalhes = []
    for arquivo, tamanho, linhas in arquivos_original:
        nome = os.path.basename(arquivo)
        if nome in nao_migrados:
            nao_migrados_detalhes.append((arquivo, tamanho, linhas))
    
    # Ordenar por tamanho (maior primeiro)
    nao_migrados_detalhes.sort(key=lambda x: x[1], reverse=True)
    
    for i, (arquivo, tamanho, linhas) in enumerate(nao_migrados_detalhes[:10], 1):
        print(f"  {i:2d}. {os.path.basename(arquivo):<35} {formatar_tamanho(tamanho):>8} {linhas:>6} linhas")
    
    # Estat√≠sticas comparativas
    print(f"\nüìä COMPARA√á√ÉO ESTAT√çSTICA:")
    print("-" * 50)
    
    reducao_arquivos = len(arquivos_original) - len(arquivos_novo)
    reducao_linhas = total_linhas_original - total_linhas_novo
    reducao_tamanho = total_tamanho_original - total_tamanho_novo
    
    print(f"Arquivos:  {len(arquivos_original):3d} ‚Üí {len(arquivos_novo):3d} ({reducao_arquivos:+d})")
    print(f"Linhas:    {total_linhas_original:,} ‚Üí {total_linhas_novo:,} ({reducao_linhas:+,})")
    print(f"Tamanho:   {formatar_tamanho(total_tamanho_original)} ‚Üí {formatar_tamanho(total_tamanho_novo)} ({reducao_tamanho:+,} bytes)")
    
    if reducao_linhas > 0:
        percentual_reducao = (reducao_linhas / total_linhas_original) * 100
        print(f"\n‚úÖ REDU√á√ÉO: {percentual_reducao:.1f}% menos linhas de c√≥digo")
    
    # Recomenda√ß√µes
    print(f"\nüéØ RECOMENDA√á√ïES:")
    print("-" * 50)
    
    if len(nao_migrados) > 10:
        print("üìã PR√ìXIMO PASSO: Analisar e migrar arquivos cr√≠ticos n√£o migrados")
        print("   Priorizar arquivos grandes com funcionalidades importantes")
    
    if len(migrados) < 5:
        print("‚ö†Ô∏è ATEN√á√ÉO: Poucos arquivos migrados - considerar migra√ß√£o gradual")
    
    print("\nüöÄ STATUS: Nova estrutura criada com arquivos base")
    print("   Pronta para migra√ß√£o gradual das funcionalidades espec√≠ficas")

if __name__ == "__main__":
    comparar_estruturas() 