#!/usr/bin/env python3
"""
üîß Script FINAL para resolver TODOS os problemas do Render
"""

import os
import shutil
import psycopg2
from urllib.parse import urlparse

def fix_enhanced_claude_import():
    """Resolve o import circular do Enhanced Claude de forma diferente"""
    print("üîß Resolvendo import circular do Enhanced Claude...")
    
    # Modificar enhanced_claude_integration.py
    enhanced_file = "app/claude_ai/enhanced_claude_integration.py"
    
    if not os.path.exists(enhanced_file):
        print("‚ùå Arquivo enhanced_claude_integration.py n√£o encontrado")
        return False
    
    with open(enhanced_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Remover completamente o import problem√°tico
    content = content.replace(
        "from .claude_real_integration import ClaudeRealIntegration",
        "# from .claude_real_integration import ClaudeRealIntegration  # Removido para evitar circular import"
    )
    
    # Modificar o __init__ para n√£o usar ClaudeRealIntegration
    old_init = """try:
            # Import dentro do m√©todo para evitar circular import
            from .claude_real_integration import ClaudeRealIntegration
            self.claude_integration = ClaudeRealIntegration()
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è ClaudeRealIntegration n√£o dispon√≠vel: {e}")
            self.claude_integration = None
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar ClaudeRealIntegration: {e}")
            self.claude_integration = None"""
    
    new_init = """# Claude Integration ser√° injetado externamente para evitar circular import
        self.claude_integration = None
        logger.info("üîÑ Claude Integration ser√° configurado externamente")"""
    
    if old_init in content:
        content = content.replace(old_init, new_init)
        print("‚úÖ Init do EnhancedClaudeIntegration modificado")
    
    # Salvar
    with open(enhanced_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    # Agora modificar claude_real_integration.py para injetar a depend√™ncia
    claude_file = "app/claude_ai/claude_real_integration.py"
    
    with open(claude_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Procurar onde enhanced_claude √© carregado
    old_load = """            try:
                # Import lazy para evitar circular import
                from .enhanced_claude_integration import get_enhanced_claude_system
                self.enhanced_claude = get_enhanced_claude_system(self.client)
                logger.info("üöÄ Enhanced Claude Integration carregado!")
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Enhanced Claude Integration n√£o dispon√≠vel: {e}")
                self.enhanced_claude = None"""
    
    new_load = """            try:
                # Import lazy para evitar circular import
                from .enhanced_claude_integration import get_enhanced_claude_system, enhanced_claude_integration
                self.enhanced_claude = get_enhanced_claude_system(self.client)
                
                # Injetar depend√™ncia para resolver circular import
                if self.enhanced_claude and hasattr(self.enhanced_claude, 'claude_integration'):
                    self.enhanced_claude.claude_integration = self
                    logger.info("‚úÖ Depend√™ncia injetada no Enhanced Claude")
                
                logger.info("üöÄ Enhanced Claude Integration carregado!")
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Enhanced Claude Integration n√£o dispon√≠vel: {e}")
                self.enhanced_claude = None"""
    
    if old_load in content:
        content = content.replace(old_load, new_load)
        print("‚úÖ Inje√ß√£o de depend√™ncia adicionada")
    else:
        print("‚ö†Ô∏è Bloco de carregamento n√£o encontrado no formato esperado")
    
    # Salvar
    with open(claude_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Import circular resolvido com inje√ß√£o de depend√™ncia")
    return True

def fix_phantom_migration():
    """Remove a migra√ß√£o fantasma do banco PostgreSQL"""
    print("\nüîß Removendo migra√ß√£o fantasma do PostgreSQL...")
    
    # Obter DATABASE_URL
    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL n√£o encontrada")
        return False
    
    # Parse da URL
    url = urlparse(database_url)
    
    try:
        # Conectar ao PostgreSQL
        conn = psycopg2.connect(
            host=url.hostname,
            port=url.port,
            database=url.path[1:],  # Remove a barra inicial
            user=url.username,
            password=url.password,
            sslmode='require'
        )
        
        cursor = conn.cursor()
        
        # Verificar se a migra√ß√£o fantasma existe
        cursor.execute(
            "SELECT version_num FROM alembic_version WHERE version_num = %s",
            ('1d81b88a3038',)
        )
        
        if cursor.fetchone():
            # Remover a migra√ß√£o fantasma
            cursor.execute(
                "DELETE FROM alembic_version WHERE version_num = %s",
                ('1d81b88a3038',)
            )
            conn.commit()
            print("‚úÖ Migra√ß√£o fantasma '1d81b88a3038' removida do banco")
        else:
            print("‚ÑπÔ∏è Migra√ß√£o fantasma n√£o encontrada no banco")
        
        # Verificar estado atual
        cursor.execute("SELECT version_num FROM alembic_version")
        current_migrations = cursor.fetchall()
        
        if current_migrations:
            print(f"üìã Migra√ß√µes atuais no banco: {[m[0] for m in current_migrations]}")
        else:
            print("‚ö†Ô∏è Nenhuma migra√ß√£o registrada no banco")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao PostgreSQL: {e}")
        return False

def create_render_start_script():
    """Cria script de inicializa√ß√£o otimizado para o Render"""
    print("\nüîß Criando script de inicializa√ß√£o otimizado...")
    
    script_content = '''#!/bin/bash

echo "=== INICIANDO SISTEMA NO RENDER ==="

# Fun√ß√£o para verificar se estamos no Render
is_render() {
    [ -n "$RENDER" ] && [ "$RENDER" = "true" ]
}

# Remover migra√ß√£o fantasma se estivermos no Render
if is_render; then
    echo "üîß Ambiente Render detectado - Executando corre√ß√µes..."
    python fix_migration_db.py || echo "‚ö†Ô∏è Corre√ß√£o de migra√ß√£o falhou, continuando..."
fi

# Instalar modelo spaCy se necess√°rio
echo "üì¶ Verificando modelo spaCy..."
python -m spacy download pt_core_news_sm -q || echo "‚ö†Ô∏è spaCy j√° instalado"

# Inicializar banco
echo "üóÑÔ∏è Inicializando banco de dados..."
python init_db.py || echo "‚ö†Ô∏è Banco j√° inicializado"

# Aplicar migra√ß√µes
echo "üîÑ Aplicando migra√ß√µes..."
flask db upgrade || echo "‚ö†Ô∏è Migra√ß√µes aplicadas com avisos"

# Iniciar aplica√ß√£o
echo "üöÄ Iniciando aplica√ß√£o..."
gunicorn run:app --bind 0.0.0.0:$PORT --workers 2 --threads 2 --timeout 120
'''
    
    with open('start_render_optimized.sh', 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    # Tornar execut√°vel
    os.chmod('start_render_optimized.sh', 0o755)
    
    print("‚úÖ Script start_render_optimized.sh criado")
    return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Fix FINAL para Render")
    print("=" * 50)
    
    # 1. Resolver import circular
    if fix_enhanced_claude_import():
        print("\n‚úÖ Import circular resolvido!")
    
    # 2. Script para remover migra√ß√£o fantasma
    print("\nüìù Criando fix_migration_db.py para Render...")
    
    migration_fix = '''#!/usr/bin/env python3
"""Remove migra√ß√£o fantasma do PostgreSQL no Render"""

import os
import psycopg2
from urllib.parse import urlparse

database_url = os.environ.get('DATABASE_URL')
if database_url:
    url = urlparse(database_url)
    try:
        conn = psycopg2.connect(
            host=url.hostname,
            port=url.port,
            database=url.path[1:],
            user=url.username,
            password=url.password,
            sslmode='require'
        )
        cursor = conn.cursor()
        
        # Remover migra√ß√£o fantasma
        cursor.execute("DELETE FROM alembic_version WHERE version_num = '1d81b88a3038'")
        rows_deleted = cursor.rowcount
        
        if rows_deleted > 0:
            conn.commit()
            print(f"‚úÖ Migra√ß√£o fantasma removida ({rows_deleted} registro)")
        else:
            print("‚ÑπÔ∏è Migra√ß√£o fantasma n√£o encontrada")
        
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao remover migra√ß√£o: {e}")
else:
    print("‚ö†Ô∏è DATABASE_URL n√£o encontrada")
'''
    
    with open('fix_migration_db.py', 'w', encoding='utf-8') as f:
        f.write(migration_fix)
    
    print("‚úÖ fix_migration_db.py criado")
    
    # 3. Criar script de inicializa√ß√£o otimizado
    if create_render_start_script():
        print("\n‚úÖ Script de inicializa√ß√£o otimizado criado!")
    
    print("\n" + "=" * 50)
    print("‚úÖ TODAS AS CORRE√á√ïES APLICADAS!")
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Fa√ßa commit e push:")
    print("   git add -A")
    print("   git commit -m 'Fix: Resolver definitivamente problemas do Render'")
    print("   git push")
    print("\n2. No Render, mude o Start Command para:")
    print("   ./start_render_optimized.sh")
    print("\n3. Fa√ßa um novo deploy")
    print("\n‚ú® Isso deve resolver TODOS os problemas!")

if __name__ == "__main__":
    main() 