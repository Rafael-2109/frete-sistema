#!/usr/bin/env python3
"""
üõ°Ô∏è PREPARA√á√ÉO PARA IMPORTA√á√ÉO DE HIST√ìRICO

Script para:
1. Fazer backup da base atual
2. Analisar dados existentes
3. Validar arquivo de importa√ß√£o
4. Fornecer estat√≠sticas antes da importa√ß√£o
"""

import pandas as pd
from datetime import datetime
import sys
import os
import shutil

# Adiciona o diret√≥rio do projeto ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.monitoramento.models import EntregaMonitorada

def fazer_backup_base():
    """Faz backup do banco de dados atual"""
    
    print("üõ°Ô∏è FAZENDO BACKUP DA BASE ATUAL")
    print("=" * 50)
    
    # Localiza o arquivo do banco
    arquivos_db = []
    for arquivo in os.listdir('.'):
        if arquivo.endswith('.db'):
            arquivos_db.append(arquivo)
    
    if not arquivos_db:
        print("‚ùå Nenhum arquivo .db encontrado no diret√≥rio atual")
        return False
    
    # Usa o primeiro encontrado ou pede para escolher
    if len(arquivos_db) == 1:
        arquivo_db = arquivos_db[0]
    else:
        print("üìÅ M√∫ltiplos arquivos .db encontrados:")
        for i, arquivo in enumerate(arquivos_db):
            print(f"   {i+1}. {arquivo}")
        
        try:
            escolha = int(input("Escolha o n√∫mero do arquivo: ")) - 1
            arquivo_db = arquivos_db[escolha]
        except (ValueError, IndexError):
            print("‚ùå Escolha inv√°lida")
            return False
    
    # Gera nome do backup
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    arquivo_backup = f"backup_pre_importacao_{timestamp}.db"
    
    try:
        shutil.copy2(arquivo_db, arquivo_backup)
        print(f"‚úÖ Backup criado: {arquivo_backup}")
        print(f"   Tamanho: {os.path.getsize(arquivo_backup) / 1024 / 1024:.1f} MB")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")
        return False

def analisar_base_atual():
    """Analisa a base atual de monitoramento"""
    
    print("\nüìä AN√ÅLISE DA BASE ATUAL")
    print("=" * 50)
    
    app = create_app()
    with app.app_context():
        
        # Estat√≠sticas gerais
        total_entregas = EntregaMonitorada.query.count()
        print(f"   Total de entregas:     {total_entregas}")
        
        if total_entregas == 0:
            print("   Base vazia - todas as importa√ß√µes ser√£o novas")
            return
        
        # Por status
        entregues = EntregaMonitorada.query.filter_by(entregue=True).count()
        pendentes = total_entregas - entregues
        print(f"   Entregues:             {entregues}")
        print(f"   Pendentes:             {pendentes}")
        
        # Com dados espec√≠ficos
        com_embarque = EntregaMonitorada.query.filter(EntregaMonitorada.data_embarque.isnot(None)).count()
        com_previsao = EntregaMonitorada.query.filter(EntregaMonitorada.data_entrega_prevista.isnot(None)).count()
        com_agenda = EntregaMonitorada.query.filter(EntregaMonitorada.data_agenda.isnot(None)).count()
        
        print(f"   Com data embarque:     {com_embarque}")
        print(f"   Com previs√£o entrega:  {com_previsao}")
        print(f"   Com agendamento:       {com_agenda}")
        
        # Transportadoras mais usadas
        transportadoras = db.session.query(
            EntregaMonitorada.transportadora, 
            db.func.count(EntregaMonitorada.id).label('count')
        ).filter(
            EntregaMonitorada.transportadora != '-',
            EntregaMonitorada.transportadora.isnot(None)
        ).group_by(EntregaMonitorada.transportadora).order_by(db.desc('count')).limit(5).all()
        
        if transportadoras:
            print(f"\n   Top 5 Transportadoras:")
            for transp, count in transportadoras:
                print(f"     {transp}: {count} entregas")

def validar_arquivo_importacao(arquivo_excel):
    """Valida arquivo de importa√ß√£o e mostra preview"""
    
    print(f"\nüîç VALIDA√á√ÉO DO ARQUIVO: {arquivo_excel}")
    print("=" * 50)
    
    if not os.path.exists(arquivo_excel):
        print(f"‚ùå Arquivo n√£o encontrado: {arquivo_excel}")
        return False
    
    try:
        # Carrega arquivo
        df = pd.read_excel(arquivo_excel)
        print(f"‚úÖ Arquivo carregado com sucesso")
        print(f"   Linhas: {len(df)}")
        print(f"   Colunas: {len(df.columns)}")
        
        # Mostra colunas
        print(f"\nüìã Colunas encontradas:")
        for i, col in enumerate(df.columns):
            print(f"   {i+1:2d}. {col}")
        
        # Detecta poss√≠veis mapeamentos
        colunas_importantes = {
            'numero_nf': ['numero_nf', 'nf', 'nota_fiscal', 'nf_numero'],
            'cliente': ['cliente', 'nome_cliente', 'razao_social'],
            'data_faturamento': ['data_faturamento', 'data_fatura', 'data_emissao'],
            'transportadora': ['transportadora', 'transportador']
        }
        
        print(f"\nüéØ Mapeamentos sugeridos:")
        mapeamentos_encontrados = 0
        for campo, opcoes in colunas_importantes.items():
            encontrado = False
            for opcao in opcoes:
                if opcao in df.columns:
                    print(f"   {campo:20} ‚Üí {opcao}")
                    mapeamentos_encontrados += 1
                    encontrado = True
                    break
            if not encontrado:
                print(f"   {campo:20} ‚Üí ‚ùå N√ÉO ENCONTRADO")
        
        # Verifica duplicatas por NF
        col_nf = None
        for opcao in colunas_importantes['numero_nf']:
            if opcao in df.columns:
                col_nf = opcao
                break
        
        if col_nf:
            duplicatas = df[col_nf].duplicated().sum()
            if duplicatas > 0:
                print(f"\n‚ö†Ô∏è ATEN√á√ÉO: {duplicatas} NFs duplicadas encontradas!")
                print("   Apenas a primeira ocorr√™ncia ser√° processada")
            else:
                print(f"\n‚úÖ Nenhuma NF duplicada encontrada")
        
        # Preview dos dados
        print(f"\nüëÄ PREVIEW (primeiras 3 linhas):")
        print("-" * 80)
        for idx, row in df.head(3).iterrows():
            if col_nf:
                nf = str(row[col_nf])[:15]
                print(f"   Linha {idx+1}: NF {nf}")
            else:
                print(f"   Linha {idx+1}: {dict(row)}")
        
        return mapeamentos_encontrados >= 2  # Pelo menos NF + outro campo
        
    except Exception as e:
        print(f"‚ùå Erro ao validar arquivo: {e}")
        return False

def analisar_conflitos_potenciais(arquivo_excel):
    """Analisa potenciais conflitos entre dados hist√≥ricos e atuais"""
    
    print(f"\n‚ö° AN√ÅLISE DE CONFLITOS POTENCIAIS")
    print("=" * 50)
    
    app = create_app()
    with app.app_context():
        
        # Carrega dados hist√≥ricos
        df = pd.read_excel(arquivo_excel)
        
        # Detecta coluna de NF
        col_nf = None
        for opcao in ['numero_nf', 'nf', 'nota_fiscal', 'nf_numero']:
            if opcao in df.columns:
                col_nf = opcao
                break
        
        if not col_nf:
            print("‚ùå Coluna de NF n√£o encontrada, n√£o √© poss√≠vel analisar conflitos")
            return
        
        # Lista de NFs do hist√≥rico
        nfs_historico = set(str(nf).strip() for nf in df[col_nf] if pd.notna(nf))
        print(f"   NFs no hist√≥rico: {len(nfs_historico)}")
        
        # Lista de NFs na base atual
        nfs_atuais = set(nf for (nf,) in db.session.query(EntregaMonitorada.numero_nf).all())
        print(f"   NFs na base atual: {len(nfs_atuais)}")
        
        # Intersec√ß√£o (conflitos)
        conflitos = nfs_historico.intersection(nfs_atuais)
        novas = nfs_historico - nfs_atuais
        
        print(f"   üìä RESULTADO:")
        print(f"     Novas (ser√£o criadas):        {len(novas)}")
        print(f"     Conflitos (ser√£o atualizadas): {len(conflitos)}")
        
        if conflitos:
            print(f"\n   üîÑ Primeiros 10 conflitos:")
            for nf in list(conflitos)[:10]:
                entrega = EntregaMonitorada.query.filter_by(numero_nf=nf).first()
                status = "ENTREGUE" if entrega.entregue else "PENDENTE"
                embarque = "SIM" if entrega.data_embarque else "N√ÉO"
                print(f"     {nf:15} | Status: {status:8} | Embarque: {embarque}")
            
            if len(conflitos) > 10:
                print(f"     ... e mais {len(conflitos) - 10} conflitos")

def main():
    """Fun√ß√£o principal"""
    
    if len(sys.argv) < 2:
        print("üõ°Ô∏è PREPARA√á√ÉO PARA IMPORTA√á√ÉO DE HIST√ìRICO")
        print()
        print("USO:")
        print("python preparar_importacao_historico.py <arquivo.xlsx>")
        print()
        print("O script ir√°:")
        print("1. Fazer backup da base atual")
        print("2. Analisar dados existentes") 
        print("3. Validar arquivo de importa√ß√£o")
        print("4. Mostrar potenciais conflitos")
        return
    
    arquivo = sys.argv[1]
    
    print("üõ°Ô∏è PREPARA√á√ÉO PARA IMPORTA√á√ÉO DE HIST√ìRICO")
    print("=" * 60)
    print(f"Arquivo: {arquivo}")
    print("=" * 60)
    
    # 1. Backup
    if not fazer_backup_base():
        print("\n‚ùå Falha no backup. Abortando prepara√ß√£o.")
        return
    
    # 2. An√°lise da base atual
    analisar_base_atual()
    
    # 3. Valida√ß√£o do arquivo
    if not validar_arquivo_importacao(arquivo):
        print("\n‚ùå Arquivo inv√°lido ou com problemas. Verifique e tente novamente.")
        return
    
    # 4. An√°lise de conflitos
    analisar_conflitos_potenciais(arquivo)
    
    print("\n" + "=" * 60)
    print("‚úÖ PREPARA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print("üìã Pr√≥ximos passos:")
    print("1. Revisar as informa√ß√µes acima")
    print("2. Se tudo estiver correto, execute:")
    print(f"   python importar_historico_monitoramento.py {arquivo} visualizar")
    print("3. Depois execute:")
    print(f"   python importar_historico_monitoramento.py {arquivo} importar")
    print()
    print("üí° DICA: Em caso de problemas, restaure o backup criado.")

if __name__ == "__main__":
    main() 