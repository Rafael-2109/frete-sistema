#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ CORRETOR DE NUMERA√á√ÉO - PRODU√á√ÉO
Resolve o problema espec√≠fico: Embarque #254 tem ID 278 (diferen√ßa de 24)

EXECUTE ESTE SCRIPT NO SERVIDOR DE PRODU√á√ÉO
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def opcao_1_avancar_numeros_simples():
    """
    OP√á√ÉO 1: Modifica a fun√ß√£o para pr√≥ximos embarques terem n√∫mero = ID
    Mais simples e segura
    """
    print("üöÄ CORRE√á√ÉO R√ÅPIDA: Sincronizar n√∫meros com IDs")
    print("=" * 60)
    
    # Fazer backup da fun√ß√£o atual
    try:
        with open('app/utils/embarque_numero.py', 'r', encoding='utf-8') as f:
            conteudo_original = f.read()
            
        # Salvar backup
        with open('app/utils/embarque_numero.py.backup', 'w', encoding='utf-8') as f:
            f.write(conteudo_original)
        
        print("‚úÖ Backup criado: app/utils/embarque_numero.py.backup")
        
        # Nova fun√ß√£o que sincroniza com IDs
        nova_funcao = '''#!/usr/bin/env python3

"""
Utilit√°rio centralizado para gera√ß√£o de n√∫meros de embarque.
Evita duplica√ß√µes e problemas de concorr√™ncia.
MODIFICADO: Sincroniza n√∫meros com IDs para resolver dessincroniza√ß√£o
"""

from app import db
from app.embarques.models import Embarque
import threading

# Lock para opera√ß√µes thread-safe
_lock = threading.Lock()

def obter_proximo_numero_embarque():
    """
    Obt√©m o pr√≥ximo n√∫mero de embarque de forma thread-safe.
    
    VERS√ÉO CORRIGIDA: Sincroniza com IDs quando necess√°rio
    
    Returns:
        int: Pr√≥ximo n√∫mero de embarque dispon√≠vel
    """
    with _lock:
        try:
            # Query otimizada para obter o maior n√∫mero atual
            ultimo_numero = db.session.query(
                db.func.coalesce(db.func.max(Embarque.numero), 0)
            ).scalar()
            
            # üîß CORRE√á√ÉO: Sincronizar com IDs se necess√°rio
            ultimo_id = db.session.query(
                db.func.coalesce(db.func.max(Embarque.id), 0)
            ).scalar()
            
            # Se ID est√° √† frente, usar ID como base
            if ultimo_id > ultimo_numero:
                ultimo_numero = ultimo_id
            
            proximo_numero = ultimo_numero + 1
            
            # Verifica se j√° existe um embarque com este n√∫mero (safety check)
            while Embarque.query.filter_by(numero=proximo_numero).first():
                proximo_numero += 1
            
            return proximo_numero
            
        except Exception as e:
            # Fallback: se der erro, conta todos os embarques + 1
            total_embarques = Embarque.query.count()
            return total_embarques + 1
'''
        
        # Salvar nova vers√£o
        with open('app/utils/embarque_numero.py', 'w', encoding='utf-8') as f:
            f.write(nova_funcao)
        
        print("‚úÖ Fun√ß√£o modificada com sucesso!")
        print()
        print("üéØ RESULTADO:")
        print("   ‚Ä¢ Pr√≥ximos embarques ter√£o n√∫mero = ID")
        print("   ‚Ä¢ Por exemplo: se pr√≥ximo ID for 279, embarque ser√° #279")
        print("   ‚Ä¢ Isso resolve a dessincroniza√ß√£o daqui pra frente")
        print("   ‚Ä¢ Embarques antigos mant√™m numera√ß√£o original")
        print()
        print("üîÑ REINICIE O SERVIDOR RENDER para aplicar as mudan√ßas")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return False

def opcao_2_reset_postgresql():
    """
    OP√á√ÉO 2: Comando SQL para resetar sequ√™ncia PostgreSQL
    Mais complexa, mas "mais limpa"
    """
    print("üîÑ RESET DA SEQU√äNCIA POSTGRESQL")
    print("=" * 60)
    
    print("‚ö†Ô∏è Esta op√ß√£o requer execu√ß√£o manual no PostgreSQL")
    print()
    print("üìã PASSOS PARA EXECUTAR:")
    print("1Ô∏è‚É£ Conecte no PostgreSQL do Render:")
    print("   ‚Üí Render Dashboard ‚Üí Database ‚Üí Connect")
    print()
    print("2Ô∏è‚É£ Execute esta consulta para ver situa√ß√£o atual:")
    print("   SELECT MAX(id) as ultimo_id, MAX(numero) as ultimo_numero FROM embarques;")
    print()
    print("3Ô∏è‚É£ Se √∫ltimo n√∫mero for 254 e √∫ltimo ID for 278, execute:")
    print("   SELECT setval('embarques_id_seq', 254, true);")
    print()
    print("4Ô∏è‚É£ Verifique o resultado:")
    print("   SELECT nextval('embarques_id_seq');")
    print("   (deve retornar 255)")
    print()
    print("5Ô∏è‚É£ Reverta o teste:")
    print("   SELECT setval('embarques_id_seq', 254, true);")
    print()
    print("üí° Ap√≥s isso, pr√≥ximo embarque ser√° #255 com ID 255")
    
    return True

def reverter_opcao_1():
    """Reverte a Op√ß√£o 1 usando o backup"""
    print("‚Ü©Ô∏è REVERTER CORRE√á√ÉO")
    print("=" * 30)
    
    try:
        if not os.path.exists('app/utils/embarque_numero.py.backup'):
            print("‚ùå Backup n√£o encontrado!")
            return False
        
        # Restaurar backup
        with open('app/utils/embarque_numero.py.backup', 'r', encoding='utf-8') as f:
            backup_content = f.read()
        
        with open('app/utils/embarque_numero.py', 'w', encoding='utf-8') as f:
            f.write(backup_content)
        
        print("‚úÖ Fun√ß√£o original restaurada!")
        print("üîÑ REINICIE O SERVIDOR para aplicar")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return False

def main():
    """Menu principal simplificado"""
    print("üîß CORRETOR DE NUMERA√á√ÉO - EMBARQUES")
    print("=" * 50)
    print("Problema: Embarque #254 tem ID 278 (diferen√ßa de 24)")
    print()
    
    print("üí° ESCOLHA UMA OP√á√ÉO:")
    print()
    print("1Ô∏è‚É£ AVAN√áAR N√öMEROS (Recomendado)")
    print("   ‚úÖ Simples e seguro")
    print("   ‚úÖ Pr√≥ximos embarques: n√∫mero = ID")
    print("   ‚úÖ Ex: Pr√≥ximo ser√° #279 com ID 279")
    print("   ‚ö†Ô∏è 'Pula' n√∫meros 255-278")
    print()
    print("2Ô∏è‚É£ REBOBINAR IDs (Avan√ßado)")  
    print("   ‚úÖ Mant√©m sequ√™ncia natural")
    print("   ‚úÖ Pr√≥ximo ser√° #255 com ID 255")
    print("   ‚ö†Ô∏è Requer comando SQL manual")
    print()
    print("3Ô∏è‚É£ REVERTER (se j√° aplicou Op√ß√£o 1)")
    print("   ‚Ü©Ô∏è Volta ao estado original")
    print()
    print("0Ô∏è‚É£ SAIR")
    print()
    
    opcao = input("Escolha (1/2/3/0): ").strip()
    
    if opcao == '1':
        print()
        confirmacao = input("‚ö†Ô∏è Confirma aplicar OP√á√ÉO 1? (s/N): ").lower()
        if confirmacao == 's':
            sucesso = opcao_1_avancar_numeros_simples()
            if sucesso:
                print("\nüéâ OP√á√ÉO 1 APLICADA COM SUCESSO!")
                print("üîÑ Reinicie o servidor Render para ativar")
            else:
                print("\n‚ùå Falha na aplica√ß√£o")
        else:
            print("‚ùå Opera√ß√£o cancelada")
    
    elif opcao == '2':
        print()
        opcao_2_reset_postgresql()
    
    elif opcao == '3':
        print()
        confirmacao = input("‚ö†Ô∏è Confirma REVERTER? (s/N): ").lower()
        if confirmacao == 's':
            sucesso = reverter_opcao_1()
            if sucesso:
                print("\n‚úÖ REVERTIDO COM SUCESSO!")
            else:
                print("\n‚ùå Falha na revers√£o")
        else:
            print("‚ùå Opera√ß√£o cancelada")
    
    elif opcao == '0':
        print("üëã Saindo...")
    
    else:
        print("‚ùå Op√ß√£o inv√°lida")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}") 