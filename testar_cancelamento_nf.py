#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script para testar a detec√ß√£o de NFs canceladas ap√≥s corre√ß√£o
Verifica se a NF 137713 ser√° detectada como cancelada
"""

import os
import sys
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.faturamento.models import FaturamentoProduto, RelatorioFaturamentoImportado
from app.estoque.models import MovimentacaoEstoque
from app.odoo.services.faturamento_service import FaturamentoService
from datetime import datetime, timedelta

def verificar_estado_inicial():
    """Verifica o estado inicial da NF 137713"""
    print("\n=== ESTADO INICIAL DA NF 137713 ===\n")
    
    # Buscar NF
    nf_items = FaturamentoProduto.query.filter_by(numero_nf='137713').all()
    
    if nf_items:
        print(f"‚úì NF encontrada com {len(nf_items)} itens")
        print(f"  Status atual: '{nf_items[0].status_nf}'")
    else:
        print("‚úó NF n√£o encontrada")
        return False
    
    # Buscar movimenta√ß√µes
    movs = MovimentacaoEstoque.query.filter(
        MovimentacaoEstoque.observacao.like('%137713%')
    ).all()
    
    print(f"\nMovimenta√ß√µes de estoque: {len(movs)} encontradas")
    
    return True

def simular_sincronizacao():
    """Simula a sincroniza√ß√£o com Odoo para testar detec√ß√£o de cancelamento"""
    print("\n=== SIMULANDO SINCRONIZA√á√ÉO COM ODOO ===\n")
    
    try:
        # Criar servi√ßo
        service = FaturamentoService()
        
        # Data de hoje e 30 dias atr√°s para incluir a NF
        data_fim = datetime.now()
        data_inicio = data_fim - timedelta(days=90)  # Buscar √∫ltimos 90 dias
        
        print(f"Sincronizando per√≠odo: {data_inicio.date()} at√© {data_fim.date()}")
        print("NOTA: Verificando se NF 137713 est√° cancelada no Odoo...")
        print("      Se estiver com state='cancel', deve processar cancelamento\n")
        
        # Executar sincroniza√ß√£o
        # O m√©todo sincronizar_faturamento_incremental usa um filtro de data fixo interno
        # Vamos chamar direto, ele busca √∫ltimos 30 dias automaticamente
        resultado = service.sincronizar_faturamento_incremental()
        
        if resultado['sucesso']:
            print("‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso!")
            print(f"\nEstat√≠sticas:")
            stats = resultado.get('estatisticas', {})
            print(f"  - Novos registros: {stats.get('novos', 0)}")
            print(f"  - Atualizados: {stats.get('atualizados', 0)}")
            print(f"  - NFs canceladas processadas: {stats.get('nfs_canceladas_processadas', 0)}")
            print(f"  - Movimenta√ß√µes removidas: {stats.get('movimentacoes_removidas', 0)}")
            
            # Verificar se NF 137713 foi processada
            if stats.get('nfs_canceladas_processadas', 0) > 0:
                print("\nüéâ SUCESSO: Cancelamentos foram detectados e processados!")
            else:
                print("\n‚ö†Ô∏è Nenhum cancelamento detectado")
        else:
            print(f"‚ùå Erro na sincroniza√ß√£o: {resultado.get('erro')}")
            
    except Exception as e:
        print(f"‚ùå Erro ao executar sincroniza√ß√£o: {e}")
        import traceback
        traceback.print_exc()

def verificar_estado_final():
    """Verifica o estado ap√≥s sincroniza√ß√£o"""
    print("\n=== ESTADO FINAL DA NF 137713 ===\n")
    
    # Buscar NF
    nf_items = FaturamentoProduto.query.filter_by(numero_nf='137713').all()
    
    if nf_items:
        print(f"‚úì NF encontrada com {len(nf_items)} itens")
        status = nf_items[0].status_nf
        print(f"  Status: '{status}'")
        
        if status == 'CANCELADO':
            print("  ‚úÖ Status corretamente atualizado para CANCELADO")
        else:
            print(f"  ‚ö†Ô∏è Status ainda √© '{status}' (esperado: CANCELADO)")
    
    # Buscar movimenta√ß√µes
    movs = MovimentacaoEstoque.query.filter(
        MovimentacaoEstoque.observacao.like('%137713%')
    ).all()
    
    print(f"\nMovimenta√ß√µes de estoque: {len(movs)}")
    if len(movs) == 0:
        print("  ‚úÖ Movimenta√ß√µes removidas corretamente")
    else:
        print(f"  ‚ö†Ô∏è Ainda existem {len(movs)} movimenta√ß√µes")
        for mov in movs[:3]:  # Mostrar at√© 3
            print(f"    - {mov.cod_produto}: {mov.qtd_movimentacao}")

def main():
    print("="*60)
    print("TESTE DE DETEC√á√ÉO DE NF CANCELADA")
    print("="*60)
    
    # 1. Verificar estado inicial
    if not verificar_estado_inicial():
        print("\n‚ö†Ô∏è NF 137713 n√£o encontrada. Executando sincroniza√ß√£o mesmo assim...")
    
    # 2. Executar sincroniza√ß√£o
    simular_sincronizacao()
    
    # 3. Verificar estado final
    verificar_estado_final()
    
    print("\n" + "="*60)
    print("TESTE CONCLU√çDO")
    print("="*60)
    
    print("\nüí° DICA: Se o cancelamento n√£o foi detectado:")
    print("  1. Verifique se a NF est√° realmente cancelada no Odoo")
    print("  2. Verifique se o campo 'state' est√° vindo como 'cancel'")
    print("  3. Verifique os logs para mensagens com 'üö®'")

if __name__ == '__main__':
    app = create_app()
    with app.app_context():
        main()