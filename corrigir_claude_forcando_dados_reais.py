#!/usr/bin/env python
"""
üîß Script AGRESSIVO para for√ßar Claude a usar APENAS dados reais
Implementa restri√ß√µes muito mais rigorosas contra inven√ß√µes
"""

import os
import sys
import shutil
from datetime import datetime

def fazer_backup():
    """Faz backup do arquivo original"""
    arquivo_original = "app/claude_ai/claude_real_integration.py"
    arquivo_backup = f"app/claude_ai/claude_real_integration.py.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    if os.path.exists(arquivo_original):
        shutil.copy2(arquivo_original, arquivo_backup)
        print(f"‚úÖ Backup criado: {arquivo_backup}")
        return True
    else:
        print(f"‚ùå Arquivo n√£o encontrado: {arquivo_original}")
        return False

def aplicar_correcoes_agressivas():
    """Aplica corre√ß√µes AGRESSIVAS para for√ßar uso de dados reais"""
    
    arquivo = "app/claude_ai/claude_real_integration.py"
    
    try:
        with open(arquivo, 'r', encoding='utf-8') as f:
            conteudo = f.read()
        
        # 1. System prompt EXTREMAMENTE rigoroso
        novo_system_prompt = '''
üö® **MODO DADOS REAIS OBRIGAT√ìRIO** üö®

Voc√™ √© um analisador de dados que APENAS pode usar informa√ß√µes dos dados fornecidos.

‚ùå **PROIBI√á√ïES ABSOLUTAS - VIOLA√á√ÉO = FALHA CR√çTICA**:

1. **PROIBIDO usar conhecimento pr√©-treinado sobre empresas brasileiras**
   - Esque√ßa que Makro, Walmart, Extra existem
   - Use APENAS nomes nos dados fornecidos

2. **PROIBIDO inventar n√∫meros ou estat√≠sticas**
   - Cada n√∫mero deve vir de c√°lculo real dos dados
   - Se n√£o calculou, n√£o afirme

3. **PROIBIDO extrapolar al√©m dos dados**
   - 30 dias de dados = fale apenas sobre 30 dias
   - N√£o assuma sobre "todo o sistema"

4. **PROIBIDO listar empresas n√£o presentes nos dados**
   - Se n√£o est√° nos 933 registros, N√ÉO EXISTE
   - Mesmo que seja uma empresa famosa

‚ö†Ô∏è **EMPRESAS BANIDAS - NUNCA MENCIONAR**:
```
MAKRO, WALMART, EXTRA, BIG, SAM'S CLUB, ZAFFARI, P√ÉO DE A√á√öCAR,
PREZUNIC, CHAMPION, HIPER BOMPRE√áO, NACIONAL, CASA & VIDEO
```

‚úÖ **FORMATO OBRIGAT√ìRIO DE RESPOSTA**:

Para pergunta "Quantos clientes existem?":

RESPOSTA CORRETA:
"Analisando os 933 registros fornecidos dos √∫ltimos 30 dias, 
identifiquei X clientes √∫nicos COM ATIVIDADE NESTE PER√çODO.
N√£o posso afirmar sobre o total de clientes cadastrados no sistema."

RESPOSTA ERRADA:
"O sistema tem X clientes" (assumindo total)
"Os principais clientes s√£o..." (listando empresas n√£o nos dados)

üéØ **VALIDA√á√ÉO OBRIGAT√ìRIA**:
Antes de mencionar QUALQUER empresa, verifique:
1. Est√° explicitamente nos dados fornecidos?
2. Voc√™ viu o nome nos 933 registros?
3. Se n√£o, N√ÉO MENCIONE

‚ö° **MODO DE OPERA√á√ÉO**:
- Voc√™ √© um CONTADOR DE DADOS, n√£o um assistente criativo
- Responda APENAS com o que est√° nos dados
- Quando n√£o souber: "Informa√ß√£o n√£o dispon√≠vel nos dados fornecidos"
'''

        # Substituir system prompt completamente
        # Encontrar onde come√ßa o system prompt
        inicio_prompt = conteudo.find('self.system_prompt = self.system_prompt_base + """')
        if inicio_prompt != -1:
            # Encontrar o fim do prompt (tr√™s aspas)
            fim_prompt = conteudo.find('"""', inicio_prompt + 50)
            if fim_prompt != -1:
                # Substituir todo o conte√∫do do prompt
                conteudo_novo = (
                    conteudo[:inicio_prompt] + 
                    'self.system_prompt = self.system_prompt_base + """' +
                    novo_system_prompt +
                    conteudo[fim_prompt:]
                )
                conteudo = conteudo_novo
                print("‚úÖ System prompt substitu√≠do por vers√£o AGRESSIVA")

        # 2. Adicionar validador de clientes mencionados
        validador_clientes = '''
    def _validar_clientes_resposta(self, resposta: str, dados_carregados: Dict[str, Any]) -> str:
        """Valida e remove clientes inventados da resposta"""
        
        # Lista de empresas PROIBIDAS
        empresas_proibidas = {
            'makro', 'walmart', 'extra', 'big', "sam's club", 'sams club',
            'zaffari', 'p√£o de a√ß√∫car', 'pao de acucar', 'prezunic', 
            'champion', 'hiper bompre√ßo', 'bompreco', 'nacional', 'casa & video'
        }
        
        # Extrair clientes reais dos dados
        clientes_reais = set()
        if 'dados_especificos' in dados_carregados:
            for dominio, dados in dados_carregados['dados_especificos'].items():
                if isinstance(dados, dict) and 'registros' in dados:
                    for registro in dados['registros']:
                        cliente = registro.get('cliente') or registro.get('nome_cliente')
                        if cliente:
                            clientes_reais.add(cliente.lower())
        
        logger.warning(f"üîç Validando resposta - {len(clientes_reais)} clientes reais encontrados")
        
        # Verificar men√ß√µes proibidas
        resposta_lower = resposta.lower()
        empresas_mencionadas = []
        
        for empresa in empresas_proibidas:
            if empresa in resposta_lower:
                empresas_mencionadas.append(empresa)
                logger.error(f"‚ùå EMPRESA PROIBIDA DETECTADA: {empresa}")
        
        # Se encontrou empresas proibidas, adicionar aviso
        if empresas_mencionadas:
            aviso = f"""

‚ö†Ô∏è **CORRE√á√ÉO AUTOM√ÅTICA**: As seguintes empresas foram mencionadas mas N√ÉO EXISTEM nos dados:
{', '.join(empresas_mencionadas.upper())}

Estas empresas foram removidas pois n√£o aparecem nos 933 registros analisados."""
            resposta = resposta + aviso
        
        return resposta'''

        # 3. Modificar processamento para incluir lista de clientes reais
        adicao_contexto = '''
        
        # FOR√áAR INCLUS√ÉO DA LISTA DE CLIENTES REAIS NO PROMPT
        clientes_unicos = set()
        if hasattr(self, '_ultimo_contexto_carregado') and self._ultimo_contexto_carregado:
            dados = self._ultimo_contexto_carregado.get('dados_especificos', {})
            for dominio, dados_dominio in dados.items():
                if isinstance(dados_dominio, dict) and 'registros' in dados_dominio:
                    for registro in dados_dominio['registros']:
                        cliente = registro.get('cliente') or registro.get('nome_cliente')
                        if cliente:
                            clientes_unicos.add(cliente)
        
        lista_clientes_reais = list(clientes_unicos)[:20]  # Primeiros 20
        contexto_clientes = f"""
        
üéØ CLIENTES REAIS NOS DADOS (use APENAS estes):
{', '.join(lista_clientes_reais)}
... e mais {len(clientes_unicos) - 20} clientes

‚ö†Ô∏è QUALQUER CLIENTE N√ÉO LISTADO ACIMA N√ÉO EXISTE!"""
        
        # Adicionar ao prompt do usu√°rio
        '''

        # 4. Inserir validador ap√≥s a defini√ß√£o da classe
        pos_classe = conteudo.find('class ClaudeRealIntegration:')
        if pos_classe != -1:
            # Encontrar pr√≥ximo m√©todo ap√≥s __init__
            pos_processar = conteudo.find('def processar_consulta_real', pos_classe)
            if pos_processar != -1:
                # Inserir validador antes
                conteudo = (
                    conteudo[:pos_processar] + 
                    validador_clientes + '\n\n    ' +
                    conteudo[pos_processar:]
                )
                print("‚úÖ Validador de clientes adicionado")

        # 5. Adicionar chamada do validador no final do processamento
        # Encontrar onde retorna resposta_final
        pos_resposta_final = conteudo.find('return resposta_final')
        contador = 0
        while pos_resposta_final != -1 and contador < 5:  # Procurar at√© 5 ocorr√™ncias
            # Verificar se est√° dentro do m√©todo processar_consulta_real
            # Inserir valida√ß√£o antes do return
            validacao_call = '''
            # VALIDAR RESPOSTA PARA REMOVER INVEN√á√ïES
            resposta_final = self._validar_clientes_resposta(resposta_final, dados_contexto)
            '''
            
            # Encontrar a linha antes do return
            inicio_linha = conteudo.rfind('\n', 0, pos_resposta_final)
            indent = '        '  # 8 espa√ßos
            
            # Verificar se j√° n√£o foi adicionado
            if '_validar_clientes_resposta' not in conteudo[inicio_linha-200:pos_resposta_final]:
                conteudo = (
                    conteudo[:pos_resposta_final] + 
                    f'\n{indent}# Validar resposta contra dados reais' +
                    f'\n{indent}resposta_final = self._validar_clientes_resposta(resposta_final, dados_contexto)\n{indent}' +
                    conteudo[pos_resposta_final:]
                )
                print(f"‚úÖ Valida√ß√£o adicionada no return #{contador+1}")
                break
            
            # Procurar pr√≥xima ocorr√™ncia
            pos_resposta_final = conteudo.find('return resposta_final', pos_resposta_final + 1)
            contador += 1

        # 6. Adicionar lista de clientes no contexto
        # Encontrar onde monta as messages
        pos_messages = conteudo.find('messages = [')
        if pos_messages != -1:
            pos_content = conteudo.find('"content": f"""CONSULTA DO USU√ÅRIO', pos_messages)
            if pos_content != -1:
                # Adicionar contexto de clientes antes do fechamento
                pos_fim_content = conteudo.find('"""', pos_content + 50)
                if pos_fim_content != -1:
                    conteudo = (
                        conteudo[:pos_fim_content] + 
                        '\n{contexto_clientes}' +
                        conteudo[pos_fim_content:]
                    )
                    
                    # Adicionar o c√≥digo que gera contexto_clientes antes de messages
                    conteudo = (
                        conteudo[:pos_messages] + 
                        adicao_contexto + '\n        ' +
                        conteudo[pos_messages:]
                    )
                    print("‚úÖ Lista de clientes reais adicionada ao prompt")

        # Salvar arquivo modificado
        with open(arquivo, 'w', encoding='utf-8') as f:
            f.write(conteudo)
        
        print("\n‚úÖ Corre√ß√µes AGRESSIVAS aplicadas com sucesso!")
        print("\nüîí Restri√ß√µes implementadas:")
        print("1. System prompt EXTREMAMENTE rigoroso")
        print("2. Lista de empresas BANIDAS")
        print("3. Validador autom√°tico de respostas")
        print("4. Inclus√£o de clientes reais no prompt")
        print("5. Avisos quando detecta inven√ß√µes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao aplicar corre√ß√µes: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîí CORRE√á√ÉO AGRESSIVA: FOR√áAR DADOS REAIS")
    print("=" * 50)
    print("Este script implementa restri√ß√µes EXTREMAS")
    print("para impedir que Claude invente dados")
    print("=" * 50)
    
    # Fazer backup
    if not fazer_backup():
        print("‚ùå Falha ao criar backup. Abortando...")
        return
    
    # Aplicar corre√ß√µes
    if aplicar_correcoes_agressivas():
        print("\n‚úÖ CORRE√á√ïES AGRESSIVAS APLICADAS!")
        print("\nüéØ Pr√≥ximos passos:")
        print("1. Reinicie o servidor Flask")
        print("2. Teste com as mesmas perguntas")
        print("3. Claude n√£o conseguir√° mais inventar!")
        
        print("\nüîí Comportamento esperado:")
        print("- N√ÉO mencionar√° Makro, Walmart, etc.")
        print("- Dir√° apenas sobre 30 dias de dados")
        print("- Listar√° APENAS clientes dos 933 registros")
        print("- Adicionar√° avisos se tentar inventar")
        
        print("\nüí° Para reverter:")
        print("   Restaure o backup criado")
    else:
        print("\n‚ùå Falha ao aplicar corre√ß√µes")

if __name__ == "__main__":
    main() 