#!/usr/bin/env python3
"""
Script de Migra√ß√£o Direta: PreSeparacaoItem ‚Üí Separacao
Data: 2025-01-29

Este script ajuda a migrar o c√≥digo de PreSeparacaoItem para usar 
Separacao com status='PREVISAO' diretamente, sem adapter.
"""

import os
import re
from pathlib import Path

def criar_mapeamento_campos():
    """Mapeamento de campos PreSeparacaoItem ‚Üí Separacao"""
    return {
        # Campos id√™nticos
        'separacao_lote_id': 'separacao_lote_id',
        'num_pedido': 'num_pedido', 
        'cod_produto': 'cod_produto',
        'nome_produto': 'nome_produto',
        
        # Campos com nome diferente
        'cnpj_cliente': 'cnpj_cpf',
        'qtd_selecionada_usuario': 'qtd_saldo',
        'valor_original_item': 'valor_saldo',
        'peso_original_item': 'peso',
        'data_expedicao_editada': 'expedicao',
        'data_agendamento_editada': 'agendamento',
        'protocolo_editado': 'protocolo',
        'observacoes_usuario': 'observ_ped_1',
        'data_criacao': 'criado_em',
        
        # Campos que n√£o existem em Separacao (ignorar)
        'qtd_original_carteira': None,
        'qtd_restante_calculada': None,
        'recomposto': None,
        'criado_por': None,
        'hash_item_original': None,
        'data_recomposicao': None,
        'recomposto_por': None,
        'versao_carteira_original': None,
        'versao_carteira_recomposta': None,
    }

def gerar_codigo_migrado(arquivo_path):
    """Gera vers√£o migrada de um arquivo Python"""
    
    with open(arquivo_path, 'r', encoding='utf-8') as f:
        codigo = f.read()
    
    # Substitui√ß√µes b√°sicas
    migracoes = [
        # Import
        (r'from app\.carteira\.models import (.*?)PreSeparacaoItem',
         r'from app.separacao.models import Separacao  # Migrado de PreSeparacaoItem'),
        
        # Queries simples
        (r'PreSeparacaoItem\.query\.filter_by\(',
         r'Separacao.query.filter_by(status="PREVISAO", '),
        
        (r'PreSeparacaoItem\.query\.filter\(',
         r'Separacao.query.filter(Separacao.status == "PREVISAO", '),
         
        # Status in
        (r'PreSeparacaoItem\.status\.in_\(\["CRIADO", "RECOMPOSTO"\]\)',
         r'Separacao.status == "PREVISAO"'),
         
        # Criar novo
        (r'PreSeparacaoItem\(',
         r'Separacao(status="PREVISAO", '),
         
        # Campos
        (r'\.cnpj_cliente',
         r'.cnpj_cpf'),
        (r'\.qtd_selecionada_usuario',
         r'.qtd_saldo'),
        (r'\.valor_original_item',
         r'.valor_saldo'),
        (r'\.data_expedicao_editada',
         r'.expedicao'),
        (r'\.data_agendamento_editada', 
         r'.agendamento'),
        (r'\.protocolo_editado',
         r'.protocolo'),
        (r'\.observacoes_usuario',
         r'.observ_ped_1'),
    ]
    
    codigo_migrado = codigo
    for pattern, replacement in migracoes:
        codigo_migrado = re.sub(pattern, replacement, codigo_migrado)
    
    return codigo_migrado

def migrar_arquivo_critico(arquivo_path):
    """Migra um arquivo cr√≠tico espec√≠fico"""
    print(f"\nüîÑ Migrando: {arquivo_path}")
    
    # Backup
    backup_path = f"{arquivo_path}.backup_presep"
    if not os.path.exists(backup_path):
        with open(arquivo_path, 'r', encoding='utf-8') as f:
            conteudo_original = f.read()
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(conteudo_original)
        print(f"  ‚úÖ Backup criado: {backup_path}")
    
    # Gerar c√≥digo migrado
    codigo_migrado = gerar_codigo_migrado(arquivo_path)
    
    # Salvar vers√£o migrada
    migrado_path = f"{arquivo_path}.migrado"
    with open(migrado_path, 'w', encoding='utf-8') as f:
        f.write(codigo_migrado)
    
    print(f"  ‚úÖ Vers√£o migrada: {migrado_path}")
    print(f"  üìù Revise o arquivo e renomeie quando estiver OK")
    
    return migrado_path

def exemplo_query_migrada():
    """Exemplos de queries migradas"""
    
    print("\n" + "="*60)
    print("EXEMPLOS DE MIGRA√á√ÉO DE QUERIES")
    print("="*60)
    
    exemplos = [
        ("Buscar pr√©-separa√ß√µes",
         "# ANTES:\nPreSeparacaoItem.query.filter_by(num_pedido=num_pedido)",
         "# DEPOIS:\nSeparacao.query.filter_by(num_pedido=num_pedido, status='PREVISAO')"),
        
        ("Criar pr√©-separa√ß√£o",
         "# ANTES:\npre_sep = PreSeparacaoItem(\n    num_pedido=num_pedido,\n    cnpj_cliente=cnpj)",
         "# DEPOIS:\npre_sep = Separacao(\n    num_pedido=num_pedido,\n    cnpj_cpf=cnpj,\n    status='PREVISAO')"),
        
        ("Verificar status",
         "# ANTES:\nif item.status in ['CRIADO', 'RECOMPOSTO']:",
         "# DEPOIS:\nif item.status == 'PREVISAO':"),
        
        ("Transformar em separa√ß√£o",
         "# ANTES:\nitem.status = 'ENVIADO_SEPARACAO'",
         "# DEPOIS:\nitem.status = 'ABERTO'"),
    ]
    
    for titulo, antes, depois in exemplos:
        print(f"\n### {titulo}")
        print(antes)
        print(depois)

def main():
    """Executa migra√ß√£o"""
    
    print("üöÄ MIGRA√á√ÉO DIRETA: PreSeparacaoItem ‚Üí Separacao")
    print("="*60)
    
    # Arquivos cr√≠ticos para migrar primeiro
    arquivos_criticos = [
        'app/carteira/routes/pre_separacao_api.py',
        'app/carteira/routes/separacao_api.py',
        'app/carteira/routes/workspace_api.py',
        'app/carteira/services/agrupamento_service.py',
    ]
    
    print("\nüìã Arquivos cr√≠ticos identificados:")
    for arquivo in arquivos_criticos:
        if os.path.exists(arquivo):
            print(f"  ‚úÖ {arquivo}")
        else:
            print(f"  ‚ùå {arquivo} (n√£o encontrado)")
    
    # Mostrar exemplos
    exemplo_query_migrada()
    
    print("\n" + "="*60)
    print("PR√ìXIMOS PASSOS:")
    print("="*60)
    print("1. Execute este script para criar vers√µes migradas")
    print("2. Revise os arquivos .migrado gerados")
    print("3. Teste as funcionalidades")
    print("4. Substitua os arquivos originais quando OK")
    print("5. Delete os backups ap√≥s valida√ß√£o completa")
    
    resposta = input("\nüîß Deseja migrar os arquivos cr√≠ticos agora? (s/n): ")
    if resposta.lower() == 's':
        for arquivo in arquivos_criticos:
            if os.path.exists(arquivo):
                migrar_arquivo_critico(arquivo)
    
    print("\n‚úÖ Processo de migra√ß√£o conclu√≠do!")

if __name__ == "__main__":
    main()