#!/usr/bin/env python3
"""
Script para corrigir o AjusteSincronizacaoService
Adiciona prote√ß√£o contra exclus√£o de separa√ß√µes faturadas
"""

import os
import shutil
from datetime import datetime

# Fazer backup do arquivo original
arquivo_original = "/home/rafaelnascimento/projetos/frete_sistema/app/odoo/services/ajuste_sincronizacao_service.py"
arquivo_backup = f"{arquivo_original}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

print(f"üì¶ Criando backup: {arquivo_backup}")
shutil.copy2(arquivo_original, arquivo_backup)

# Ler o arquivo original
with open(arquivo_original, 'r') as f:
    conteudo = f.read()

# CORRE√á√ÉO 1: Adicionar m√©todo para verificar faturamento
metodo_verificar_faturamento = '''
    @classmethod
    def _verificar_se_faturado(cls, lote_id: str, num_pedido: str = None, cod_produto: str = None) -> bool:
        """
        Verifica se uma separa√ß√£o foi faturada.
        
        IMPORTANTE: Uma separa√ß√£o √© considerada FATURADA se:
        1. O Pedido tem NF preenchida E
        2. Existe registro em FaturamentoProduto com essa NF
        
        Args:
            lote_id: ID do lote de separa√ß√£o
            num_pedido: N√∫mero do pedido (opcional)
            cod_produto: C√≥digo do produto (opcional, para verifica√ß√£o espec√≠fica)
            
        Returns:
            True se foi faturada, False caso contr√°rio
        """
        try:
            from app.faturamento.models import FaturamentoProduto
            
            # Buscar o Pedido pelo lote
            pedido = Pedido.query.filter_by(separacao_lote_id=lote_id).first()
            
            if not pedido or not pedido.nf:
                return False
            
            # Verificar se existe faturamento com essa NF
            query = FaturamentoProduto.query.filter_by(numero_nf=pedido.nf)
            
            # Se especificou produto, verificar esse produto espec√≠fico
            if num_pedido and cod_produto:
                query = query.filter_by(
                    origem=num_pedido,
                    cod_produto=cod_produto
                )
            
            faturamento_existe = query.first() is not None
            
            if faturamento_existe:
                logger.info(f"üõ°Ô∏è Separa√ß√£o {lote_id} est√° FATURADA (NF: {pedido.nf})")
            
            return faturamento_existe
            
        except Exception as e:
            logger.error(f"Erro ao verificar faturamento: {e}")
            # Na d√∫vida, proteger (considerar como faturado)
            return True
'''

# Inserir o novo m√©todo ap√≥s o m√©todo _verificar_se_cotado (linha 1019)
posicao_insercao = conteudo.find("    @classmethod\n    def _gerar_alerta_cotado")
if posicao_insercao > 0:
    conteudo = conteudo[:posicao_insercao] + metodo_verificar_faturamento + "\n" + conteudo[posicao_insercao:]
    print("‚úÖ M√©todo _verificar_se_faturado adicionado")

# CORRE√á√ÉO 2: Modificar _identificar_lotes_afetados para excluir faturados
# Substituir a query de separa√ß√µes (linha 152-166)
query_antiga = """        # PRIMEIRO: Buscar separa√ß√µes com JOIN em Pedido para filtrar status diretamente
        # S√≥ busca separa√ß√µes onde o Pedido tem status ABERTO ou COTADO
        seps = db.session.query(
            Separacao.separacao_lote_id,
            Pedido.status
        ).outerjoin(
            Pedido,
            Separacao.separacao_lote_id == Pedido.separacao_lote_id
        ).filter(
            Separacao.num_pedido == num_pedido,
            Separacao.separacao_lote_id.isnot(None),
            # PROTE√á√ÉO: S√≥ pegar separa√ß√µes com Pedido em status alter√°vel
            db.or_(
                Pedido.status.in_(['ABERTO', 'COTADO']),
                Pedido.status.is_(None)  # Ou sem Pedido (pode acontecer)
            )
        ).distinct().all()"""

query_nova = """        # PRIMEIRO: Buscar separa√ß√µes com JOIN em Pedido para filtrar status diretamente
        # S√≥ busca separa√ß√µes onde o Pedido tem status ABERTO ou COTADO
        seps = db.session.query(
            Separacao.separacao_lote_id,
            Pedido.status,
            Pedido.nf
        ).outerjoin(
            Pedido,
            Separacao.separacao_lote_id == Pedido.separacao_lote_id
        ).filter(
            Separacao.num_pedido == num_pedido,
            Separacao.separacao_lote_id.isnot(None),
            # PROTE√á√ÉO: S√≥ pegar separa√ß√µes com Pedido em status alter√°vel
            db.or_(
                Pedido.status.in_(['ABERTO', 'COTADO']),
                Pedido.status.is_(None)  # Ou sem Pedido (pode acontecer)
            )
        ).distinct().all()"""

conteudo = conteudo.replace(query_antiga, query_nova)
print("‚úÖ Query de identifica√ß√£o de lotes atualizada")

# CORRE√á√ÉO 3: Adicionar verifica√ß√£o de faturamento no loop de separa√ß√µes
loop_antigo = """        for lote_id, status_pedido in seps:
            lotes.append({
                'lote_id': lote_id,
                'tipo': 'SEPARACAO'
            })
            lotes_processados.add(lote_id)
            logger.info(f"Encontrada Separacao com lote {lote_id} (status: {status_pedido or 'SEM_PEDIDO'})")"""

loop_novo = """        for lote_id, status_pedido, nf in seps:
            # PROTE√á√ÉO ADICIONAL: Verificar se foi faturado
            if cls._verificar_se_faturado(lote_id):
                logger.warning(f"üõ°Ô∏è PROTE√á√ÉO: Ignorando lote {lote_id} - Separa√ß√£o FATURADA (NF: {nf})")
                lotes_processados.add(lote_id)
                continue
                
            lotes.append({
                'lote_id': lote_id,
                'tipo': 'SEPARACAO'
            })
            lotes_processados.add(lote_id)
            logger.info(f"Encontrada Separacao com lote {lote_id} (status: {status_pedido or 'SEM_PEDIDO'})")"""

conteudo = conteudo.replace(loop_antigo, loop_novo)
print("‚úÖ Prote√ß√£o de separa√ß√µes faturadas adicionada")

# CORRE√á√ÉO 4: Proteger contra dele√ß√£o em _substituir_separacao_total
substituir_antigo = """    def _substituir_separacao_total(cls, num_pedido: str, lote_id: str, itens_odoo: List[Dict]):
        \"\"\"
        Substitui completamente uma separa√ß√£o TOTAL.
        Pega 1 linha existente como modelo, deleta tudo e recria com os novos itens.
        \"\"\"
        # PROTE√á√ÉO: Verificar se o Pedido permite altera√ß√£o
        pedido = Pedido.query.filter_by(separacao_lote_id=lote_id).first()
        if pedido and pedido.status not in ['ABERTO', 'COTADO']:
            logger.warning(f"üõ°Ô∏è PROTE√á√ÉO: N√£o alterando Separacao {lote_id} - Pedido com status '{pedido.status}'")
            return"""

substituir_novo = """    def _substituir_separacao_total(cls, num_pedido: str, lote_id: str, itens_odoo: List[Dict]):
        \"\"\"
        Substitui completamente uma separa√ß√£o TOTAL.
        Pega 1 linha existente como modelo, deleta tudo e recria com os novos itens.
        \"\"\"
        # PROTE√á√ÉO: Verificar se foi faturado
        if cls._verificar_se_faturado(lote_id, num_pedido):
            logger.warning(f"üõ°Ô∏è PROTE√á√ÉO: N√£o alterando Separacao {lote_id} - Separa√ß√£o FATURADA")
            return
            
        # PROTE√á√ÉO: Verificar se o Pedido permite altera√ß√£o
        pedido = Pedido.query.filter_by(separacao_lote_id=lote_id).first()
        if pedido and pedido.status not in ['ABERTO', 'COTADO']:
            logger.warning(f"üõ°Ô∏è PROTE√á√ÉO: N√£o alterando Separacao {lote_id} - Pedido com status '{pedido.status}'")
            return"""

conteudo = conteudo.replace(substituir_antigo, substituir_novo)
print("‚úÖ Prote√ß√£o em _substituir_separacao_total adicionada")

# CORRE√á√ÉO 5: Proteger contra dele√ß√£o em _aplicar_reducao_hierarquia
# Primeira ocorr√™ncia (linha 936-940)
delecao_antiga_1 = """                        # Se zerou, deletar
                        if sep.qtd_saldo <= 0:
                            db.session.delete(sep)
                            resultado['operacoes'].append(f"Separa√ß√£o {sep.separacao_lote_id} removida")"""

delecao_nova_1 = """                        # Se zerou, deletar (mas verificar faturamento primeiro)
                        if sep.qtd_saldo <= 0:
                            if not cls._verificar_se_faturado(sep.separacao_lote_id, num_pedido, cod_produto):
                                db.session.delete(sep)
                                resultado['operacoes'].append(f"Separa√ß√£o {sep.separacao_lote_id} removida")
                            else:
                                logger.warning(f"üõ°Ô∏è Separa√ß√£o {sep.separacao_lote_id} zerada mas FATURADA - mantendo registro")
                                resultado['operacoes'].append(f"Separa√ß√£o {sep.separacao_lote_id} zerada (FATURADA - mantida)")"""

conteudo = conteudo.replace(delecao_antiga_1, delecao_nova_1)
print("‚úÖ Prote√ß√£o contra dele√ß√£o de separa√ß√£o n√£o-cotada adicionada")

# Segunda ocorr√™ncia (linha 984-986)
delecao_antiga_2 = """                        # Se zerou, deletar
                        if sep.qtd_saldo <= 0:
                            db.session.delete(sep)
                            resultado['operacoes'].append(f"Separa√ß√£o {sep.separacao_lote_id} removida")"""

# Procurar a segunda ocorr√™ncia (ap√≥s "if is_cotado:")
pos_primeira = conteudo.find(delecao_nova_1)
if pos_primeira > 0:
    # Procurar ap√≥s a primeira corre√ß√£o
    pos_segunda = conteudo.find(delecao_antiga_2, pos_primeira + len(delecao_nova_1))
    if pos_segunda > 0:
        conteudo = conteudo[:pos_segunda] + delecao_nova_1.replace("n√£o-cotada", "cotada") + conteudo[pos_segunda + len(delecao_antiga_2):]
        print("‚úÖ Prote√ß√£o contra dele√ß√£o de separa√ß√£o cotada adicionada")

# Salvar o arquivo corrigido
with open(arquivo_original, 'w') as f:
    f.write(conteudo)

print("\n‚úÖ CORRE√á√ïES APLICADAS COM SUCESSO!")
print("\nüìã RESUMO DAS CORRE√á√ïES:")
print("1. ‚úÖ Adicionado m√©todo _verificar_se_faturado()")
print("2. ‚úÖ Prote√ß√£o em _identificar_lotes_afetados()")
print("3. ‚úÖ Prote√ß√£o em _substituir_separacao_total()")
print("4. ‚úÖ Prote√ß√£o contra dele√ß√£o em _aplicar_reducao_hierarquia()")
print(f"\nüíæ Backup salvo em: {arquivo_backup}")
print("\nüîÑ Para reverter, execute:")
print(f"   cp {arquivo_backup} {arquivo_original}")