{
  "timestamp": "2025-07-08T20:45:00.226501",
  "arquivos_existentes": {
    "adapters": {
      "tipo": "pasta",
      "arquivos": [
        "data_adapter.py",
        "intelligence_adapter.py",
        "__init__.py"
      ]
    },
    "analyzers": {
      "tipo": "pasta",
      "arquivos": [
        "analyzer_manager.py",
        "intention_analyzer.py",
        "metacognitive_analyzer.py",
        "nlp_enhanced_analyzer.py",
        "query_analyzer.py",
        "structural_ai.py",
        "__init__.py"
      ]
    },
    "commands": {
      "tipo": "pasta",
      "arquivos": [
        "cursor_commands.py",
        "dev_commands.py",
        "excel_commands.py",
        "file_commands.py",
        "__init__.py"
      ]
    },
    "config": {
      "tipo": "pasta",
      "arquivos": [
        "advanced_config.py",
        "__init__.py"
      ]
    },
    "data": {
      "tipo": "pasta",
      "arquivos": [
        "data_manager.py",
        "__init__.py"
      ]
    },
    "docs": {
      "tipo": "pasta",
      "arquivos": []
    },
    "flask_session": {
      "tipo": "pasta",
      "arquivos": []
    },
    "integration": {
      "tipo": "pasta",
      "arquivos": [
        "integration_manager.py",
        "__init__.py"
      ]
    },
    "intelligence": {
      "tipo": "pasta",
      "arquivos": [
        "intelligence_manager.py",
        "__init__.py"
      ]
    },
    "interfaces": {
      "tipo": "pasta",
      "arquivos": [
        "__init__.py"
      ]
    },
    "knowledge": {
      "tipo": "pasta",
      "arquivos": [
        "knowledge_manager.py"
      ]
    },
    "logs": {
      "tipo": "pasta",
      "arquivos": []
    },
    "migrations": {
      "tipo": "pasta",
      "arquivos": [
        "__init__.py"
      ]
    },
    "ml_models": {
      "tipo": "pasta",
      "arquivos": []
    },
    "models": {
      "tipo": "pasta",
      "arquivos": [
        "__init__.py"
      ]
    },
    "multi_agent": {
      "tipo": "pasta",
      "arquivos": [
        "agent_types.py",
        "critic_agent.py",
        "multi_agent_orchestrator.py",
        "specialist_agents.py",
        "system.py",
        "__init__.py"
      ]
    },
    "processors": {
      "tipo": "pasta",
      "arquivos": [
        "context_processor.py",
        "processor_manager.py",
        "query_processor.py",
        "response_processor.py",
        "semantic_loop_processor.py",
        "__init__.py"
      ]
    },
    "scanning": {
      "tipo": "pasta",
      "arquivos": [
        "code_scanner.py",
        "database_scanner.py",
        "file_scanner.py",
        "project_scanner.py",
        "scanner.py",
        "structure_scanner.py",
        "__init__.py"
      ]
    },
    "security": {
      "tipo": "pasta",
      "arquivos": [
        "__init__.py"
      ]
    },
    "semantic": {
      "tipo": "pasta",
      "arquivos": [
        "semantic_diagnostics.py",
        "semantic_enricher.py",
        "semantic_manager.py",
        "semantic_orchestrator.py",
        "semantic_validator.py",
        "__init__.py"
      ]
    },
    "static": {
      "tipo": "pasta",
      "arquivos": []
    },
    "suggestions": {
      "tipo": "pasta",
      "arquivos": [
        "engine.py",
        "suggestions_manager.py",
        "__init__.py"
      ]
    },
    "templates": {
      "tipo": "pasta",
      "arquivos": []
    },
    "tests": {
      "tipo": "pasta",
      "arquivos": [
        "test_advanced_integration.py",
        "test_config.py",
        "test_conversation_context.py",
        "test_data_provider.py",
        "test_decomposicao.py",
        "test_decomposicao_total.py",
        "test_human_learning.py",
        "test_lifelong_learning.py",
        "test_multi_agent_system.py",
        "test_nlp_enhanced_analyzer.py",
        "test_project_scanner.py",
        "test_suggestion_engine.py",
        "__init__.py"
      ]
    },
    "tools": {
      "tipo": "pasta",
      "arquivos": [
        "tools_manager.py",
        "__init__.py"
      ]
    },
    "uploads": {
      "tipo": "pasta",
      "arquivos": []
    },
    "utils": {
      "tipo": "pasta",
      "arquivos": [
        "response_utils.py",
        "utils_manager.py",
        "validation_utils.py",
        "__init__.py"
      ]
    },
    "data\\loaders": {
      "tipo": "pasta",
      "arquivos": [
        "context_loader.py",
        "database_loader.py"
      ]
    },
    "data\\providers": {
      "tipo": "pasta",
      "arquivos": [
        "data_executor.py",
        "data_provider.py"
      ]
    },
    "integration\\advanced": {
      "tipo": "pasta",
      "arquivos": [
        "advanced_integration.py",
        "__init__.py"
      ]
    },
    "integration\\claude": {
      "tipo": "pasta",
      "arquivos": [
        "claude_client.py",
        "claude_integration.py",
        "__init__.py"
      ]
    },
    "integration\\processing": {
      "tipo": "pasta",
      "arquivos": [
        "response_formatter.py",
        "__init__.py"
      ]
    },
    "intelligence\\conversation": {
      "tipo": "pasta",
      "arquivos": [
        "conversation_context.py",
        "__init__.py"
      ]
    },
    "intelligence\\learning": {
      "tipo": "pasta",
      "arquivos": [
        "feedback_processor.py",
        "human_in_loop_learning.py",
        "learning_core.py",
        "lifelong_learning.py",
        "pattern_learner.py",
        "__init__.py"
      ]
    },
    "intelligence\\memory": {
      "tipo": "pasta",
      "arquivos": [
        "context_manager.py",
        "__init__.py"
      ]
    },
    "multi_agent\\agents": {
      "tipo": "pasta",
      "arquivos": [
        "base_agent.py",
        "embarques_agent.py",
        "entregas_agent.py",
        "financeiro_agent.py",
        "fretes_agent.py",
        "pedidos_agent.py",
        "smart_base_agent.py",
        "__init__.py"
      ]
    },
    "multi_agent\\agents\\backup_20250708_133047": {
      "tipo": "pasta",
      "arquivos": [
        "embarques_agent.py",
        "financeiro_agent.py",
        "fretes_agent.py",
        "pedidos_agent.py"
      ]
    },
    "semantic\\diagnostics": {
      "tipo": "pasta",
      "arquivos": [
        "__init__.py"
      ]
    },
    "semantic\\mappers": {
      "tipo": "pasta",
      "arquivos": [
        "base_mapper.py",
        "embarques_mapper.py",
        "faturamento_mapper.py",
        "monitoramento_mapper.py",
        "pedidos_mapper.py",
        "transportadoras_mapper.py",
        "__init__.py"
      ]
    },
    "semantic\\readers": {
      "tipo": "pasta",
      "arquivos": [
        "database_reader.py",
        "performance_cache.py",
        "readme_reader.py",
        "__init__.py"
      ]
    },
    "semantic\\relationships": {
      "tipo": "pasta",
      "arquivos": [
        "__init__.py"
      ]
    },
    "semantic\\validators": {
      "tipo": "pasta",
      "arquivos": [
        "__init__.py"
      ]
    },
    "semantic\\readers\\database": {
      "tipo": "pasta",
      "arquivos": [
        "auto_mapper.py",
        "database_connection.py",
        "data_analyzer.py",
        "field_searcher.py",
        "metadata_reader.py",
        "relationship_mapper.py",
        "__init__.py"
      ]
    },
    "static\\css": {
      "tipo": "pasta",
      "arquivos": []
    },
    "static\\images": {
      "tipo": "pasta",
      "arquivos": []
    },
    "static\\js": {
      "tipo": "pasta",
      "arquivos": []
    },
    "templates\\components": {
      "tipo": "pasta",
      "arquivos": []
    },
    "uploads\\agendamentos": {
      "tipo": "pasta",
      "arquivos": []
    },
    "uploads\\faturamento": {
      "tipo": "pasta",
      "arquivos": []
    },
    "uploads\\separacao": {
      "tipo": "pasta",
      "arquivos": []
    }
  },
  "managers_analisados": {
    "multi_agent/multi_agent_orchestrator.py": {
      "arquivo": "app\\claude_ai_novo\\multi_agent\\multi_agent_orchestrator.py",
      "tamanho_linhas": 630,
      "imports_encontrados": [
        "logging",
        "asyncio",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db"
      ],
      "classes_definidas": [
        "AgentType",
        "ValidationResult",
        "OperationRecord",
        "DummyAgent",
        "CriticAgent",
        "FlaskContextWrapper",
        "MultiAgentOrchestrator"
      ],
      "funcoes_definidas": [
        "get_multi_agent_orchestrator",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "_init_flask_context",
        "_get_app_config",
        "_get_db_session",
        "is_flask_available",
        "__init__",
        "_create_default_validation",
        "_format_single_response",
        "_format_dual_response",
        "_format_multi_response",
        "_create_operation_record",
        "get_system_stats",
        "update_config",
        "get_status",
        "health_check"
      ],
      "imports_relativos": [],
      "imports_absolutos": [
        "logging",
        "asyncio",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db"
      ],
      "tem_fallbacks": false,
      "tem_flask_wrapper": true
    },
    "analyzers/analyzer_manager.py": {
      "arquivo": "app\\claude_ai_novo\\analyzers\\analyzer_manager.py",
      "tamanho_linhas": 336,
      "imports_encontrados": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "asyncio",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db"
      ],
      "classes_definidas": [
        "IntentionAnalyzer",
        "NLPEnhancedAnalyzer",
        "QueryAnalyzer",
        "MetacognitiveAnalyzer",
        "StructuralAI",
        "FlaskContextWrapper",
        "AnalyzerManager"
      ],
      "funcoes_definidas": [
        "get_analyzermanager",
        "get_manager",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "_init_flask_context",
        "_get_app_config",
        "_get_db_session",
        "is_flask_available",
        "__init__",
        "_initialize_components",
        "analyze_query",
        "analyze_intention",
        "analyze_nlp",
        "analyze_metacognitive",
        "get_best_analyzer",
        "get_status",
        "health_check",
        "__str__",
        "__repr__"
      ],
      "imports_relativos": [],
      "imports_absolutos": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "asyncio",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db"
      ],
      "tem_fallbacks": false,
      "tem_flask_wrapper": true
    },
    "processors/processor_manager.py": {
      "arquivo": "app\\claude_ai_novo\\processors\\processor_manager.py",
      "tamanho_linhas": 312,
      "imports_encontrados": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "asyncio",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db"
      ],
      "classes_definidas": [
        "FlaskContextWrapper",
        "ProcessorManager"
      ],
      "funcoes_definidas": [
        "get_processormanager",
        "get_manager",
        "__init__",
        "_init_flask_context",
        "_get_app_config",
        "_get_db_session",
        "is_flask_available",
        "__init__",
        "_initialize_components",
        "process_context",
        "process_response",
        "process_semantic_loop",
        "process_query",
        "get_processor_chain",
        "get_status",
        "health_check",
        "__str__",
        "__repr__"
      ],
      "imports_relativos": [],
      "imports_absolutos": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "asyncio",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db"
      ],
      "tem_fallbacks": false,
      "tem_flask_wrapper": true
    },
    "data/data_manager.py": {
      "arquivo": "app\\claude_ai_novo\\data\\data_manager.py",
      "tamanho_linhas": 303,
      "imports_encontrados": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "asyncio",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db"
      ],
      "classes_definidas": [
        "FlaskContextWrapper",
        "DataManager"
      ],
      "funcoes_definidas": [
        "get_datamanager",
        "get_manager",
        "__init__",
        "_init_flask_context",
        "_get_app_config",
        "_get_db_session",
        "is_flask_available",
        "__init__",
        "_initialize_components",
        "load_data",
        "load_context",
        "provide_data",
        "get_loader",
        "get_provider",
        "get_status",
        "health_check",
        "__str__",
        "__repr__"
      ],
      "imports_relativos": [],
      "imports_absolutos": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "asyncio",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db"
      ],
      "tem_fallbacks": false,
      "tem_flask_wrapper": true
    },
    "utils/utils_manager.py": {
      "arquivo": "app\\claude_ai_novo\\utils\\utils_manager.py",
      "tamanho_linhas": 268,
      "imports_encontrados": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "asyncio",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db"
      ],
      "classes_definidas": [
        "FlaskContextWrapper",
        "UtilsManager"
      ],
      "funcoes_definidas": [
        "get_utilsmanager",
        "get_manager",
        "__init__",
        "_init_flask_context",
        "_get_app_config",
        "_get_db_session",
        "is_flask_available",
        "__init__",
        "_initialize_components",
        "validate",
        "format_response",
        "get_validator",
        "get_formatter",
        "get_status",
        "health_check",
        "__str__",
        "__repr__"
      ],
      "imports_relativos": [],
      "imports_absolutos": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "asyncio",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db"
      ],
      "tem_fallbacks": false,
      "tem_flask_wrapper": true
    },
    "intelligence/intelligence_manager.py": {
      "arquivo": "app\\claude_ai_novo\\intelligence\\intelligence_manager.py",
      "tamanho_linhas": 508,
      "imports_encontrados": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "conversation.conversation_context.ConversationContext",
        "learning.lifelong_learning.LifelongLearningSystem",
        "learning.human_in_loop_learning.HumanInLoopLearning",
        "memory.context_manager.ContextManager",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db",
        "sqlalchemy.text",
        "app.db"
      ],
      "classes_definidas": [
        "FlaskContextWrapper",
        "FlaskDatabaseAdapter",
        "IntelligenceResult",
        "IntelligenceManager",
        "ConversationContext",
        "LifelongLearningSystem",
        "HumanInLoopLearning",
        "ContextManager"
      ],
      "funcoes_definidas": [
        "get_intelligence_manager",
        "__init__",
        "_init_flask_context",
        "_get_app_config",
        "_get_db_session",
        "is_flask_available",
        "__init__",
        "_init_connection",
        "execute_query",
        "commit",
        "rollback",
        "__init__",
        "_initialize_systems",
        "process_intelligence",
        "get_conversation_context",
        "update_conversation_context",
        "capture_human_feedback",
        "apply_lifelong_learning",
        "get_intelligence_status",
        "__str__",
        "__repr__",
        "get_status",
        "health_check",
        "__init__",
        "get_context",
        "add_message",
        "__init__",
        "apply_learning",
        "__init__",
        "capture_feedback",
        "__init__",
        "manage_context"
      ],
      "imports_relativos": [],
      "imports_absolutos": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "conversation.conversation_context.ConversationContext",
        "learning.lifelong_learning.LifelongLearningSystem",
        "learning.human_in_loop_learning.HumanInLoopLearning",
        "memory.context_manager.ContextManager",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "flask.current_app",
        "app.db",
        "sqlalchemy.text",
        "app.db"
      ],
      "tem_fallbacks": true,
      "tem_flask_wrapper": true
    },
    "integration/integration_manager.py": {
      "arquivo": "app\\claude_ai_novo\\integration\\integration_manager.py",
      "tamanho_linhas": 154,
      "imports_encontrados": [
        "logging",
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "datetime.datetime"
      ],
      "classes_definidas": [
        "StandaloneContextManager",
        "IntegrationManager"
      ],
      "funcoes_definidas": [
        "get_integration_manager",
        "__init__",
        "_load_config",
        "get_config",
        "is_available",
        "__init__",
        "get_status",
        "health_check",
        "process_request"
      ],
      "imports_relativos": [],
      "imports_absolutos": [
        "logging",
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "datetime.datetime"
      ],
      "tem_fallbacks": false,
      "tem_flask_wrapper": false
    },
    "knowledge/knowledge_manager.py": {
      "arquivo": "app\\claude_ai_novo\\knowledge\\knowledge_manager.py",
      "tamanho_linhas": 574,
      "imports_encontrados": [
        "json",
        "logging",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "flask.current_app",
        "flask.current_app",
        "app.db",
        "sqlalchemy.text",
        "app.db",
        "sqlalchemy.text",
        "app.db",
        "sqlalchemy.text",
        "app.db",
        "sqlalchemy.text",
        "app.db",
        "sqlalchemy.text",
        "flask.current_app",
        "app.db",
        "sqlalchemy.text",
        "app.db",
        "app.db"
      ],
      "classes_definidas": [
        "KnowledgeManager"
      ],
      "funcoes_definidas": [
        "get_knowledge_manager",
        "__init__",
        "aprender_mapeamento_cliente",
        "descobrir_grupo_empresarial",
        "buscar_grupos_aplicaveis",
        "buscar_mapeamentos_aplicaveis",
        "obter_estatisticas_aprendizado",
        "_extrair_termos_cliente",
        "_calcular_qualidade_geral",
        "get_status",
        "health_check",
        "_verificar_acesso_banco"
      ],
      "imports_relativos": [],
      "imports_absolutos": [
        "json",
        "logging",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "flask.current_app",
        "flask.current_app",
        "app.db",
        "sqlalchemy.text",
        "app.db",
        "sqlalchemy.text",
        "app.db",
        "sqlalchemy.text",
        "app.db",
        "sqlalchemy.text",
        "app.db",
        "sqlalchemy.text",
        "flask.current_app",
        "app.db",
        "sqlalchemy.text",
        "app.db",
        "app.db"
      ],
      "tem_fallbacks": false,
      "tem_flask_wrapper": false
    },
    "semantic/semantic_orchestrator.py": {
      "arquivo": "app\\claude_ai_novo\\semantic\\semantic_orchestrator.py",
      "tamanho_linhas": 551,
      "imports_encontrados": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "logging",
        "os",
        "mappers.PedidosMapper",
        "mappers.EmbarquesMapper",
        "mappers.MonitoramentoMapper",
        "mappers.FaturamentoMapper",
        "mappers.TransportadorasMapper",
        "readers.ReadmeReader",
        "readers.DatabaseReader",
        "readers.performance_cache.cached_readme_reader",
        "readers.performance_cache.cached_database_reader",
        "datetime.datetime",
        "mappers.PedidosMapper",
        "mappers.EmbarquesMapper",
        "mappers.MonitoramentoMapper",
        "mappers.FaturamentoMapper",
        "mappers.TransportadorasMapper"
      ],
      "classes_definidas": [
        "SemanticOrchestrator",
        "DummyReader",
        "DummyMapper"
      ],
      "funcoes_definidas": [
        "get_semantic_orchestrator",
        "__init__",
        "_inicializar_mappers",
        "_inicializar_readme_reader",
        "_inicializar_database_reader",
        "_localizar_readme",
        "mapear_termo_natural",
        "buscar_por_modelo",
        "buscar_no_readme",
        "listar_todos_modelos",
        "listar_todos_campos",
        "obter_mapper",
        "obter_readers",
        "verificar_saude_sistema",
        "get_status",
        "health_check",
        "_get_timestamp",
        "_calcular_status_geral",
        "__str__",
        "__repr__",
        "cached_readme_reader",
        "cached_database_reader",
        "__init__",
        "buscar_termos_naturais",
        "__init__",
        "buscar_mapeamento",
        "buscar_mapeamento_fuzzy",
        "listar_todos_campos"
      ],
      "imports_relativos": [],
      "imports_absolutos": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "logging",
        "os",
        "mappers.PedidosMapper",
        "mappers.EmbarquesMapper",
        "mappers.MonitoramentoMapper",
        "mappers.FaturamentoMapper",
        "mappers.TransportadorasMapper",
        "readers.ReadmeReader",
        "readers.DatabaseReader",
        "readers.performance_cache.cached_readme_reader",
        "readers.performance_cache.cached_database_reader",
        "datetime.datetime",
        "mappers.PedidosMapper",
        "mappers.EmbarquesMapper",
        "mappers.MonitoramentoMapper",
        "mappers.FaturamentoMapper",
        "mappers.TransportadorasMapper"
      ],
      "tem_fallbacks": true,
      "tem_flask_wrapper": false
    }
  },
  "imports_corretos": {
    "intelligence/intelligence_manager.py": {
      "imports_esperados": [
        "from .conversation.conversation_context import ConversationContext",
        "from .learning.lifelong_learning import LifelongLearningSystem",
        "from .learning.human_in_loop_learning import HumanInLoopLearning",
        "from .memory.context_manager import ContextManager"
      ],
      "arquivos_verificados": [
        {
          "arquivo": "conversation/conversation_context.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\intelligence\\conversation\\conversation_context.py"
        },
        {
          "arquivo": "learning/lifelong_learning.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\intelligence\\learning\\lifelong_learning.py"
        },
        {
          "arquivo": "learning/human_in_loop_learning.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\intelligence\\learning\\human_in_loop_learning.py"
        },
        {
          "arquivo": "memory/context_manager.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\intelligence\\memory\\context_manager.py"
        }
      ],
      "todos_existem": true
    },
    "analyzers/analyzer_manager.py": {
      "imports_esperados": [
        "from .intention_analyzer import IntentionAnalyzer",
        "from .nlp_enhanced_analyzer import NLPEnhancedAnalyzer",
        "from .query_analyzer import QueryAnalyzer",
        "from .metacognitive_analyzer import MetacognitiveAnalyzer",
        "from .structural_ai import StructuralAI"
      ],
      "arquivos_verificados": [
        {
          "arquivo": "intention_analyzer.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\analyzers\\intention_analyzer.py"
        },
        {
          "arquivo": "nlp_enhanced_analyzer.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\analyzers\\nlp_enhanced_analyzer.py"
        },
        {
          "arquivo": "query_analyzer.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\analyzers\\query_analyzer.py"
        },
        {
          "arquivo": "metacognitive_analyzer.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\analyzers\\metacognitive_analyzer.py"
        },
        {
          "arquivo": "structural_ai.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\analyzers\\structural_ai.py"
        }
      ],
      "todos_existem": true
    },
    "processors/processor_manager.py": {
      "imports_esperados": [
        "from .context_processor import ContextProcessor",
        "from .query_processor import QueryProcessor",
        "from .semantic_loop_processor import SemanticLoopProcessor"
      ],
      "arquivos_verificados": [
        {
          "arquivo": "context_processor.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\processors\\context_processor.py"
        },
        {
          "arquivo": "query_processor.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\processors\\query_processor.py"
        },
        {
          "arquivo": "semantic_loop_processor.py",
          "existe": true,
          "path": "app\\claude_ai_novo\\processors\\semantic_loop_processor.py"
        }
      ],
      "todos_existem": true
    }
  },
  "problemas_identificados": [
    {
      "tipo": "CLASSES_STANDALONE_INCORRETAS",
      "manager": "intelligence/intelligence_manager.py",
      "descricao": "Manager define 8 classes quando deveria importar",
      "classes_definidas": [
        "FlaskContextWrapper",
        "FlaskDatabaseAdapter",
        "IntelligenceResult",
        "IntelligenceManager",
        "ConversationContext",
        "LifelongLearningSystem",
        "HumanInLoopLearning",
        "ContextManager"
      ]
    },
    {
      "tipo": "CLASSES_STANDALONE_INCORRETAS",
      "manager": "semantic/semantic_orchestrator.py",
      "descricao": "Manager define 3 classes quando deveria importar",
      "classes_definidas": [
        "SemanticOrchestrator",
        "DummyReader",
        "DummyMapper"
      ]
    }
  ],
  "resumo": {
    "total_managers": 9,
    "managers_funcionais": 9,
    "managers_com_erro": 0,
    "percentual_funcionais": 100.0,
    "total_problemas": 2
  }
}