#!/usr/bin/env python3
"""
Fix para erro SSL do PostgreSQL
================================

Corrige o erro: SSL error: decryption failed or bad record mac

Este erro ocorre quando h√° problemas na comunica√ß√£o SSL entre a aplica√ß√£o e o PostgreSQL.
Solu√ß√µes implementadas:
1. Adiciona retry logic para opera√ß√µes de banco
2. Configura SSL adequadamente
3. Implementa pool de conex√µes mais robusto
"""

import os
import sys
import time
from functools import wraps
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def retry_on_ssl_error(max_retries=3, delay=1):
    """
    Decorator para retry em caso de erro SSL
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                except OperationalError as e:
                    if 'SSL' in str(e) or 'decryption failed' in str(e):
                        last_exception = e
                        logger.warning(f"Tentativa {attempt + 1}/{max_retries} falhou com erro SSL. Aguardando {delay}s...")
                        time.sleep(delay)
                        # Aumenta o delay exponencialmente
                        delay *= 2
                    else:
                        raise
            # Se todas as tentativas falharam
            logger.error(f"Todas as {max_retries} tentativas falharam")
            raise last_exception
        return wrapper
    return decorator

def fix_database_url():
    """
    Corrige a URL do banco para incluir par√¢metros SSL adequados
    """
    database_url = os.environ.get('DATABASE_URL')
    
    if not database_url:
        logger.error("DATABASE_URL n√£o encontrada")
        return None
    
    # Se for PostgreSQL
    if database_url.startswith(('postgresql://', 'postgres://')):
        # Remove par√¢metros existentes de SSL
        if '?' in database_url:
            base_url = database_url.split('?')[0]
            existing_params = database_url.split('?')[1] if '?' in database_url else ''
        else:
            base_url = database_url
            existing_params = ''
        
        # Novos par√¢metros SSL
        ssl_params = [
            'sslmode=require',  # Ou 'prefer' para ser menos restritivo
            'sslcert=',  # Vazio para usar padr√£o
            'sslkey=',   # Vazio para usar padr√£o
            'sslrootcert=',  # Vazio para usar padr√£o
            'connect_timeout=30',
            'keepalives=1',
            'keepalives_idle=30',
            'keepalives_interval=10',
            'keepalives_count=5'
        ]
        
        # Combina par√¢metros
        all_params = ssl_params
        if existing_params:
            # Filtra par√¢metros SSL existentes
            for param in existing_params.split('&'):
                if not any(param.startswith(ssl) for ssl in ['ssl', 'keepalive']):
                    all_params.append(param)
        
        # Monta URL final
        fixed_url = f"{base_url}?{'&'.join(all_params)}"
        logger.info(f"URL corrigida com par√¢metros SSL")
        return fixed_url
    
    return database_url

def test_connection():
    """
    Testa a conex√£o com o banco
    """
    fixed_url = fix_database_url()
    if not fixed_url:
        return False
    
    try:
        # Cria engine com configura√ß√µes otimizadas
        engine = create_engine(
            fixed_url,
            pool_pre_ping=True,  # Testa conex√£o antes de usar
            pool_recycle=300,    # Recicla conex√µes a cada 5 minutos
            pool_size=5,
            max_overflow=10,
            pool_timeout=30,
            echo=False
        )
        
        # Testa conex√£o
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            logger.info("‚úÖ Conex√£o testada com sucesso!")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar conex√£o: {e}")
        return False

def apply_fix_to_config():
    """
    Aplica corre√ß√µes ao arquivo config.py
    """
    config_file = 'config.py'
    
    # L√™ o arquivo atual
    with open(config_file, 'r') as f:
        content = f.read()
    
    # Adiciona configura√ß√µes SSL se n√£o existirem
    ssl_config = """
    # Configura√ß√µes SSL para PostgreSQL (corrige erro de decryption)
    if IS_POSTGRESQL:
        import ssl
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        SQLALCHEMY_ENGINE_OPTIONS["connect_args"]["sslmode"] = "prefer"  # ou "require"
        SQLALCHEMY_ENGINE_OPTIONS["connect_args"]["sslcontext"] = ssl_context
        
        # Configura√ß√µes de keep-alive para evitar timeout
        SQLALCHEMY_ENGINE_OPTIONS["connect_args"]["keepalives"] = 1
        SQLALCHEMY_ENGINE_OPTIONS["connect_args"]["keepalives_idle"] = 30
        SQLALCHEMY_ENGINE_OPTIONS["connect_args"]["keepalives_interval"] = 10
        SQLALCHEMY_ENGINE_OPTIONS["connect_args"]["keepalives_count"] = 5
"""
    
    if "sslmode" not in content:
        logger.info("Adicionando configura√ß√µes SSL ao config.py...")
        # Adiciona antes do final da classe Config
        # Procura por um bom lugar para inserir
        insertion_point = content.find("# Configura√ß√µes condicionais baseadas no tipo de banco")
        if insertion_point == -1:
            insertion_point = content.find("class Config:")
            if insertion_point != -1:
                insertion_point = content.find("\n", insertion_point) + 1
        
        if insertion_point != -1:
            content = content[:insertion_point] + ssl_config + "\n" + content[insertion_point:]
            
            # Salva backup
            with open(config_file + '.backup', 'w') as f:
                f.write(content)
            
            logger.info("‚úÖ Backup criado: config.py.backup")
            logger.info("üìù Para aplicar as corre√ß√µes, adicione as configura√ß√µes SSL manualmente ao config.py")
            
            print("\n" + "="*60)
            print("ADICIONE ESTAS CONFIGURA√á√ïES AO config.py:")
            print("="*60)
            print(ssl_config)
            print("="*60)
    else:
        logger.info("Configura√ß√µes SSL j√° existem no config.py")

def create_retry_wrapper():
    """
    Cria um wrapper para opera√ß√µes de banco com retry autom√°tico
    """
    
    wrapper_code = '''
# Adicione este c√≥digo ao arquivo onde ocorre o erro (carteira/routes.py ou similar)

from functools import wraps
import time
from sqlalchemy.exc import OperationalError
import logging

logger = logging.getLogger(__name__)

def retry_database_operation(max_retries=3, delay=1):
    """
    Decorator para retry autom√°tico em opera√ß√µes de banco
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            current_delay = delay
            
            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                except OperationalError as e:
                    error_msg = str(e)
                    if 'SSL' in error_msg or 'decryption failed' in error_msg:
                        last_exception = e
                        if attempt < max_retries - 1:
                            logger.warning(f"Erro SSL na tentativa {attempt + 1}/{max_retries}. Aguardando {current_delay}s...")
                            time.sleep(current_delay)
                            current_delay *= 2  # Backoff exponencial
                            
                            # For√ßa reconex√£o
                            try:
                                from app import db
                                db.session.rollback()
                                db.session.close()
                                db.engine.dispose()
                            except:
                                pass
                    else:
                        raise
            
            # Se todas as tentativas falharam
            logger.error(f"Todas as {max_retries} tentativas falharam com erro SSL")
            raise last_exception
        return wrapper
    return decorator

# Exemplo de uso:
# @retry_database_operation(max_retries=3)
# def atualizar_carteira():
#     # seu c√≥digo aqui
#     db.session.commit()
'''
    
    print("\n" + "="*60)
    print("WRAPPER PARA RETRY AUTOM√ÅTICO:")
    print("="*60)
    print(wrapper_code)
    print("="*60)

def main():
    """
    Executa as corre√ß√µes
    """
    print("üîß CORRE√á√ÉO DE ERRO SSL DO POSTGRESQL")
    print("="*60)
    
    # 1. Testa conex√£o atual
    print("\n1. Testando conex√£o atual...")
    test_connection()
    
    # 2. Sugere corre√ß√µes para config.py
    print("\n2. Verificando config.py...")
    apply_fix_to_config()
    
    # 3. Cria wrapper para retry
    print("\n3. Criando wrapper para retry autom√°tico...")
    create_retry_wrapper()
    
    print("\n" + "="*60)
    print("üìã RESUMO DAS SOLU√á√ïES:")
    print("="*60)
    print("""
    1. SOLU√á√ÉO R√ÅPIDA (Tempor√°ria):
       - Reinicie o servidor/aplica√ß√£o
       - O erro geralmente √© tempor√°rio e causado por timeout
    
    2. SOLU√á√ÉO PERMANENTE:
       - Adicione as configura√ß√µes SSL ao config.py
       - Use o decorator retry_database_operation nas opera√ß√µes cr√≠ticas
       - Configure os par√¢metros de keep-alive
    
    3. VARI√ÅVEIS DE AMBIENTE (adicione ao .env ou Render):
       PGSSLMODE=prefer
       PGCONNECT_TIMEOUT=30
       
    4. SE O ERRO PERSISTIR:
       - Verifique se o certificado SSL do servidor est√° v√°lido
       - Considere usar sslmode=disable temporariamente (n√£o recomendado para produ√ß√£o)
       - Verifique os logs do PostgreSQL para mais detalhes
    """)

if __name__ == "__main__":
    main()