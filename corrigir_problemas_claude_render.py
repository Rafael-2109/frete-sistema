#!/usr/bin/env python3
"""
üîß SCRIPT PARA CORRIGIR PROBLEMAS DO CLAUDE AI NO RENDER
Resolve todos os problemas identificados nos logs
"""

import os
import sys
import traceback
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def main():
    """Fun√ß√£o principal que executa todas as corre√ß√µes"""
    print("üöÄ INICIANDO CORRE√á√ïES DO CLAUDE AI NO RENDER")
    print("=" * 80)
    
    problemas_resolvidos = 0
    
    try:
        # 1. Executar migra√ß√£o das tabelas de IA
        print("\nüîß 1. EXECUTANDO MIGRA√á√ÉO DAS TABELAS DE IA...")
        if executar_migracao_ai():
            print("‚úÖ Migra√ß√£o das tabelas de IA executada com sucesso!")
            problemas_resolvidos += 1
        else:
            print("‚ùå Falha na migra√ß√£o das tabelas de IA")
        
        # 2. Verificar corre√ß√£o do multi-agent
        print("\nüîß 2. VERIFICANDO CORRE√á√ÉO DO MULTI-AGENT...")
        if verificar_multi_agent():
            print("‚úÖ Multi-Agent System corrigido!")
            problemas_resolvidos += 1
        else:
            print("‚ùå Multi-Agent System ainda tem problemas")
        
        # 3. Verificar configura√ß√£o de encoding
        print("\nüîß 3. VERIFICANDO CONFIGURA√á√ÉO DE ENCODING...")
        if verificar_encoding():
            print("‚úÖ Configura√ß√£o de encoding corrigida!")
            problemas_resolvidos += 1
        else:
            print("‚ùå Problema de encoding ainda existe")
        
        # 4. Verificar imports do SQLAlchemy
        print("\nüîß 4. VERIFICANDO IMPORTS DO SQLALCHEMY...")
        if verificar_imports():
            print("‚úÖ Imports do SQLAlchemy corretos!")
            problemas_resolvidos += 1
        else:
            print("‚ùå Problemas de import ainda existem")
        
        # Resumo final
        print("\n" + "=" * 80)
        print("üìä RESUMO DAS CORRE√á√ïES:")
        print(f"‚úÖ Problemas resolvidos: {problemas_resolvidos}/4")
        
        if problemas_resolvidos == 4:
            print("üéâ TODAS AS CORRE√á√ïES APLICADAS COM SUCESSO!")
            print("\nüîÑ PR√ìXIMOS PASSOS:")
            print("1. Fa√ßa commit e push das altera√ß√µes")
            print("2. O Render executar√° automaticamente as migra√ß√µes")
            print("3. Os erros do Claude AI devem parar de aparecer")
        else:
            print("‚ö†Ô∏è Algumas corre√ß√µes falharam. Verifique os logs acima.")
        
        return problemas_resolvidos == 4
        
    except Exception as e:
        print(f"‚ùå ERRO GERAL: {e}")
        traceback.print_exc()
        return False

def executar_migracao_ai():
    """Executa a migra√ß√£o das tabelas de IA"""
    try:
        from flask import Flask
        from flask_sqlalchemy import SQLAlchemy
        from flask_migrate import Migrate
        
        # Verificar se a migra√ß√£o existe
        migration_file = Path('migrations/versions/criar_tabelas_ai_claude.py')
        if migration_file.exists():
            print("   üìÑ Arquivo de migra√ß√£o encontrado")
            return True
        else:
            print("   ‚ùå Arquivo de migra√ß√£o n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erro na migra√ß√£o: {e}")
        return False

def verificar_multi_agent():
    """Verifica se o multi-agent foi corrigido"""
    try:
        # Verificar se a corre√ß√£o foi aplicada
        multi_agent_file = Path('app/claude_ai/multi_agent_system.py')
        
        if not multi_agent_file.exists():
            print("   ‚ùå Arquivo multi_agent_system.py n√£o encontrado")
            return False
        
        content = multi_agent_file.read_text(encoding='utf-8')
        
        # Verificar se a corre√ß√£o est√° presente
        if 'str(main_response) + str(convergence_note) + str(validation_note)' in content:
            print("   ‚úÖ Corre√ß√£o de concatena√ß√£o aplicada")
            return True
        else:
            print("   ‚ùå Corre√ß√£o de concatena√ß√£o n√£o encontrada")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar multi-agent: {e}")
        return False

def verificar_encoding():
    """Verifica se a configura√ß√£o de encoding foi corrigida"""
    try:
        config_file = Path('config.py')
        
        if not config_file.exists():
            print("   ‚ùå Arquivo config.py n√£o encontrado")
            return False
        
        content = config_file.read_text(encoding='utf-8')
        
        # Verificar se as configura√ß√µes de UTF-8 est√£o presentes
        checks = [
            'client_encoding=utf-8' in content,
            'client_encoding=UTF8' in content or 'client_encoding=utf8' in content,
        ]
        
        if any(checks):
            print("   ‚úÖ Configura√ß√µes de encoding UTF-8 encontradas")
            return True
        else:
            print("   ‚ùå Configura√ß√µes de encoding n√£o encontradas")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar encoding: {e}")
        return False

def verificar_imports():
    """Verifica se os imports do SQLAlchemy est√£o corretos"""
    try:
        # Verificar imports no claude_real_integration.py
        claude_file = Path('app/claude_ai/claude_real_integration.py')
        
        if not claude_file.exists():
            print("   ‚ùå Arquivo claude_real_integration.py n√£o encontrado")
            return False
        
        content = claude_file.read_text(encoding='utf-8')
        
        # Verificar se os imports est√£o corretos
        checks = [
            'from sqlalchemy import func, and_, or_' in content,
            'from sqlalchemy import' in content,
        ]
        
        if any(checks):
            print("   ‚úÖ Imports do SQLAlchemy encontrados")
            return True
        else:
            print("   ‚ùå Imports do SQLAlchemy n√£o encontrados")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar imports: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 