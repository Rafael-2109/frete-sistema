# COMANDOS PARA EXECUTAR NO SHELL DO RENDER
# ==========================================

# 1. ACESSAR O SHELL DO RENDER:
#    - Ir no dashboard do Render
#    - Clicar no servi√ßo "frete-sistema" 
#    - Clicar em "Shell" no menu lateral
#    - Aguardar carregar o terminal web

# 2. EXECUTAR MIGRA√á√ÉO (OP√á√ÉO SIMPLES):
python aplicar_migracao_render_shell.py

# 3. OU COMANDOS INDIVIDUAIS (SE SCRIPT FALHAR):

# Primeiro, verificar ambiente:
echo "=== VERIFICANDO AMBIENTE ==="
echo "Python: $(python --version)"
echo "Platform: $(uname -a)"
echo "DATABASE_URL: ${DATABASE_URL:0:50}..."

# Tentar Flask-Migrate primeiro:
echo "=== TENTANDO FLASK-MIGRATE ==="
flask db upgrade

# Se falhar, aplicar SQL direto:
echo "=== APLICANDO SQL DIRETO ==="
python -c "
from app import create_app, db

app = create_app()

with app.app_context():
    # Criar tabela pre_separacao_itens
    sql1 = '''
    CREATE TABLE IF NOT EXISTS pre_separacao_itens (
        id SERIAL PRIMARY KEY,
        carteira_principal_id INTEGER NOT NULL,
        cod_produto VARCHAR(50) NOT NULL,
        qtd_original REAL NOT NULL,
        qtd_selecionada REAL NOT NULL,
        qtd_restante REAL NOT NULL,
        expedicao_editavel DATE NULL,
        agendamento_editavel DATE NULL,
        protocolo_editavel VARCHAR(50) NULL,
        status VARCHAR(20) NOT NULL DEFAULT 'PENDENTE',
        observacoes TEXT NULL,
        criado_em TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        criado_por VARCHAR(100) NOT NULL,
        atualizado_em TIMESTAMP NULL,
        atualizado_por VARCHAR(100) NULL,
        tipo_envio VARCHAR(10) DEFAULT 'total',
        CONSTRAINT fk_pre_separacao_carteira 
            FOREIGN KEY (carteira_principal_id) 
            REFERENCES carteira_principal(id)
    );
    '''
    
    db.engine.execute(sql1)
    print('‚úÖ Tabela criada')
    
    # Criar √≠ndices
    indices = [
        'CREATE INDEX IF NOT EXISTS ix_pre_separacao_itens_carteira_principal_id ON pre_separacao_itens(carteira_principal_id);',
        'CREATE INDEX IF NOT EXISTS ix_pre_separacao_itens_cod_produto ON pre_separacao_itens(cod_produto);',
        'CREATE INDEX IF NOT EXISTS ix_pre_separacao_itens_status ON pre_separacao_itens(status);',
        'CREATE INDEX IF NOT EXISTS ix_pre_separacao_itens_tipo_envio ON pre_separacao_itens(tipo_envio);'
    ]
    
    for i, sql in enumerate(indices, 1):
        db.engine.execute(sql)
        print(f'‚úÖ √çndice {i} criado')
    
    # Adicionar campo tipo_envio em separacao
    sql_tipo_envio = '''
    DO \$\$ 
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'separacao' AND column_name = 'tipo_envio'
        ) THEN
            ALTER TABLE separacao ADD COLUMN tipo_envio VARCHAR(10) DEFAULT 'total';
            CREATE INDEX IF NOT EXISTS ix_separacao_tipo_envio ON separacao(tipo_envio);
        END IF;
    END \$\$;
    '''
    
    db.engine.execute(sql_tipo_envio)
    print('‚úÖ Campo tipo_envio adicionado')
    
    # Marcar migra√ß√£o
    sql_alembic = '''
    INSERT INTO alembic_version (version_num) 
    VALUES ('76bbd63e3bed')
    ON CONFLICT (version_num) DO NOTHING;
    '''
    
    db.engine.execute(sql_alembic)
    print('‚úÖ Migra√ß√£o marcada no Alembic')
    
    db.session.commit()
    print('üéâ MIGRA√á√ÉO APLICADA COM SUCESSO!')
"

# 4. VERIFICAR RESULTADO:
echo "=== VERIFICANDO RESULTADO ==="
python -c "
from app import create_app, db
from app.carteira.models import PreSeparacaoItem

app = create_app()

with app.app_context():
    # Testar tabela
    count = PreSeparacaoItem.query.count()
    print(f'‚úÖ Tabela pre_separacao_itens: {count} registros')
    
    # Verificar vers√£o Alembic
    result = db.engine.execute('SELECT version_num FROM alembic_version ORDER BY version_num DESC LIMIT 1;')
    version = result.fetchone()
    if version:
        print(f'‚úÖ Vers√£o Alembic: {version[0]}')
    
    print('üéâ TUDO FUNCIONANDO!')
"

# 5. TESTAR APLICA√á√ÉO:
echo "=== TESTANDO APLICA√á√ÉO ==="
python -c "
from app.carteira.models import PreSeparacaoItem
print('‚úÖ Modelo PreSeparacaoItem importado com sucesso!')

# Testar workaround tamb√©m
if hasattr(PreSeparacaoItem, 'salvar_via_workaround'):
    print('‚úÖ M√©todo workaround dispon√≠vel')
else:
    print('‚ö†Ô∏è M√©todo workaround n√£o encontrado')
"

echo "üéâ MIGRA√á√ÉO CONCLU√çDA!"
echo "üìã Sistema pronto para Etapa 2 (Dropdown Separa√ß√µes)" 