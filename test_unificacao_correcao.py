#!/usr/bin/env python3
"""
Teste para verificar se UnificacaoCodigos est√° funcionando corretamente
no saldo de estoque, carteira e produ√ß√£o
"""

from app import create_app, db
from app.estoque.models import UnificacaoCodigos
from app.estoque.services.estoque_tempo_real import ServicoEstoqueTempoReal
from app.carteira.models import CarteiraPrincipal
from app.producao.models import ProgramacaoProducao
from datetime import date, timedelta
from decimal import Decimal

def testar_unificacao():
    """Testa se UnificacaoCodigos est√° sendo considerado em todos os c√°lculos"""
    
    app = create_app()
    
    with app.app_context():
        print("\n" + "="*60)
        print("üîç TESTE DE UNIFICA√á√ÉO DE C√ìDIGOS")
        print("="*60)
        
        # 1. Verificar um produto com unifica√ß√£o
        print("\nüìã Buscando produtos com unifica√ß√£o...")
        unificacoes = UnificacaoCodigos.query.limit(5).all()
        
        if not unificacoes:
            print("‚ö†Ô∏è  Nenhuma unifica√ß√£o encontrada no banco")
            return
        
        for unif in unificacoes:
            print(f"\nüîç Testando produto: {unif.cod_produto}")
            print(f"   C√≥digo alternativo: {unif.cod_produto_alternativo}")
            
            # Obter todos os c√≥digos relacionados
            codigos = UnificacaoCodigos.get_todos_codigos_relacionados(unif.cod_produto)
            print(f"   C√≥digos relacionados: {codigos}")
            
            # Testar proje√ß√£o completa
            projecao = ServicoEstoqueTempoReal.get_projecao_completa(unif.cod_produto, dias=7)
            
            if projecao:
                print(f"   ‚úÖ Estoque atual: {projecao.get('estoque_atual', 0):.2f}")
                print(f"   ‚úÖ Menor estoque D7: {projecao.get('menor_estoque_d7', 0):.2f}")
                
                # Verificar carteira
                carteira_total = 0
                for codigo in codigos:
                    carteira = CarteiraPrincipal.query.filter_by(
                        cod_produto=codigo
                    ).all()
                    for item in carteira:
                        carteira_total += float(item.qtd_saldo_produto_pedido or 0)
                
                print(f"   üì¶ Total na carteira (todos os c√≥digos): {carteira_total:.2f}")
                
                # Verificar produ√ß√£o
                hoje = date.today()
                producao_total = 0
                for codigo in codigos:
                    producoes = ProgramacaoProducao.query.filter(
                        ProgramacaoProducao.cod_produto == codigo,
                        ProgramacaoProducao.data_programacao >= hoje
                    ).all()
                    for prod in producoes:
                        producao_total += float(prod.qtd_programada or 0)
                
                print(f"   üè≠ Total na produ√ß√£o (todos os c√≥digos): {producao_total:.2f}")
                
                # Verificar se a proje√ß√£o est√° considerando todos
                print(f"\n   üìä Proje√ß√£o dos pr√≥ximos 3 dias:")
                for dia in projecao.get('projecao', [])[:3]:
                    print(f"      D+{dia.get('dia')}: Entrada={dia.get('entrada', 0):.2f}, "
                          f"Sa√≠da={dia.get('saida', 0):.2f}, "
                          f"Saldo={dia.get('saldo_final', 0):.2f}")
            else:
                print(f"   ‚ùå Produto n√£o encontrado no EstoqueTempoReal")
        
        print("\n" + "="*60)
        print("‚úÖ TESTE CONCLU√çDO")
        print("="*60)


if __name__ == '__main__':
    testar_unificacao()