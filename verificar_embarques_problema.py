#!/usr/bin/env python3
"""
Script para verificar o estado dos EmbarqueItems e MovimentacaoEstoque
Identifica porque algumas NFs n√£o geram MovimentacaoEstoque na primeira sincroniza√ß√£o
"""

import sys
from datetime import datetime, timedelta
from run import app
from app import db
from app.embarques.models import Embarque, EmbarqueItem
from app.estoque.models import MovimentacaoEstoque
from app.faturamento.models import FaturamentoProduto, RelatorioFaturamentoImportado

def verificar_inconsistencias():
    """Verifica NFs que est√£o em FaturamentoProduto mas n√£o em MovimentacaoEstoque"""
    
    with app.app_context():
        print("\n" + "="*80)
        print("VERIFICA√á√ÉO DE INCONSIST√äNCIAS DE FATURAMENTO")
        print("="*80)
        
        # 1. Buscar todas as NFs ativas dos √∫ltimos 7 dias
        data_limite = datetime.now().date() - timedelta(days=7)
        
        nfs_ativas = db.session.query(RelatorioFaturamentoImportado.numero_nf).filter(
            RelatorioFaturamentoImportado.ativo == True,
            RelatorioFaturamentoImportado.data_fatura >= data_limite
        ).all()
        
        print(f"\nüìä Total de NFs ativas nos √∫ltimos 7 dias: {len(nfs_ativas)}")
        
        nfs_sem_movimentacao = []
        nfs_com_movimentacao_sem_lote = []
        nfs_com_movimentacao_com_lote = []
        
        for (nf_numero,) in nfs_ativas:
            # Verificar se tem produtos
            tem_produtos = FaturamentoProduto.query.filter_by(numero_nf=nf_numero).first()
            
            if not tem_produtos:
                continue
                
            # Verificar movimenta√ß√µes
            mov_com_lote = MovimentacaoEstoque.query.filter(
                MovimentacaoEstoque.observacao.like(f"%NF {nf_numero}%"),
                MovimentacaoEstoque.observacao.like("%lote separa√ß√£o%"),
                ~MovimentacaoEstoque.observacao.like("%Sem Separa√ß√£o%")
            ).first()
            
            mov_sem_lote = MovimentacaoEstoque.query.filter(
                MovimentacaoEstoque.observacao.like(f"%NF {nf_numero}%"),
                MovimentacaoEstoque.observacao.like("%Sem Separa√ß√£o%")
            ).first()
            
            mov_qualquer = MovimentacaoEstoque.query.filter(
                MovimentacaoEstoque.observacao.like(f"%NF {nf_numero}%")
            ).first()
            
            if mov_com_lote:
                nfs_com_movimentacao_com_lote.append(nf_numero)
            elif mov_sem_lote:
                nfs_com_movimentacao_sem_lote.append(nf_numero)
            elif not mov_qualquer:
                nfs_sem_movimentacao.append(nf_numero)
        
        print(f"\n‚úÖ NFs COM movimenta√ß√£o COM lote: {len(nfs_com_movimentacao_com_lote)}")
        print(f"‚ö†Ô∏è  NFs COM movimenta√ß√£o SEM lote: {len(nfs_com_movimentacao_sem_lote)}")
        print(f"‚ùå NFs SEM movimenta√ß√£o alguma: {len(nfs_sem_movimentacao)}")
        
        # Detalhar NFs sem movimenta√ß√£o
        if nfs_sem_movimentacao:
            print("\n" + "-"*40)
            print("DETALHES DAS NFs SEM MOVIMENTA√á√ÉO:")
            print("-"*40)
            
            for nf_numero in nfs_sem_movimentacao[:10]:  # Mostrar at√© 10
                nf = RelatorioFaturamentoImportado.query.filter_by(numero_nf=nf_numero).first()
                
                # Verificar se tem EmbarqueItem
                embarque_item = EmbarqueItem.query.filter_by(nota_fiscal=nf_numero).first()
                
                print(f"\nNF: {nf_numero}")
                print(f"  - Pedido (origem): {nf.origem if nf else 'N/A'}")
                print(f"  - Data Fatura: {nf.data_fatura if nf else 'N/A'}")
                print(f"  - Cliente: {nf.nome_cliente if nf else 'N/A'}")
                
                if embarque_item:
                    print(f"  - EmbarqueItem encontrado:")
                    print(f"    - Embarque ID: {embarque_item.embarque_id}")
                    print(f"    - Pedido no EmbarqueItem: {embarque_item.pedido}")
                    print(f"    - Lote: {embarque_item.separacao_lote_id}")
                    print(f"    - Erro valida√ß√£o: {embarque_item.erro_validacao}")
                    
                    # Verificar status do embarque
                    embarque = Embarque.query.get(embarque_item.embarque_id)
                    if embarque:
                        print(f"    - Status Embarque: {embarque.status}")
                else:
                    # Buscar por pedido
                    embarque_por_pedido = EmbarqueItem.query.filter_by(pedido=nf.origem).first() if nf else None
                    if embarque_por_pedido:
                        print(f"  - EmbarqueItem por pedido encontrado:")
                        print(f"    - NF no EmbarqueItem: {embarque_por_pedido.nota_fiscal}")
                        print(f"    - Lote: {embarque_por_pedido.separacao_lote_id}")
                        print(f"    - Erro valida√ß√£o: {embarque_por_pedido.erro_validacao}")
        
        # Detalhar NFs com movimenta√ß√£o sem lote
        if nfs_com_movimentacao_sem_lote:
            print("\n" + "-"*40)
            print("NFs COM MOVIMENTA√á√ÉO 'SEM SEPARA√á√ÉO':")
            print("-"*40)
            
            for nf_numero in nfs_com_movimentacao_sem_lote[:5]:  # Mostrar at√© 5
                nf = RelatorioFaturamentoImportado.query.filter_by(numero_nf=nf_numero).first()
                
                # Verificar se agora tem EmbarqueItem dispon√≠vel
                embarque_item = EmbarqueItem.query.filter_by(pedido=nf.origem).first() if nf else None
                
                print(f"\nNF: {nf_numero}")
                print(f"  - Pedido: {nf.origem if nf else 'N/A'}")
                
                if embarque_item:
                    print(f"  - ‚ö†Ô∏è AGORA tem EmbarqueItem dispon√≠vel!")
                    print(f"    - NF no item: {embarque_item.nota_fiscal}")
                    print(f"    - Lote: {embarque_item.separacao_lote_id}")
                    print(f"    - Erro: {embarque_item.erro_validacao}")
                    
                    if not embarque_item.nota_fiscal or embarque_item.erro_validacao:
                        print(f"    - üîÑ PODE SER REPROCESSADA na pr√≥xima sincroniza√ß√£o!")

if __name__ == "__main__":
    verificar_inconsistencias()