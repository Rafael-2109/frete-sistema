#!/usr/bin/env python3
"""
Teste r√°pido para verificar se as corre√ß√µes de imports resolveram o problema
"""

import os
import sys
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.portal.models import PortalIntegracao, PortalLog
from app.portal.routes import executar_agendamento_portal

def testar_imports():
    """Testa se os imports est√£o funcionando corretamente"""
    print("=" * 60)
    print("TESTE DE IMPORTS E CONEX√ÉO DO BANCO")
    print("=" * 60)
    
    app = create_app()
    
    with app.app_context():
        try:
            # Teste 1: Verificar se PortalIntegracao est√° acess√≠vel
            print("\n1. Testando acesso a PortalIntegracao...")
            count = PortalIntegracao.query.count()
            print(f"   ‚úÖ PortalIntegracao acess√≠vel. Total de registros: {count}")
            
            # Teste 2: Verificar se PortalLog est√° acess√≠vel
            print("\n2. Testando acesso a PortalLog...")
            count_log = PortalLog.query.count()
            print(f"   ‚úÖ PortalLog acess√≠vel. Total de logs: {count_log}")
            
            # Teste 3: Testar db.session.remove() e recria√ß√£o
            print("\n3. Testando db.session.remove() e recria√ß√£o...")
            
            # Criar um log de teste
            log_teste = PortalLog(
                integracao_id=1,
                acao='teste_conexao',
                sucesso=True,
                mensagem='Teste de conex√£o ap√≥s db.session.remove()'
            )
            db.session.add(log_teste)
            db.session.commit()
            print("   ‚úÖ Log criado com sucesso")
            
            # Remover sess√£o
            db.session.remove()
            print("   ‚úÖ Sess√£o removida")
            
            # Tentar query novamente (deve recriar sess√£o automaticamente)
            count_after = PortalIntegracao.query.count()
            print(f"   ‚úÖ Sess√£o recriada automaticamente. Total: {count_after}")
            
            # Limpar log de teste
            log_limpar = PortalLog.query.filter_by(acao='teste_conexao').first()
            if log_limpar:
                db.session.delete(log_limpar)
                db.session.commit()
                print("   ‚úÖ Log de teste removido")
            
            print("\n" + "=" * 60)
            print("‚úÖ TODOS OS TESTES PASSARAM!")
            print("=" * 60)
            print("\nAs corre√ß√µes funcionaram corretamente:")
            print("- PortalIntegracao e PortalLog est√£o acess√≠veis")
            print("- db.session.remove() permite recria√ß√£o autom√°tica da sess√£o")
            print("- N√£o h√° mais erro de 'local variable not associated with value'")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå ERRO NO TESTE: {e}")
            print("\nDetalhes do erro:")
            import traceback
            traceback.print_exc()
            return False

def testar_funcao_agendamento():
    """Testa se a fun√ß√£o executar_agendamento_portal funciona"""
    print("\n" + "=" * 60)
    print("TESTE DA FUN√á√ÉO executar_agendamento_portal")
    print("=" * 60)
    
    app = create_app()
    
    with app.app_context():
        try:
            # Tentar executar com ID inexistente (deve retornar erro controlado)
            print("\nTestando fun√ß√£o com ID inexistente...")
            resultado = executar_agendamento_portal(99999)
            
            if resultado['success'] == False:
                print(f"   ‚úÖ Fun√ß√£o retornou erro esperado: {resultado['message']}")
            else:
                print("   ‚ö†Ô∏è Fun√ß√£o n√£o retornou erro esperado")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå ERRO NA FUN√á√ÉO: {e}")
            import traceback
            traceback.print_exc()
            return False

if __name__ == "__main__":
    sucesso1 = testar_imports()
    sucesso2 = testar_funcao_agendamento()
    
    if sucesso1 and sucesso2:
        print("\nüéâ CORRE√á√ÉO COMPLETA E FUNCIONANDO!")
    else:
        print("\n‚ö†Ô∏è Ainda h√° problemas a resolver")