{
  "timestamp": "2025-07-08T08:29:31.386911",
  "resumo_executivo": {
    "total_modules": 124,
    "total_classes": 104,
    "total_functions": 92,
    "lacunas_identificadas": 2,
    "status_integracao": "QUASE_COMPLETA"
  },
  "detalhes_modulos": {
    "categorias": {
      "multi_agent": [
        "multi_agent.agent_types",
        "multi_agent.critic_agent",
        "multi_agent.multi_agent_orchestrator",
        "multi_agent.specialist_agents",
        "multi_agent.system",
        "multi_agent.__init__",
        "multi_agent.agents.base_agent",
        "multi_agent.agents.embarques_agent",
        "multi_agent.agents.entregas_agent",
        "multi_agent.agents.financeiro_agent",
        "multi_agent.agents.fretes_agent",
        "multi_agent.agents.pedidos_agent",
        "multi_agent.agents.__init__",
        "tests.test_multi_agent_system"
      ],
      "intelligence": [
        "adapters.intelligence_adapter",
        "intelligence.intelligence_manager",
        "intelligence.__init__",
        "intelligence.conversation.conversation_context",
        "intelligence.conversation.__init__",
        "intelligence.learning.feedback_processor",
        "intelligence.learning.human_in_loop_learning",
        "intelligence.learning.learning_core",
        "intelligence.learning.lifelong_learning",
        "intelligence.learning.pattern_learner",
        "intelligence.learning.__init__",
        "intelligence.memory.context_manager",
        "intelligence.memory.__init__"
      ],
      "semantic": [
        "processors.semantic_loop_processor",
        "semantic.semantic_diagnostics",
        "semantic.semantic_enricher",
        "semantic.semantic_manager",
        "semantic.semantic_orchestrator",
        "semantic.semantic_validator",
        "semantic.__init__",
        "semantic.diagnostics.__init__",
        "semantic.mappers.base_mapper",
        "semantic.mappers.embarques_mapper",
        "semantic.mappers.faturamento_mapper",
        "semantic.mappers.monitoramento_mapper",
        "semantic.mappers.pedidos_mapper",
        "semantic.mappers.transportadoras_mapper",
        "semantic.mappers.__init__",
        "semantic.readers.database_reader",
        "semantic.readers.performance_cache",
        "semantic.readers.readme_reader",
        "semantic.readers.__init__",
        "semantic.readers.database.auto_mapper",
        "semantic.readers.database.database_connection",
        "semantic.readers.database.data_analyzer",
        "semantic.readers.database.field_searcher",
        "semantic.readers.database.metadata_reader",
        "semantic.readers.database.relationship_mapper",
        "semantic.readers.database.__init__",
        "semantic.relationships.__init__",
        "semantic.validators.__init__"
      ],
      "integration": [
        "integration_manager",
        "test_integration_real",
        "integration.integration_manager",
        "integration.__init__",
        "integration.advanced.advanced_integration",
        "integration.advanced.__init__",
        "integration.claude.claude_client",
        "integration.claude.claude_integration",
        "integration.claude.__init__",
        "integration.processing.response_formatter",
        "integration.processing.__init__",
        "tests.test_advanced_integration"
      ],
      "data": [
        "adapters.data_adapter",
        "data.__init__",
        "data.loaders.context_loader",
        "data.loaders.database_loader",
        "data.providers.data_executor",
        "data.providers.data_provider",
        "scanning.database_scanner",
        "semantic.readers.database_reader",
        "semantic.readers.database.auto_mapper",
        "semantic.readers.database.database_connection",
        "semantic.readers.database.data_analyzer",
        "semantic.readers.database.field_searcher",
        "semantic.readers.database.metadata_reader",
        "semantic.readers.database.relationship_mapper",
        "semantic.readers.database.__init__",
        "tests.test_data_provider"
      ],
      "suggestions": [
        "suggestions.engine",
        "suggestions.__init__"
      ],
      "commands": [
        "commands.cursor_commands",
        "commands.dev_commands",
        "commands.excel_commands",
        "commands.file_commands",
        "commands.__init__"
      ],
      "utils": [
        "utils.response_utils",
        "utils.validation_utils",
        "utils.__init__"
      ],
      "outros": [
        "claude_ai_modular",
        "config",
        "routes",
        "__init__",
        "adapters.__init__",
        "analyzers.intention_analyzer",
        "analyzers.metacognitive_analyzer",
        "analyzers.nlp_enhanced_analyzer",
        "analyzers.query_analyzer",
        "analyzers.structural_ai",
        "analyzers.__init__",
        "config.advanced_config",
        "config.__init__",
        "interfaces.__init__",
        "knowledge.knowledge_manager",
        "migrations.__init__",
        "models.__init__",
        "processors.context_processor",
        "processors.query_processor",
        "processors.response_processor",
        "processors.__init__",
        "scanning.code_scanner",
        "scanning.file_scanner",
        "scanning.project_scanner",
        "scanning.scanner",
        "scanning.structure_scanner",
        "scanning.__init__",
        "security.__init__",
        "tests.test_config",
        "tests.test_conversation_context",
        "tests.test_decomposicao",
        "tests.test_decomposicao_total",
        "tests.test_human_learning",
        "tests.test_lifelong_learning",
        "tests.test_nlp_enhanced_analyzer",
        "tests.test_project_scanner",
        "tests.test_suggestion_engine",
        "tests.__init__",
        "tools.__init__"
      ]
    },
    "modules_map": {
      "claude_ai_modular": {
        "path": "app\\claude_ai_novo\\claude_ai_modular.py",
        "module_name": "claude_ai_modular",
        "classes": [],
        "functions": [
          {
            "name": "processar_consulta_modular",
            "line": 12,
            "args": 2
          },
          {
            "name": "get_nlp_analyzer",
            "line": 17,
            "args": 0
          }
        ],
        "imports": [
          "integration.claude.claude_integration.ClaudeRealIntegration",
          "integration.claude.claude_integration.get_claude_integration",
          "integration.claude.claude_integration.processar_com_claude_real",
          "analyzers.nlp_enhanced_analyzer.get_nlp_enhanced_analyzer",
          "typing.Dict",
          "typing.Any",
          "typing.Optional"
        ],
        "size_lines": 28,
        "size_bytes": 956,
        "last_modified": 