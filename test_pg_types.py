#!/usr/bin/env python3
"""
Script de teste para verificar registro de tipos PostgreSQL
"""
import os
import sys

print("=== TESTE DE TIPOS POSTGRESQL ===")

# 1. Tentar importar psycopg2
try:
    import psycopg2
    from psycopg2 import extensions
    print("‚úÖ psycopg2 importado com sucesso")
except Exception as e:
    print(f"‚ùå Erro ao importar psycopg2: {e}")
    sys.exit(1)

# 2. Verificar tipos registrados
tipos_para_verificar = {
    1082: "DATE",
    1083: "TIME", 
    1114: "TIMESTAMP",
    1184: "TIMESTAMPTZ",
    1182: "DATEARRAY"
}

print("\nüìã Verificando tipos registrados:")
for oid, nome in tipos_para_verificar.items():
    try:
        tipo = extensions.string_types.get(oid)
        if tipo:
            print(f"  ‚úÖ {nome} (OID {oid}): REGISTRADO")
        else:
            print(f"  ‚ùå {nome} (OID {oid}): N√ÉO REGISTRADO")
    except Exception as e:
        print(f"  ‚ùå {nome} (OID {oid}): ERRO - {e}")

# 3. Tentar registrar tipos
print("\nüîß Tentando registrar tipos...")
try:
    import register_pg_types
    print("‚úÖ M√≥dulo register_pg_types executado")
except Exception as e:
    print(f"‚ùå Erro ao executar register_pg_types: {e}")

# 4. Verificar novamente ap√≥s registro
print("\nüìã Verificando tipos ap√≥s registro:")
for oid, nome in tipos_para_verificar.items():
    try:
        tipo = extensions.string_types.get(oid)
        if tipo:
            print(f"  ‚úÖ {nome} (OID {oid}): REGISTRADO")
        else:
            print(f"  ‚ùå {nome} (OID {oid}): N√ÉO REGISTRADO")
    except Exception as e:
        print(f"  ‚ùå {nome} (OID {oid}): ERRO - {e}")

# 5. Testar conex√£o se DATABASE_URL existir
if os.getenv('DATABASE_URL'):
    print("\nüîå Testando conex√£o com banco...")
    try:
        conn = psycopg2.connect(os.getenv('DATABASE_URL'))
        cur = conn.cursor()
        
        # Testar query com DATE
        cur.execute("SELECT CURRENT_DATE as data, pg_typeof(CURRENT_DATE) as tipo")
        resultado = cur.fetchone()
        print(f"‚úÖ Query executada: data={resultado[0]}, tipo={resultado[1]}")
        
        cur.close()
        conn.close()
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
else:
    print("\n‚ö†Ô∏è DATABASE_URL n√£o configurada - pulando teste de conex√£o")

print("\n=== FIM DO TESTE ===")