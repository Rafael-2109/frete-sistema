#!/usr/bin/env python3
"""
üîç AN√ÅLISE DE ERROS ESPEC√çFICOS - Claude AI Novo
===============================================

Analisa os erros espec√≠ficos do teste para criar um plano de corre√ß√£o
otimizado por impacto m√°ximo.
"""

import sys
import os
from pathlib import Path

# Configurar PYTHONPATH
current_dir = Path(__file__).parent
app_dir = current_dir.parent
root_dir = app_dir.parent

for path in [str(root_dir), str(app_dir), str(current_dir)]:
    if path not in sys.path:
        sys.path.insert(0, path)

def analisar_erros_por_categoria():
    """Analisa os erros espec√≠ficos por categoria"""
    
    # Erros identificados no teste
    erros_por_categoria = {
        "üîÑ ORQUESTRADORES": {
            "taxa_atual": "0.0%",
            "impacto": "ALTO",
            "erros": [
                "No module named 'app.claude_ai_novo.orchestrators.main_orchestrator'",
                "No module named 'app.claude_ai_novo.orchestrators.workflow_orchestrator'", 
                "No module named 'app.claude_ai_novo.orchestrators.integration_orchestrator'",
                "No module named 'app.claude_ai_novo.orchestrators.orchestrators'"
            ],
            "solucao": "Criar 3 m√≥dulos faltantes",
            "ganho_estimado": "+5.2% (3 m√≥dulos)"
        },
        
        "üß† MEMORIZADORES": {
            "taxa_atual": "0.0%",
            "impacto": "M√âDIO",
            "erros": [
                "No module named 'app.claude_ai_novo.memorizers.memory_manager'",
                "No module named 'app.claude_ai_novo.memorizers.conversation_memory'",
                "No module named 'app.claude_ai_novo.memorizers.context_memory'",
                "No module named 'app.claude_ai_novo.memorizers.system_memory'"
            ],
            "solucao": "Criar 2 m√≥dulos faltantes (2 outros s√£o warnings)",
            "ganho_estimado": "+3.4% (2 m√≥dulos)"
        },
        
        "üí¨ CONVERSADORES": {
            "taxa_atual": "0.0%",
            "impacto": "M√âDIO",
            "erros": [
                "No module named 'app.claude_ai_novo.conversers.conversation_manager'",
                "No module named 'app.claude_ai_novo.conversers.context_conversation'",
                "No module named 'app.claude_ai_novo.conversers.conversers'"
            ],
            "solucao": "Criar 2 m√≥dulos faltantes",
            "ganho_estimado": "+3.4% (2 m√≥dulos)"
        },
        
        "‚ö° ENRIQUECEDORES": {
            "taxa_atual": "0.0%",
            "impacto": "BAIXO",
            "erros": [
                "No module named 'app.claude_ai_novo.readers'",
                "No module named 'app.claude_ai_novo.enrichers.context_enricher'"
            ],
            "solucao": "Criar 1 m√≥dulo + corrigir import",
            "ganho_estimado": "+3.4% (2 m√≥dulos)"
        },
        
        "üîê SEGURAN√áA": {
            "taxa_atual": "0.0%",
            "impacto": "BAIXO",
            "erros": [
                "No module named 'app.claude_ai_novo.security.security_guard'"
            ],
            "solucao": "Criar 1 m√≥dulo",
            "ganho_estimado": "+1.7% (1 m√≥dulo)"
        },
        
        "üó∫Ô∏è MAPEADORES": {
            "taxa_atual": "20.0%",
            "impacto": "M√âDIO",
            "erros": [
                "No module named 'app.claude_ai_novo.mappers.field_mapper'",
                "No module named 'app.claude_ai_novo.mappers.context_mapper'",
                "No module named 'app.claude_ai_novo.mappers.query_mapper'",
                "No module named 'app.claude_ai_novo.mappers.data_mapper'"
            ],
            "solucao": "Criar 4 m√≥dulos faltantes",
            "ganho_estimado": "+6.9% (4 m√≥dulos)"
        },
        
        "üîó INTEGRA√á√ÉO": {
            "taxa_atual": "33.3%",
            "impacto": "M√âDIO",
            "erros": [
                "cannot import name 'get_claude_ai_instance'",
                "No module named 'app.claude_ai_novo.analyzers.structural_ai'"
            ],
            "solucao": "Corrigir imports + criar m√≥dulo",
            "ganho_estimado": "+6.9% (4 m√≥dulos)"
        },
        
        "üì• CARREGADORES": {
            "taxa_atual": "66.7%",
            "impacto": "BAIXO",
            "erros": [
                "cannot import name '_carregar_dados_pedidos' from 'app.claude_ai_novo.providers.data_provider'"
            ],
            "solucao": "Corrigir import espec√≠fico",
            "ganho_estimado": "+1.7% (1 m√≥dulo)"
        }
    }
    
    return erros_por_categoria

def criar_plano_otimizado():
    """Cria plano de corre√ß√£o otimizado por impacto"""
    
    erros = analisar_erros_por_categoria()
    
    # Ordenar por impacto (ganho estimado)
    plano_otimizado = []
    
    for categoria, info in erros.items():
        ganho = float(info["ganho_estimado"].split("+")[1].split("%")[0])
        plano_otimizado.append((categoria, info, ganho))
    
    # Ordenar por ganho decrescente
    plano_otimizado.sort(key=lambda x: x[2], reverse=True)
    
    return plano_otimizado

def main():
    """Fun√ß√£o principal"""
    print("üîç AN√ÅLISE DE ERROS ESPEC√çFICOS - Claude AI Novo")
    print("=" * 60)
    
    print(f"üìä STATUS ATUAL: 67.2% (39/58 m√≥dulos)")
    print(f"üéØ META: 75%+ (44+ m√≥dulos)")
    print(f"üîß NECESS√ÅRIO: +5 m√≥dulos m√≠nimo")
    print()
    
    plano = criar_plano_otimizado()
    
    print("üìã PLANO DE CORRE√á√ÉO OTIMIZADO (por impacto):")
    print("=" * 60)
    
    ganho_total = 0
    for i, (categoria, info, ganho) in enumerate(plano, 1):
        print(f"{i}. {categoria}")
        print(f"   üìä Atual: {info['taxa_atual']} | Ganho: +{ganho:.1f}%")
        print(f"   üîß Solu√ß√£o: {info['solucao']}")
        print(f"   ‚ö° Impacto: {info['impacto']}")
        print()
        ganho_total += ganho
    
    print(f"üéØ GANHO TOTAL ESTIMADO: +{ganho_total:.1f}%")
    print(f"üìà TAXA FINAL ESTIMADA: {67.2 + ganho_total:.1f}%")
    print()
    
    print("üöÄ RECOMENDA√á√ÉO DE EXECU√á√ÉO:")
    print("=" * 60)
    print("1. PRIORIDADE M√ÅXIMA: üó∫Ô∏è MAPEADORES (+6.9%)")
    print("2. PRIORIDADE ALTA: üîó INTEGRA√á√ÉO (+6.9%)")
    print("3. PRIORIDADE ALTA: üîÑ ORQUESTRADORES (+5.2%)")
    print("4. PRIORIDADE M√âDIA: üß† MEMORIZADORES (+3.4%)")
    print("5. PRIORIDADE M√âDIA: üí¨ CONVERSADORES (+3.4%)")
    print()
    print("‚ö° Com as 3 primeiras: 67.2% ‚Üí 85.2% (META ALCAN√áADA!)")

if __name__ == "__main__":
    main() 