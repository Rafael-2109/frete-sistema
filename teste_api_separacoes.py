#!/usr/bin/env python3
"""
Script para testar a API de separa√ß√µes e verificar o campo protocolo_portal
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.separacao.models import Separacao
from app.portal.models import PortalIntegracao
import json
from flask import Flask

app = create_app()

def criar_integracao_teste():
    """Cria uma integra√ß√£o de teste para verificar se aparece na API"""
    with app.app_context():
        # Buscar uma separa√ß√£o existente
        separacao = db.session.query(Separacao).first()
        
        if not separacao:
            print("‚ùå Nenhuma separa√ß√£o encontrada")
            return None
            
        print(f"üì¶ Usando separa√ß√£o: {separacao.separacao_lote_id}")
        
        # Verificar se j√° existe integra√ß√£o
        integracao = db.session.query(PortalIntegracao).filter(
            PortalIntegracao.lote_id == separacao.separacao_lote_id
        ).first()
        
        if not integracao:
            print("‚ûï Criando integra√ß√£o de teste...")
            integracao = PortalIntegracao(
                portal='atacadao',
                lote_id=separacao.separacao_lote_id,
                tipo_lote='separacao',
                protocolo_portal='TEST-PROT-123456',
                status='confirmado',
                usuario_solicitante='teste'
            )
            db.session.add(integracao)
            db.session.commit()
            print(f"‚úÖ Integra√ß√£o criada com protocolo: {integracao.protocolo_portal}")
        else:
            print(f"‚úÖ Integra√ß√£o j√° existe com protocolo: {integracao.protocolo_portal}")
            
        return separacao.num_pedido, separacao.separacao_lote_id

def testar_api_diretamente():
    """Testa a API diretamente para verificar o retorno"""
    with app.app_context():
        with app.test_client() as client:
            # Buscar uma separa√ß√£o com integra√ß√£o
            dados = criar_integracao_teste()
            
            if not dados:
                return
                
            num_pedido, lote_id = dados
            
            print(f"\nüîç Testando API para pedido: {num_pedido}")
            
            # Fazer requisi√ß√£o para a API
            response = client.get(f'/carteira/api/pedido/{num_pedido}/separacoes-completas')
            
            if response.status_code == 200:
                data = response.get_json()
                
                if data.get('success'):
                    print(f"‚úÖ API retornou {len(data.get('separacoes', []))} separa√ß√µes")
                    
                    # Procurar a separa√ß√£o com o lote_id
                    for sep in data.get('separacoes', []):
                        if sep.get('separacao_lote_id') == lote_id:
                            print(f"\nüìã Separa√ß√£o encontrada:")
                            print(f"   Lote ID: {sep.get('separacao_lote_id')}")
                            print(f"   Status: {sep.get('status')}")
                            
                            # VERIFICA√á√ÉO CR√çTICA
                            if 'protocolo_portal' in sep:
                                print(f"   ‚úÖ CAMPO protocolo_portal EXISTE: {sep.get('protocolo_portal')}")
                                
                                if sep.get('protocolo_portal'):
                                    print("   ‚úÖ‚úÖ‚úÖ PROTOCOLO PRESENTE - BOT√ïES DEVEM APARECER!")
                                else:
                                    print("   ‚ö†Ô∏è Protocolo existe mas est√° vazio")
                            else:
                                print("   ‚ùå‚ùå‚ùå CAMPO protocolo_portal N√ÉO EXISTE NO RETORNO!")
                                print("   ‚ùå ESTE √â O PROBLEMA - O CAMPO N√ÉO EST√Å SENDO RETORNADO!")
                            
                            # Mostrar todos os campos retornados
                            print(f"\n   üìä Campos retornados: {list(sep.keys())}")
                            break
                    else:
                        print(f"‚ùå Separa√ß√£o com lote_id {lote_id} n√£o encontrada no retorno")
                else:
                    print(f"‚ùå API retornou erro: {data.get('error')}")
            else:
                print(f"‚ùå Erro HTTP: {response.status_code}")
                
def verificar_logs_servidor():
    """Verifica os logs do servidor para debug"""
    print("\n" + "=" * 60)
    print("üìã VERIFICANDO LOGS")
    print("=" * 60)
    
    with app.app_context():
        # Verificar √∫ltimos logs do portal
        from app.portal.models import PortalLog
        
        logs = db.session.query(PortalLog).order_by(
            PortalLog.criado_em.desc()
        ).limit(5).all()
        
        if logs:
            print("√öltimos logs do portal:")
            for log in logs:
                print(f"   - {log.acao}: {log.mensagem[:50]}...")
        else:
            print("Nenhum log encontrado")

if __name__ == "__main__":
    print("=" * 60)
    print("üîç TESTE COMPLETO DA API DE SEPARA√á√ïES")
    print("=" * 60)
    
    testar_api_diretamente()
    verificar_logs_servidor()
    
    print("\n" + "=" * 60)
    print("üìù DIAGN√ìSTICO FINAL:")
    print("=" * 60)
    print("Se o campo protocolo_portal N√ÉO aparece no retorno:")
    print("1. ‚ùå O problema est√° na API (separacoes_api.py)")
    print("2. Verifique se o servidor foi reiniciado")
    print("3. Verifique os logs de erro no terminal do servidor")
    print("")
    print("Se o campo protocolo_portal APARECE no retorno:")
    print("1. ‚úÖ A API est√° funcionando")
    print("2. Limpe o cache do navegador (Ctrl+F5)")
    print("3. Verifique o console do navegador (F12)")
    print("=" * 60)