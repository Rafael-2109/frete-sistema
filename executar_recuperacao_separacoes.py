#!/usr/bin/env python
"""
Script de Execu√ß√£o - Recupera√ß√£o de Separa√ß√µes Perdidas
========================================================

Este script recupera Separa√ß√µes que foram deletadas incorretamente.
Reconstr√≥i as Separa√ß√µes usando dados de Pedidos FATURADOS e suas NFs.

Uso:
    python executar_recuperacao_separacoes.py [op√ß√µes]

Exemplos:
    python executar_recuperacao_separacoes.py                 # Executa recupera√ß√£o
    python executar_recuperacao_separacoes.py --dry-run       # Modo simula√ß√£o
    python executar_recuperacao_separacoes.py --pedido P001   # Verifica pedido espec√≠fico

Para agendar execu√ß√£o √∫nica:
    nohup python executar_recuperacao_separacoes.py > recuperacao.log 2>&1 &
"""

import sys
import argparse
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(f'logs/recuperacao_separacoes_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
    ]
)

logger = logging.getLogger(__name__)


def main():
    """
    Fun√ß√£o principal do script
    """
    # Parser de argumentos
    parser = argparse.ArgumentParser(
        description='Recupera Separa√ß√µes perdidas usando dados de NFs faturadas'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Executa em modo simula√ß√£o (n√£o salva altera√ß√µes)'
    )
    parser.add_argument(
        '--pedido',
        type=str,
        help='Verifica/recupera pedido espec√≠fico'
    )
    parser.add_argument(
        '--verificar',
        action='store_true',
        help='Apenas verifica quantos pedidos √≥rf√£os existem'
    )
    
    args = parser.parse_args()
    
    try:
        # Importar app e servi√ßo
        from app import create_app, db
        from app.faturamento.services.recuperar_separacoes_perdidas import RecuperadorSeparacoesPerdidas
        
        # Criar contexto da aplica√ß√£o
        app = create_app()
        
        with app.app_context():
            print("=" * 70)
            print("üîß RECUPERA√á√ÉO DE SEPARA√á√ïES PERDIDAS")
            print(f"üìÖ Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print("=" * 70)
            
            if args.verificar:
                # Modo verifica√ß√£o - apenas conta pedidos √≥rf√£os
                logger.info("üîç Modo verifica√ß√£o - contando pedidos √≥rf√£os...")
                
                from app.pedidos.models import Pedido
                
                # Contar pedidos que T√äM lote mas N√ÉO tem Separacao
                from app.separacao.models import Separacao
                
                pedidos_com_lote = Pedido.query.filter(
                    db.or_(
                        Pedido.status == 'FATURADO',
                        Pedido.status == 'NF no CD'
                    ),
                    Pedido.separacao_lote_id.isnot(None),
                    Pedido.separacao_lote_id != '',
                    Pedido.nf.isnot(None),
                    Pedido.nf != ''
                ).all()
                
                pedidos_orfaos = 0
                for pedido in pedidos_com_lote:
                    sep_existe = Separacao.query.filter_by(
                        separacao_lote_id=pedido.separacao_lote_id
                    ).first()
                    if not sep_existe:
                        pedidos_orfaos += 1
                
                pedidos_total = Pedido.query.filter(
                    db.or_(
                        Pedido.status == 'FATURADO',
                        Pedido.status == 'NF no CD'
                    )
                ).count()
                
                print(f"\nüìä RESULTADO DA VERIFICA√á√ÉO:")
                print(f"   Total de pedidos FATURADOS/NF no CD: {pedidos_total}")
                print(f"   Pedidos √≥rf√£os (sem separa√ß√£o): {pedidos_orfaos}")
                print(f"   Percentual √≥rf√£o: {(pedidos_orfaos/pedidos_total*100):.1f}%" if pedidos_total > 0 else "0%")
                
                if pedidos_orfaos > 0:
                    print(f"\n‚ö†Ô∏è Existem {pedidos_orfaos} pedidos que podem ser recuperados")
                    print("   Execute sem --verificar para recuperar as separa√ß√µes")
                else:
                    print("\n‚úÖ Sistema √≠ntegro - nenhum pedido √≥rf√£o encontrado")
                
                return 0
                
            elif args.pedido:
                # Verificar/recuperar pedido espec√≠fico
                logger.info(f"üîç Verificando pedido {args.pedido}...")
                
                resultado = RecuperadorSeparacoesPerdidas.verificar_pedido_especifico(args.pedido)
                
                print(f"\nüìã PEDIDO: {args.pedido}")
                print(f"   Status: {resultado['status']}")
                print(f"   Tem separa√ß√£o: {'SIM' if resultado['tem_separacao'] else 'N√ÉO'}")
                print(f"   Tem NF: {'SIM' if resultado['tem_nf'] else 'N√ÉO'}")
                
                if resultado['detalhes']:
                    print(f"   Cliente: {resultado['detalhes'].get('cliente', 'N/A')}")
                    print(f"   NF: {resultado['detalhes'].get('nf', 'N/A')}")
                    print(f"   Lote: {resultado['detalhes'].get('separacao_lote_id', 'N/A')}")
                    
                    if 'produtos_na_nf' in resultado['detalhes']:
                        print(f"   Produtos na NF: {resultado['detalhes']['produtos_na_nf']}")
                
                if resultado['pode_recuperar']:
                    print(f"\n‚úÖ Este pedido PODE ser recuperado")
                    
                    if not args.dry_run:
                        resposta = input("\nüîÑ Deseja recuperar este pedido agora? (s/n): ")
                        if resposta.lower() == 's':
                            from app.pedidos.models import Pedido
                            pedido = Pedido.query.filter_by(num_pedido=args.pedido).first()
                            
                            if pedido:
                                resultado_rec = RecuperadorSeparacoesPerdidas._recuperar_separacao_pedido(pedido)
                                if resultado_rec['sucesso']:
                                    db.session.commit()
                                    print(f"‚úÖ Pedido recuperado com sucesso!")
                                    print(f"   Lote criado: {resultado_rec['lote_id']}")
                                    print(f"   Produtos: {resultado_rec['produtos_recuperados']}")
                                else:
                                    print(f"‚ùå Erro na recupera√ß√£o: {resultado_rec.get('erro')}")
                    else:
                        print("   (Execute sem --dry-run para recuperar)")
                elif resultado['tem_separacao']:
                    print(f"\n‚úÖ Este pedido j√° tem separa√ß√£o (lote: {resultado['detalhes'].get('separacao_lote_id')})")
                else:
                    print(f"\n‚ùå Este pedido N√ÉO pode ser recuperado")
                    if not resultado['tem_nf']:
                        print("   Motivo: N√£o tem NF associada")
                    elif resultado['status'] not in ['FATURADO', 'NF no CD']:
                        print(f"   Motivo: Status '{resultado['status']}' n√£o √© recuper√°vel")
                
                return 0
                
            else:
                # Executar recupera√ß√£o completa
                logger.info(f"üîÑ Executando recupera√ß√£o completa...")
                
                if args.dry_run:
                    print("\n‚ö†Ô∏è MODO SIMULA√á√ÉO - Nenhuma altera√ß√£o ser√° salva")
                    print("=" * 70)
                
                resultado = RecuperadorSeparacoesPerdidas.executar_recuperacao_completa(
                    modo_simulacao=args.dry_run
                )
                
                # Exibir resultados
                print("\n" + "=" * 70)
                if resultado['sucesso']:
                    if resultado['separacoes_criadas'] > 0:
                        print("‚úÖ RECUPERA√á√ÉO CONCLU√çDA COM SUCESSO")
                        print(f"   üìä Pedidos analisados: {resultado['pedidos_analisados']}")
                        print(f"   üîç Pedidos √≥rf√£os: {resultado['pedidos_orfaos']}")
                        print(f"   ‚úÖ Separa√ß√µes criadas: {resultado['separacoes_criadas']}")
                        print(f"   üì¶ Produtos recuperados: {resultado['produtos_recuperados']}")
                        
                        if resultado['lotes_criados']:
                            print(f"\nüÜî Alguns lotes criados:")
                            for lote in resultado['lotes_criados'][:5]:
                                print(f"   - {lote}")
                        
                        if resultado['erros']:
                            print(f"\n‚ö†Ô∏è Erros encontrados: {len(resultado['erros'])}")
                            for erro in resultado['erros'][:3]:
                                print(f"   - {erro}")
                        
                        if args.dry_run:
                            print("\n‚ö†Ô∏è MODO SIMULA√á√ÉO - Nenhuma altera√ß√£o foi salva")
                            print("   Execute sem --dry-run para aplicar as mudan√ßas")
                    else:
                        print("‚úÖ SISTEMA √çNTEGRO")
                        print("   Nenhuma separa√ß√£o precisou ser recuperada")
                else:
                    print("‚ùå ERRO NA RECUPERA√á√ÉO")
                    print(f"   Erro: {resultado.get('erro_geral', 'Erro desconhecido')}")
                    if resultado['erros']:
                        print(f"\n   Erros detalhados:")
                        for erro in resultado['erros'][:5]:
                            print(f"   - {erro}")
                
                print("=" * 70)
                
                # Retornar c√≥digo apropriado
                if resultado['sucesso']:
                    return 0
                else:
                    return 1
                
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        import traceback
        logger.error(traceback.format_exc())
        print(f"\n‚ùå ERRO FATAL: {e}")
        print("Verifique o arquivo de log para mais detalhes")
        return 2


if __name__ == '__main__':
    sys.exit(main())