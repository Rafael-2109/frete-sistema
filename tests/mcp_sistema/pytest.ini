[pytest]
# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test execution options
addopts = 
    -v
    --strict-markers
    --tb=short
    --maxfail=5
    --disable-warnings
    -p no:warnings
    --cov=app.mcp_sistema
    --cov-report=html
    --cov-report=term-missing
    --cov-fail-under=80

# Test markers
markers =
    unit: Unit tests that test individual components
    integration: Integration tests that test component interactions
    performance: Performance benchmark tests
    learning: Learning system specific tests
    api: API endpoint tests
    nlp: NLP processing tests
    slow: Tests that take longer than 1 second
    requires_db: Tests that require database connection
    requires_redis: Tests that require Redis connection

# Asyncio configuration
asyncio_mode = auto

# Test paths
testpaths = tests/mcp_sistema

# Coverage configuration
[coverage:run]
source = app/mcp_sistema
omit = 
    */tests/*
    */migrations/*
    */__init__.py
    */config.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract

# Logging configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout for tests (in seconds)
timeout = 300

# Parallel execution (if using pytest-xdist)
# addopts = -n auto