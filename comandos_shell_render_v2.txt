# COMANDOS PARA EXECUTAR NO SHELL DO RENDER - VERS√ÉO CORRIGIDA
# ==============================================================
# Aplica as corre√ß√µes sugeridas pelo CodeRabbit:
# 1. N√£o inserir manualmente no alembic_version
# 2. Usar SQLAlchemy 2.0+ com text() e db.engine.begin()
# 3. Usar alembic stamp ao inv√©s de INSERT direto

# 1. ACESSAR O SHELL DO RENDER:
#    - Ir no dashboard do Render
#    - Clicar no servi√ßo "frete-sistema" 
#    - Clicar em "Shell" no menu lateral
#    - Aguardar carregar o terminal web

# 2. EXECUTAR MIGRA√á√ÉO (VERS√ÉO CORRIGIDA):
python aplicar_migracao_render_shell_v2.py

# 3. OU COMANDOS INDIVIDUAIS CORRIGIDOS (SE SCRIPT FALHAR):

# Primeiro, verificar ambiente:
echo "=== VERIFICANDO AMBIENTE ==="
echo "Python: $(python --version)"
echo "Platform: $(uname -a)"
echo "DATABASE_URL: ${DATABASE_URL:0:50}..."

# Tentar Flask-Migrate primeiro (RECOMENDA√á√ÉO CodeRabbit):
echo "=== TENTANDO FLASK-MIGRATE ==="
flask db upgrade

# Se falhar, usar alembic stamp (CORRE√á√ÉO CodeRabbit):
echo "=== ALEMBIC STAMP HEAD ==="
alembic stamp head

# Tentar upgrade novamente:
echo "=== UPGRADE AP√ìS STAMP ==="
flask db upgrade

# Se ainda falhar, aplicar SQL direto COM CORRE√á√ïES CodeRabbit:
echo "=== APLICANDO SQL DIRETO (SQLAlchemy 2.0+) ==="
python -c "
from sqlalchemy import text
from app import create_app, db

app = create_app()

with app.app_context():
    print('üöÄ Criando tabela pre_separacao_itens...')
    
    # Criar tabela pre_separacao_itens
    sql1 = '''
    CREATE TABLE IF NOT EXISTS pre_separacao_itens (
        id SERIAL PRIMARY KEY,
        carteira_principal_id INTEGER NOT NULL,
        cod_produto VARCHAR(50) NOT NULL,
        qtd_original REAL NOT NULL,
        qtd_selecionada REAL NOT NULL,
        qtd_restante REAL NOT NULL,
        expedicao_editavel DATE NULL,
        agendamento_editavel DATE NULL,
        protocolo_editavel VARCHAR(50) NULL,
        status VARCHAR(20) NOT NULL DEFAULT 'PENDENTE',
        observacoes TEXT NULL,
        criado_em TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        criado_por VARCHAR(100) NOT NULL,
        atualizado_em TIMESTAMP NULL,
        atualizado_por VARCHAR(100) NULL,
        tipo_envio VARCHAR(10) DEFAULT 'total',
        CONSTRAINT fk_pre_separacao_carteira 
            FOREIGN KEY (carteira_principal_id) 
            REFERENCES carteira_principal(id)
    );
    '''
    
    # CORRE√á√ÉO CodeRabbit: usar db.engine.begin() e text()
    with db.engine.begin() as conn:
        conn.execute(text(sql1))
    print('‚úÖ Tabela criada')
    
    # Criar √≠ndices
    indices = [
        'CREATE INDEX IF NOT EXISTS ix_pre_separacao_itens_carteira_principal_id ON pre_separacao_itens(carteira_principal_id);',
        'CREATE INDEX IF NOT EXISTS ix_pre_separacao_itens_cod_produto ON pre_separacao_itens(cod_produto);',
        'CREATE INDEX IF NOT EXISTS ix_pre_separacao_itens_status ON pre_separacao_itens(status);',
        'CREATE INDEX IF NOT EXISTS ix_pre_separacao_itens_tipo_envio ON pre_separacao_itens(tipo_envio);'
    ]
    
    for i, sql in enumerate(indices, 1):
        with db.engine.begin() as conn:
            conn.execute(text(sql))
        print(f'‚úÖ √çndice {i} criado')
    
    # Adicionar campo tipo_envio em separacao
    sql_tipo_envio = '''
    DO \$\$ 
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'separacao' AND column_name = 'tipo_envio'
        ) THEN
            ALTER TABLE separacao ADD COLUMN tipo_envio VARCHAR(10) DEFAULT 'total';
            CREATE INDEX IF NOT EXISTS ix_separacao_tipo_envio ON separacao(tipo_envio);
        END IF;
    END \$\$;
    '''
    
    with db.engine.begin() as conn:
        conn.execute(text(sql_tipo_envio))
    print('‚úÖ Campo tipo_envio adicionado')
    
    # Adicionar campos de alerta
    sql_alertas = '''
    DO \$\$ 
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'pedidos' AND column_name = 'alerta_pedido_alterado'
        ) THEN
            ALTER TABLE pedidos ADD COLUMN alerta_pedido_alterado BOOLEAN DEFAULT FALSE;
            CREATE INDEX IF NOT EXISTS ix_pedidos_alerta ON pedidos(alerta_pedido_alterado);
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'embarques' AND column_name = 'alerta_embarque_alterado'
        ) THEN
            ALTER TABLE embarques ADD COLUMN alerta_embarque_alterado BOOLEAN DEFAULT FALSE;
            CREATE INDEX IF NOT EXISTS ix_embarques_alerta ON embarques(alerta_embarque_alterado);
        END IF;
    END \$\$;
    '''
    
    with db.engine.begin() as conn:
        conn.execute(text(sql_alertas))
    print('‚úÖ Campos de alerta adicionados')
    
    print('üéâ SQL APLICADO COM SUCESSO!')
"

# 4. MARCAR MIGRA√á√ÉO VIA ALEMBIC STAMP (CORRE√á√ÉO CodeRabbit):
echo "=== MARCANDO MIGRA√á√ÉO VIA ALEMBIC STAMP ==="
alembic stamp 76bbd63e3bed

# 5. VERIFICAR RESULTADO COM SQLAlchemy 2.0+:
echo "=== VERIFICANDO RESULTADO ==="
python -c "
from sqlalchemy import text
from app import create_app, db
from app.carteira.models import PreSeparacaoItem

app = create_app()

with app.app_context():
    # Testar tabela
    count = PreSeparacaoItem.query.count()
    print(f'‚úÖ Tabela pre_separacao_itens: {count} registros')
    
    # Verificar estrutura da tabela (CORRE√á√ÉO CodeRabbit)
    with db.engine.connect() as conn:
        result = conn.execute(text('''
            SELECT column_name, data_type, column_default
            FROM information_schema.columns 
            WHERE table_name = 'pre_separacao_itens'
            ORDER BY ordinal_position;
        '''))
        
        columns = result.fetchall()
        print(f'‚úÖ Tabela tem {len(columns)} colunas')
        for col in columns[:5]:
            print(f'  - {col[0]}: {col[1]}')
    
    # Verificar campo tipo_envio (CORRE√á√ÉO CodeRabbit)
    with db.engine.connect() as conn:
        result = conn.execute(text('''
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'separacao' AND column_name = 'tipo_envio';
        '''))
        
        if result.fetchone():
            print('‚úÖ Campo tipo_envio em separacao: OK')
        else:
            print('‚ùå Campo tipo_envio em separacao: N√ÉO ENCONTRADO')
    
    # Verificar vers√£o Alembic (CORRE√á√ÉO CodeRabbit)
    with db.engine.connect() as conn:
        result = conn.execute(text('SELECT version_num FROM alembic_version ORDER BY version_num DESC LIMIT 1;'))
        version = result.fetchone()
        if version:
            print(f'‚úÖ Vers√£o Alembic: {version[0]}')
    
    print('üéâ TUDO FUNCIONANDO!')
"

# 6. TESTAR APLICA√á√ÉO:
echo "=== TESTANDO APLICA√á√ÉO ==="
python -c "
from app.carteira.models import PreSeparacaoItem
print('‚úÖ Modelo PreSeparacaoItem importado com sucesso!')

# Testar workaround tamb√©m
if hasattr(PreSeparacaoItem, 'salvar_via_workaround'):
    print('‚úÖ M√©todo workaround dispon√≠vel (backup)')
else:
    print('‚ö†Ô∏è M√©todo workaround n√£o encontrado')
"

echo "üéâ MIGRA√á√ÉO CONCLU√çDA COM CORRE√á√ïES CodeRabbit!"
echo "üìã Sistema pronto para Etapa 2 (Dropdown Separa√ß√µes)"
echo ""
echo "üí° MELHORIAS APLICADAS:"
echo "   ‚úÖ N√£o inserir manualmente no alembic_version"
echo "   ‚úÖ SQLAlchemy 2.0+ com db.engine.begin() e text()"  
echo "   ‚úÖ alembic stamp ao inv√©s de INSERT direto" 