#!/usr/bin/env python3
"""
Script Python para executar a migra√ß√£o Pedido ‚Üí VIEW
Data: 2025-01-29

Mais f√°cil de executar que o script bash, especialmente no Windows
"""

import os
import sys
import subprocess
import shutil
from datetime import datetime
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent))

# Tentar importar dotenv se dispon√≠vel
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ Arquivo .env carregado")
except ImportError:
    print("‚ÑπÔ∏è python-dotenv n√£o instalado, usando vari√°veis do ambiente")

def executar_comando(arquivo, descricao):
    """Executa um arquivo SQL ou Python"""
    database_url = os.environ.get('DATABASE_URL')
    
    # Determinar tipo de arquivo
    if arquivo.endswith('.py'):
        return executar_python(arquivo, descricao)
    else:
        return executar_sql(arquivo, descricao)

def executar_python(arquivo_py, descricao):
    """Executa um script Python"""
    print(f"\nüêç Executando: {descricao}")
    print(f"   Arquivo: {arquivo_py}")
    
    try:
        result = subprocess.run(
            [sys.executable, arquivo_py],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print(f"‚úÖ {descricao} - Sucesso!")
            if result.stdout:
                print(result.stdout)
            return True
        else:
            print(f"‚ùå Erro ao executar {arquivo_py}")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def executar_sql(arquivo_sql, descricao):
    """Executa um arquivo SQL no banco"""
    database_url = os.environ.get('DATABASE_URL')
    
    if not database_url:
        print("‚ùå DATABASE_URL n√£o encontrada!")
        print("\nOp√ß√µes:")
        print("1. Se est√° no Render: DATABASE_URL j√° deveria estar configurada")
        print("2. Se est√° local: Verifique o arquivo .env")
        return False
    
    # Ocultar senha no log
    db_display = database_url.split('@')[1] if '@' in database_url else 'banco'
    print(f"\nüìä Executando: {descricao}")
    print(f"   Arquivo: {arquivo_sql}")
    print(f"   Banco: ...@{db_display}")
    
    try:
        # Executar SQL usando psql
        result = subprocess.run(
            ['psql', database_url, '-f', arquivo_sql],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print(f"‚úÖ {descricao} - Sucesso!")
            return True
        else:
            print(f"‚ùå Erro ao executar {arquivo_sql}")
            print(result.stderr)
            return False
            
    except FileNotFoundError:
        print("‚ùå psql n√£o encontrado. Instale o PostgreSQL client.")
        return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def criar_backup():
    """Cria backup do banco de dados"""
    database_url = os.environ.get('DATABASE_URL')
    
    if not database_url:
        return None
    
    backup_file = f"backup_migracao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sql"
    
    print(f"\nüíæ Criando backup: {backup_file}")
    
    try:
        result = subprocess.run(
            ['pg_dump', database_url, '-f', backup_file],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print(f"‚úÖ Backup criado: {backup_file}")
            return backup_file
        else:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel criar backup")
            print(result.stderr)
            return None
            
    except FileNotFoundError:
        print("‚ö†Ô∏è pg_dump n√£o encontrado. Continuando sem backup...")
        return None

def main():
    """Executa a migra√ß√£o completa"""
    
    print("=" * 50)
    print("MIGRA√á√ÉO: PEDIDO ‚Üí VIEW")
    print("=" * 50)
    
    # Verificar se j√° foi migrado (para deploy autom√°tico)
    if os.path.exists('verificar_view_pedidos.py'):
        import subprocess
        result = subprocess.run([sys.executable, 'verificar_view_pedidos.py'], capture_output=True)
        if result.returncode == 0:
            print("‚úÖ Migra√ß√£o j√° foi aplicada anteriormente. Pulando...")
            return 0
    
    # Verificar arquivos necess√°rios
    arquivos_necessarios = [
        'executar_migration_movimentacao.py',  # Adicionar colunas em MovimentacaoEstoque
        'recompor_separacoes_perdidas.py',
        'sql_render_modular.sql',
        'sql_criar_view_pedidos_final.sql',
        'sql_adicionar_cotacao_id_separacao.sql',
        'migrar_dados_pedido_para_separacao.py',
        'sql_otimizacao_indices_separacao.sql',  # √çndices gerais de Separacao
        'sql_indices_ruptura.sql'  # √çndices espec√≠ficos para ruptura
    ]
    
    print("\nüìÅ Verificando arquivos...")
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"   ‚úÖ {arquivo}")
        else:
            print(f"   ‚ùå {arquivo} n√£o encontrado!")
            return 1
    
    # Criar backup (opcional mas recomendado)
    backup_file = criar_backup()
    
    # Se estiver rodando no Render (detectado por vari√°vel de ambiente), n√£o pedir confirma√ß√£o
    is_render = os.environ.get('RENDER') == 'true' or os.environ.get('IS_PULL_REQUEST') == 'false'
    
    if not is_render:
        # Confirmar execu√ß√£o apenas se n√£o for deploy autom√°tico
        print("\n‚ö†Ô∏è ATEN√á√ÉO: Esta migra√ß√£o ir√°:")
        print("   1. Adicionar campos em Separacao")
        print("   2. Migrar dados de Pedido ‚Üí Separacao")
        print("   3. Renomear pedidos ‚Üí pedidos_backup")
        print("   4. Criar VIEW pedidos")
        
        resposta = input("\n‚ñ∂Ô∏è Deseja continuar? (s/N): ")
        if resposta.lower() != 's':
            print("‚ùå Migra√ß√£o cancelada")
            return 0
    else:
        print("\nüöÄ Deploy autom√°tico detectado. Executando migra√ß√£o...")
        print("   1. Adicionar campos em Separacao")
        print("   2. Migrar dados de Pedido ‚Üí Separacao")
        print("   3. Renomear pedidos ‚Üí pedidos_backup")
        print("   4. Criar VIEW pedidos")
    
    # Executar migra√ß√£o
    etapas = [
        ('executar_migration_movimentacao.py', 'Adicionar campos estruturados em MovimentacaoEstoque'),
        ('recompor_separacoes_perdidas.py', 'Recompor separa√ß√µes perdidas usando FaturamentoProduto'),
        ('sql_render_modular.sql', 'Adicionar campos b√°sicos em Separacao'),
        ('sql_adicionar_cotacao_id_separacao.sql', 'Adicionar cotacao_id em Separacao'),
        ('migrar_dados_pedido_para_separacao.py', 'Migrar dados de Pedido para Separacao'),
        ('sql_criar_view_pedidos_final.sql', 'Criar VIEW pedidos'),
        ('sql_otimizacao_indices_separacao.sql', 'Criar √≠ndices otimizados para Separacao'),
        ('sql_indices_ruptura.sql', 'Criar √≠ndices otimizados para an√°lise de ruptura'),
        ('sql_indices_estoque_otimizado.sql', 'Criar √≠ndices otimizados para sistema de estoque simplificado'),
    ]
    
    for arquivo, descricao in etapas:
        if not executar_comando(arquivo, descricao):
            print(f"\n‚ùå Migra√ß√£o falhou na etapa: {descricao}")
            if backup_file:
                print(f"üí° Para reverter, execute: psql $DATABASE_URL < {backup_file}")
            return 1
    
    # Sucesso!
    print("\n" + "=" * 50)
    print("‚úÖ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("=" * 50)
    
    # Atualizar modelo Python
    print("\nüêç Atualizando modelo Python...")
    if os.path.exists('app/pedidos/models_adapter.py'):
        try:
            # Fazer backup
            from datetime import datetime
            
            if os.path.exists('app/pedidos/models.py'):
                backup_name = f"app/pedidos/models_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
                shutil.copy('app/pedidos/models.py', backup_name)
                print(f"   ‚úÖ Backup criado: {backup_name}")
            
            # Substituir pelo adapter
            shutil.copy('app/pedidos/models_adapter.py', 'app/pedidos/models.py')
            print("   ‚úÖ Modelo Pedido atualizado para usar VIEW")
        except Exception as e:
            print(f"   ‚ö†Ô∏è N√£o foi poss√≠vel atualizar modelo: {e}")
    else:
        print("   ‚ö†Ô∏è models_adapter.py n√£o encontrado - atualize manualmente")
    
    print("\nüìã Pr√≥ximos passos:")
    print("1. Testar a aplica√ß√£o")
    print("2. Verificar que Pedido.query.get(id) funciona")
    print("3. Ap√≥s valida√ß√£o, executar:")
    print("   - DROP TABLE pedidos_backup;")
    print("   - DROP TABLE pre_separacao_item;")
    
    if backup_file:
        print(f"\nüíæ Backup salvo em: {backup_file}")
        print(f"   Para reverter: psql $DATABASE_URL < {backup_file}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())