---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: frete-sistema
---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: frete-sistema-config
  namespace: frete-sistema
data:
  FLASK_ENV: "production"
  ENVIRONMENT: "production"
  USE_S3: "true"
  AWS_REGION: "us-east-1"
  FILTRAR_FOB_MONITORAMENTO: "true"
---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: frete-sistema-secret
  namespace: frete-sistema
type: Opaque
stringData:
  DATABASE_URL: "postgresql://user:pass@postgres-service:5432/frete_sistema"
  REDIS_URL: "redis://:redis_pass@redis-service:6379/0"
  SECRET_KEY: "your-production-secret-key"
  AWS_ACCESS_KEY_ID: "your-aws-access-key"
  AWS_SECRET_ACCESS_KEY: "your-aws-secret-key"
  S3_BUCKET_NAME: "your-s3-bucket"
---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: frete-sistema
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: frete_sistema
        - name: POSTGRES_USER
          value: frete_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=C.UTF-8"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - frete_user
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - frete_user
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: frete-sistema
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: frete-sistema
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server", "--appendonly", "yes", "--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: frete-sistema
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: frete-sistema
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
# Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frete-sistema-app
  namespace: frete-sistema
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frete-sistema
  template:
    metadata:
      labels:
        app: frete-sistema
    spec:
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z postgres-service 5432; do echo waiting for db; sleep 2; done']
      - name: run-migrations
        image: frete-sistema:latest
        command: ['flask', 'db', 'upgrade']
        envFrom:
        - configMapRef:
            name: frete-sistema-config
        - secretRef:
            name: frete-sistema-secret
      containers:
      - name: app
        image: frete-sistema:latest
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: frete-sistema-config
        - secretRef:
            name: frete-sistema-secret
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: uploads-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: logs-pvc
---
# PVCs for Application
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
  namespace: frete-sistema
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: frete-sistema
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
# Application Service
apiVersion: v1
kind: Service
metadata:
  name: frete-sistema-service
  namespace: frete-sistema
spec:
  selector:
    app: frete-sistema
  ports:
  - port: 80
    targetPort: 5000
  type: LoadBalancer
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frete-sistema-hpa
  namespace: frete-sistema
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frete-sistema-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frete-sistema-ingress
  namespace: frete-sistema
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - frete.yourdomain.com
    secretName: frete-sistema-tls
  rules:
  - host: frete.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frete-sistema-service
            port:
              number: 80