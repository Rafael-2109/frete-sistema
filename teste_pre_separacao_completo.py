#!/usr/bin/env python3
"""
TESTE COMPLETO: Sistema de Pr√©-Separa√ß√£o Corrigido
Valida se todas as corre√ß√µes aplicadas est√£o funcionando
"""

import os
import sys

def testar_importacoes():
    """Testa se todos os imports essenciais funcionam"""
    try:
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        
        # Testar imports principais
        from app.carteira.models import CarteiraPrincipal, PreSeparacaoItem
        from app.carteira.routes import carteira_bp
        
        print("‚úÖ Imports dos modelos: OK")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de import: {e}")
        return False

def testar_modelo_pre_separacao():
    """Testa se o modelo PreSeparacaoItem tem todos os m√©todos"""
    try:
        from app.carteira.models import PreSeparacaoItem
        
        # Verificar se m√©todo criar_e_salvar existe
        if hasattr(PreSeparacaoItem, 'criar_e_salvar'):
            print("‚úÖ M√©todo PreSeparacaoItem.criar_e_salvar(): EXISTE")
        else:
            print("‚ùå M√©todo PreSeparacaoItem.criar_e_salvar(): N√ÉO ENCONTRADO")
            return False
            
        # Verificar outros m√©todos essenciais
        metodos_essenciais = [
            'buscar_por_pedido_produto',
            '_gerar_hash_item',
            'marcar_como_recomposto'
        ]
        
        for metodo in metodos_essenciais:
            if hasattr(PreSeparacaoItem, metodo):
                print(f"‚úÖ M√©todo {metodo}: EXISTE")
            else:
                print(f"‚ùå M√©todo {metodo}: N√ÉO ENCONTRADO")
                return False
                
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar modelo: {e}")
        return False

def testar_endpoints():
    """Testa se os endpoints essenciais existem"""
    try:
        from app.carteira.routes import carteira_bp
        
        # Verificar se blueprint tem as rotas
        rotas_essenciais = [
            '/api/pedido/<num_pedido>/criar-pre-separacao',
            '/api/pre-separacao/<int:pre_sep_id>/editar',
            '/api/pre-separacao/<int:pre_sep_id>/cancelar',
            '/api/pre-separacao/<int:pre_sep_id>/enviar-separacao'
        ]
        
        # Listar todas as rotas do blueprint
        rotas_blueprint = []
        for rule in carteira_bp.url_map.iter_rules():
            if rule.endpoint.startswith('carteira'):
                rotas_blueprint.append(rule.rule)
        
        print(f"üìã Total de rotas encontradas: {len(rotas_blueprint)}")
        
        # Verificar rotas essenciais
        for rota in rotas_essenciais:
            # Verificar padr√µes similares j√° que o Flask usa padr√µes espec√≠ficos
            rota_encontrada = any(
                'criar-pre-separacao' in r or
                'pre-separacao' in r and 'editar' in r or
                'pre-separacao' in r and 'cancelar' in r or
                'pre-separacao' in r and 'enviar-separacao' in r
                for r in rotas_blueprint
            )
            
            if rota_encontrada:
                print(f"‚úÖ Endpoint similar a {rota}: ENCONTRADO")
            else:
                print(f"‚ùå Endpoint {rota}: N√ÉO ENCONTRADO")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar endpoints: {e}")
        return False

def testar_templates():
    """Testa se os templates t√™m as corre√ß√µes aplicadas"""
    try:
        template_path = "app/templates/carteira/listar_agrupados.html"
        
        if not os.path.exists(template_path):
            print(f"‚ùå Template n√£o encontrado: {template_path}")
            return False
        
        with open(template_path, 'r', encoding='utf-8') as f:
            conteudo = f.read()
        
        # Verificar corre√ß√µes aplicadas
        verificacoes = [
            # Campos corrigidos
            ('item.peso', 'Campo peso corrigido'),
            ('item.pallet', 'Campo pallet corrigido'),
            ('qtd_saldo_produto_pedido', 'Campo quantidade corrigido'),
            
            # Fun√ß√µes implementadas
            ('criarPreSeparacao(', 'Fun√ß√£o criarPreSeparacao implementada'),
            ('editarPreSeparacaoCompleta(', 'Fun√ß√£o editarPreSeparacaoCompleta implementada'),
            ('salvarEdicaoPreSeparacao(', 'Fun√ß√£o salvarEdicaoPreSeparacao implementada'),
            
            # API calls corretos
            ('/criar-pre-separacao', 'API criar-pre-separacao referenciada')
        ]
        
        for busca, descricao in verificacoes:
            if busca in conteudo:
                print(f"‚úÖ {descricao}: OK")
            else:
                print(f"‚ùå {descricao}: N√ÉO ENCONTRADO")
                return False
        
        # Verificar se campos incorretos foram removidos
        campos_incorretos = [
            'peso_calculado',
            'pallet_calculado',
            'qtd_saldo_disponivel'
        ]
        
        for campo in campos_incorretos:
            if campo in conteudo:
                print(f"‚ö†Ô∏è  Campo incorreto ainda presente: {campo}")
            else:
                print(f"‚úÖ Campo incorreto removido: {campo}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar templates: {e}")
        return False

def testar_migracao():
    """Testa se a migra√ß√£o para m√∫ltiplas pr√©-separa√ß√µes existe"""
    try:
        migrations_dir = "migrations/versions"
        
        if not os.path.exists(migrations_dir):
            print(f"‚ùå Diret√≥rio de migra√ß√µes n√£o encontrado: {migrations_dir}")
            return False
        
        # Buscar migra√ß√£o de constraint √∫nica
        arquivos_migracao = os.listdir(migrations_dir)
        migracao_encontrada = any(
            'constraint' in arquivo.lower() and 'pre' in arquivo.lower()
            for arquivo in arquivos_migracao
            if arquivo.endswith('.py')
        )
        
        if migracao_encontrada:
            print("‚úÖ Migra√ß√£o para constraint √∫nica: ENCONTRADA")
        else:
            print("‚ùå Migra√ß√£o para constraint √∫nica: N√ÉO ENCONTRADA")
            return False
        
        # Verificar se migra√ß√£o manual existe
        migracao_manual = "migrations/versions/remover_constraint_unica_pre_separacao.py"
        if os.path.exists(migracao_manual):
            print("‚úÖ Migra√ß√£o manual criada: EXISTE")
            
            # Verificar conte√∫do
            with open(migracao_manual, 'r', encoding='utf-8') as f:
                conteudo = f.read()
                
            if 'drop_constraint' in conteudo and 'pre_separacao_itens_pedido_produto_unique' in conteudo:
                print("‚úÖ Migra√ß√£o remove constraint correta: OK")
            else:
                print("‚ùå Migra√ß√£o n√£o remove constraint esperada")
                return False
        else:
            print("‚ö†Ô∏è  Migra√ß√£o manual n√£o encontrada (pode estar em outro arquivo)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar migra√ß√£o: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üß™ TESTE COMPLETO: Sistema de Pr√©-Separa√ß√£o")
    print("=" * 50)
    
    testes = [
        ("Importa√ß√µes", testar_importacoes),
        ("Modelo PreSeparacaoItem", testar_modelo_pre_separacao),
        ("Endpoints/APIs", testar_endpoints),
        ("Templates", testar_templates),
        ("Migra√ß√£o", testar_migracao)
    ]
    
    resultados = []
    
    for nome, teste_func in testes:
        print(f"\nüîç Testando: {nome}")
        print("-" * 30)
        
        try:
            resultado = teste_func()
            resultados.append((nome, resultado))
            
            if resultado:
                print(f"‚úÖ {nome}: PASSOU")
            else:
                print(f"‚ùå {nome}: FALHOU")
                
        except Exception as e:
            print(f"‚ùå {nome}: ERRO - {e}")
            resultados.append((nome, False))
    
    # Resumo final
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)
    
    passou = sum(1 for _, resultado in resultados if resultado)
    total = len(resultados)
    
    for nome, resultado in resultados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{nome:25} {status}")
    
    print(f"\nüéØ RESULTADO FINAL: {passou}/{total} testes passaram")
    
    if passou == total:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema pronto para uso.")
        return True
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verificar implementa√ß√£o.")
        return False

if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)