#!/usr/bin/env python3
"""
Script para testar e verificar o que aconteceria com a sincroniza√ß√£o da carteira
Autor: Sistema de Fretes
Data: 2025-09-22
"""

import logging
from datetime import datetime, timedelta
from app import create_app
from app.odoo.services.sincronizacao_integrada_service import SincronizacaoIntegradaService
from app.odoo.services.carteira_service import CarteiraService

# Configurar logging detalhado
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def analisar_sincronizacao():
    """Analisa o que aconteceria em uma sincroniza√ß√£o"""

    print("=" * 80)
    print("üîç AN√ÅLISE PROFUNDA DA SINCRONIZA√á√ÉO DA CARTEIRA")
    print("=" * 80)
    print()

    app = create_app()
    with app.app_context():
        # 1. VERIFICAR STATUS DO SISTEMA
        print("üìä 1. VERIFICANDO STATUS DO SISTEMA...")
        print("-" * 50)

        sync_service = SincronizacaoIntegradaService()
        status = sync_service.verificar_status_sincronizacao()

        print(f"‚úÖ Pode sincronizar: {status['pode_sincronizar']}")
        print(f"üìå N√≠vel de risco: {status['nivel_risco']}")
        print(f"üïê √öltima sync faturamento: {status.get('ultima_sync_faturamento', 'Nunca')}")
        print(f"üïê √öltima sync carteira: {status.get('ultima_sync_carteira', 'Nunca')}")

        if status['alertas']:
            print(f"‚ö†Ô∏è Alertas detectados: {len(status['alertas'])}")
            for alerta in status['alertas'][:3]:
                print(f"   - {alerta}")
        print()

        # 2. VERIFICAR O QUE A CARTEIRA SERVICE FARIA
        print("üì¶ 2. ANALISANDO SERVI√áO DA CARTEIRA...")
        print("-" * 50)

        carteira_service = CarteiraService()

        # Simular verifica√ß√£o de incremental
        print("üîç Verificando o que uma sincroniza√ß√£o incremental pegaria...")

        # Verificar √∫ltimos 40 minutos (padr√£o do scheduler)
        janela_minutos = 40
        data_inicio = datetime.now() - timedelta(minutes=janela_minutos)

        print(f"üìÖ Janela de busca: √∫ltimos {janela_minutos} minutos")
        print(f"üìÖ Desde: {data_inicio.strftime('%Y-%m-%d %H:%M:%S')}")
        print()

        # 3. VERIFICAR O QUE SINCRONIZA√á√ÉO INTEGRADA FARIA
        print("üîÑ 3. ANALISANDO SINCRONIZA√á√ÉO INTEGRADA...")
        print("-" * 50)

        print("üìå Sequ√™ncia de execu√ß√£o da sincroniza√ß√£o integrada:")
        print("   1Ô∏è‚É£ FATURAMENTO primeiro (preserva NFs)")
        print("   2Ô∏è‚É£ Valida√ß√£o de integridade")
        print("   3Ô∏è‚É£ Atualiza√ß√£o de status FATURADO")
        print("   4Ô∏è‚É£ CARTEIRA depois (sem risco de perda)")
        print()

        print("üîç Verificando m√©todo que seria executado para carteira:")
        print("   - M√©todo: sincronizar_carteira_odoo_com_gestao_quantidades")
        print("   - Par√¢metros: usar_filtro_pendente=True")
        print("   - Opera√ß√µes principais:")
        print("     ‚Ä¢ Busca pedidos no Odoo")
        print("     ‚Ä¢ Calcula diferen√ßas com banco local")
        print("     ‚Ä¢ Insere novos registros")
        print("     ‚Ä¢ Remove registros cancelados/faturados")
        print("     ‚Ä¢ Recomp√µe pr√©-separa√ß√µes afetadas")
        print()

        # 4. VERIFICAR CONFIGURA√á√ÉO DO SCHEDULER
        print("‚è∞ 4. CONFIGURA√á√ÉO DO SCHEDULER NO RENDER...")
        print("-" * 50)

        print("üìå Arquivo executado: app/scheduler/sincronizacao_incremental_simples.py")
        print("üìå Configura√ß√£o atual:")
        print("   - INTERVALO_MINUTOS: 30 (a cada 30 minutos)")
        print("   - JANELA_MINUTOS: 40 (busca √∫ltimos 40 minutos)")
        print("   - STATUS_MINUTOS: 1560 (busca status √∫ltimas 26 horas)")
        print()

        print("üìå Fluxo de execu√ß√£o no Render:")
        print("   1. start_render.sh inicia o processo")
        print("   2. Executa sincroniza√ß√£o inicial (janela de 120 minutos)")
        print("   3. Agenda execu√ß√µes a cada 30 minutos")
        print("   4. Ordem de execu√ß√£o: FATURAMENTO ‚Üí CARTEIRA")
        print()

        # 5. DIAGN√ìSTICO FINAL
        print("üéØ 5. DIAGN√ìSTICO FINAL...")
        print("-" * 50)

        print("‚úÖ PONTOS POSITIVOS:")
        print("   ‚Ä¢ Scheduler est√° configurado corretamente")
        print("   ‚Ä¢ Ordem de execu√ß√£o est√° SEGURA (Faturamento ‚Üí Carteira)")
        print("   ‚Ä¢ Janela de sobreposi√ß√£o de 10 minutos evita perda de dados")
        print("   ‚Ä¢ Sincroniza√ß√£o inicial recupera dados ap√≥s deploy")
        print()

        print("‚ö†Ô∏è POSS√çVEIS PROBLEMAS NO RENDER:")
        print("   1. Processo do scheduler pode estar falhando ao iniciar")
        print("   2. Falta de logs detalhados dificulta diagn√≥stico")
        print("   3. Poss√≠vel timeout ou kill do processo em background")
        print("   4. Verificar se o arquivo est√° no local correto")
        print()

        print("üîß A√á√ïES RECOMENDADAS:")
        print("   1. Verificar logs do Render: logs/sincronizacao_incremental.log")
        print("   2. Executar manualmente no shell do Render:")
        print("      python -m app.scheduler.sincronizacao_incremental_simples")
        print("   3. Verificar se o processo est√° rodando:")
        print("      ps aux | grep sincronizacao_incremental")
        print("   4. Testar execu√ß√£o √∫nica:")
        print("      python -c \"from app.odoo.services.sincronizacao_integrada_service import SincronizacaoIntegradaService; s = SincronizacaoIntegradaService(); print(s.executar_sincronizacao_completa_segura())\"")
        print()

if __name__ == "__main__":
    analisar_sincronizacao()