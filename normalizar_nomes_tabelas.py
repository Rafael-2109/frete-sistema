#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para Normalizar Nomes de Tabelas nos V√≠nculos
==================================================

Este script converte todos os nomes de tabelas nos v√≠nculos (CidadeAtendida) 
para MAI√öSCULA, resolvendo diverg√™ncias de case com as tabelas de frete.
"""

import sys
from app import create_app, db
from app.vinculos.models import CidadeAtendida
from app.tabelas.models import TabelaFrete

def normalizar_nomes_tabelas():
    """Normaliza todos os nomes de tabelas para mai√∫scula"""
    
    app = create_app()
    
    with app.app_context():
        print("üîß === NORMALIZA√á√ÉO DE NOMES DE TABELAS ===")
        
        # 1. Buscar todos os v√≠nculos
        vinculos = CidadeAtendida.query.all()
        total_vinculos = len(vinculos)
        
        print(f"üìä Total de v√≠nculos encontrados: {total_vinculos}")
        
        if total_vinculos == 0:
            print("‚ö†Ô∏è Nenhum v√≠nculo encontrado.")
            return
        
        # 2. Analisar estado atual
        vinculos_minuscula = 0
        vinculos_maiuscula = 0
        
        for vinculo in vinculos:
            if vinculo.nome_tabela != vinculo.nome_tabela.upper():
                vinculos_minuscula += 1
            else:
                vinculos_maiuscula += 1
        
        print(f"üìà V√≠nculos em mai√∫scula: {vinculos_maiuscula}")
        print(f"üìâ V√≠nculos em min√∫scula/misto: {vinculos_minuscula}")
        
        if vinculos_minuscula == 0:
            print("‚úÖ Todos os v√≠nculos j√° est√£o em mai√∫scula!")
            return
        
        # 3. Confirmar execu√ß√£o
        print(f"\nüîÑ Ser√° feita a convers√£o de {vinculos_minuscula} v√≠nculos para MAI√öSCULA.")
        print("‚ö†Ô∏è Esta opera√ß√£o √© irrevers√≠vel!")
        
        confirmacao = input("Deseja continuar? (digite 'SIM' para confirmar): ").strip().upper()
        
        if confirmacao != 'SIM':
            print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
            return
        
        # 4. Executar normaliza√ß√£o
        print("\nüîß Iniciando normaliza√ß√£o...")
        
        contador_alterados = 0
        contador_erros = 0
        
        for vinculo in vinculos:
            try:
                nome_original = vinculo.nome_tabela
                nome_normalizado = nome_original.upper().strip()
                
                if nome_original != nome_normalizado:
                    vinculo.nome_tabela = nome_normalizado
                    contador_alterados += 1
                    
                    if contador_alterados % 100 == 0:
                        print(f"üíæ {contador_alterados} v√≠nculos processados...")
                        
            except Exception as e:
                print(f"‚ùå Erro no v√≠nculo ID {vinculo.id}: {e}")
                contador_erros += 1
        
        # 5. Salvar altera√ß√µes
        try:
            db.session.commit()
            print("‚úÖ Altera√ß√µes salvas no banco de dados!")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao salvar: {e}")
            return
        
        # 6. Relat√≥rio final
        print("\nüìä === RELAT√ìRIO FINAL ===")
        print(f"‚úÖ V√≠nculos alterados: {contador_alterados}")
        print(f"‚ö†Ô∏è Erros encontrados: {contador_erros}")
        print(f"üìà Total processado: {total_vinculos}")
        
        # 7. Verifica√ß√£o p√≥s-normaliza√ß√£o
        print("\nüîç Verificando impacto nas tabelas √≥rf√£s...")
        
        # Conta tabelas que agora T√äM v√≠nculos
        tabelas_com_vinculo = db.session.query(TabelaFrete.transportadora_id, TabelaFrete.nome_tabela).join(
            CidadeAtendida,
            db.and_(
                CidadeAtendida.transportadora_id == TabelaFrete.transportadora_id,
                CidadeAtendida.nome_tabela == TabelaFrete.nome_tabela
            )
        ).distinct().count()
        
        # Conta total de combina√ß√µes √∫nicas de tabelas
        total_combinacoes = db.session.query(TabelaFrete.transportadora_id, TabelaFrete.nome_tabela).distinct().count()
        
        tabelas_orfas = total_combinacoes - tabelas_com_vinculo
        
        print(f"üìä Combina√ß√µes de tabelas com v√≠nculos: {tabelas_com_vinculo}")
        print(f"üìä Combina√ß√µes de tabelas √≥rf√£s: {tabelas_orfas}")
        print(f"üìä Percentual com v√≠nculos: {(tabelas_com_vinculo/total_combinacoes*100):.1f}%")
        
        print("\nüéâ Normaliza√ß√£o conclu√≠da com sucesso!")

if __name__ == "__main__":
    print("üîß Normalizador de Nomes de Tabelas")
    print("Este script converter√° todos os nomes de tabelas nos v√≠nculos para MAI√öSCULA")
    print("-" * 70)
    
    normalizar_nomes_tabelas() 