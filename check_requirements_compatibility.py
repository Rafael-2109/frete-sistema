#!/usr/bin/env python3
"""
Script para verificar compatibilidade das bibliotecas no requirements.txt
e sugerir corre√ß√µes para Python 3.12+
"""

import sys
import re
from pathlib import Path

def check_requirements():
    """Verifica e sugere corre√ß√µes no requirements.txt"""
    
    print("=" * 60)
    print("VERIFICA√á√ÉO DE COMPATIBILIDADE - PYTHON 3.12+")
    print("=" * 60)
    
    # Bibliotecas com problemas conhecidos em Python 3.13
    problematic_libs = {
        'python-Levenshtein': {
            'issue': 'Incompat√≠vel com Python 3.13 (erro _PyLong_AsByteArray)',
            'solution': 'Use rapidfuzz==3.10.1 ou python-Levenshtein-wheels==0.13.2',
            'critical': True
        },
        'greenlet': {
            'issue': 'Vers√µes < 3.1 incompat√≠veis com Python 3.12+ (erro _PyCFrame)',
            'solution': 'Use greenlet>=3.1.1',
            'critical': True,
            'min_version': '3.1.1'
        },
        'gevent': {
            'issue': 'Precisa ser compat√≠vel com greenlet 3.1+',
            'solution': 'Use gevent>=24.11.1',
            'critical': False,
            'min_version': '24.11.1'
        },
        'PyPDF2': {
            'issue': 'Biblioteca descontinuada',
            'solution': 'Use pypdf ao inv√©s (sucessor oficial)',
            'critical': False
        },
        'cryptography': {
            'issue': 'Vers√µes antigas t√™m vulnerabilidades',
            'solution': 'Use cryptography>=43.0.0',
            'critical': False,
            'min_version': '43.0.0'
        }
    }
    
    # Ler requirements.txt
    req_file = Path('requirements.txt')
    if not req_file.exists():
        print("‚ùå Arquivo requirements.txt n√£o encontrado!")
        return
    
    lines = req_file.read_text().splitlines()
    
    issues_found = []
    warnings_found = []
    fixes_applied = []
    
    print("\nüìã Analisando requirements.txt...\n")
    
    for i, line in enumerate(lines):
        # Pular coment√°rios e linhas vazias
        if line.strip().startswith('#') or not line.strip():
            continue
        
        # Extrair nome do pacote e vers√£o
        match = re.match(r'^([a-zA-Z0-9\-_]+)(==|>=|<=|>|<)?(.+)?', line.strip())
        if not match:
            continue
        
        package = match.group(1)
        operator = match.group(2) or ''
        version = match.group(3) or ''
        
        # Remover coment√°rios inline
        if version and '#' in version:
            version = version.split('#')[0].strip()
        
        # Verificar problemas conhecidos
        if package in problematic_libs:
            lib_info = problematic_libs[package]
            
            if lib_info['critical']:
                # Verificar vers√£o m√≠nima se especificada
                if 'min_version' in lib_info:
                    if operator == '==' and version:
                        try:
                            current_ver = tuple(map(int, version.split('.')))
                            min_ver = tuple(map(int, lib_info['min_version'].split('.')))
                            
                            if current_ver < min_ver:
                                issues_found.append({
                                    'package': package,
                                    'line': i + 1,
                                    'current': f"{package}{operator}{version}",
                                    'issue': lib_info['issue'],
                                    'solution': lib_info['solution']
                                })
                            else:
                                fixes_applied.append(f"‚úÖ {package} j√° est√° na vers√£o correta ({version})")
                        except:
                            warnings_found.append(f"‚ö†Ô∏è  N√£o foi poss√≠vel verificar vers√£o de {package}")
                elif package == 'python-Levenshtein':
                    issues_found.append({
                        'package': package,
                        'line': i + 1,
                        'current': line.strip(),
                        'issue': lib_info['issue'],
                        'solution': lib_info['solution']
                    })
            else:
                warnings_found.append(f"‚ö†Ô∏è  {package}: {lib_info['issue']}")
    
    # Relat√≥rio
    if issues_found:
        print("‚ùå PROBLEMAS CR√çTICOS ENCONTRADOS:\n")
        for issue in issues_found:
            print(f"   Linha {issue['line']}: {issue['current']}")
            print(f"   Problema: {issue['issue']}")
            print(f"   Solu√ß√£o: {issue['solution']}\n")
    
    if warnings_found:
        print("\n‚ö†Ô∏è  AVISOS:\n")
        for warning in warnings_found:
            print(f"   {warning}")
    
    if fixes_applied:
        print("\n‚úÖ CORRE√á√ïES J√Å APLICADAS:\n")
        for fix in fixes_applied:
            print(f"   {fix}")
    
    # Verificar runtime.txt
    print("\n" + "=" * 60)
    print("VERIFICANDO CONFIGURA√á√ÉO DO PYTHON")
    print("=" * 60)
    
    runtime_file = Path('runtime.txt')
    if runtime_file.exists():
        runtime_version = runtime_file.read_text().strip()
        print(f"\n‚úÖ runtime.txt encontrado: {runtime_version}")
        
        if '3.13' in runtime_version:
            print("   ‚ö†Ô∏è  Python 3.13 pode ter incompatibilidades!")
            print("   üí° Recomendado: python-3.12.7")
        elif '3.12' in runtime_version:
            print("   ‚úÖ Python 3.12 √© compat√≠vel com todas as bibliotecas")
        else:
            print(f"   ‚ÑπÔ∏è  Vers√£o: {runtime_version}")
    else:
        print("\n‚ö†Ô∏è  Arquivo runtime.txt n√£o encontrado!")
        print("   üí° Crie um arquivo runtime.txt com: python-3.12.7")
    
    # Resumo final
    print("\n" + "=" * 60)
    print("RESUMO")
    print("=" * 60)
    
    if not issues_found:
        print("\n‚úÖ Nenhum problema cr√≠tico encontrado!")
        print("   Seu requirements.txt est√° compat√≠vel com Python 3.12+")
    else:
        print(f"\n‚ùå {len(issues_found)} problemas cr√≠ticos encontrados")
        print("   Execute as corre√ß√µes sugeridas acima")
    
    if not runtime_file.exists() or '3.13' in (runtime_file.read_text() if runtime_file.exists() else ''):
        print("\nüìù A√á√ÉO NECESS√ÅRIA:")
        print("   1. Crie/edite runtime.txt com: python-3.12.7")
        print("   2. Commit e push das mudan√ßas")
        print("   3. Deploy no Render")
    
    print("\n" + "=" * 60)
    print("‚ú® Verifica√ß√£o conclu√≠da!")
    print("=" * 60)

if __name__ == "__main__":
    check_requirements()