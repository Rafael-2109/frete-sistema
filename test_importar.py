#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script para testar o endpoint /separacao/importar
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app
from flask import url_for

def testar_importar():
    """Testa se o endpoint est√° registrado corretamente"""
    app = create_app()
    
    with app.app_context():
        print("\n" + "="*60)
        print("TESTE DO ENDPOINT /separacao/importar")
        print("="*60)
        
        # Verificar se a rota est√° registrada
        print("\nüîç Verificando rotas registradas...")
        
        with app.test_request_context():
            try:
                # Tentar gerar URL para a rota
                url = url_for('separacao.importar')
                print(f"‚úÖ Rota encontrada: {url}")
            except Exception as e:
                print(f"‚ùå Erro ao encontrar rota: {e}")
                
        # Listar todas as rotas de separa√ß√£o
        print("\nüìã Todas as rotas do blueprint 'separacao':")
        for rule in app.url_map.iter_rules():
            if 'separacao' in rule.endpoint:
                print(f"   {rule.methods} {rule.rule} -> {rule.endpoint}")
        
        # Testar com cliente de teste
        print("\nüß™ Testando requisi√ß√£o GET...")
        client = app.test_client()
        
        try:
            response = client.get('/separacao/importar')
            print(f"   Status Code: {response.status_code}")
            
            if response.status_code == 200:
                print("   ‚úÖ Endpoint acess√≠vel")
            elif response.status_code == 302:
                print(f"   ‚ö†Ô∏è Redirecionamento para: {response.location}")
            elif response.status_code == 401:
                print("   ‚ö†Ô∏è Requer autentica√ß√£o")
            elif response.status_code == 404:
                print("   ‚ùå Rota n√£o encontrada")
            else:
                print(f"   ‚ùì Status inesperado: {response.status_code}")
                
            # Verificar se h√° erros no response
            if response.data:
                data_str = response.data.decode('utf-8')
                if 'error' in data_str.lower() or 'exception' in data_str.lower():
                    print("\n‚ö†Ô∏è Poss√≠vel erro no HTML:")
                    # Procurar por mensagens de erro
                    import re
                    errors = re.findall(r'<pre.*?>(.*?)</pre>', data_str, re.DOTALL)
                    for error in errors[:2]:  # Mostrar at√© 2 erros
                        print(f"   {error[:200]}...")
                        
        except Exception as e:
            print(f"‚ùå Erro ao testar endpoint: {e}")
            import traceback
            traceback.print_exc()
        
        print("\n" + "="*60)
        print("TESTE CONCLU√çDO")
        print("="*60 + "\n")

if __name__ == "__main__":
    testar_importar()