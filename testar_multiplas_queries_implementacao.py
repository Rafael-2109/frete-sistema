#!/usr/bin/env python3
"""
Teste da Implementa√ß√£o de M√∫ltiplas Queries
==========================================

Testa se o sistema de m√∫ltiplas queries est√° funcionando corretamente
para resolver os 11 campos problem√°ticos do mapeamento Odoo.
"""

import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio do projeto ao Python path
sys.path.insert(0, str(Path(__file__).parent / "app"))

def testar_implementacao_multiplas_queries():
    """Testa a implementa√ß√£o completa do sistema de m√∫ltiplas queries"""
    
    print("üß™ TESTE DA IMPLEMENTA√á√ÉO DE M√öLTIPLAS QUERIES")
    print("=" * 60)
    
    try:
        # 1. Testar importa√ß√£o dos m√≥dulos
        print("üì¶ 1. Testando importa√ß√µes...")
        from app.odoo.utils.campo_mapper import CampoMapper
        from app.odoo.utils.connection import OdooConnection
        print("   ‚úÖ CampoMapper importado")
        print("   ‚úÖ OdooConnection importado")
        
        # 2. Testar instancia√ß√£o do CampoMapper
        print("\nüõ†Ô∏è 2. Testando CampoMapper...")
        mapper = CampoMapper()
        print(f"   ‚úÖ CampoMapper instanciado")
        
        # 3. Verificar carregamento do mapeamento do usu√°rio
        print(f"   üìã Mapeamento do usu√°rio: {len(mapper.mapeamento_usuario)} campos")
        if len(mapper.mapeamento_usuario) > 0:
            print("   ‚úÖ Mapeamento do usu√°rio carregado com sucesso")
        else:
            print("   ‚ùå Mapeamento do usu√°rio n√£o foi carregado")
            return False
        
        # 4. Verificar campos de m√∫ltiplas queries
        print(f"   üîó Campos m√∫ltiplas queries: {len(mapper.campos_multiplas_queries)} campos")
        if len(mapper.campos_multiplas_queries) == 11:
            print("   ‚úÖ Todos os 11 campos problem√°ticos mapeados")
        else:
            print(f"   ‚ö†Ô∏è Esperados 11 campos, encontrados {len(mapper.campos_multiplas_queries)}")
        
        # 5. Testar m√©todos do mapper
        print("\n‚öôÔ∏è 3. Testando m√©todos do CampoMapper...")
        
        # Teste obter_estatisticas_mapeamento
        stats = mapper.obter_estatisticas_mapeamento()
        print(f"   üìä Estat√≠sticas obtidas:")
        print(f"      Total de campos: {stats['total_campos']}")
        print(f"      Campos simples: {stats['campos_simples']} ({stats['percentual_simples']:.1f}%)")
        print(f"      Campos complexos: {stats['campos_complexos']} ({stats['percentual_complexos']:.1f}%)")
        
        # Teste eh_campo_multiplas_queries
        campo_teste = "order_id/partner_shipping_id/l10n_br_cnpj"
        if mapper.eh_campo_multiplas_queries(campo_teste):
            print(f"   ‚úÖ Campo {campo_teste} corretamente identificado como m√∫ltiplas queries")
        else:
            print(f"   ‚ùå Campo {campo_teste} n√£o identificado como m√∫ltiplas queries")
        
        # 6. Testar conex√£o OdooConnection
        print("\nüåê 4. Testando m√©todos OdooConnection...")
        from app.odoo.config.odoo_config import ODOO_CONFIG
        connection = OdooConnection(ODOO_CONFIG)
        
        # Verificar se m√©todo buscar_registro_por_id existe
        if hasattr(connection, 'buscar_registro_por_id'):
            print("   ‚úÖ M√©todo buscar_registro_por_id existe")
        else:
            print("   ‚ùå M√©todo buscar_registro_por_id n√£o encontrado")
            return False
        
        # 7. Testar CarteiraService
        print("\nüè™ 5. Testando CarteiraService...")
        try:
            from app.odoo.services.carteira_service import CarteiraService
            service = CarteiraService()
            print("   ‚úÖ CarteiraService instanciado")
            
            # Verificar se tem o m√©todo de m√∫ltiplas queries
            if hasattr(service, '_processar_dados_carteira_com_multiplas_queries'):
                print("   ‚úÖ M√©todo _processar_dados_carteira_com_multiplas_queries existe")
            else:
                print("   ‚ö†Ô∏è M√©todo _processar_dados_carteira_com_multiplas_queries n√£o encontrado")
                print("   ‚ÑπÔ∏è O service ainda usa o m√©todo antigo, mas isso pode ser adicionado")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao testar CarteiraService: {e}")
        
        # 8. Teste com dados simulados
        print("\nüé≠ 6. Testando com dados simulados...")
        
        # Simular dados do Odoo
        dados_simulados = [
            {
                'id': 1,
                'order_id': [100, 'Pedido 001'],
                'product_id': [200, 'Produto A'],
                'product_uom_qty': 10.0,
                'price_unit': 25.50
            }
        ]
        
        # Testar mapeamento simples (sem conex√£o real)
        dados_mapeados_simples = mapper.mapear_para_carteira(dados_simulados)
        print(f"   üìã Mapeamento simples: {len(dados_mapeados_simples)} registros processados")
        
        if dados_mapeados_simples:
            primeiro_item = dados_mapeados_simples[0]
            campos_com_valor = sum(1 for v in primeiro_item.values() if v is not None)
            print(f"   üìä Campos com valor no primeiro item: {campos_com_valor}/{len(primeiro_item)}")
            print("   ‚úÖ Mapeamento simples funcionando")
        
        # 9. Resumo final
        print("\nüìã RESUMO DO TESTE")
        print("=" * 40)
        print("‚úÖ Sistema base funcionando:")
        print("   - CampoMapper carregado")
        print("   - Mapeamento do usu√°rio funcionando")
        print("   - 11 campos problem√°ticos identificados")
        print("   - OdooConnection com buscar_registro_por_id")
        print("   - M√©todos de estat√≠sticas funcionando")
        print("   - Mapeamento simples testado")
        
        print("\nüéØ PR√ìXIMO PASSO:")
        print("Testar com conex√£o real ao Odoo para verificar se as")
        print("m√∫ltiplas queries resolvem os campos problem√°ticos")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    resultado = testar_implementacao_multiplas_queries()
    if resultado:
        print("\nüéâ IMPLEMENTA√á√ÉO B√ÅSICA FUNCIONANDO!")
    else:
        print("\nüí• PROBLEMAS NA IMPLEMENTA√á√ÉO ENCONTRADOS") 