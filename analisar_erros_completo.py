#!/usr/bin/env python3
"""
Script para an√°lise completa de erros no sistema Claude AI Novo
"""

import os
import ast
import sys
import re
from pathlib import Path
from typing import List, Dict, Tuple, Set
import subprocess
import json

class AnalisadorErros:
    def __init__(self):
        self.base_path = Path("app/claude_ai_novo")
        self.erros_encontrados = []
        self.avisos_encontrados = []
        self.arquivos_analisados = 0
        
    def analisar_sintaxe(self) -> List[Dict]:
        """Verifica erros de sintaxe em arquivos Python"""
        print("\nüîç 1. Analisando sintaxe Python...")
        erros_sintaxe = []
        
        for arquivo in self.base_path.rglob("*.py"):
            self.arquivos_analisados += 1
            try:
                with open(arquivo, 'r', encoding='utf-8') as f:
                    conteudo = f.read()
                    ast.parse(conteudo, filename=str(arquivo))
            except SyntaxError as e:
                erro = {
                    'arquivo': str(arquivo.relative_to(Path.cwd())),
                    'linha': e.lineno,
                    'tipo': 'SyntaxError',
                    'mensagem': str(e.msg)
                }
                erros_sintaxe.append(erro)
                self.erros_encontrados.append(erro)
            except Exception as e:
                erro = {
                    'arquivo': str(arquivo.relative_to(Path.cwd())),
                    'linha': 0,
                    'tipo': type(e).__name__,
                    'mensagem': str(e)
                }
                erros_sintaxe.append(erro)
                self.erros_encontrados.append(erro)
        
        print(f"   ‚úÖ {self.arquivos_analisados} arquivos analisados")
        print(f"   {'‚ùå' if erros_sintaxe else '‚úÖ'} {len(erros_sintaxe)} erros de sintaxe encontrados")
        return erros_sintaxe
    
    def analisar_imports(self) -> List[Dict]:
        """Verifica imports quebrados"""
        print("\nüîç 2. Analisando imports...")
        erros_import = []
        
        # Padr√µes de import para verificar
        import_patterns = [
            r'from\s+(\S+)\s+import',
            r'import\s+(\S+)'
        ]
        
        for arquivo in self.base_path.rglob("*.py"):
            try:
                with open(arquivo, 'r', encoding='utf-8') as f:
                    conteudo = f.read()
                    
                for pattern in import_patterns:
                    matches = re.findall(pattern, conteudo)
                    for modulo in matches:
                        # Pular imports relativos e built-ins conhecidos
                        if modulo.startswith('.') or modulo in sys.builtin_module_names:
                            continue
                            
                        # Tentar importar para verificar se existe
                        try:
                            __import__(modulo)
                        except ImportError:
                            # Verificar se √© um m√≥dulo do projeto
                            if not modulo.startswith('app.'):
                                aviso = {
                                    'arquivo': str(arquivo.relative_to(Path.cwd())),
                                    'tipo': 'ImportWarning',
                                    'modulo': modulo,
                                    'mensagem': f"M√≥dulo '{modulo}' pode n√£o estar instalado"
                                }
                                self.avisos_encontrados.append(aviso)
            except Exception as e:
                pass
        
        print(f"   ‚úÖ {len(self.avisos_encontrados)} avisos de import encontrados")
        return erros_import
    
    def analisar_operadores_none(self) -> List[Dict]:
        """Verifica opera√ß√µes com valores potencialmente None"""
        print("\nüîç 3. Analisando opera√ß√µes com None...")
        problemas_none = []
        
        # Padr√µes problem√°ticos
        padroes = [
            (r'(\w+)\s*\+=\s*[^=]', 'Operador += com poss√≠vel None'),
            (r'(\w+)\s*\|=\s*[^=]', 'Operador |= com poss√≠vel None'),
            (r'(\w+)\s*\*=\s*[^=]', 'Operador *= com poss√≠vel None'),
            (r'(\w+)\.split\(', 'M√©todo split em poss√≠vel None'),
            (r'(\w+)\.strip\(', 'M√©todo strip em poss√≠vel None'),
            (r'(\w+)\.lower\(', 'M√©todo lower em poss√≠vel None'),
            (r'(\w+)\.upper\(', 'M√©todo upper em poss√≠vel None'),
            (r'f["\'].*\{(\w+)\}', 'F-string com poss√≠vel None'),
        ]
        
        for arquivo in self.base_path.rglob("*.py"):
            try:
                with open(arquivo, 'r', encoding='utf-8') as f:
                    linhas = f.readlines()
                    
                for i, linha in enumerate(linhas, 1):
                    for padrao, descricao in padroes:
                        matches = re.findall(padrao, linha)
                        if matches:
                            # Verificar se h√° verifica√ß√£o de None nas linhas anteriores
                            contexto = ''.join(linhas[max(0, i-5):i])
                            variavel = matches[0] if isinstance(matches[0], str) else matches[0][0]
                            
                            # Se n√£o h√° verifica√ß√£o de None no contexto
                            if f'if {variavel}' not in contexto and f'{variavel} is not None' not in contexto:
                                problema = {
                                    'arquivo': str(arquivo.relative_to(Path.cwd())),
                                    'linha': i,
                                    'tipo': 'PossibleNoneOperation',
                                    'variavel': variavel,
                                    'descricao': descricao,
                                    'codigo': linha.strip()
                                }
                                problemas_none.append(problema)
                                self.avisos_encontrados.append(problema)
            except Exception as e:
                pass
        
        print(f"   ‚úÖ {len(problemas_none)} poss√≠veis opera√ß√µes com None encontradas")
        return problemas_none
    
    def analisar_excecoes_nao_tratadas(self) -> List[Dict]:
        """Verifica exce√ß√µes que podem n√£o estar sendo tratadas"""
        print("\nüîç 4. Analisando exce√ß√µes n√£o tratadas...")
        excecoes_problematicas = []
        
        # Padr√µes de opera√ß√µes perigosas
        padroes_perigosos = [
            (r'(\w+)\[[\'"]\w+[\'"]?\]', 'Acesso a dicion√°rio sem .get()'),
            (r'int\(', 'Convers√£o int sem try/except'),
            (r'float\(', 'Convers√£o float sem try/except'),
            (r'json\.loads\(', 'JSON parse sem try/except'),
            (r'open\(', 'Abertura de arquivo sem with statement'),
        ]
        
        for arquivo in self.base_path.rglob("*.py"):
            try:
                with open(arquivo, 'r', encoding='utf-8') as f:
                    conteudo = f.read()
                    linhas = conteudo.split('\n')
                    
                # Verificar se est√° dentro de try/except
                arvore = ast.parse(conteudo)
                
                for node in ast.walk(arvore):
                    if isinstance(node, ast.Subscript) and isinstance(node.slice, ast.Constant):
                        # Verificar se est√° em um try/except
                        linha = node.lineno
                        if linha <= len(linhas):
                            codigo = linhas[linha - 1].strip()
                            if not any(palavra in codigo for palavra in ['.get(', 'try:', 'except']):
                                aviso = {
                                    'arquivo': str(arquivo.relative_to(Path.cwd())),
                                    'linha': linha,
                                    'tipo': 'UnsafeAccess',
                                    'descricao': 'Acesso a dicion√°rio sem .get()',
                                    'codigo': codigo[:80] + '...' if len(codigo) > 80 else codigo
                                }
                                self.avisos_encontrados.append(aviso)
            except Exception as e:
                pass
        
        return excecoes_problematicas
    
    def verificar_pylance_mypy(self) -> List[Dict]:
        """Executa verifica√ß√µes com ferramentas de an√°lise est√°tica"""
        print("\nüîç 5. Executando an√°lise est√°tica...")
        problemas_tipo = []
        
        # Lista de arquivos cr√≠ticos para verificar
        arquivos_criticos = [
            "scanning/database/database_connection.py",
            "loaders/domain/entregas_loader.py", 
            "loaders/loader_manager.py",
            "orchestrators/main_orchestrator.py",
            "orchestrators/session_orchestrator.py"
        ]
        
        for arquivo in arquivos_criticos:
            caminho_completo = self.base_path / arquivo
            if caminho_completo.exists():
                try:
                    # Tentar compilar o arquivo
                    resultado = subprocess.run(
                        [sys.executable, "-m", "py_compile", str(caminho_completo)],
                        capture_output=True,
                        text=True
                    )
                    
                    if resultado.returncode != 0:
                        erro = {
                            'arquivo': arquivo,
                            'tipo': 'CompilationError',
                            'mensagem': resultado.stderr
                        }
                        self.erros_encontrados.append(erro)
                        problemas_tipo.append(erro)
                except Exception as e:
                    pass
        
        print(f"   ‚úÖ {len(arquivos_criticos)} arquivos cr√≠ticos verificados")
        return problemas_tipo
    
    def gerar_relatorio(self):
        """Gera relat√≥rio final da an√°lise"""
        print("\n" + "="*80)
        print("üìä RELAT√ìRIO FINAL DE AN√ÅLISE")
        print("="*80)
        
        print(f"\nüìà Estat√≠sticas:")
        print(f"   - Arquivos analisados: {self.arquivos_analisados}")
        print(f"   - Erros encontrados: {len(self.erros_encontrados)}")
        print(f"   - Avisos encontrados: {len(self.avisos_encontrados)}")
        
        if self.erros_encontrados:
            print(f"\n‚ùå ERROS CR√çTICOS ({len(self.erros_encontrados)}):")
            for erro in self.erros_encontrados[:5]:  # Mostrar apenas os 5 primeiros
                print(f"\n   üìç {erro.get('arquivo', 'N/A')}")
                print(f"      Linha: {erro.get('linha', 'N/A')}")
                print(f"      Tipo: {erro.get('tipo', 'N/A')}")
                print(f"      Mensagem: {erro.get('mensagem', 'N/A')}")
            
            if len(self.erros_encontrados) > 5:
                print(f"\n   ... e mais {len(self.erros_encontrados) - 5} erros")
        
        if self.avisos_encontrados:
            print(f"\n‚ö†Ô∏è AVISOS ({len(self.avisos_encontrados)}):")
            
            # Agrupar avisos por tipo
            avisos_por_tipo = {}
            for aviso in self.avisos_encontrados:
                tipo = aviso.get('tipo', 'Outros')
                if tipo not in avisos_por_tipo:
                    avisos_por_tipo[tipo] = []
                avisos_por_tipo[tipo].append(aviso)
            
            for tipo, avisos in list(avisos_por_tipo.items())[:3]:
                print(f"\n   üìå {tipo} ({len(avisos)} ocorr√™ncias)")
                for aviso in avisos[:2]:
                    print(f"      - {aviso.get('arquivo', 'N/A')}:{aviso.get('linha', 'N/A')}")
                    if 'descricao' in aviso:
                        print(f"        {aviso['descricao']}")
        
        # Salvar relat√≥rio em JSON
        relatorio = {
            'estatisticas': {
                'arquivos_analisados': self.arquivos_analisados,
                'total_erros': len(self.erros_encontrados),
                'total_avisos': len(self.avisos_encontrados)
            },
            'erros': self.erros_encontrados,
            'avisos': self.avisos_encontrados
        }
        
        with open('relatorio_analise_erros.json', 'w', encoding='utf-8') as f:
            json.dump(relatorio, f, indent=2, ensure_ascii=False)
        
        print("\n‚úÖ Relat√≥rio salvo em: relatorio_analise_erros.json")
        
        # Conclus√£o
        print("\n" + "="*80)
        if not self.erros_encontrados:
            print("‚úÖ SISTEMA SEM ERROS CR√çTICOS!")
            print("   O sistema est√° pronto para deploy.")
        else:
            print("‚ùå ERROS ENCONTRADOS!")
            print("   Corrija os erros listados antes do deploy.")
        print("="*80)

def main():
    print("üöÄ Iniciando an√°lise completa de erros no Claude AI Novo...")
    print("   Isso pode levar alguns segundos...\n")
    
    analisador = AnalisadorErros()
    
    # Executar an√°lises
    analisador.analisar_sintaxe()
    analisador.analisar_imports()
    analisador.analisar_operadores_none()
    analisador.analisar_excecoes_nao_tratadas()
    analisador.verificar_pylance_mypy()
    
    # Gerar relat√≥rio
    analisador.gerar_relatorio()

if __name__ == "__main__":
    main() 