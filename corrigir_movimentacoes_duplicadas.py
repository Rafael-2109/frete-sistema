#!/usr/bin/env python3
"""
Script para corrigir movimenta√ß√µes duplicadas
Reconstr√≥i MovimentacaoPrevista considerando apenas:
- PreSeparacaoItem com recomposto=False OU
- Separacao (quando n√£o h√° PreSeparacaoItem correspondente)

Uso:
    python corrigir_movimentacoes_duplicadas.py [--produto CODIGO] [--dry-run]
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.estoque.models import UnificacaoCodigos
from app.estoque.models_tempo_real import MovimentacaoPrevista
from app.carteira.models import PreSeparacaoItem
from app.separacao.models import Separacao
from app.pedidos.models import Pedido
from decimal import Decimal
from datetime import date, datetime
from collections import defaultdict
import argparse
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def reconstruir_movimentacoes_produto(cod_produto, dry_run=False):
    """
    Reconstr√≥i MovimentacaoPrevista para um produto espec√≠fico
    """
    logger.info(f"\n{'='*60}")
    logger.info(f"Processando produto {cod_produto}")
    logger.info(f"{'='*60}")
    
    # Obter c√≥digos unificados
    codigos_unificados = UnificacaoCodigos.get_todos_codigos_relacionados(cod_produto)
    logger.info(f"C√≥digos relacionados: {codigos_unificados}")
    
    # Estrutura para acumular movimenta√ß√µes por data
    movimentacoes_por_data = defaultdict(lambda: {'entrada': Decimal('0'), 'saida': Decimal('0')})
    
    # 1. PROCESSAR PR√â-SEPARA√á√ïES (n√£o recompostas)
    logger.info("\n1. Processando Pr√©-Separa√ß√µes (n√£o recompostas)...")
    pre_sep_count = 0
    
    for codigo in codigos_unificados:
        pre_seps = PreSeparacaoItem.query.filter(
            PreSeparacaoItem.cod_produto == codigo,
            PreSeparacaoItem.recomposto == False  # Apenas n√£o recompostas
        ).all()
        
        for pre_sep in pre_seps:
            if pre_sep.data_expedicao_editada and pre_sep.qtd_selecionada_usuario:
                qtd = Decimal(str(pre_sep.qtd_selecionada_usuario))
                movimentacoes_por_data[pre_sep.data_expedicao_editada]['saida'] += qtd
                pre_sep_count += 1
                logger.debug(f"  PreSep {pre_sep.separacao_lote_id}: {qtd} em {pre_sep.data_expedicao_editada}")
    
    logger.info(f"  Total pr√©-separa√ß√µes processadas: {pre_sep_count}")
    
    # 2. PROCESSAR SEPARA√á√ïES (apenas se n√£o houver PreSepara√ß√£o correspondente)
    logger.info("\n2. Processando Separa√ß√µes diretas...")
    
    # Buscar pedidos com status ABERTO ou COTADO
    pedidos_abertos = Pedido.query.filter(
        Pedido.status.in_(['ABERTO', 'COTADO'])
    ).all()
    
    lotes_com_pre_sep = set()
    sep_count = 0
    sep_ignoradas = 0
    
    # Identificar lotes que t√™m pr√©-separa√ß√£o
    for codigo in codigos_unificados:
        pre_seps = PreSeparacaoItem.query.filter(
            PreSeparacaoItem.cod_produto == codigo
        ).all()
        for ps in pre_seps:
            if ps.separacao_lote_id:
                lotes_com_pre_sep.add(ps.separacao_lote_id)
    
    logger.info(f"  Lotes com pr√©-separa√ß√£o: {len(lotes_com_pre_sep)}")
    
    # Processar separa√ß√µes
    for pedido in pedidos_abertos:
        if not pedido.separacao_lote_id:
            continue
            
        for codigo in codigos_unificados:
            seps = Separacao.query.filter(
                Separacao.cod_produto == codigo,
                Separacao.separacao_lote_id == pedido.separacao_lote_id
            ).all()
            
            for sep in seps:
                # Ignorar se este lote tem pr√©-separa√ß√£o
                if sep.separacao_lote_id in lotes_com_pre_sep:
                    sep_ignoradas += 1
                    logger.debug(f"  Ignorando Sep {sep.separacao_lote_id} (tem pr√©-sep)")
                    continue
                
                if sep.expedicao and sep.qtd_saldo:
                    qtd = Decimal(str(sep.qtd_saldo))
                    movimentacoes_por_data[sep.expedicao]['saida'] += qtd
                    sep_count += 1
                    logger.debug(f"  Sep {sep.separacao_lote_id}: {qtd} em {sep.expedicao}")
    
    logger.info(f"  Total separa√ß√µes processadas: {sep_count}")
    logger.info(f"  Total separa√ß√µes ignoradas (t√™m pr√©-sep): {sep_ignoradas}")
    
    # 3. LIMPAR MOVIMENTA√á√ïES ANTIGAS
    if not dry_run:
        logger.info("\n3. Limpando movimenta√ß√µes antigas...")
        for codigo in codigos_unificados:
            deleted = MovimentacaoPrevista.query.filter_by(
                cod_produto=codigo
            ).delete()
            logger.info(f"  Removidas {deleted} movimenta√ß√µes do c√≥digo {codigo}")
    else:
        logger.info("\n3. [DRY-RUN] Movimenta√ß√µes antigas seriam limpas")
    
    # 4. CRIAR NOVAS MOVIMENTA√á√ïES
    logger.info("\n4. Criando novas movimenta√ß√µes...")
    novas_movimentacoes = 0
    
    for data_mov, valores in movimentacoes_por_data.items():
        if valores['saida'] > 0 or valores['entrada'] > 0:
            logger.info(f"  {data_mov}: Entrada={valores['entrada']}, Sa√≠da={valores['saida']}")
            
            if not dry_run:
                # Criar para cada c√≥digo unificado
                for codigo in codigos_unificados:
                    mov = MovimentacaoPrevista(
                        cod_produto=codigo,
                        data_prevista=data_mov,
                        entrada_prevista=valores['entrada'],
                        saida_prevista=valores['saida']
                    )
                    db.session.add(mov)
                    novas_movimentacoes += 1
    
    if not dry_run:
        db.session.commit()
        logger.info(f"\n‚úÖ {novas_movimentacoes} movimenta√ß√µes criadas")
    else:
        logger.info(f"\n[DRY-RUN] {novas_movimentacoes} movimenta√ß√µes seriam criadas")
    
    return {
        'pre_separacoes': pre_sep_count,
        'separacoes': sep_count,
        'separacoes_ignoradas': sep_ignoradas,
        'movimentacoes_criadas': novas_movimentacoes
    }


def main():
    parser = argparse.ArgumentParser(
        description='Corrige movimenta√ß√µes duplicadas no estoque'
    )
    parser.add_argument(
        '--produto',
        help='C√≥digo do produto espec√≠fico (se n√£o informado, processa todos)'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Simula a corre√ß√£o sem fazer altera√ß√µes'
    )
    
    args = parser.parse_args()
    
    app = create_app()
    
    with app.app_context():
        try:
            if args.dry_run:
                logger.info("üîç MODO DRY-RUN - Nenhuma altera√ß√£o ser√° feita")
            
            if args.produto:
                # Processar produto espec√≠fico
                resultado = reconstruir_movimentacoes_produto(
                    args.produto, 
                    dry_run=args.dry_run
                )
                
                logger.info("\n" + "="*60)
                logger.info("RESUMO DA CORRE√á√ÉO:")
                logger.info("="*60)
                for chave, valor in resultado.items():
                    logger.info(f"{chave}: {valor}")
                
            else:
                # Processar todos os produtos com movimenta√ß√£o
                logger.info("Buscando produtos com movimenta√ß√µes...")
                
                # Buscar produtos √∫nicos de PreSeparacao e Separacao
                produtos = set()
                
                # De pr√©-separa√ß√µes
                pre_seps = db.session.query(
                    PreSeparacaoItem.cod_produto
                ).filter(
                    PreSeparacaoItem.recomposto == False
                ).distinct().all()
                
                for (cod,) in pre_seps:
                    produtos.add(cod)
                
                # De separa√ß√µes ativas
                pedidos = Pedido.query.filter(
                    Pedido.status.in_(['ABERTO', 'COTADO'])
                ).all()
                
                lotes_ativos = [p.separacao_lote_id for p in pedidos if p.separacao_lote_id]
                
                if lotes_ativos:
                    seps = db.session.query(
                        Separacao.cod_produto
                    ).filter(
                        Separacao.separacao_lote_id.in_(lotes_ativos)
                    ).distinct().all()
                    
                    for (cod,) in seps:
                        produtos.add(cod)
                
                logger.info(f"Total de produtos para processar: {len(produtos)}")
                
                # Processar cada produto
                totais = defaultdict(int)
                
                for i, cod_produto in enumerate(produtos, 1):
                    logger.info(f"\n[{i}/{len(produtos)}] Processando {cod_produto}...")
                    resultado = reconstruir_movimentacoes_produto(
                        cod_produto,
                        dry_run=args.dry_run
                    )
                    
                    for chave, valor in resultado.items():
                        totais[chave] += valor
                
                # Resumo geral
                logger.info("\n" + "="*60)
                logger.info("RESUMO GERAL DA CORRE√á√ÉO:")
                logger.info("="*60)
                logger.info(f"Produtos processados: {len(produtos)}")
                for chave, valor in totais.items():
                    logger.info(f"Total {chave}: {valor}")
            
            if args.dry_run:
                logger.info("\n‚ö†Ô∏è MODO DRY-RUN - Nenhuma altera√ß√£o foi feita")
                logger.info("Execute sem --dry-run para aplicar as corre√ß√µes")
            else:
                logger.info("\n‚úÖ Corre√ß√µes aplicadas com sucesso!")
            
            return 0
            
        except Exception as e:
            logger.error(f"Erro durante corre√ß√£o: {e}")
            import traceback
            traceback.print_exc()
            return 1


if __name__ == "__main__":
    sys.exit(main())