"""fix_dependent_objects_cascade

Revision ID: 2b5f3637c189
Revises: safe_permission_update
Create Date: 2025-07-26 22:56:25.407183

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2b5f3637c189'
down_revision = 'safe_permission_update'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ai_advanced_sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_ai_sessions_confidence'))
        batch_op.drop_index(batch_op.f('idx_ai_sessions_domain'))
        batch_op.drop_index(batch_op.f('idx_ai_sessions_metadata'), postgresql_using='gin')
        batch_op.drop_index(batch_op.f('idx_ai_sessions_metadata_gin'), postgresql_using='gin')
        batch_op.drop_index(batch_op.f('idx_ai_sessions_user'))
        batch_op.drop_index(batch_op.f('idx_ai_sessions_user_date'))

    op.drop_table('ai_advanced_sessions')
    with op.batch_alter_table('historico_faturamento', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_historico_data_cancelado'))
        batch_op.drop_index(batch_op.f('idx_historico_nf_pedido'))
        batch_op.drop_index(batch_op.f('ix_historico_faturamento_cancelado'))
        batch_op.drop_index(batch_op.f('ix_historico_faturamento_cod_produto'))
        batch_op.drop_index(batch_op.f('ix_historico_faturamento_num_pedido'))
        batch_op.drop_index(batch_op.f('ix_historico_faturamento_numero_nf'))

    op.drop_table('historico_faturamento')
    with op.batch_alter_table('ai_learning_patterns', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_patterns_frequency'))
        batch_op.drop_index(batch_op.f('idx_patterns_type'))
        batch_op.drop_index(batch_op.f('idx_patterns_type_confidence'))

    op.drop_table('ai_learning_patterns')
    with op.batch_alter_table('ai_feedback_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_feedback_processed'))
        batch_op.drop_index(batch_op.f('idx_feedback_type_severity'))
        batch_op.drop_index(batch_op.f('idx_feedback_user'))
        batch_op.drop_index(batch_op.f('idx_feedback_user_date'))

    op.drop_table('ai_feedback_history')
    with op.batch_alter_table('pre_separacao_itens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_pre_separacao_itens_carteira_principal_id'))
        batch_op.drop_index(batch_op.f('ix_pre_separacao_itens_cod_produto'))
        batch_op.drop_index(batch_op.f('ix_pre_separacao_itens_status'))
        batch_op.drop_index(batch_op.f('ix_pre_separacao_itens_tipo_envio'))

    op.drop_table('pre_separacao_itens')
    with op.batch_alter_table('snapshot_carteira', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_snapshot_carteira_cnpj_cliente'))
        batch_op.drop_index(batch_op.f('ix_snapshot_carteira_cod_produto'))
        batch_op.drop_index(batch_op.f('ix_snapshot_carteira_data_importacao'))
        batch_op.drop_index(batch_op.f('ix_snapshot_carteira_num_pedido'))
        batch_op.drop_index(batch_op.f('ix_snapshot_carteira_versao_carteira'))

    op.drop_table('snapshot_carteira')
    with op.batch_alter_table('ai_business_contexts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_contexts_ativo'))

    op.drop_table('ai_business_contexts')
    with op.batch_alter_table('log_atualizacao_carteira', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_log_atualizacao_carteira_cod_produto'))
        batch_op.drop_index(batch_op.f('ix_log_atualizacao_carteira_num_pedido'))
        batch_op.drop_index(batch_op.f('ix_log_atualizacao_carteira_tipo_operacao'))

    op.drop_table('log_atualizacao_carteira')
    with op.batch_alter_table('ai_semantic_embeddings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_embeddings_hash'))
        batch_op.drop_index(batch_op.f('idx_embeddings_type'))

    op.drop_table('ai_semantic_embeddings')
    with op.batch_alter_table('ai_response_templates', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_templates_tipo'))

    op.drop_table('ai_response_templates')
    with op.batch_alter_table('validacao_nf_simples', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_validacao_nf_simples_cnpj_nf'))
        batch_op.drop_index(batch_op.f('ix_validacao_nf_simples_num_pedido_nf'))
        batch_op.drop_index(batch_op.f('ix_validacao_nf_simples_numero_nf'))
        batch_op.drop_index(batch_op.f('ix_validacao_nf_simples_validacao_aprovada'))

    op.drop_table('validacao_nf_simples')
    with op.batch_alter_table('sub_module', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_submodule_ativo'))

    op.drop_table('sub_module')
    with op.batch_alter_table('aprovacao_mudanca_carteira', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_aprovacao_impacto_status'))
        batch_op.drop_index(batch_op.f('idx_aprovacao_pedido_produto'))
        batch_op.drop_index(batch_op.f('idx_aprovacao_prazo_status'))
        batch_op.drop_index(batch_op.f('idx_aprovacao_responsavel_status'))
        batch_op.drop_index(batch_op.f('ix_aprovacao_mudanca_carteira_cod_produto'))
        batch_op.drop_index(batch_op.f('ix_aprovacao_mudanca_carteira_cotacao_id'))
        batch_op.drop_index(batch_op.f('ix_aprovacao_mudanca_carteira_evento_carteira_id'))
        batch_op.drop_index(batch_op.f('ix_aprovacao_mudanca_carteira_num_pedido'))
        batch_op.drop_index(batch_op.f('ix_aprovacao_mudanca_carteira_responsavel_cotacao'))
        batch_op.drop_index(batch_op.f('ix_aprovacao_mudanca_carteira_status_aprovacao'))

    op.drop_table('aprovacao_mudanca_carteira')
    with op.batch_alter_table('ai_semantic_mappings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_semantic_termo'))

    op.drop_table('ai_semantic_mappings')
    with op.batch_alter_table('vinculacao_carteira_separacao', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_vinculacao_carteira_separacao'))
        batch_op.drop_index(batch_op.f('idx_vinculacao_protocolo_data'))
        batch_op.drop_index(batch_op.f('idx_vinculacao_status_divergencia'))
        batch_op.drop_index(batch_op.f('ix_vinculacao_carteira_separacao_carteira_item_id'))
        batch_op.drop_index(batch_op.f('ix_vinculacao_carteira_separacao_cod_produto'))
        batch_op.drop_index(batch_op.f('ix_vinculacao_carteira_separacao_data_agendamento'))
        batch_op.drop_index(batch_op.f('ix_vinculacao_carteira_separacao_data_expedicao'))
        batch_op.drop_index(batch_op.f('ix_vinculacao_carteira_separacao_divergencia_detectada'))
        batch_op.drop_index(batch_op.f('ix_vinculacao_carteira_separacao_num_pedido'))
        batch_op.drop_index(batch_op.f('ix_vinculacao_carteira_separacao_protocolo_agendamento'))
        batch_op.drop_index(batch_op.f('ix_vinculacao_carteira_separacao_separacao_lote_id'))
        batch_op.drop_index(batch_op.f('ix_vinculacao_carteira_separacao_status_vinculacao'))

    op.drop_table('vinculacao_carteira_separacao')
    with op.batch_alter_table('controle_alteracao_carga', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_controle_alteracao_carga_acao_executada'))
        batch_op.drop_index(batch_op.f('ix_controle_alteracao_carga_carteira_item_id'))
        batch_op.drop_index(batch_op.f('ix_controle_alteracao_carga_cod_produto'))
        batch_op.drop_index(batch_op.f('ix_controle_alteracao_carga_decisao_sistema'))
        batch_op.drop_index(batch_op.f('ix_controle_alteracao_carga_num_pedido'))
        batch_op.drop_index(batch_op.f('ix_controle_alteracao_carga_separacao_lote_id'))

    op.drop_table('controle_alteracao_carga')
    with op.batch_alter_table('ai_learning_metrics', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_metrics_tipo'))

    op.drop_table('ai_learning_metrics')
    with op.batch_alter_table('ai_grupos_empresariais', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_grupos_nome'))

    op.drop_table('ai_grupos_empresariais')
    with op.batch_alter_table('evento_carteira', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_evento_cotacao_afetada'))
        batch_op.drop_index(batch_op.f('idx_evento_pedido_produto'))
        batch_op.drop_index(batch_op.f('idx_evento_separacao_notificada'))
        batch_op.drop_index(batch_op.f('idx_evento_tipo_status'))
        batch_op.drop_index(batch_op.f('ix_evento_carteira_afeta_separacao'))
        batch_op.drop_index(batch_op.f('ix_evento_carteira_carteira_item_id'))
        batch_op.drop_index(batch_op.f('ix_evento_carteira_cod_produto'))
        batch_op.drop_index(batch_op.f('ix_evento_carteira_cotacao_afetada'))
        batch_op.drop_index(batch_op.f('ix_evento_carteira_num_pedido'))
        batch_op.drop_index(batch_op.f('ix_evento_carteira_separacao_notificada'))
        batch_op.drop_index(batch_op.f('ix_evento_carteira_status_processamento'))
        batch_op.drop_index(batch_op.f('ix_evento_carteira_tipo_evento'))

    op.drop_table('evento_carteira')
    op.drop_table('ai_system_config')
    with op.batch_alter_table('controle_descasamento_nf', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_descasamento_acao'))
        batch_op.drop_index(batch_op.f('idx_descasamento_detectado_impacto'))
        batch_op.drop_index(batch_op.f('idx_descasamento_nf_pedido'))
        batch_op.drop_index(batch_op.f('idx_descasamento_separacao'))
        batch_op.drop_index(batch_op.f('ix_controle_descasamento_nf_cod_produto'))
        batch_op.drop_index(batch_op.f('ix_controle_descasamento_nf_descasamento_detectado'))
        batch_op.drop_index(batch_op.f('ix_controle_descasamento_nf_num_pedido'))
        batch_op.drop_index(batch_op.f('ix_controle_descasamento_nf_numero_nf'))
        batch_op.drop_index(batch_op.f('ix_controle_descasamento_nf_separacao_lote_id'))

    op.drop_table('controle_descasamento_nf')
    with op.batch_alter_table('ai_performance_metrics', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_metrics_date_type'))

    op.drop_table('ai_performance_metrics')
    with op.batch_alter_table('ai_knowledge_patterns', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_patterns_confidence'))

    op.drop_table('ai_knowledge_patterns')
    with op.batch_alter_table('ai_learning_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_learning_created'))

    op.drop_table('ai_learning_history')
    with op.batch_alter_table('tipo_envio', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tipo_envio_separacao_lote_id'))
        batch_op.drop_index(batch_op.f('ix_tipo_envio_tipo_envio'))

    op.drop_table('tipo_envio')
    with op.batch_alter_table('batch_permission_operation', schema=None) as batch_op:
        batch_op.add_column(sa.Column('operation_type', sa.String(length=20), nullable=False))
        batch_op.add_column(sa.Column('description', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('executed_by', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('completed_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('affected_users', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('affected_permissions', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('details', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('error_details', sa.Text(), nullable=True))
        batch_op.drop_constraint(batch_op.f('batch_permission_operation_executado_por_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'usuarios', ['executed_by'], ['id'])
        batch_op.drop_column('executado_por')
        batch_op.drop_column('detalhes_json')
        batch_op.drop_column('tipo_operacao')
        batch_op.drop_column('erro_detalhes')
        batch_op.drop_column('permissoes_alteradas')
        batch_op.drop_column('descricao')
        batch_op.drop_column('executado_em')
        batch_op.drop_column('usuarios_afetados')

    with op.batch_alter_table('carteira_principal', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_carteira_principal_separacao_lote_id'), ['separacao_lote_id'], unique=False)

    with op.batch_alter_table('controle_cruzado_separacao', schema=None) as batch_op:
        batch_op.alter_column('separacao_lote_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.create_index(batch_op.f('ix_controle_cruzado_separacao_separacao_lote_id'), ['separacao_lote_id'], unique=False)

    with op.batch_alter_table('controle_portaria', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'usuarios', ['registrado_por_id'], ['id'])
        batch_op.create_foreign_key(None, 'usuarios', ['atualizado_por_id'], ['id'])

    with op.batch_alter_table('cotacoes', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'usuarios', ['usuario_id'], ['id'])

    with op.batch_alter_table('equipe_vendas', schema=None) as batch_op:
        batch_op.add_column(sa.Column('gerente_id', sa.Integer(), nullable=True))
        batch_op.alter_column('codigo',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('descricao',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('ativo',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('criado_em',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.create_foreign_key(None, 'usuarios', ['gerente_id'], ['id'])
        batch_op.drop_column('gerente')

    with op.batch_alter_table('funcao_modulo', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('funcao_modulo_submodulo_id_fkey'), type_='foreignkey')
        batch_op.drop_column('submodulo_id')

    with op.batch_alter_table('modulo_sistema', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('modulo_sistema_category_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('modulo_sistema_parent_id_fkey'), type_='foreignkey')
        batch_op.drop_column('category_id')
        batch_op.drop_column('nivel_hierarquico')
        batch_op.drop_column('parent_id')

    with op.batch_alter_table('permission_category', schema=None) as batch_op:
        batch_op.add_column(sa.Column('criado_por', sa.Integer(), nullable=True))
        batch_op.alter_column('ordem',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
        batch_op.create_foreign_key(None, 'usuarios', ['criado_por'], ['id'])

    with op.batch_alter_table('permission_module', schema=None) as batch_op:
        batch_op.add_column(sa.Column('category_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('color', sa.String(length=7), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('order_index',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
        batch_op.drop_constraint(batch_op.f('permission_module_name_key'), type_='unique')
        batch_op.create_index('idx_module_category', ['category_id', 'active'], unique=False)
        batch_op.create_unique_constraint('uq_module_category_name', ['category_id', 'name'])
        batch_op.create_foreign_key(None, 'permission_category', ['category_id'], ['id'])
        batch_op.create_foreign_key(None, 'usuarios', ['created_by'], ['id'])

    with op.batch_alter_table('permission_submodule', schema=None) as batch_op:
        batch_op.add_column(sa.Column('route_pattern', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('critical_level', sa.String(length=10), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('order_index',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
        batch_op.drop_constraint(batch_op.f('uq_permission_submodule'), type_='unique')
        batch_op.create_index('idx_submodule_module', ['module_id', 'active'], unique=False)
        batch_op.create_unique_constraint('uq_submodule_module_name', ['module_id', 'name'])
        batch_op.create_foreign_key(None, 'usuarios', ['created_by'], ['id'])
        batch_op.drop_column('icon')

    with op.batch_alter_table('permission_template', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('code', sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column('description', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('category', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('template_data', sa.Text(), nullable=False))
        batch_op.add_column(sa.Column('is_system', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('active', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        batch_op.drop_constraint(batch_op.f('permission_template_nome_key'), type_='unique')
        batch_op.create_unique_constraint(None, ['code'])
        batch_op.drop_constraint(batch_op.f('permission_template_criado_por_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('permission_template_perfil_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'usuarios', ['created_by'], ['id'])
        batch_op.drop_column('nome')
        batch_op.drop_column('permissions_json')
        batch_op.drop_column('criado_em')
        batch_op.drop_column('criado_por')
        batch_op.drop_column('atualizado_em')
        batch_op.drop_column('perfil_id')
        batch_op.drop_column('descricao')
        batch_op.drop_column('ativo')

    with op.batch_alter_table('pre_separacao_item', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_pre_sep_exp_date'))
        batch_op.drop_index(batch_op.f('idx_pre_sep_recomp'))
        batch_op.drop_constraint(batch_op.f('uq_pre_sep_context'), type_='unique')
        batch_op.create_index('idx_pre_sep_data_expedicao', ['cod_produto', 'data_expedicao_editada', 'status'], unique=False)
        batch_op.create_index('idx_pre_sep_recomposicao', ['recomposto', 'hash_item_original'], unique=False)
        batch_op.create_index(batch_op.f('ix_pre_separacao_item_separacao_lote_id'), ['separacao_lote_id'], unique=False)
        batch_op.create_unique_constraint('uq_pre_separacao_contexto_unico', ['num_pedido', 'cod_produto', 'data_expedicao_editada', 'data_agendamento_editada', 'protocolo_editado'])

    with op.batch_alter_table('separacao', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_separacao_tipo_envio'))

    with op.batch_alter_table('usuario_equipe_vendas', schema=None) as batch_op:
        batch_op.add_column(sa.Column('equipe_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('cargo_equipe', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('tipo_acesso', sa.String(length=20), nullable=True))
        batch_op.drop_index(batch_op.f('idx_equipe_lookup'))
        batch_op.create_index('idx_equipe_lookup', ['equipe_id', 'ativo'], unique=False)
        batch_op.drop_constraint(batch_op.f('uq_usuario_equipe'), type_='unique')
        batch_op.create_unique_constraint('uq_usuario_equipe', ['usuario_id', 'equipe_id'])
        batch_op.create_foreign_key(None, 'equipe_vendas', ['equipe_id'], ['id'])
        batch_op.drop_column('equipe_vendas')

    with op.batch_alter_table('usuario_vendedor', schema=None) as batch_op:
        batch_op.add_column(sa.Column('vendedor_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('tipo_acesso', sa.String(length=20), nullable=True))
        batch_op.drop_index(batch_op.f('idx_vendedor_lookup'))
        batch_op.create_index('idx_vendedor_lookup', ['vendedor_id', 'ativo'], unique=False)
        batch_op.drop_constraint(batch_op.f('uq_usuario_vendedor'), type_='unique')
        batch_op.create_unique_constraint('uq_usuario_vendedor', ['usuario_id', 'vendedor_id'])
        batch_op.create_foreign_key(None, 'vendedor', ['vendedor_id'], ['id'])
        batch_op.drop_column('vendedor')

    with op.batch_alter_table('usuarios', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('usuarios_perfil_id_fkey'), type_='foreignkey')
        batch_op.drop_column('perfil_nome')
        batch_op.drop_column('perfil_id')

    with op.batch_alter_table('vendedor', schema=None) as batch_op:
        batch_op.alter_column('codigo',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('razao_social',
               existing_type=sa.VARCHAR(length=150),
               type_=sa.String(length=200),
               existing_nullable=True)
        batch_op.alter_column('cnpj_cpf',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=18),
               existing_nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=120),
               existing_nullable=True)
        batch_op.alter_column('ativo',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('criado_em',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('vendedor', schema=None) as batch_op:
        batch_op.alter_column('criado_em',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('ativo',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('email',
               existing_type=sa.String(length=120),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
        batch_op.alter_column('cnpj_cpf',
               existing_type=sa.String(length=18),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
        batch_op.alter_column('razao_social',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=150),
               existing_nullable=True)
        batch_op.alter_column('codigo',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)

    with op.batch_alter_table('usuarios', schema=None) as batch_op:
        batch_op.add_column(sa.Column('perfil_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('perfil_nome', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('usuarios_perfil_id_fkey'), 'perfil_usuario', ['perfil_id'], ['id'])

    with op.batch_alter_table('usuario_vendedor', schema=None) as batch_op:
        batch_op.add_column(sa.Column('vendedor', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint('uq_usuario_vendedor', type_='unique')
        batch_op.create_unique_constraint(batch_op.f('uq_usuario_vendedor'), ['usuario_id', 'vendedor'], postgresql_nulls_not_distinct=False)
        batch_op.drop_index('idx_vendedor_lookup')
        batch_op.create_index(batch_op.f('idx_vendedor_lookup'), ['vendedor', 'ativo'], unique=False)
        batch_op.drop_column('tipo_acesso')
        batch_op.drop_column('vendedor_id')

    with op.batch_alter_table('usuario_equipe_vendas', schema=None) as batch_op:
        batch_op.add_column(sa.Column('equipe_vendas', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint('uq_usuario_equipe', type_='unique')
        batch_op.create_unique_constraint(batch_op.f('uq_usuario_equipe'), ['usuario_id', 'equipe_vendas'], postgresql_nulls_not_distinct=False)
        batch_op.drop_index('idx_equipe_lookup')
        batch_op.create_index(batch_op.f('idx_equipe_lookup'), ['equipe_vendas', 'ativo'], unique=False)
        batch_op.drop_column('tipo_acesso')
        batch_op.drop_column('cargo_equipe')
        batch_op.drop_column('equipe_id')

    with op.batch_alter_table('separacao', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_separacao_tipo_envio'), ['tipo_envio'], unique=False)

    with op.batch_alter_table('pre_separacao_item', schema=None) as batch_op:
        batch_op.drop_constraint('uq_pre_separacao_contexto_unico', type_='unique')
        batch_op.drop_index(batch_op.f('ix_pre_separacao_item_separacao_lote_id'))
        batch_op.drop_index('idx_pre_sep_recomposicao')
        batch_op.drop_index('idx_pre_sep_data_expedicao')
        batch_op.create_unique_constraint(batch_op.f('uq_pre_sep_context'), ['num_pedido', 'cod_produto', 'data_expedicao_editada', 'data_agendamento_editada', 'protocolo_editado'], postgresql_nulls_not_distinct=False)
        batch_op.create_index(batch_op.f('idx_pre_sep_recomp'), ['recomposto', 'hash_item_original'], unique=False)
        batch_op.create_index(batch_op.f('idx_pre_sep_exp_date'), ['cod_produto', 'data_expedicao_editada', 'status'], unique=False)

    with op.batch_alter_table('permission_template', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ativo', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('descricao', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('perfil_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('atualizado_em', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('criado_por', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('criado_em', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('permissions_json', sa.TEXT(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('permission_template_perfil_id_fkey'), 'perfil_usuario', ['perfil_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('permission_template_criado_por_fkey'), 'usuarios', ['criado_por'], ['id'])
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_unique_constraint(batch_op.f('permission_template_nome_key'), ['nome'], postgresql_nulls_not_distinct=False)
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_by')
        batch_op.drop_column('created_at')
        batch_op.drop_column('active')
        batch_op.drop_column('is_system')
        batch_op.drop_column('template_data')
        batch_op.drop_column('category')
        batch_op.drop_column('description')
        batch_op.drop_column('code')
        batch_op.drop_column('name')

    with op.batch_alter_table('permission_submodule', schema=None) as batch_op:
        batch_op.add_column(sa.Column('icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint('uq_submodule_module_name', type_='unique')
        batch_op.drop_index('idx_submodule_module')
        batch_op.create_unique_constraint(batch_op.f('uq_permission_submodule'), ['module_id', 'name'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('order_index',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('created_by')
        batch_op.drop_column('created_at')
        batch_op.drop_column('critical_level')
        batch_op.drop_column('route_pattern')

    with op.batch_alter_table('permission_module', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint('uq_module_category_name', type_='unique')
        batch_op.drop_index('idx_module_category')
        batch_op.create_unique_constraint(batch_op.f('permission_module_name_key'), ['name'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('order_index',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('created_by')
        batch_op.drop_column('created_at')
        batch_op.drop_column('color')
        batch_op.drop_column('category_id')

    with op.batch_alter_table('permission_category', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('ordem',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
        batch_op.drop_column('criado_por')

    with op.batch_alter_table('modulo_sistema', schema=None) as batch_op:
        batch_op.add_column(sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('nivel_hierarquico', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('modulo_sistema_parent_id_fkey'), 'modulo_sistema', ['parent_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('modulo_sistema_category_id_fkey'), 'permission_category', ['category_id'], ['id'])

    with op.batch_alter_table('funcao_modulo', schema=None) as batch_op:
        batch_op.add_column(sa.Column('submodulo_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('funcao_modulo_submodulo_id_fkey'), 'sub_module', ['submodulo_id'], ['id'])

    with op.batch_alter_table('equipe_vendas', schema=None) as batch_op:
        batch_op.add_column(sa.Column('gerente', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('criado_em',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('ativo',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('descricao',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('codigo',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
        batch_op.drop_column('gerente_id')

    with op.batch_alter_table('cotacoes', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('controle_portaria', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('controle_cruzado_separacao', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_controle_cruzado_separacao_separacao_lote_id'))
        batch_op.alter_column('separacao_lote_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)

    with op.batch_alter_table('carteira_principal', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_carteira_principal_separacao_lote_id'))

    with op.batch_alter_table('batch_permission_operation', schema=None) as batch_op:
        batch_op.add_column(sa.Column('usuarios_afetados', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('executado_em', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('descricao', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('permissoes_alteradas', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('erro_detalhes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('tipo_operacao', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('detalhes_json', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('executado_por', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('batch_permission_operation_executado_por_fkey'), 'usuarios', ['executado_por'], ['id'])
        batch_op.drop_column('error_details')
        batch_op.drop_column('details')
        batch_op.drop_column('affected_permissions')
        batch_op.drop_column('affected_users')
        batch_op.drop_column('completed_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('executed_by')
        batch_op.drop_column('description')
        batch_op.drop_column('operation_type')

    op.create_table('tipo_envio',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('separacao_lote_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('tipo_envio', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('capacidade_peso_kg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('capacidade_volume_m3', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('peso_atual_kg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('volume_atual_m3', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('criado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('criado_por', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('tipo_envio_pkey'))
    )
    with op.batch_alter_table('tipo_envio', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tipo_envio_tipo_envio'), ['tipo_envio'], unique=False)
        batch_op.create_index(batch_op.f('ix_tipo_envio_separacao_lote_id'), ['separacao_lote_id'], unique=True)

    op.create_table('ai_learning_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('consulta_original', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('interpretacao_inicial', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('resposta_inicial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('feedback_usuario', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('interpretacao_corrigida', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('resposta_corrigida', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tipo_correcao', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('aprendizado_extraido', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('usuario_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sessao_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_learning_history_pkey'))
    )
    with op.batch_alter_table('ai_learning_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_learning_created'), [sa.literal_column('created_at DESC')], unique=False)

    op.create_table('ai_knowledge_patterns',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('pattern_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('pattern_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('interpretation', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.5'), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('success_rate', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.5'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_knowledge_patterns_pkey')),
    sa.UniqueConstraint('pattern_type', 'pattern_text', name=op.f('ai_knowledge_patterns_pattern_type_pattern_text_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('ai_knowledge_patterns', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_patterns_confidence'), [sa.literal_column('confidence DESC')], unique=False)

    op.create_table('ai_performance_metrics',
    sa.Column('metric_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('metric_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('metric_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=False),
    sa.Column('metadata_jsonb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('metric_id', name=op.f('ai_performance_metrics_pkey'))
    )
    with op.batch_alter_table('ai_performance_metrics', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_metrics_date_type'), ['metric_date', 'metric_type'], unique=False)

    op.create_table('controle_descasamento_nf',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('numero_nf', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('num_pedido', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cod_produto', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('qtd_embarques', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=True),
    sa.Column('qtd_importacao', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=True),
    sa.Column('qtd_separacao', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=True),
    sa.Column('descasamento_detectado', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('tipo_descasamento', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('diferenca_critica', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=True),
    sa.Column('impacta_separacao', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('separacao_lote_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('justificativa_invalida', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('justificativa_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('acao_automatica', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('acao_executada', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('executada_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('fonte_correta', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('qtd_reconciliada', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=True),
    sa.Column('motivo_escolha', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('detectado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('resolvido_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('resolvido_por', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('observacoes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('controle_descasamento_nf_pkey'))
    )
    with op.batch_alter_table('controle_descasamento_nf', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_controle_descasamento_nf_separacao_lote_id'), ['separacao_lote_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_controle_descasamento_nf_numero_nf'), ['numero_nf'], unique=False)
        batch_op.create_index(batch_op.f('ix_controle_descasamento_nf_num_pedido'), ['num_pedido'], unique=False)
        batch_op.create_index(batch_op.f('ix_controle_descasamento_nf_descasamento_detectado'), ['descasamento_detectado'], unique=False)
        batch_op.create_index(batch_op.f('ix_controle_descasamento_nf_cod_produto'), ['cod_produto'], unique=False)
        batch_op.create_index(batch_op.f('idx_descasamento_separacao'), ['separacao_lote_id', 'justificativa_invalida'], unique=False)
        batch_op.create_index(batch_op.f('idx_descasamento_nf_pedido'), ['numero_nf', 'num_pedido'], unique=False)
        batch_op.create_index(batch_op.f('idx_descasamento_detectado_impacto'), ['descasamento_detectado', 'impacta_separacao'], unique=False)
        batch_op.create_index(batch_op.f('idx_descasamento_acao'), ['acao_automatica', 'acao_executada'], unique=False)

    op.create_table('ai_system_config',
    sa.Column('config_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('config_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('config_key', name=op.f('ai_system_config_pkey'))
    )
    op.create_table('evento_carteira',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('num_pedido', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cod_produto', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('carteira_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tipo_evento', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('qtd_anterior', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=True),
    sa.Column('qtd_nova', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=True),
    sa.Column('qtd_impactada', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=False),
    sa.Column('numero_nf', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('motivo_cancelamento', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('campo_alterado', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('valor_anterior', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('valor_novo', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('afeta_separacao', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('separacao_notificada', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('cotacao_afetada', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('responsavel_cotacao', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status_processamento', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('criado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('criado_por', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('processado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('processado_por', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('evento_carteira_pkey'))
    )
    with op.batch_alter_table('evento_carteira', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_evento_carteira_tipo_evento'), ['tipo_evento'], unique=False)
        batch_op.create_index(batch_op.f('ix_evento_carteira_status_processamento'), ['status_processamento'], unique=False)
        batch_op.create_index(batch_op.f('ix_evento_carteira_separacao_notificada'), ['separacao_notificada'], unique=False)
        batch_op.create_index(batch_op.f('ix_evento_carteira_num_pedido'), ['num_pedido'], unique=False)
        batch_op.create_index(batch_op.f('ix_evento_carteira_cotacao_afetada'), ['cotacao_afetada'], unique=False)
        batch_op.create_index(batch_op.f('ix_evento_carteira_cod_produto'), ['cod_produto'], unique=False)
        batch_op.create_index(batch_op.f('ix_evento_carteira_carteira_item_id'), ['carteira_item_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_evento_carteira_afeta_separacao'), ['afeta_separacao'], unique=False)
        batch_op.create_index(batch_op.f('idx_evento_tipo_status'), ['tipo_evento', 'status_processamento'], unique=False)
        batch_op.create_index(batch_op.f('idx_evento_separacao_notificada'), ['afeta_separacao', 'separacao_notificada'], unique=False)
        batch_op.create_index(batch_op.f('idx_evento_pedido_produto'), ['num_pedido', 'cod_produto'], unique=False)
        batch_op.create_index(batch_op.f('idx_evento_cotacao_afetada'), ['cotacao_afetada', 'responsavel_cotacao'], unique=False)

    op.create_table('ai_grupos_empresariais',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome_grupo', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('tipo_negocio', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cnpj_prefixos', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('palavras_chave', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('filtro_sql', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('regras_deteccao', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('estatisticas', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ativo', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('aprendido_automaticamente', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('confirmado_por', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_grupos_empresariais_pkey')),
    sa.UniqueConstraint('nome_grupo', name=op.f('ai_grupos_empresariais_nome_grupo_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('ai_grupos_empresariais', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_grupos_nome'), ['nome_grupo'], unique=False)

    op.create_table('ai_learning_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('metrica_tipo', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('metrica_valor', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('contexto', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('periodo_inicio', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('periodo_fim', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_learning_metrics_pkey'))
    )
    with op.batch_alter_table('ai_learning_metrics', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_metrics_tipo'), ['metrica_tipo'], unique=False)

    op.create_table('controle_alteracao_carga',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('carteira_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('separacao_lote_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('num_pedido', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cod_produto', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('qtd_anterior', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=False),
    sa.Column('qtd_nova', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=False),
    sa.Column('qtd_diferenca', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=False),
    sa.Column('peso_anterior', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=True),
    sa.Column('peso_novo', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=True),
    sa.Column('peso_diferenca', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=True),
    sa.Column('decisao_sistema', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('motivo_decisao', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('capacidade_peso_ok', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('capacidade_pallets_ok', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('capacidade_valor_ok', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('acao_executada', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('nova_carga_criada_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('detectado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('processado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('processado_por', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('controle_alteracao_carga_pkey'))
    )
    with op.batch_alter_table('controle_alteracao_carga', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_controle_alteracao_carga_separacao_lote_id'), ['separacao_lote_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_controle_alteracao_carga_num_pedido'), ['num_pedido'], unique=False)
        batch_op.create_index(batch_op.f('ix_controle_alteracao_carga_decisao_sistema'), ['decisao_sistema'], unique=False)
        batch_op.create_index(batch_op.f('ix_controle_alteracao_carga_cod_produto'), ['cod_produto'], unique=False)
        batch_op.create_index(batch_op.f('ix_controle_alteracao_carga_carteira_item_id'), ['carteira_item_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_controle_alteracao_carga_acao_executada'), ['acao_executada'], unique=False)

    op.create_table('vinculacao_carteira_separacao',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('num_pedido', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cod_produto', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('protocolo_agendamento', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('data_agendamento', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('data_expedicao', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('carteira_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('separacao_lote_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('qtd_carteira_original', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=False),
    sa.Column('qtd_separacao_original', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=False),
    sa.Column('qtd_vinculada', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=False),
    sa.Column('status_vinculacao', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ultima_sincronizacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('divergencia_detectada', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('tipo_divergencia', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('criada_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('criada_por', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('atualizada_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('vinculacao_carteira_separacao_pkey')),
    sa.UniqueConstraint('num_pedido', 'cod_produto', 'protocolo_agendamento', 'data_agendamento', 'data_expedicao', name=op.f('uq_vinculacao_multi_dimensional'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('vinculacao_carteira_separacao', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_vinculacao_carteira_separacao_status_vinculacao'), ['status_vinculacao'], unique=False)
        batch_op.create_index(batch_op.f('ix_vinculacao_carteira_separacao_separacao_lote_id'), ['separacao_lote_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_vinculacao_carteira_separacao_protocolo_agendamento'), ['protocolo_agendamento'], unique=False)
        batch_op.create_index(batch_op.f('ix_vinculacao_carteira_separacao_num_pedido'), ['num_pedido'], unique=False)
        batch_op.create_index(batch_op.f('ix_vinculacao_carteira_separacao_divergencia_detectada'), ['divergencia_detectada'], unique=False)
        batch_op.create_index(batch_op.f('ix_vinculacao_carteira_separacao_data_expedicao'), ['data_expedicao'], unique=False)
        batch_op.create_index(batch_op.f('ix_vinculacao_carteira_separacao_data_agendamento'), ['data_agendamento'], unique=False)
        batch_op.create_index(batch_op.f('ix_vinculacao_carteira_separacao_cod_produto'), ['cod_produto'], unique=False)
        batch_op.create_index(batch_op.f('ix_vinculacao_carteira_separacao_carteira_item_id'), ['carteira_item_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_vinculacao_status_divergencia'), ['status_vinculacao', 'divergencia_detectada'], unique=False)
        batch_op.create_index(batch_op.f('idx_vinculacao_protocolo_data'), ['protocolo_agendamento', 'data_agendamento'], unique=False)
        batch_op.create_index(batch_op.f('idx_vinculacao_carteira_separacao'), ['carteira_item_id', 'separacao_lote_id'], unique=False)

    op.create_table('ai_semantic_mappings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('termo_usuario', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('campo_sistema', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('modelo', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('contexto', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('frequencia', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('ultima_uso', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('validado', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('validado_por', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('validado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_semantic_mappings_pkey')),
    sa.UniqueConstraint('termo_usuario', 'campo_sistema', 'modelo', name=op.f('ai_semantic_mappings_termo_usuario_campo_sistema_modelo_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('ai_semantic_mappings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_semantic_termo'), ['termo_usuario'], unique=False)

    op.create_table('aprovacao_mudanca_carteira',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('evento_carteira_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('num_pedido', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cod_produto', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cotacao_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('responsavel_cotacao', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('valor_frete_cotado', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('transportadora_cotada', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tipo_mudanca', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('descricao_mudanca', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('impacto_estimado', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('status_aprovacao', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('prazo_resposta', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('notificacoes_enviadas', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ultima_notificacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('visualizada_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('respondida_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('observacao_resposta', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('acao_tomada', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('acao_automatica_aplicada', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('motivo_acao_automatica', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('criada_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('criada_por', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('aprovacao_mudanca_carteira_pkey'))
    )
    with op.batch_alter_table('aprovacao_mudanca_carteira', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_aprovacao_mudanca_carteira_status_aprovacao'), ['status_aprovacao'], unique=False)
        batch_op.create_index(batch_op.f('ix_aprovacao_mudanca_carteira_responsavel_cotacao'), ['responsavel_cotacao'], unique=False)
        batch_op.create_index(batch_op.f('ix_aprovacao_mudanca_carteira_num_pedido'), ['num_pedido'], unique=False)
        batch_op.create_index(batch_op.f('ix_aprovacao_mudanca_carteira_evento_carteira_id'), ['evento_carteira_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_aprovacao_mudanca_carteira_cotacao_id'), ['cotacao_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_aprovacao_mudanca_carteira_cod_produto'), ['cod_produto'], unique=False)
        batch_op.create_index(batch_op.f('idx_aprovacao_responsavel_status'), ['responsavel_cotacao', 'status_aprovacao'], unique=False)
        batch_op.create_index(batch_op.f('idx_aprovacao_prazo_status'), ['prazo_resposta', 'status_aprovacao'], unique=False)
        batch_op.create_index(batch_op.f('idx_aprovacao_pedido_produto'), ['num_pedido', 'cod_produto'], unique=False)
        batch_op.create_index(batch_op.f('idx_aprovacao_impacto_status'), ['impacto_estimado', 'status_aprovacao'], unique=False)

    op.create_table('sub_module',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('modulo_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('nome_exibicao', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('descricao', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('icone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('ativo', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('ordem', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('criado_em', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['modulo_id'], ['modulo_sistema.id'], name=op.f('sub_module_modulo_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('sub_module_pkey')),
    sa.UniqueConstraint('modulo_id', 'nome', name=op.f('sub_module_modulo_id_nome_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('sub_module', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_submodule_ativo'), ['modulo_id', 'ativo'], unique=False)

    op.create_table('validacao_nf_simples',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('numero_nf', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('data_validacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('num_pedido_nf', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cnpj_nf', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('pedido_encontrado', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('cnpj_confere', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('validacao_aprovada', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('cnpj_esperado', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('cnpj_recebido', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('motivo_bloqueio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('frete_gerado', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('monitoramento_registrado', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('data_execucao', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('validacao_nf_simples_pkey'))
    )
    with op.batch_alter_table('validacao_nf_simples', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_validacao_nf_simples_validacao_aprovada'), ['validacao_aprovada'], unique=False)
        batch_op.create_index(batch_op.f('ix_validacao_nf_simples_numero_nf'), ['numero_nf'], unique=False)
        batch_op.create_index(batch_op.f('ix_validacao_nf_simples_num_pedido_nf'), ['num_pedido_nf'], unique=False)
        batch_op.create_index(batch_op.f('ix_validacao_nf_simples_cnpj_nf'), ['cnpj_nf'], unique=False)

    op.create_table('ai_response_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tipo_consulta', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('contexto', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('template_resposta', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('variaveis_necessarias', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('exemplo_uso', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('taxa_satisfacao', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.5'), autoincrement=False, nullable=True),
    sa.Column('uso_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('ativo', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_response_templates_pkey'))
    )
    with op.batch_alter_table('ai_response_templates', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_templates_tipo'), ['tipo_consulta'], unique=False)

    op.create_table('ai_semantic_embeddings',
    sa.Column('embedding_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('content_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('embedding_vector', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(length=20), server_default=sa.text("'v1.0'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('embedding_id', name=op.f('ai_semantic_embeddings_pkey')),
    sa.UniqueConstraint('content_hash', name=op.f('ai_semantic_embeddings_content_hash_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('ai_semantic_embeddings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_embeddings_type'), ['content_type'], unique=False)
        batch_op.create_index(batch_op.f('idx_embeddings_hash'), ['content_hash'], unique=False)

    op.create_table('log_atualizacao_carteira',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('num_pedido', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cod_produto', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('tipo_operacao', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('campos_alterados', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('valores_anteriores', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('valores_novos', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('executado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('executado_por', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('log_atualizacao_carteira_pkey'))
    )
    with op.batch_alter_table('log_atualizacao_carteira', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_log_atualizacao_carteira_tipo_operacao'), ['tipo_operacao'], unique=False)
        batch_op.create_index(batch_op.f('ix_log_atualizacao_carteira_num_pedido'), ['num_pedido'], unique=False)
        batch_op.create_index(batch_op.f('ix_log_atualizacao_carteira_cod_produto'), ['cod_produto'], unique=False)

    op.create_table('ai_business_contexts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('contexto_nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('descricao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('regras', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('exemplos', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('restricoes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('prioridade', sa.INTEGER(), server_default=sa.text('50'), autoincrement=False, nullable=True),
    sa.Column('ativo', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_business_contexts_pkey')),
    sa.UniqueConstraint('contexto_nome', name=op.f('ai_business_contexts_contexto_nome_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('ai_business_contexts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_contexts_ativo'), ['ativo'], unique=False)

    op.create_table('snapshot_carteira',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('data_importacao', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('versao_carteira', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('num_pedido', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cod_produto', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cnpj_cliente', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('nome_cliente', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('qtd_produto_pedido', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('preco_produto', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('valor_produto_pedido', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('snapshot_carteira_pkey')),
    sa.UniqueConstraint('num_pedido', 'cod_produto', 'versao_carteira', name=op.f('snapshot_carteira_num_pedido_cod_produto_versao_carteira_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('snapshot_carteira', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_snapshot_carteira_versao_carteira'), ['versao_carteira'], unique=False)
        batch_op.create_index(batch_op.f('ix_snapshot_carteira_num_pedido'), ['num_pedido'], unique=False)
        batch_op.create_index(batch_op.f('ix_snapshot_carteira_data_importacao'), ['data_importacao'], unique=False)
        batch_op.create_index(batch_op.f('ix_snapshot_carteira_cod_produto'), ['cod_produto'], unique=False)
        batch_op.create_index(batch_op.f('ix_snapshot_carteira_cnpj_cliente'), ['cnpj_cliente'], unique=False)

    op.create_table('pre_separacao_itens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('carteira_principal_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cod_produto', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('qtd_original', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('qtd_selecionada', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('qtd_restante', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('expedicao_editavel', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('agendamento_editavel', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('protocolo_editavel', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'PENDENTE'::character varying"), autoincrement=False, nullable=False),
    sa.Column('observacoes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('criado_em', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('criado_por', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('atualizado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('atualizado_por', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tipo_envio', sa.VARCHAR(length=10), server_default=sa.text("'total'::character varying"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['carteira_principal_id'], ['carteira_principal.id'], name=op.f('fk_pre_separacao_carteira')),
    sa.PrimaryKeyConstraint('id', name=op.f('pre_separacao_itens_pkey'))
    )
    with op.batch_alter_table('pre_separacao_itens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_pre_separacao_itens_tipo_envio'), ['tipo_envio'], unique=False)
        batch_op.create_index(batch_op.f('ix_pre_separacao_itens_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_pre_separacao_itens_cod_produto'), ['cod_produto'], unique=False)
        batch_op.create_index(batch_op.f('ix_pre_separacao_itens_carteira_principal_id'), ['carteira_principal_id'], unique=False)

    op.create_table('ai_feedback_history',
    sa.Column('feedback_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('query_original', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('response_original', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('feedback_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('feedback_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('processed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('applied', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('context_jsonb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('feedback_id', name=op.f('ai_feedback_history_pkey'))
    )
    with op.batch_alter_table('ai_feedback_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_feedback_user_date'), ['user_id', 'created_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_feedback_user'), ['user_id', 'created_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_feedback_type_severity'), ['feedback_type', 'severity'], unique=False)
        batch_op.create_index(batch_op.f('idx_feedback_processed'), ['processed', 'applied'], unique=False)

    op.create_table('ai_learning_patterns',
    sa.Column('pattern_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('pattern_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('frequency', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.5'), autoincrement=False, nullable=True),
    sa.Column('improvement_suggestion', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('examples_jsonb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('pattern_id', name=op.f('ai_learning_patterns_pkey'))
    )
    with op.batch_alter_table('ai_learning_patterns', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_patterns_type_confidence'), ['pattern_type', 'confidence_score'], unique=False)
        batch_op.create_index(batch_op.f('idx_patterns_type'), ['pattern_type', 'confidence_score'], unique=False)
        batch_op.create_index(batch_op.f('idx_patterns_frequency'), [sa.literal_column('frequency DESC')], unique=False)

    op.create_table('historico_faturamento',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('num_pedido', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cod_produto', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('numero_nf', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('qtd_baixada', sa.NUMERIC(precision=15, scale=3), autoincrement=False, nullable=False),
    sa.Column('data_faturamento', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('cancelado', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('cancelado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('cancelado_por', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('motivo_cancelamento', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('criado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('historico_faturamento_pkey'))
    )
    with op.batch_alter_table('historico_faturamento', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_historico_faturamento_numero_nf'), ['numero_nf'], unique=False)
        batch_op.create_index(batch_op.f('ix_historico_faturamento_num_pedido'), ['num_pedido'], unique=False)
        batch_op.create_index(batch_op.f('ix_historico_faturamento_cod_produto'), ['cod_produto'], unique=False)
        batch_op.create_index(batch_op.f('ix_historico_faturamento_cancelado'), ['cancelado'], unique=False)
        batch_op.create_index(batch_op.f('idx_historico_nf_pedido'), ['numero_nf', 'num_pedido'], unique=False)
        batch_op.create_index(batch_op.f('idx_historico_data_cancelado'), ['data_faturamento', 'cancelado'], unique=False)

    op.create_table('ai_advanced_sessions',
    sa.Column('session_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('metadata_jsonb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('session_id', name=op.f('ai_advanced_sessions_pkey'))
    )
    with op.batch_alter_table('ai_advanced_sessions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_ai_sessions_user_date'), ['user_id', 'created_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_ai_sessions_user'), ['user_id', 'created_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_ai_sessions_metadata_gin'), ['metadata_jsonb'], unique=False, postgresql_using='gin')
        batch_op.create_index(batch_op.f('idx_ai_sessions_metadata'), ['metadata_jsonb'], unique=False, postgresql_using='gin')
        batch_op.create_index(batch_op.f('idx_ai_sessions_domain'), [sa.literal_column("((metadata_jsonb -> 'session_tags'::text) ->> 'domain'::text)")], unique=False)
        batch_op.create_index(batch_op.f('idx_ai_sessions_confidence'), [sa.literal_column("((metadata_jsonb -> 'metacognitive'::text) ->> 'confidence_score'::text)")], unique=False)

    # ### end Alembic commands ###
