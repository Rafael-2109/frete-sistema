"""
Script de Verifica√ß√£o P√≥s-Limpeza

Objetivo:
- Verificar se n√£o h√° mais duplicatas
- Confirmar que o saldo est√° correto
- Validar que o extrato est√° consistente
- Comparar com valores esperados do Excel

USO:
    python migrations/verificar_saldo_apos_limpeza.py
"""
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app import create_app, db
from sqlalchemy import text
from decimal import Decimal

# VALORES ESPERADOS DO EXCEL (conforme informado pelo usu√°rio)
VALOR_ESPERADO_MONTAGENS = Decimal('127560.58')
VALOR_ESPERADO_COMISSOES = Decimal('1181982.56')  # Baseado no relat√≥rio anterior
QTD_ESPERADA_MONTAGENS = 1779

def main():
    app = create_app()

    with app.app_context():
        print("\n" + "=" * 120)
        print("‚úÖ VERIFICA√á√ÉO P√ìS-LIMPEZA - VALIDA√á√ÉO COMPLETA")
        print("=" * 120)

        erros = []
        avisos = []

        # 1. VERIFICAR DUPLICATAS DE MOVIMENTA√á√ïES DE MONTAGEM
        print("\n1Ô∏è‚É£  VERIFICANDO DUPLICATAS DE MOVIMENTA√á√ïES DE MONTAGEM...")
        print("=" * 120)

        duplicatas_mov = db.session.execute(text("""
            SELECT COUNT(*)
            FROM (
                SELECT pedido_id, UPPER(numero_chassi) as chassi_upper
                FROM movimentacao_financeira
                WHERE categoria = 'Montagem'
                  AND tipo = 'PAGAMENTO'
                  AND empresa_origem_id = (SELECT id FROM empresa_venda_moto WHERE empresa = 'SOGIMA')
                GROUP BY pedido_id, UPPER(numero_chassi)
                HAVING COUNT(*) > 1
            ) duplicatas
        """)).scalar()

        if duplicatas_mov > 0:
            erros.append(f"‚ùå ERRO: Ainda existem {duplicatas_mov} grupos com movimenta√ß√µes duplicadas!")
            print(f"   ‚ùå ERRO: {duplicatas_mov} grupos com duplicatas encontrados")
        else:
            print("   ‚úÖ Nenhuma duplicata de movimenta√ß√£o encontrada")

        # 2. VERIFICAR QUANTIDADE E VALOR TOTAL DE MONTAGENS
        print("\n2Ô∏è‚É£  VERIFICANDO MONTAGENS...")
        print("=" * 120)

        totais_montagem = db.session.execute(text("""
            SELECT
                COUNT(*) as qtd,
                SUM(valor) as total
            FROM movimentacao_financeira
            WHERE categoria = 'Montagem'
              AND tipo = 'PAGAMENTO'
              AND empresa_origem_id = (SELECT id FROM empresa_venda_moto WHERE empresa = 'SOGIMA')
        """)).fetchone()

        qtd_mov_montagem = totais_montagem[0]
        valor_mov_montagem = Decimal(str(totais_montagem[1] or 0))

        print(f"   Quantidade esperada:     {QTD_ESPERADA_MONTAGENS}")
        print(f"   Quantidade no banco:     {qtd_mov_montagem}")
        print(f"   Valor esperado:          R$ {float(VALOR_ESPERADO_MONTAGENS):,.2f}")
        print(f"   Valor no banco:          R$ {float(valor_mov_montagem):,.2f}")

        diferenca_qtd = qtd_mov_montagem - QTD_ESPERADA_MONTAGENS
        diferenca_valor = valor_mov_montagem - VALOR_ESPERADO_MONTAGENS

        if diferenca_qtd != 0:
            erros.append(f"‚ùå ERRO: Diferen√ßa de {diferenca_qtd} movimenta√ß√µes de montagem")
            print(f"   ‚ùå DIFEREN√áA: {diferenca_qtd} movimenta√ß√µes")
        else:
            print(f"   ‚úÖ Quantidade correta")

        if abs(diferenca_valor) > Decimal('0.10'):  # Toler√¢ncia de 10 centavos
            erros.append(f"‚ùå ERRO: Diferen√ßa de R$ {float(diferenca_valor):,.2f} no valor de montagens")
            print(f"   ‚ùå DIFEREN√áA: R$ {float(diferenca_valor):,.2f}")
        else:
            print(f"   ‚úÖ Valor correto")

        # 3. VERIFICAR COMISS√ïES
        print("\n3Ô∏è‚É£  VERIFICANDO COMISS√ïES...")
        print("=" * 120)

        # Soma das comiss√µes individuais (n√£o dos lotes)
        totais_comissao = db.session.execute(text("""
            SELECT
                COUNT(*) as qtd,
                SUM(valor) as total
            FROM movimentacao_financeira
            WHERE categoria = 'Comiss√£o'
              AND tipo = 'PAGAMENTO'
              AND empresa_origem_id = (SELECT id FROM empresa_venda_moto WHERE empresa = 'SOGIMA')
        """)).fetchone()

        qtd_comissoes = totais_comissao[0]
        valor_comissoes = Decimal(str(totais_comissao[1] or 0))

        print(f"   Quantidade de comiss√µes individuais: {qtd_comissoes}")
        print(f"   Valor total comiss√µes:               R$ {float(valor_comissoes):,.2f}")
        print(f"   Valor esperado (Excel):              R$ {float(VALOR_ESPERADO_COMISSOES):,.2f}")

        diferenca_comissoes = valor_comissoes - VALOR_ESPERADO_COMISSOES

        if abs(diferenca_comissoes) > Decimal('0.10'):
            avisos.append(f"‚ö†Ô∏è  AVISO: Diferen√ßa de R$ {float(diferenca_comissoes):,.2f} em comiss√µes")
            print(f"   ‚ö†Ô∏è  DIFEREN√áA: R$ {float(diferenca_comissoes):,.2f}")
        else:
            print(f"   ‚úÖ Valor correto")

        # 4. VERIFICAR SALDO DA SOGIMA
        print("\n4Ô∏è‚É£  VERIFICANDO SALDO DA SOGIMA...")
        print("=" * 120)

        sogima = db.session.execute(text("""
            SELECT saldo FROM empresa_venda_moto WHERE empresa = 'SOGIMA'
        """)).fetchone()

        saldo_atual = Decimal(str(sogima[0]))
        saldo_esperado = -(VALOR_ESPERADO_MONTAGENS + VALOR_ESPERADO_COMISSOES)

        print(f"   Saldo esperado (Excel):    R$ {float(saldo_esperado):,.2f}")
        print(f"   Saldo no banco:            R$ {float(saldo_atual):,.2f}")

        diferenca_saldo = saldo_atual - saldo_esperado

        if abs(diferenca_saldo) > Decimal('1.00'):  # Toler√¢ncia de R$ 1,00
            erros.append(f"‚ùå ERRO: Diferen√ßa de R$ {float(diferenca_saldo):,.2f} no saldo")
            print(f"   ‚ùå DIFEREN√áA: R$ {float(diferenca_saldo):,.2f}")
        else:
            print(f"   ‚úÖ Saldo correto (diferen√ßa: R$ {float(diferenca_saldo):,.2f})")

        # 5. VERIFICAR CONSIST√äNCIA DO EXTRATO
        print("\n5Ô∏è‚É£  VERIFICANDO CONSIST√äNCIA DO EXTRATO...")
        print("=" * 120)

        totais_extrato = db.session.execute(text("""
            SELECT
                tipo,
                COUNT(*) as qtd,
                SUM(valor) as total
            FROM movimentacao_financeira
            WHERE empresa_origem_id = (SELECT id FROM empresa_venda_moto WHERE empresa = 'SOGIMA')
               OR empresa_destino_id = (SELECT id FROM empresa_venda_moto WHERE empresa = 'SOGIMA')
            GROUP BY tipo
        """)).fetchall()

        total_recebimentos = Decimal('0')
        total_pagamentos = Decimal('0')

        for row in totais_extrato:
            valor = Decimal(str(row[2]))
            print(f"   {row[0]:15} | Qtd: {row[1]:6} | Total: R$ {float(valor):15,.2f}")

            if row[0] == 'RECEBIMENTO':
                total_recebimentos += valor
            elif row[0] == 'PAGAMENTO':
                total_pagamentos += valor

        saldo_calculado = total_recebimentos - total_pagamentos

        print(f"\n   üìä Saldo calculado (Recebimentos - Pagamentos): R$ {float(saldo_calculado):,.2f}")
        print(f"   üìä Saldo registrado no banco:                   R$ {float(saldo_atual):,.2f}")

        diferenca_calc = saldo_atual - saldo_calculado

        if abs(diferenca_calc) > Decimal('0.10'):
            erros.append(f"‚ùå ERRO: Saldo n√£o bate com movimenta√ß√µes (diferen√ßa: R$ {float(diferenca_calc):,.2f})")
            print(f"   ‚ùå INCONSIST√äNCIA: R$ {float(diferenca_calc):,.2f}")
        else:
            print(f"   ‚úÖ Saldo consistente com movimenta√ß√µes")

        # RESUMO FINAL
        print("\n" + "=" * 120)
        print("üìä RESUMO DA VERIFICA√á√ÉO")
        print("=" * 120)

        if erros:
            print("\n‚ùå ERROS ENCONTRADOS:")
            for erro in erros:
                print(f"   {erro}")

        if avisos:
            print("\n‚ö†Ô∏è  AVISOS:")
            for aviso in avisos:
                print(f"   {aviso}")

        if not erros and not avisos:
            print("\n‚úÖ‚úÖ‚úÖ TUDO CORRETO! SISTEMA VALIDADO! ‚úÖ‚úÖ‚úÖ")
            print("\n   O saldo e o extrato est√£o consistentes com os valores do Excel.")
            print("   N√£o h√° duplicatas ou inconsist√™ncias.")
        elif not erros:
            print("\n‚úÖ VALIDA√á√ÉO OK (com avisos)")
        else:
            print("\n‚ùå VALIDA√á√ÉO FALHOU - Corrija os erros acima")

        print("\n" + "=" * 120)


if __name__ == '__main__':
    main()
