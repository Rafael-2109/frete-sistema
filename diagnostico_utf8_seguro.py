#!/usr/bin/env python3
"""
DIAGN√ìSTICO SEGURO: Apenas analisa problema UTF-8 sem modificar nada
"""

import os
import sys
import tempfile

def analisar_problema_utf8():
    """Analisa o problema UTF-8 sem fazer modifica√ß√µes"""
    
    print('üîç DIAGN√ìSTICO SEGURO - PROBLEMA UTF-8')
    print('=' * 60)
    
    # 1. Analisar ambiente atual
    print('üìä 1. AMBIENTE ATUAL:')
    print('-' * 30)
    
    print(f'Python version: {sys.version}')
    print(f'Python encoding: {sys.getdefaultencoding()}')
    print(f'File system encoding: {sys.getfilesystemencoding()}')
    
    import locale
    try:
        print(f'System locale: {locale.getpreferredencoding()}')
    except:
        print('System locale: N/A')
    
    # Verificar vari√°veis de ambiente relevantes
    env_vars = ['PYTHONIOENCODING', 'LANG', 'LC_ALL', 'PGCLIENTENCODING']
    print(f'\nVari√°veis de ambiente:')
    for var in env_vars:
        value = os.getenv(var, 'n√£o definida')
        print(f'  {var}: {value}')
    
    print()
    
    # 2. Testar conex√£o (sem modificar nada)
    print('üß™ 2. TESTE DE CONEX√ÉO:')
    print('-' * 30)
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print('‚ùå DATABASE_URL n√£o encontrada')
        return False
    
    print(f'Database URL length: {len(database_url)} caracteres')
    print(f'Database URL v√°lida: ‚úÖ')
    
    # Testar apenas import sem conectar
    try:
        import psycopg2
        print(f'psycopg2 version: {psycopg2.__version__}')
        print('psycopg2 import: ‚úÖ')
    except ImportError as e:
        print(f'psycopg2 import: ‚ùå {e}')
        return False
    
    # 3. Simular teste de conex√£o (sem conectar realmente)
    print('\nüî¨ 3. SIMULA√á√ÉO DE TESTE:')
    print('-' * 30)
    
    # Em vez de conectar, vamos apenas simular com dados de teste
    try:
        # Criar um teste com dados locais
        test_string = "Teste com acentua√ß√£o: √ß√£o, √£, √©, √±"
        encoded = test_string.encode('utf-8')
        decoded = encoded.decode('utf-8')
        print(f'Teste encoding/decoding: ‚úÖ')
        print(f'String teste: {decoded}')
    except Exception as e:
        print(f'Teste encoding/decoding: ‚ùå {e}')
    
    print()
    
    # 4. Analisar arquivo .env atual
    print('üìÑ 4. AN√ÅLISE DO .env ATUAL:')
    print('-' * 30)
    
    try:
        with open('.env', 'r', encoding='utf-8') as f:
            env_content = f.read()
        
        print('Arquivo .env encontrado ‚úÖ')
        print(f'Tamanho: {len(env_content)} caracteres')
        
        # Verificar configura√ß√µes UTF-8 existentes
        utf8_configs = ['PYTHONIOENCODING', 'PYTHONUTF8', 'PGCLIENTENCODING']
        print('\nConfigura√ß√µes UTF-8 no .env:')
        for config in utf8_configs:
            if config in env_content:
                # Extrair valor
                for line in env_content.split('\n'):
                    if line.startswith(config):
                        print(f'  ‚úÖ {line}')
                        break
            else:
                print(f'  ‚ùå {config}: n√£o configurado')
                
    except FileNotFoundError:
        print('Arquivo .env: n√£o encontrado')
    except Exception as e:
        print(f'Erro ao ler .env: {e}')
    
    print()
    
    # 5. Verificar modelo PreSeparacaoItem
    print('üîß 5. VERIFICA√á√ÉO DO MODELO:')
    print('-' * 30)
    
    model_file = 'app/carteira/models.py'
    try:
        with open(model_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print('Modelo carteira/models.py: ‚úÖ')
        
        if 'class PreSeparacaoItem' in content:
            print('Classe PreSeparacaoItem: ‚úÖ encontrada')
            
            if 'salvar_via_workaround' in content:
                print('M√©todo salvar_via_workaround: ‚úÖ implementado')
            else:
                print('M√©todo salvar_via_workaround: ‚ùå n√£o implementado')
                
            if 'carregar_via_workaround' in content:
                print('M√©todo carregar_via_workaround: ‚úÖ implementado')
            else:
                print('M√©todo carregar_via_workaround: ‚ùå n√£o implementado')
        else:
            print('Classe PreSeparacaoItem: ‚ùå n√£o encontrada')
            
    except Exception as e:
        print(f'Erro ao verificar modelo: {e}')
    
    return True

def gerar_recomendacoes():
    """Gera recomenda√ß√µes baseadas na an√°lise"""
    
    print('\nüí° RECOMENDA√á√ïES SEGURAS:')
    print('=' * 60)
    
    print('üîß OP√á√ÉO 1 - CONFIGURA√á√ÉO MANUAL TEMPOR√ÅRIA:')
    print('   Configurar vari√°veis apenas para esta sess√£o:')
    print('   ```')
    print('   set PYTHONIOENCODING=utf-8')
    print('   set PYTHONUTF8=1')
    print('   set PGCLIENTENCODING=UTF8')
    print('   ```')
    print()
    
    print('üîÑ OP√á√ÉO 2 - WORKAROUND PERMANENTE (RECOMENDADO):')
    print('   Usar PreSeparacaoItem.salvar_via_workaround() que j√° est√° implementado')
    print('   N√£o mexer nas migra√ß√µes at√© resolu√ß√£o definitiva')
    print()
    
    print('üöÄ OP√á√ÉO 3 - APLICAR APENAS EM PRODU√á√ÉO:')
    print('   Migra√ß√£o funciona no Render (ambiente Linux UTF-8)')
    print('   Desenvolver localmente com workaround')
    print()
    
    print('‚ö†Ô∏è RISCOS A EVITAR:')
    print('   ‚ùå Modificar .env sem backup')
    print('   ‚ùå Testar conex√£o direta em produ√ß√£o')
    print('   ‚ùå Aplicar configura√ß√µes globais sem testar')

def main():
    """Fun√ß√£o principal segura"""
    
    print('üõ°Ô∏è DIAGN√ìSTICO SEGURO - SEM MODIFICA√á√ïES')
    print('=' * 60)
    print('Este script apenas ANALISA, n√£o modifica nada!')
    print()
    
    # An√°lise completa
    sucesso = analisar_problema_utf8()
    
    # Recomenda√ß√µes
    gerar_recomendacoes()
    
    print('\nüéØ PR√ìXIMOS PASSOS SEGUROS:')
    print('=' * 60)
    print('1. ‚úÖ Usar workaround implementado no modelo')
    print('2. ‚úÖ Continuar desenvolvimento com Etapa 2')
    print('3. ‚úÖ Aplicar migra√ß√£o real apenas no Render')
    print('4. ‚ö†Ô∏è Evitar modifica√ß√µes arriscadas no ambiente local')
    
    return sucesso

if __name__ == "__main__":
    success = main()
    print(f'\n‚úÖ Diagn√≥stico conclu√≠do {"com sucesso" if success else "com problemas"}') 