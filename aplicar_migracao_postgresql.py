#!/usr/bin/env python3
"""
Script para aplicar migra√ß√£o do campo job_id no PostgreSQL local
"""

import os
import psycopg2
from psycopg2 import sql
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

def aplicar_migracao():
    # Pegar URL do banco
    database_url = os.environ.get('DATABASE_URL')
    
    if not database_url:
        print("‚ùå DATABASE_URL n√£o encontrada no .env!")
        print("   Configure a vari√°vel DATABASE_URL no arquivo .env")
        return False
    
    print(f"üìÇ Conectando ao banco de dados...")
    print(f"   URL: {database_url[:30]}...")  # Mostra s√≥ in√≠cio da URL
    
    try:
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        print("\nüîç Verificando estrutura atual...")
        
        # Verificar se tabela existe
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'portal_integracoes'
            )
        """)
        
        if not cursor.fetchone()[0]:
            print("‚ö†Ô∏è  Tabela portal_integracoes n√£o existe ainda")
            print("   Execute as migra√ß√µes do Flask primeiro:")
            print("   flask db upgrade")
            return False
        
        # Verificar se campo j√° existe
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = 'portal_integracoes' 
                AND column_name = 'job_id'
            )
        """)
        
        if cursor.fetchone()[0]:
            print("‚úÖ Campo job_id j√° existe na tabela!")
        else:
            print("üìù Adicionando campo job_id...")
            try:
                cursor.execute("""
                    ALTER TABLE portal_integracoes 
                    ADD COLUMN job_id VARCHAR(100)
                """)
                conn.commit()
                print("‚úÖ Campo job_id adicionado com sucesso!")
            except Exception as e:
                print(f"‚ùå Erro ao adicionar campo: {e}")
                conn.rollback()
                return False
        
        # Criar √≠ndice
        print("\nüîß Criando √≠ndice...")
        try:
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_portal_integracoes_job_id 
                ON portal_integracoes(job_id)
            """)
            conn.commit()
            print("‚úÖ √çndice criado/verificado!")
        except Exception as e:
            print(f"‚ö†Ô∏è  Aviso ao criar √≠ndice: {e}")
            conn.rollback()
        
        # Adicionar coment√°rio
        try:
            cursor.execute("""
                COMMENT ON COLUMN portal_integracoes.job_id IS 
                'ID do job no Redis Queue para processamento ass√≠ncrono'
            """)
            conn.commit()
        except:
            pass  # Coment√°rio √© opcional
        
        # Estat√≠sticas
        print("\nüìä ESTAT√çSTICAS DA TABELA:")
        print("-" * 40)
        
        cursor.execute("SELECT COUNT(*) FROM portal_integracoes")
        total = cursor.fetchone()[0]
        print(f"   Total de registros: {total}")
        
        cursor.execute("SELECT COUNT(*) FROM portal_integracoes WHERE job_id IS NOT NULL")
        com_job = cursor.fetchone()[0]
        print(f"   Registros com job_id: {com_job}")
        
        cursor.execute("SELECT COUNT(*) FROM portal_integracoes WHERE status = 'aguardando'")
        aguardando = cursor.fetchone()[0]
        print(f"   Status aguardando: {aguardando}")
        
        cursor.execute("SELECT COUNT(*) FROM portal_integracoes WHERE status = 'enfileirado'")
        enfileirado = cursor.fetchone()[0]
        print(f"   Status enfileirado: {enfileirado}")
        
        cursor.execute("SELECT COUNT(*) FROM portal_integracoes WHERE status = 'erro'")
        erro = cursor.fetchone()[0]
        print(f"   Status erro: {erro}")
        
        # Verificar estrutura final
        print("\nüìã ESTRUTURA FINAL DOS CAMPOS:")
        print("-" * 40)
        cursor.execute("""
            SELECT column_name, data_type, character_maximum_length
            FROM information_schema.columns 
            WHERE table_schema = 'public' 
            AND table_name = 'portal_integracoes'
            AND column_name IN ('job_id', 'status', 'protocolo')
            ORDER BY ordinal_position
        """)
        
        for row in cursor.fetchall():
            print(f"   {row[0]}: {row[1]}({row[2] or ''})")
        
        conn.close()
        
        print("\n" + "=" * 50)
        print("‚úÖ MIGRA√á√ÉO POSTGRESQL LOCAL CONCLU√çDA!")
        print("=" * 50)
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. No WSL: sudo service redis start")
        print("2. Terminal 1: python worker_atacadao.py")
        print("3. Terminal 2: python app.py")
        print("4. Testar agendamento ass√≠ncrono")
        print("\nüéØ TESTE R√ÅPIDO:")
        print("   - Abra a aplica√ß√£o")
        print("   - Clique em 'Agendar' em qualquer pedido")
        print("   - Deve aparecer loading ass√≠ncrono")
        print("   - N√£o trava o navegador!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        print("\nDicas:")
        print("1. Verifique se o PostgreSQL est√° rodando")
        print("2. Verifique a DATABASE_URL no .env")
        print("3. Formato: postgresql://usuario:senha@localhost/frete_sistema")
        return False

if __name__ == "__main__":
    aplicar_migracao()