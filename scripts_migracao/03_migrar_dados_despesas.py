"""
SCRIPT 3: Migrar dados existentes - Vincular despesas √†s faturas
Objetivo: Preencher fatura_frete_id para as 829 despesas existentes
Executar: LOCALMENTE (equivalente ao SQL para Render)
Data: 2025-01-23
"""

import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app import create_app, db
from app.fretes.models import DespesaExtra, FaturaFrete
from sqlalchemy import text

def migrar_dados_despesas():
    """Migra despesas existentes para usar FK em vez de observa√ß√µes"""

    app = create_app()

    with app.app_context():
        print("=" * 80)
        print("MIGRA√á√ÉO DE DADOS: DespesaExtra ‚Üí FaturaFrete (FK)")
        print("=" * 80)
        print()

        # Estat√≠sticas iniciais
        total_despesas = DespesaExtra.query.count()
        despesas_com_fatura_obs = DespesaExtra.query.filter(
            DespesaExtra.observacoes.ilike('%Fatura:%')
        ).count()

        print(f"üìä ESTAT√çSTICAS INICIAIS:")
        print(f"   Total de despesas: {total_despesas}")
        print(f"   Despesas com 'Fatura:' nas observa√ß√µes: {despesas_com_fatura_obs}")
        print()

        # ========================================================================
        # ETAPA 1: Migra√ß√£o de casos com MATCH √öNICO
        # ========================================================================
        print("=" * 80)
        print("ETAPA 1: Migrando casos com MATCH √öNICO")
        print("=" * 80)
        print()

        despesas_atualizadas_etapa1 = 0

        # Busca despesas que t√™m "Fatura:" nas observa√ß√µes e ainda n√£o t√™m FK
        despesas_para_migrar = DespesaExtra.query.filter(
            DespesaExtra.observacoes.ilike('%Fatura:%'),
            DespesaExtra.fatura_frete_id.is_(None)
        ).all()

        print(f"Despesas para processar: {len(despesas_para_migrar)}")
        print()

        for despesa in despesas_para_migrar:
            try:
                # Extrai n√∫mero da fatura das observa√ß√µes
                numero_fatura_extraido = None
                if despesa.observacoes and 'Fatura:' in despesa.observacoes:
                    partes = despesa.observacoes.split('Fatura:')
                    if len(partes) > 1:
                        numero_fatura_extraido = partes[1].split('|')[0].strip()

                if not numero_fatura_extraido:
                    print(f"  ‚ö†Ô∏è Despesa #{despesa.id}: N√£o foi poss√≠vel extrair n√∫mero da fatura")
                    continue

                # Busca faturas com esse n√∫mero (match exato)
                faturas_encontradas = FaturaFrete.query.filter_by(
                    numero_fatura=numero_fatura_extraido
                ).all()

                # ETAPA 1: S√≥ migra se encontrar exatamente 1 fatura
                if len(faturas_encontradas) == 1:
                    despesa.fatura_frete_id = faturas_encontradas[0].id
                    despesas_atualizadas_etapa1 += 1

                    if despesas_atualizadas_etapa1 % 50 == 0:
                        print(f"  ‚úÖ Processadas: {despesas_atualizadas_etapa1} despesas...")

            except Exception as e:
                print(f"  ‚ùå Erro ao processar despesa #{despesa.id}: {str(e)}")

        # Commit ETAPA 1
        try:
            db.session.commit()
            print()
            print(f"‚úÖ ETAPA 1 CONCLU√çDA: {despesas_atualizadas_etapa1} despesas atualizadas")
            print()
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå ERRO ao commitar ETAPA 1: {str(e)}")
            return

        # ========================================================================
        # ETAPA 2: Migra√ß√£o de casos com M√öLTIPLOS MATCHES
        # Estrat√©gia: Escolher fatura com ID MENOR (mais antiga)
        # ========================================================================
        print("=" * 80)
        print("ETAPA 2: Migrando casos com M√öLTIPLOS MATCHES")
        print("=" * 80)
        print()

        despesas_atualizadas_etapa2 = 0

        # Busca despesas que ainda n√£o t√™m FK
        despesas_restantes = DespesaExtra.query.filter(
            DespesaExtra.observacoes.ilike('%Fatura:%'),
            DespesaExtra.fatura_frete_id.is_(None)
        ).all()

        print(f"Despesas restantes para processar: {len(despesas_restantes)}")
        print()

        for despesa in despesas_restantes:
            try:
                # Extrai n√∫mero da fatura das observa√ß√µes
                numero_fatura_extraido = None
                if despesa.observacoes and 'Fatura:' in despesa.observacoes:
                    partes = despesa.observacoes.split('Fatura:')
                    if len(partes) > 1:
                        numero_fatura_extraido = partes[1].split('|')[0].strip()

                if not numero_fatura_extraido:
                    continue

                # Busca faturas com esse n√∫mero
                faturas_encontradas = FaturaFrete.query.filter_by(
                    numero_fatura=numero_fatura_extraido
                ).order_by(FaturaFrete.id).all()

                # Se encontrou m√∫ltiplas, escolhe a mais antiga (ID menor)
                if len(faturas_encontradas) > 1:
                    despesa.fatura_frete_id = faturas_encontradas[0].id  # ID menor
                    despesas_atualizadas_etapa2 += 1
                    print(f"  ‚ö†Ô∏è Despesa #{despesa.id}: {len(faturas_encontradas)} faturas encontradas ‚Üí Escolhida fatura #{faturas_encontradas[0].id} (mais antiga)")
                elif len(faturas_encontradas) == 1:
                    # Caso raro: deveria ter sido pego na ETAPA 1
                    despesa.fatura_frete_id = faturas_encontradas[0].id
                    despesas_atualizadas_etapa2 += 1
                else:
                    print(f"  ‚ùå Despesa #{despesa.id}: Fatura '{numero_fatura_extraido}' n√£o encontrada")

            except Exception as e:
                print(f"  ‚ùå Erro ao processar despesa #{despesa.id}: {str(e)}")

        # Commit ETAPA 2
        try:
            db.session.commit()
            print()
            print(f"‚úÖ ETAPA 2 CONCLU√çDA: {despesas_atualizadas_etapa2} despesas atualizadas")
            print()
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå ERRO ao commitar ETAPA 2: {str(e)}")
            return

        # ========================================================================
        # RELAT√ìRIO FINAL
        # ========================================================================
        print("=" * 80)
        print("RELAT√ìRIO FINAL DE MIGRA√á√ÉO")
        print("=" * 80)
        print()

        # Estat√≠sticas finais
        despesas_migradas = DespesaExtra.query.filter(
            DespesaExtra.fatura_frete_id.isnot(None)
        ).count()

        despesas_nao_migradas = DespesaExtra.query.filter(
            DespesaExtra.observacoes.ilike('%Fatura:%'),
            DespesaExtra.fatura_frete_id.is_(None)
        ).count()

        percentual_sucesso = (despesas_migradas / despesas_com_fatura_obs * 100) if despesas_com_fatura_obs > 0 else 0

        print(f"üìä RESULTADOS:")
        print(f"   Total de despesas: {total_despesas}")
        print(f"   Despesas com 'Fatura:' nas observa√ß√µes: {despesas_com_fatura_obs}")
        print(f"   Despesas migradas: {despesas_migradas}")
        print(f"   Despesas n√£o migradas: {despesas_nao_migradas}")
        print(f"   Percentual de sucesso: {percentual_sucesso:.2f}%")
        print()

        if despesas_nao_migradas > 0:
            print("‚ö†Ô∏è DESPESAS N√ÉO MIGRADAS (primeiras 10):")
            print("-" * 80)

            despesas_falhas = DespesaExtra.query.filter(
                DespesaExtra.observacoes.ilike('%Fatura:%'),
                DespesaExtra.fatura_frete_id.is_(None)
            ).limit(10).all()

            for despesa in despesas_falhas:
                numero_extraido = "N/A"
                if despesa.observacoes and 'Fatura:' in despesa.observacoes:
                    try:
                        numero_extraido = despesa.observacoes.split('Fatura:')[1].split('|')[0].strip()
                    except:
                        pass

                print(f"   Despesa #{despesa.id}: Fatura '{numero_extraido}'")
            print()

        # Valida√ß√£o: Comparar m√©todo antigo vs novo
        print("=" * 80)
        print("VALIDA√á√ÉO: M√©todo Antigo vs Novo (primeiras 5 faturas)")
        print("=" * 80)
        print()

        faturas_com_despesas = FaturaFrete.query.join(
            DespesaExtra, DespesaExtra.fatura_frete_id == FaturaFrete.id
        ).distinct().limit(5).all()

        for fatura in faturas_com_despesas:
            # M√©todo ANTIGO (LIKE - problem√°tico)
            despesas_antigo = DespesaExtra.query.filter(
                DespesaExtra.observacoes.ilike(f'%Fatura: {fatura.numero_fatura}%')
            ).count()

            # M√©todo NOVO (FK - correto)
            despesas_novo = DespesaExtra.query.filter_by(
                fatura_frete_id=fatura.id
            ).count()

            diferenca = despesas_antigo - despesas_novo
            status = "‚úÖ OK" if diferenca == 0 else f"‚ö†Ô∏è DIFF: {diferenca}"

            print(f"   Fatura #{fatura.id} ({fatura.numero_fatura}):")
            print(f"      M√©todo antigo (LIKE): {despesas_antigo}")
            print(f"      M√©todo novo (FK): {despesas_novo}")
            print(f"      Status: {status}")
            print()

        # Mensagem final
        print("=" * 80)
        if percentual_sucesso == 100:
            print("‚úÖ MIGRA√á√ÉO 100% COMPLETA!")
        elif percentual_sucesso >= 99:
            print("‚úÖ MIGRA√á√ÉO >99% COMPLETA (ACEIT√ÅVEL)")
        elif percentual_sucesso >= 95:
            print("‚ö†Ô∏è MIGRA√á√ÉO >95% (REVISAR PENDENTES)")
        else:
            print("‚ùå MIGRA√á√ÉO INCOMPLETA (INVESTIGAR)")
        print("=" * 80)
        print()

        print("PR√ìXIMOS PASSOS:")
        print("1. Executar script 04_validar_migracao.sql no Render")
        print("2. Fazer commit do c√≥digo atualizado")
        print("3. Deploy em produ√ß√£o")
        print()

if __name__ == '__main__':
    migrar_dados_despesas()
