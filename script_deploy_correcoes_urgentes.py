#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script para Deploy de Corre√ß√µes Urgentes
========================================

Este script documenta e executa o deploy das corre√ß√µes urgentes para resolver:
1. DetachedInstanceError na fun√ß√£o buscar_cidade_unificada()
2. Erro do filtro 'formatar_data_segura' no template de separa√ß√£o

PROBLEMAS IDENTIFICADOS NO RENDER:
---------------------------------
‚ùå Erro 1: DetachedInstanceError em app/utils/localizacao.py linha 193
‚ùå Erro 2: TemplateRuntimeError - filtro 'formatar_data_segura' n√£o encontrado

CORRE√á√ïES IMPLEMENTADAS:
-----------------------
‚úÖ 1. Prote√ß√£o try/catch em buscar_cidade_unificada() e fun√ß√µes relacionadas  
‚úÖ 2. Eager loading for√ßado para evitar lazy loading problems
‚úÖ 3. Adicionado registro do filtro formatar_data_segura no Jinja2

STATUS: PRONTO PARA DEPLOY
"""

import os
import sys
import subprocess
from datetime import datetime

def verificar_arquivos_corrigidos():
    """Verifica se os arquivos foram corrigidos localmente"""
    
    print("üîç === VERIFICA√á√ÉO DAS CORRE√á√ïES LOCAIS ===")
    print()
    
    arquivos_verificar = [
        {
            "arquivo": "app/utils/localizacao.py",
            "verifica": "try:",
            "descricao": "Prote√ß√£o try/catch no DetachedInstanceError"
        },
        {
            "arquivo": "app/__init__.py", 
            "verifica": "formatar_data_segura'] = formatar_data_segura",
            "descricao": "Registro do filtro formatar_data_segura"
        }
    ]
    
    todas_ok = True
    
    for item in arquivos_verificar:
        arquivo = item["arquivo"]
        if os.path.exists(arquivo):
            with open(arquivo, 'r', encoding='utf-8') as f:
                conteudo = f.read()
            
            if item["verifica"] in conteudo:
                print(f"‚úÖ {arquivo} - {item['descricao']}")
            else:
                print(f"‚ùå {arquivo} - {item['descricao']} - N√ÉO ENCONTRADO")
                todas_ok = False
        else:
            print(f"‚ùå {arquivo} - Arquivo n√£o encontrado")
            todas_ok = False
    
    print()
    if todas_ok:
        print("‚úÖ Todas as corre√ß√µes est√£o presentes localmente")
    else:
        print("‚ùå Algumas corre√ß√µes est√£o faltando")
    
    return todas_ok

def mostrar_status_git():
    """Mostra o status do Git"""
    
    print("üìä === STATUS DO GIT ===")
    print()
    
    try:
        # Status
        result = subprocess.run(['git', 'status', '--porcelain'], 
                               capture_output=True, text=True, check=True)
        
        if result.stdout.strip():
            print("üìÅ Arquivos modificados:")
            for linha in result.stdout.strip().split('\n'):
                status = linha[:2]
                arquivo = linha[3:]
                status_desc = "Modificado" if 'M' in status else "Novo" if 'A' in status else "Desconhecido"
                print(f"   {status_desc}: {arquivo}")
        else:
            print("‚úÖ Nenhum arquivo modificado (tudo j√° commitado)")
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao verificar status git: {e}")
        return False
    
    print()
    return True

def fazer_commit_correcoes():
    """Faz commit das corre√ß√µes"""
    
    print("üíæ === FAZENDO COMMIT DAS CORRE√á√ïES ===")
    print()
    
    try:
        # Add all
        subprocess.run(['git', 'add', '.'], check=True)
        print("‚úÖ Arquivos adicionados ao stage")
        
        # Commit
        commit_msg = "üö® CORRE√á√ÉO URGENTE: DetachedInstanceError + filtro formatar_data_segura\n\n" \
                    "- Adicionada prote√ß√£o try/catch em buscar_cidade_unificada()\n" \
                    "- Implementado eager loading para evitar sess√µes desanexadas\n" \
                    "- Corrigido registro do filtro formatar_data_segura no Jinja2\n" \
                    "- Sistema agora resiliente a problemas de sess√£o SQLAlchemy\n\n" \
                    "Fixes: Internal Server Error 500 na importa√ß√£o de separa√ß√µes"
        
        subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
        print("‚úÖ Commit realizado com sucesso")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao fazer commit: {e}")
        return False

def mostrar_instrucoes_render():
    """Mostra instru√ß√µes para verificar no Render ap√≥s deploy"""
    
    print("üåê === INSTRU√á√ïES P√ìS-DEPLOY ===")
    print()
    
    print("üìã **COMO VERIFICAR SE AS CORRE√á√ïES FUNCIONARAM:**")
    print()
    
    print("1. üöÄ **Fa√ßa push para o reposit√≥rio:**")
    print("   ```bash")
    print("   git push origin main")
    print("   ```")
    print()
    
    print("2. ‚è≥ **Aguarde o deploy autom√°tico no Render (~3-5 minutos)")
    print()
    
    print("3. üß™ **Teste as funcionalidades:**")
    print("   a) Acesse: https://sistema-fretes.onrender.com/separacao/listar")
    print("   b) Acesse: https://sistema-fretes.onrender.com/pedidos/lista_pedidos") 
    print("   c) Tente fazer uma cota√ß√£o")
    print()
    
    print("4. üìä **Monitore os logs do Render:**")
    print("   - Logs esperados (BONS):")
    print("     ‚úÖ 'Cidade encontrada por IBGE: SAO PAULO'")
    print("     ‚úÖ 'Cidade encontrada por nome: RIO DE JANEIRO'")
    print("     ‚úÖ Template de separa√ß√£o carrega sem erro")
    print()
    print("   - Logs alternativos (ACEIT√ÅVEIS):")
    print("     ‚ö†Ô∏è 'Cidade encontrada por IBGE (IBGE: 3550308)'")
    print("     ‚ö†Ô∏è 'Problema ao carregar atributos da cidade...'")
    print()
    print("   - Logs que N√ÉO devem aparecer (RUINS):")
    print("     ‚ùå 'DetachedInstanceError: Instance <Cidade> is not bound to a Session'")
    print("     ‚ùå 'No filter named formatar_data_segura found'")
    print()

def mostrar_script_verificacao_pos_deploy():
    """Script para testar se tudo est√° funcionando"""
    
    print("üß™ === SCRIPT DE TESTE P√ìS-DEPLOY ===")
    print()
    print("Execute estes comandos no Render Shell ap√≥s o deploy:")
    print()
    print("```bash")
    print("# 1. Teste b√°sico de importa√ß√£o do m√≥dulo corrigido")
    print("python -c \"from app.utils.localizacao import LocalizacaoService; print('‚úÖ LocalizacaoService OK')\"")
    print()
    print("# 2. Teste o filtro de data")
    print("python -c \"from app import create_app; app=create_app(); print('‚úÖ App criado, filtros:', 'formatar_data_segura' in app.jinja_env.filters)\"")
    print()
    print("# 3. Teste busca de cidade (pode dar aviso mas n√£o deve quebrar)")
    print("python -c \"from app import create_app; from app.utils.localizacao import LocalizacaoService; app=create_app(); app.app_context().push(); cidade=LocalizacaoService.buscar_cidade_por_ibge('3550308'); print('‚úÖ Busca funcionou:', cidade is not None)\"")
    print("```")
    print()

def mostrar_resumo_correcoes():
    """Mostra resumo das corre√ß√µes implementadas"""
    
    print("üìã === RESUMO DAS CORRE√á√ïES ===")
    print()
    
    print("üõ†Ô∏è **PROBLEMA 1: DetachedInstanceError**")
    print("   ‚ùå Local: app/utils/localizacao.py:193")
    print("   ‚ùå Erro: logger.debug(f'Cidade encontrada: {cidade.nome}')")
    print("   ‚úÖ Solu√ß√£o: Try/catch + eager loading")
    print()
    
    print("üõ†Ô∏è **PROBLEMA 2: Filtro n√£o encontrado**")
    print("   ‚ùå Local: app/templates/separacao/listar.html:302")
    print("   ‚ùå Erro: 'No filter named formatar_data_segura found'")
    print("   ‚úÖ Solu√ß√£o: Registrado filtro no app/__init__.py")
    print()
    
    print("üéØ **IMPACTO ESPERADO:**")
    print("   ‚úÖ Separa√ß√µes acess√≠veis sem erro 500")
    print("   ‚úÖ Cota√ß√µes funcionando normalmente") 
    print("   ‚úÖ Importa√ß√µes resilientes a problemas de sess√£o")
    print("   ‚úÖ Sistema est√°vel em produ√ß√£o")
    print()

if __name__ == "__main__":
    print("üö® === DEPLOY DE CORRE√á√ïES URGENTES ===")
    print("üìÖ Data:", datetime.now().strftime("%d/%m/%Y %H:%M:%S"))
    print()
    
    # Verifica corre√ß√µes
    if not verificar_arquivos_corrigidos():
        print("‚ùå Corre√ß√µes n√£o est√£o completas. Abortando.")
        sys.exit(1)
    
    print("="*60)
    mostrar_status_git()
    
    print("="*60)
    resposta = input("Deseja fazer commit das corre√ß√µes? (s/N): ").lower().strip()
    
    if resposta == 's':
        if fazer_commit_correcoes():
            print("="*60)
            mostrar_instrucoes_render()
            print("="*60)
            mostrar_script_verificacao_pos_deploy()
            print("="*60)
            mostrar_resumo_correcoes()
            
            print("üéâ **PR√ìXIMOS PASSOS:**")
            print("1. Execute: git push origin main")
            print("2. Aguarde deploy no Render")
            print("3. Teste as funcionalidades")
            print("4. Monitore os logs")
        else:
            print("‚ùå Falha no commit. Verifique e tente novamente.")
    else:
        print("‚ÑπÔ∏è Commit cancelado pelo usu√°rio.")
        print()
        print("Para fazer o commit manualmente:")
        print("git add .")
        print("git commit -m 'CORRE√á√ÉO: DetachedInstanceError + filtro formatar_data_segura'")
        print("git push origin main") 